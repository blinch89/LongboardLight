
LongboardLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003af0  10001000  10001000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000010  10004af0  10004af0  00004af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata       00000328  10004b00  10004b00  00004b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .VENEER_Code  00000110  2000000c  10004e30  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .GUARD_Band   00000004  2000011c  00000000  0000011c  2**0
                  ALLOC
  5 Stack         00000800  20000120  00000000  00000120  2**0
                  ALLOC
  6 .bss          00000164  20000920  20000920  00010920  2**2
                  ALLOC
  7 .data         00000004  20000a90  10004f40  00008a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .debug_aranges 00000378  00000000  00000000  00008a98  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003ff6  00000000  00000000  00008e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ed9  00000000  00000000  0000ce06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004d08  00000000  00000000  0000dcdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b84  00000000  00000000  000129e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00026a6c  00000000  00000000  0001356c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d74  00000000  00000000  00039fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000290  00000000  00000000  0003ad50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 0000059c  00000000  00000000  0003afe0  2**0
                  CONTENTS, READONLY
 17 .debug_macro  00007e78  00000000  00000000  0003b57c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10001000 <__Xmc1100_interrupt_vector_cortex_m>:
10001000:	20 09 00 20 19 10 00 10 95 14 00 10 97 14 00 10      .. ............
10001010:	00 04 00 00 00 00 00 00                             ........

10001018 <__Xmc1100_reset_cortex_m>:
__Xmc1100_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1100_stack
10001018:	4802      	ldr	r0, [pc, #8]	; (10001024 <__Xmc1100_reset_cortex_m+0xc>)
    MOV SP,R0
1000101a:	4685      	mov	sp, r0
    
    /* Launch custom pre-program loading startup procedure */
    LDR R0,=hardware_init_hook
1000101c:	4802      	ldr	r0, [pc, #8]	; (10001028 <__Xmc1100_reset_cortex_m+0x10>)
    BLX R0
1000101e:	4780      	blx	r0

    /* Branch to the program loader now */
    B       __Xmc1100_Program_Loader 
10001020:	e012      	b.n	10001048 <__Xmc1100_Program_Loader>
10001022:	0000      	.short	0x0000
__Xmc1100_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1100_stack
10001024:	20000920 	.word	0x20000920
    MOV SP,R0
    
    /* Launch custom pre-program loading startup procedure */
    LDR R0,=hardware_init_hook
10001028:	100010d1 	.word	0x100010d1

1000102c <__COPY_FLASH2RAM>:
   to C land is given */
   .section .Xmc1100.postreset,"x",%progbits
 __COPY_FLASH2RAM:
   .fnstart:
   /* Is there anything to be copied? */
   CMP R2,#0
1000102c:	2a00      	cmp	r2, #0
   BEQ SKIPCOPY
1000102e:	d00a      	beq.n	10001046 <SKIPCOPY>
   
   /* For bytecount less than 4, at least 1 word must be copied */
   CMP R2,#4
10001030:	2a04      	cmp	r2, #4
   BCS STARTCOPY
10001032:	d200      	bcs.n	10001036 <STARTCOPY>
   
   /* Byte count < 4 ; so bump it up */
   MOVS R2,#4
10001034:	2204      	movs	r2, #4

10001036 <STARTCOPY>:
STARTCOPY:
   /* 
      R2 contains byte count. Change it to word count. It is ensured in the 
      linker script that the length is always word aligned.
   */
   LSRS R2,R2,#2 /* Divide by 4 to obtain word count */
10001036:	0892      	lsrs	r2, r2, #2

10001038 <COPYLOOP>:

   /* The proverbial loop from the schooldays */
COPYLOOP:
   LDR R3,[R0]
10001038:	6803      	ldr	r3, [r0, #0]
   STR R3,[R1]
1000103a:	600b      	str	r3, [r1, #0]
   SUBS R2,#1
1000103c:	3a01      	subs	r2, #1
   BEQ SKIPCOPY
1000103e:	d002      	beq.n	10001046 <SKIPCOPY>
   ADDS R0,#4
10001040:	3004      	adds	r0, #4
   ADDS R1,#4
10001042:	3104      	adds	r1, #4
   B COPYLOOP
10001044:	e7f8      	b.n	10001038 <COPYLOOP>

10001046 <SKIPCOPY>:
    
SKIPCOPY:
   BX LR
10001046:	4770      	bx	lr

10001048 <__Xmc1100_Program_Loader>:
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001048:	4811      	ldr	r0, [pc, #68]	; (10001090 <SKIPCLEAR+0x14>)
   LDR R1, =__Xmc1100_sData
1000104a:	4912      	ldr	r1, [pc, #72]	; (10001094 <SKIPCLEAR+0x18>)
   LDR R2, =__Xmc1100_Data_Size
1000104c:	4a12      	ldr	r2, [pc, #72]	; (10001098 <SKIPCLEAR+0x1c>)
   BL __COPY_FLASH2RAM
1000104e:	f7ff ffed 	bl	1000102c <__COPY_FLASH2RAM>

   /* RAM_CODE COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =__ram_code_load
10001052:	4812      	ldr	r0, [pc, #72]	; (1000109c <SKIPCLEAR+0x20>)
   LDR R1, =__ram_code_start
10001054:	4912      	ldr	r1, [pc, #72]	; (100010a0 <SKIPCLEAR+0x24>)
   LDR R2, =__ram_code_size
10001056:	4a13      	ldr	r2, [pc, #76]	; (100010a4 <SKIPCLEAR+0x28>)
   BL __COPY_FLASH2RAM
10001058:	f7ff ffe8 	bl	1000102c <__COPY_FLASH2RAM>

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
1000105c:	4812      	ldr	r0, [pc, #72]	; (100010a8 <SKIPCLEAR+0x2c>)
   LDR R1, =VeneerStart
1000105e:	4913      	ldr	r1, [pc, #76]	; (100010ac <SKIPCLEAR+0x30>)
   LDR R2, =VeneerSize
10001060:	4a13      	ldr	r2, [pc, #76]	; (100010b0 <SKIPCLEAR+0x34>)
   BL __COPY_FLASH2RAM
10001062:	f7ff ffe3 	bl	1000102c <__COPY_FLASH2RAM>

   /* BSS CLEAR */
   LDR R0, =__Xmc1100_sBSS     /* Start of BSS */
10001066:	4813      	ldr	r0, [pc, #76]	; (100010b4 <SKIPCLEAR+0x38>)
   LDR R1, =__Xmc1100_BSS_Size /* BSS size in bytes */
10001068:	4913      	ldr	r1, [pc, #76]	; (100010b8 <SKIPCLEAR+0x3c>)

   /* Find out if there are items assigned to BSS */   
   CMP R1,#0 
1000106a:	2900      	cmp	r1, #0
   BEQ SKIPCLEAR
1000106c:	d006      	beq.n	1000107c <SKIPCLEAR>

1000106e <STARTCLEAR>:

STARTCLEAR:
   LSRS R1,R1,#2            /* BSS size in words */
1000106e:	0889      	lsrs	r1, r1, #2
   
   MOVS R2,#0
10001070:	2200      	movs	r2, #0

10001072 <CLEARLOOP>:
CLEARLOOP:
   STR R2,[R0]
10001072:	6002      	str	r2, [r0, #0]
   SUBS R1,#1
10001074:	3901      	subs	r1, #1
   BEQ SKIPCLEAR
10001076:	d001      	beq.n	1000107c <SKIPCLEAR>
   ADDS R0,#4
10001078:	3004      	adds	r0, #4
   B CLEARLOOP
1000107a:	e7fa      	b.n	10001072 <CLEARLOOP>

1000107c <SKIPCLEAR>:
    
SKIPCLEAR:

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1100_stack 
1000107c:	480f      	ldr	r0, [pc, #60]	; (100010bc <SKIPCLEAR+0x40>)
   MOV SP,R0
1000107e:	4685      	mov	sp, r0

   /* Perform System Initialization */   
   LDR R0,=SystemInit
10001080:	480f      	ldr	r0, [pc, #60]	; (100010c0 <SKIPCLEAR+0x44>)
   BLX R0
10001082:	4780      	blx	r0

   /* Launch custom post-program loading startup procedure */
   LDR R0,=software_init_hook
10001084:	480f      	ldr	r0, [pc, #60]	; (100010c4 <SKIPCLEAR+0x48>)
   BLX R0
10001086:	4780      	blx	r0

   MOVS R0,#0
10001088:	2000      	movs	r0, #0
   MOVS R1,#0
1000108a:	2100      	movs	r1, #0
   LDR R2, =main
1000108c:	4a0e      	ldr	r2, [pc, #56]	; (100010c8 <SKIPCLEAR+0x4c>)
   MOV PC,R2
1000108e:	4697      	mov	pc, r2
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001090:	10004f40 	.word	0x10004f40
   LDR R1, =__Xmc1100_sData
10001094:	20000a90 	.word	0x20000a90
   LDR R2, =__Xmc1100_Data_Size
10001098:	00000004 	.word	0x00000004
   BL __COPY_FLASH2RAM

   /* RAM_CODE COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =__ram_code_load
1000109c:	10004f44 	.word	0x10004f44
   LDR R1, =__ram_code_start
100010a0:	20000a94 	.word	0x20000a94
   LDR R2, =__ram_code_size
100010a4:	00000000 	.word	0x00000000
   BL __COPY_FLASH2RAM

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
100010a8:	10004e30 	.word	0x10004e30
   LDR R1, =VeneerStart
100010ac:	2000000c 	.word	0x2000000c
   LDR R2, =VeneerSize
100010b0:	00000110 	.word	0x00000110
   BL __COPY_FLASH2RAM

   /* BSS CLEAR */
   LDR R0, =__Xmc1100_sBSS     /* Start of BSS */
100010b4:	20000920 	.word	0x20000920
   LDR R1, =__Xmc1100_BSS_Size /* BSS size in bytes */
100010b8:	00000164 	.word	0x00000164
   B CLEARLOOP
    
SKIPCLEAR:

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1100_stack 
100010bc:	20000920 	.word	0x20000920
   MOV SP,R0

   /* Perform System Initialization */   
   LDR R0,=SystemInit
100010c0:	100014c5 	.word	0x100014c5
   BLX R0

   /* Launch custom post-program loading startup procedure */
   LDR R0,=software_init_hook
100010c4:	100010cd 	.word	0x100010cd
   BLX R0

   MOVS R0,#0
   MOVS R1,#0
   LDR R2, =main
100010c8:	1000115d 	.word	0x1000115d

100010cc <software_init_hook>:
   has not been started.
 */
     .weak software_init_hook
     .type software_init_hook, %function
software_init_hook:
     NOP
100010cc:	46c0      	nop			; (mov r8, r8)
     BX LR
100010ce:	4770      	bx	lr

100010d0 <hardware_init_hook>:
     .size software_init_hook, . - software_init_hook

     .weak hardware_init_hook
     .type hardware_init_hook, %function
hardware_init_hook:
     NOP
100010d0:	46c0      	nop			; (mov r8, r8)
     BX LR
100010d2:	4770      	bx	lr

100010d4 <P0_5_set_mode>:

__STATIC_INLINE void P0_4_disable_pps(void){
    PORT0->PPS &= ~0x00000010UL;
}

__STATIC_INLINE void P0_5_set_mode(uint8_t mode){
100010d4:	b580      	push	{r7, lr}
100010d6:	b082      	sub	sp, #8
100010d8:	af00      	add	r7, sp, #0
100010da:	1c02      	adds	r2, r0, #0
100010dc:	1dfb      	adds	r3, r7, #7
100010de:	701a      	strb	r2, [r3, #0]
    PORT0->IOCR4 &= ~0x0000f800UL;
100010e0:	4b08      	ldr	r3, [pc, #32]	; (10001104 <P0_5_set_mode+0x30>)
100010e2:	4a08      	ldr	r2, [pc, #32]	; (10001104 <P0_5_set_mode+0x30>)
100010e4:	6951      	ldr	r1, [r2, #20]
100010e6:	4a08      	ldr	r2, [pc, #32]	; (10001108 <P0_5_set_mode+0x34>)
100010e8:	400a      	ands	r2, r1
100010ea:	615a      	str	r2, [r3, #20]
    PORT0->IOCR4 |= mode << 8;
100010ec:	4b05      	ldr	r3, [pc, #20]	; (10001104 <P0_5_set_mode+0x30>)
100010ee:	4a05      	ldr	r2, [pc, #20]	; (10001104 <P0_5_set_mode+0x30>)
100010f0:	6951      	ldr	r1, [r2, #20]
100010f2:	1dfa      	adds	r2, r7, #7
100010f4:	7812      	ldrb	r2, [r2, #0]
100010f6:	0212      	lsls	r2, r2, #8
100010f8:	430a      	orrs	r2, r1
100010fa:	615a      	str	r2, [r3, #20]
}
100010fc:	46bd      	mov	sp, r7
100010fe:	b002      	add	sp, #8
10001100:	bd80      	pop	{r7, pc}
10001102:	46c0      	nop			; (mov r8, r8)
10001104:	40040000 	.word	0x40040000
10001108:	ffff07ff 	.word	0xffff07ff

1000110c <P0_6_set_mode>:

__STATIC_INLINE void P0_5_disable_pps(void){
    PORT0->PPS &= ~0x00000020UL;
}

__STATIC_INLINE void P0_6_set_mode(uint8_t mode){
1000110c:	b580      	push	{r7, lr}
1000110e:	b082      	sub	sp, #8
10001110:	af00      	add	r7, sp, #0
10001112:	1c02      	adds	r2, r0, #0
10001114:	1dfb      	adds	r3, r7, #7
10001116:	701a      	strb	r2, [r3, #0]
    PORT0->IOCR4 &= ~0x00f80000UL;
10001118:	4b08      	ldr	r3, [pc, #32]	; (1000113c <P0_6_set_mode+0x30>)
1000111a:	4a08      	ldr	r2, [pc, #32]	; (1000113c <P0_6_set_mode+0x30>)
1000111c:	6951      	ldr	r1, [r2, #20]
1000111e:	4a08      	ldr	r2, [pc, #32]	; (10001140 <P0_6_set_mode+0x34>)
10001120:	400a      	ands	r2, r1
10001122:	615a      	str	r2, [r3, #20]
    PORT0->IOCR4 |= mode << 16;
10001124:	4b05      	ldr	r3, [pc, #20]	; (1000113c <P0_6_set_mode+0x30>)
10001126:	4a05      	ldr	r2, [pc, #20]	; (1000113c <P0_6_set_mode+0x30>)
10001128:	6951      	ldr	r1, [r2, #20]
1000112a:	1dfa      	adds	r2, r7, #7
1000112c:	7812      	ldrb	r2, [r2, #0]
1000112e:	0412      	lsls	r2, r2, #16
10001130:	430a      	orrs	r2, r1
10001132:	615a      	str	r2, [r3, #20]
}
10001134:	46bd      	mov	sp, r7
10001136:	b002      	add	sp, #8
10001138:	bd80      	pop	{r7, pc}
1000113a:	46c0      	nop			; (mov r8, r8)
1000113c:	40040000 	.word	0x40040000
10001140:	ff07ffff 	.word	0xff07ffff

10001144 <P0_6_read>:

__STATIC_INLINE void P0_6_toggle(void){
    PORT0->OMR = 0x00400040UL;
}

__STATIC_INLINE uint32_t P0_6_read(void){
10001144:	b580      	push	{r7, lr}
10001146:	af00      	add	r7, sp, #0
    return(PORT0->IN & 0x00000040UL);
10001148:	4b03      	ldr	r3, [pc, #12]	; (10001158 <P0_6_read+0x14>)
1000114a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1000114c:	2340      	movs	r3, #64	; 0x40
1000114e:	4013      	ands	r3, r2
}
10001150:	1c18      	adds	r0, r3, #0
10001152:	46bd      	mov	sp, r7
10001154:	bd80      	pop	{r7, pc}
10001156:	46c0      	nop			; (mov r8, r8)
10001158:	40040000 	.word	0x40040000

1000115c <main>:
void buttonRead(void *ptr);

handle_t animationTimer;

int main(void)
{
1000115c:	b580      	push	{r7, lr}
1000115e:	b094      	sub	sp, #80	; 0x50
10001160:	af00      	add	r7, sp, #0
	uint8_t stripe[WS2812_QUANTITY*3];
	enum colorState state = OFF;	//this should be volatile, I think
10001162:	1dfb      	adds	r3, r7, #7
10001164:	2200      	movs	r2, #0
10001166:	701a      	strb	r2, [r3, #0]
//	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)

	//init stripe array for an animation to blue color, all leds
	for(uint8_t i=0 ; i<(sizeof(stripe)/3) ; i++)
10001168:	1c3b      	adds	r3, r7, #0
1000116a:	334f      	adds	r3, #79	; 0x4f
1000116c:	2200      	movs	r2, #0
1000116e:	701a      	strb	r2, [r3, #0]
10001170:	e026      	b.n	100011c0 <main+0x64>
	{
		stripe[3*i]   = 0x00;
10001172:	1c3b      	adds	r3, r7, #0
10001174:	334f      	adds	r3, #79	; 0x4f
10001176:	781a      	ldrb	r2, [r3, #0]
10001178:	1c13      	adds	r3, r2, #0
1000117a:	005b      	lsls	r3, r3, #1
1000117c:	189b      	adds	r3, r3, r2
1000117e:	1c3a      	adds	r2, r7, #0
10001180:	3208      	adds	r2, #8
10001182:	2100      	movs	r1, #0
10001184:	54d1      	strb	r1, [r2, r3]
		stripe[3*i+1] = 0x00;
10001186:	1c3b      	adds	r3, r7, #0
10001188:	334f      	adds	r3, #79	; 0x4f
1000118a:	781a      	ldrb	r2, [r3, #0]
1000118c:	1c13      	adds	r3, r2, #0
1000118e:	005b      	lsls	r3, r3, #1
10001190:	189b      	adds	r3, r3, r2
10001192:	3301      	adds	r3, #1
10001194:	1c3a      	adds	r2, r7, #0
10001196:	3208      	adds	r2, #8
10001198:	2100      	movs	r1, #0
1000119a:	54d1      	strb	r1, [r2, r3]
		stripe[3*i+2] = BRIGHTNESS;
1000119c:	1c3b      	adds	r3, r7, #0
1000119e:	334f      	adds	r3, #79	; 0x4f
100011a0:	781a      	ldrb	r2, [r3, #0]
100011a2:	1c13      	adds	r3, r2, #0
100011a4:	005b      	lsls	r3, r3, #1
100011a6:	189b      	adds	r3, r3, r2
100011a8:	3302      	adds	r3, #2
100011aa:	1c3a      	adds	r2, r7, #0
100011ac:	3208      	adds	r2, #8
100011ae:	21ff      	movs	r1, #255	; 0xff
100011b0:	54d1      	strb	r1, [r2, r3]
	uint8_t stripe[WS2812_QUANTITY*3];
	enum colorState state = OFF;	//this should be volatile, I think
//	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)

	//init stripe array for an animation to blue color, all leds
	for(uint8_t i=0 ; i<(sizeof(stripe)/3) ; i++)
100011b2:	1c3b      	adds	r3, r7, #0
100011b4:	334f      	adds	r3, #79	; 0x4f
100011b6:	1c3a      	adds	r2, r7, #0
100011b8:	324f      	adds	r2, #79	; 0x4f
100011ba:	7812      	ldrb	r2, [r2, #0]
100011bc:	3201      	adds	r2, #1
100011be:	701a      	strb	r2, [r3, #0]
100011c0:	1c3b      	adds	r3, r7, #0
100011c2:	334f      	adds	r3, #79	; 0x4f
100011c4:	781b      	ldrb	r3, [r3, #0]
100011c6:	2b14      	cmp	r3, #20
100011c8:	d9d3      	bls.n	10001172 <main+0x16>
		stripe[3*i]   = 0x00;
		stripe[3*i+1] = 0x00;
		stripe[3*i+2] = BRIGHTNESS;
	}

	DAVE_Init();			// Initialization of DAVE Apps
100011ca:	f001 fe3d 	bl	10002e48 <DAVE_Init>
	handle_t timer;
	P0_5_set_mode(OUTPUT_PP_GP); 	//WS2812 data pin
100011ce:	2080      	movs	r0, #128	; 0x80
100011d0:	f7ff ff80 	bl	100010d4 <P0_5_set_mode>
	P0_6_set_mode(INPUT_PU);     	//button
100011d4:	2010      	movs	r0, #16
100011d6:	f7ff ff99 	bl	1000110c <P0_6_set_mode>
	//timer=SYSTM001_CreateTimer(500,SYSTM001_PERIODIC,updateOnboardLEDs,NULL);
	//SYSTM001_StartTimer(timer);
	timer=SYSTM001_CreateTimer(400,SYSTM001_PERIODIC,buttonRead,&state);
100011da:	23c8      	movs	r3, #200	; 0xc8
100011dc:	0059      	lsls	r1, r3, #1
100011de:	4a0b      	ldr	r2, [pc, #44]	; (1000120c <main+0xb0>)
100011e0:	1dfb      	adds	r3, r7, #7
100011e2:	1c08      	adds	r0, r1, #0
100011e4:	2101      	movs	r1, #1
100011e6:	f001 fae7 	bl	100027b8 <SYSTM001_CreateTimer>
100011ea:	1c03      	adds	r3, r0, #0
100011ec:	64bb      	str	r3, [r7, #72]	; 0x48
	SYSTM001_StartTimer(timer);
100011ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
100011f0:	1c18      	adds	r0, r3, #0
100011f2:	f001 fb73 	bl	100028dc <SYSTM001_StartTimer>
	animationTimer=SYSTM001_CreateTimer(10,SYSTM001_PERIODIC,redDotOnBlueLine,stripe);
100011f6:	4a06      	ldr	r2, [pc, #24]	; (10001210 <main+0xb4>)
100011f8:	1c3b      	adds	r3, r7, #0
100011fa:	3308      	adds	r3, #8
100011fc:	200a      	movs	r0, #10
100011fe:	2101      	movs	r1, #1
10001200:	f001 fada 	bl	100027b8 <SYSTM001_CreateTimer>
10001204:	1c02      	adds	r2, r0, #0
10001206:	4b03      	ldr	r3, [pc, #12]	; (10001214 <main+0xb8>)
10001208:	601a      	str	r2, [r3, #0]
	while(1){}
1000120a:	e7fe      	b.n	1000120a <main+0xae>
1000120c:	10001219 	.word	0x10001219
10001210:	1000133d 	.word	0x1000133d
10001214:	2000093c 	.word	0x2000093c

10001218 <buttonRead>:
	IO004_TogglePin(IO004_Handle1);
}
*/

void buttonRead(void *ptr)
{
10001218:	b580      	push	{r7, lr}
1000121a:	b084      	sub	sp, #16
1000121c:	af00      	add	r7, sp, #0
1000121e:	6078      	str	r0, [r7, #4]
	if(!P0_6_read()) //button pressed?
10001220:	f7ff ff90 	bl	10001144 <P0_6_read>
10001224:	1c03      	adds	r3, r0, #0
10001226:	2b00      	cmp	r3, #0
10001228:	d125      	bne.n	10001276 <buttonRead+0x5e>
	{
		enum colorState *lightState = ptr;
1000122a:	687b      	ldr	r3, [r7, #4]
1000122c:	60fb      	str	r3, [r7, #12]

		if(*lightState == REDDOT)
1000122e:	68fb      	ldr	r3, [r7, #12]
10001230:	781b      	ldrb	r3, [r3, #0]
10001232:	2b09      	cmp	r3, #9
10001234:	d108      	bne.n	10001248 <buttonRead+0x30>
		{
			SYSTM001_StopTimer(animationTimer);
10001236:	4b11      	ldr	r3, [pc, #68]	; (1000127c <buttonRead+0x64>)
10001238:	681b      	ldr	r3, [r3, #0]
1000123a:	1c18      	adds	r0, r3, #0
1000123c:	f001 fb8e 	bl	1000295c <SYSTM001_StopTimer>
			*lightState = OFF; //REDDOT is last Value of enum
10001240:	68fb      	ldr	r3, [r7, #12]
10001242:	2200      	movs	r2, #0
10001244:	701a      	strb	r2, [r3, #0]
10001246:	e005      	b.n	10001254 <buttonRead+0x3c>
		}
		else (*lightState)++;
10001248:	68fb      	ldr	r3, [r7, #12]
1000124a:	781b      	ldrb	r3, [r3, #0]
1000124c:	3301      	adds	r3, #1
1000124e:	b2da      	uxtb	r2, r3
10001250:	68fb      	ldr	r3, [r7, #12]
10001252:	701a      	strb	r2, [r3, #0]

		if(*lightState == REDDOT)
10001254:	68fb      	ldr	r3, [r7, #12]
10001256:	781b      	ldrb	r3, [r3, #0]
10001258:	2b09      	cmp	r3, #9
1000125a:	d105      	bne.n	10001268 <buttonRead+0x50>
			SYSTM001_StartTimer(animationTimer);
1000125c:	4b07      	ldr	r3, [pc, #28]	; (1000127c <buttonRead+0x64>)
1000125e:	681b      	ldr	r3, [r3, #0]
10001260:	1c18      	adds	r0, r3, #0
10001262:	f001 fb3b 	bl	100028dc <SYSTM001_StartTimer>
10001266:	e006      	b.n	10001276 <buttonRead+0x5e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10001268:	b672      	cpsid	i
		else
		{
			__disable_irq();
			updateWS2812LEDs(*lightState);
1000126a:	68fb      	ldr	r3, [r7, #12]
1000126c:	781b      	ldrb	r3, [r3, #0]
1000126e:	1c18      	adds	r0, r3, #0
10001270:	f000 f806 	bl	10001280 <updateWS2812LEDs>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
10001274:	b662      	cpsie	i
			__enable_irq();
		}
	}
}
10001276:	46bd      	mov	sp, r7
10001278:	b004      	add	sp, #16
1000127a:	bd80      	pop	{r7, pc}
1000127c:	2000093c 	.word	0x2000093c

10001280 <updateWS2812LEDs>:
						 BRIGHTNESS,BRIGHTNESS,0x00};



void updateWS2812LEDs(enum colorState state)
{
10001280:	b580      	push	{r7, lr}
10001282:	b082      	sub	sp, #8
10001284:	af00      	add	r7, sp, #0
10001286:	1c02      	adds	r2, r0, #0
10001288:	1dfb      	adds	r3, r7, #7
1000128a:	701a      	strb	r2, [r3, #0]
	switch(state)
1000128c:	1dfb      	adds	r3, r7, #7
1000128e:	781b      	ldrb	r3, [r3, #0]
10001290:	2b08      	cmp	r3, #8
10001292:	d83a      	bhi.n	1000130a <updateWS2812LEDs+0x8a>
10001294:	009a      	lsls	r2, r3, #2
10001296:	4b1f      	ldr	r3, [pc, #124]	; (10001314 <updateWS2812LEDs+0x94>)
10001298:	18d3      	adds	r3, r2, r3
1000129a:	681b      	ldr	r3, [r3, #0]
1000129c:	469f      	mov	pc, r3
	{
	case RGB:
		ws2812_sendarray((uint8_t*)rgb, sizeof(rgb));
1000129e:	4b1e      	ldr	r3, [pc, #120]	; (10001318 <updateWS2812LEDs+0x98>)
100012a0:	1c18      	adds	r0, r3, #0
100012a2:	213f      	movs	r1, #63	; 0x3f
100012a4:	f000 f8c0 	bl	10001428 <ws2812_sendarray>
//		ws2812_sendarray((uint8_t*)rgb, sizeof(rgb));
//		ws2812_sendarray((uint8_t*)rgb, sizeof(rgb));
//		ws2812_sendarray((uint8_t*)rgb, sizeof(rgb));
//		ws2812_sendarray((uint8_t*)rgb, sizeof(rgb));
		break;
100012a8:	e030      	b.n	1000130c <updateWS2812LEDs+0x8c>
	case RED:
		ws2812_sendarray((uint8_t*)red, sizeof(red));
100012aa:	4b1c      	ldr	r3, [pc, #112]	; (1000131c <updateWS2812LEDs+0x9c>)
100012ac:	1c18      	adds	r0, r3, #0
100012ae:	213f      	movs	r1, #63	; 0x3f
100012b0:	f000 f8ba 	bl	10001428 <ws2812_sendarray>
//		ws2812_sendarray((uint8_t*)red, sizeof(red));
//		ws2812_sendarray((uint8_t*)red, sizeof(red));
		break;
100012b4:	e02a      	b.n	1000130c <updateWS2812LEDs+0x8c>
	case GREEN:
		ws2812_sendarray((uint8_t*)green, sizeof(green));
100012b6:	4b1a      	ldr	r3, [pc, #104]	; (10001320 <updateWS2812LEDs+0xa0>)
100012b8:	1c18      	adds	r0, r3, #0
100012ba:	213f      	movs	r1, #63	; 0x3f
100012bc:	f000 f8b4 	bl	10001428 <ws2812_sendarray>
//		ws2812_sendarray((uint8_t*)green, sizeof(green));
//		ws2812_sendarray((uint8_t*)green, sizeof(green));
		break;
100012c0:	e024      	b.n	1000130c <updateWS2812LEDs+0x8c>
	case BLUE:
		ws2812_sendarray((uint8_t*)blue, sizeof(blue));
100012c2:	4b18      	ldr	r3, [pc, #96]	; (10001324 <updateWS2812LEDs+0xa4>)
100012c4:	1c18      	adds	r0, r3, #0
100012c6:	213f      	movs	r1, #63	; 0x3f
100012c8:	f000 f8ae 	bl	10001428 <ws2812_sendarray>
//		ws2812_sendarray((uint8_t*)blue, sizeof(blue));
//		ws2812_sendarray((uint8_t*)blue, sizeof(blue));
		break;
100012cc:	e01e      	b.n	1000130c <updateWS2812LEDs+0x8c>
	case WHITE:
		ws2812_sendarray((uint8_t*)white, sizeof(white));
100012ce:	4b16      	ldr	r3, [pc, #88]	; (10001328 <updateWS2812LEDs+0xa8>)
100012d0:	1c18      	adds	r0, r3, #0
100012d2:	213f      	movs	r1, #63	; 0x3f
100012d4:	f000 f8a8 	bl	10001428 <ws2812_sendarray>
//		ws2812_sendarray((uint8_t*)white, sizeof(white));
//		ws2812_sendarray((uint8_t*)white, sizeof(white));
		break;
100012d8:	e018      	b.n	1000130c <updateWS2812LEDs+0x8c>
	case YELLOW:
		ws2812_sendarray((uint8_t*)yello, sizeof(yello));
100012da:	4b14      	ldr	r3, [pc, #80]	; (1000132c <updateWS2812LEDs+0xac>)
100012dc:	1c18      	adds	r0, r3, #0
100012de:	213f      	movs	r1, #63	; 0x3f
100012e0:	f000 f8a2 	bl	10001428 <ws2812_sendarray>
//		ws2812_sendarray((uint8_t*)yello, sizeof(yello));
//		ws2812_sendarray((uint8_t*)yello, sizeof(yello));
		break;
100012e4:	e012      	b.n	1000130c <updateWS2812LEDs+0x8c>
	case PURPLE:
		ws2812_sendarray((uint8_t*)purpl, sizeof(purpl));
100012e6:	4b12      	ldr	r3, [pc, #72]	; (10001330 <updateWS2812LEDs+0xb0>)
100012e8:	1c18      	adds	r0, r3, #0
100012ea:	213f      	movs	r1, #63	; 0x3f
100012ec:	f000 f89c 	bl	10001428 <ws2812_sendarray>
//		ws2812_sendarray((uint8_t*)purpl, sizeof(purpl));
//		ws2812_sendarray((uint8_t*)purpl, sizeof(purpl));
		break;
100012f0:	e00c      	b.n	1000130c <updateWS2812LEDs+0x8c>
	case CYAN:
		ws2812_sendarray((uint8_t*)cyan, sizeof(cyan));
100012f2:	4b10      	ldr	r3, [pc, #64]	; (10001334 <updateWS2812LEDs+0xb4>)
100012f4:	1c18      	adds	r0, r3, #0
100012f6:	213f      	movs	r1, #63	; 0x3f
100012f8:	f000 f896 	bl	10001428 <ws2812_sendarray>
//		ws2812_sendarray((uint8_t*)cyan, sizeof(cyan));
//		ws2812_sendarray((uint8_t*)cyan, sizeof(cyan));
		break;
100012fc:	e006      	b.n	1000130c <updateWS2812LEDs+0x8c>
	case OFF:
		ws2812_sendarray((uint8_t*)off, sizeof(off));
100012fe:	4b0e      	ldr	r3, [pc, #56]	; (10001338 <updateWS2812LEDs+0xb8>)
10001300:	1c18      	adds	r0, r3, #0
10001302:	213f      	movs	r1, #63	; 0x3f
10001304:	f000 f890 	bl	10001428 <ws2812_sendarray>
//		ws2812_sendarray((uint8_t*)off, sizeof(off));
//		ws2812_sendarray((uint8_t*)off, sizeof(off));
		break;
10001308:	e000      	b.n	1000130c <updateWS2812LEDs+0x8c>
	default:
		break;
1000130a:	46c0      	nop			; (mov r8, r8)
	}
}
1000130c:	46bd      	mov	sp, r7
1000130e:	b002      	add	sp, #8
10001310:	bd80      	pop	{r7, pc}
10001312:	46c0      	nop			; (mov r8, r8)
10001314:	10004d40 	.word	0x10004d40
10001318:	10004b00 	.word	0x10004b00
1000131c:	10004b40 	.word	0x10004b40
10001320:	10004b80 	.word	0x10004b80
10001324:	10004bc0 	.word	0x10004bc0
10001328:	10004c00 	.word	0x10004c00
1000132c:	10004d00 	.word	0x10004d00
10001330:	10004c80 	.word	0x10004c80
10001334:	10004cc0 	.word	0x10004cc0
10001338:	10004c40 	.word	0x10004c40

1000133c <redDotOnBlueLine>:




void redDotOnBlueLine(void *ptr)
{
1000133c:	b580      	push	{r7, lr}
1000133e:	b084      	sub	sp, #16
10001340:	af00      	add	r7, sp, #0
10001342:	6078      	str	r0, [r7, #4]
	uint8_t *leds = ptr;
10001344:	687b      	ldr	r3, [r7, #4]
10001346:	60fb      	str	r3, [r7, #12]
	static uint8_t redPosition = 0;
	static uint8_t bluePosition = 0;

	if(redPosition >= 3 || redPosition < bluePosition)
10001348:	4b35      	ldr	r3, [pc, #212]	; (10001420 <redDotOnBlueLine+0xe4>)
1000134a:	781b      	ldrb	r3, [r3, #0]
1000134c:	2b02      	cmp	r3, #2
1000134e:	d805      	bhi.n	1000135c <redDotOnBlueLine+0x20>
10001350:	4b33      	ldr	r3, [pc, #204]	; (10001420 <redDotOnBlueLine+0xe4>)
10001352:	781a      	ldrb	r2, [r3, #0]
10001354:	4b33      	ldr	r3, [pc, #204]	; (10001424 <redDotOnBlueLine+0xe8>)
10001356:	781b      	ldrb	r3, [r3, #0]
10001358:	429a      	cmp	r2, r3
1000135a:	d225      	bcs.n	100013a8 <redDotOnBlueLine+0x6c>
	{
		//delete oldest red dot, turn him blue
		leds[3*bluePosition  ] = 0x00;
1000135c:	4b31      	ldr	r3, [pc, #196]	; (10001424 <redDotOnBlueLine+0xe8>)
1000135e:	781b      	ldrb	r3, [r3, #0]
10001360:	1c1a      	adds	r2, r3, #0
10001362:	1c13      	adds	r3, r2, #0
10001364:	005b      	lsls	r3, r3, #1
10001366:	189b      	adds	r3, r3, r2
10001368:	68fa      	ldr	r2, [r7, #12]
1000136a:	18d3      	adds	r3, r2, r3
1000136c:	2200      	movs	r2, #0
1000136e:	701a      	strb	r2, [r3, #0]
		leds[3*bluePosition+1] = 0x00;
10001370:	4b2c      	ldr	r3, [pc, #176]	; (10001424 <redDotOnBlueLine+0xe8>)
10001372:	781b      	ldrb	r3, [r3, #0]
10001374:	1c1a      	adds	r2, r3, #0
10001376:	1c13      	adds	r3, r2, #0
10001378:	005b      	lsls	r3, r3, #1
1000137a:	189b      	adds	r3, r3, r2
1000137c:	3301      	adds	r3, #1
1000137e:	68fa      	ldr	r2, [r7, #12]
10001380:	18d3      	adds	r3, r2, r3
10001382:	2200      	movs	r2, #0
10001384:	701a      	strb	r2, [r3, #0]
		leds[3*bluePosition+2] = BRIGHTNESS;
10001386:	4b27      	ldr	r3, [pc, #156]	; (10001424 <redDotOnBlueLine+0xe8>)
10001388:	781b      	ldrb	r3, [r3, #0]
1000138a:	1c1a      	adds	r2, r3, #0
1000138c:	1c13      	adds	r3, r2, #0
1000138e:	005b      	lsls	r3, r3, #1
10001390:	189b      	adds	r3, r3, r2
10001392:	3302      	adds	r3, #2
10001394:	68fa      	ldr	r2, [r7, #12]
10001396:	18d3      	adds	r3, r2, r3
10001398:	22ff      	movs	r2, #255	; 0xff
1000139a:	701a      	strb	r2, [r3, #0]
		bluePosition++;
1000139c:	4b21      	ldr	r3, [pc, #132]	; (10001424 <redDotOnBlueLine+0xe8>)
1000139e:	781b      	ldrb	r3, [r3, #0]
100013a0:	3301      	adds	r3, #1
100013a2:	b2da      	uxtb	r2, r3
100013a4:	4b1f      	ldr	r3, [pc, #124]	; (10001424 <redDotOnBlueLine+0xe8>)
100013a6:	701a      	strb	r2, [r3, #0]
	}

	//make new red dot
	leds[3*redPosition  ] = 0x00;
100013a8:	4b1d      	ldr	r3, [pc, #116]	; (10001420 <redDotOnBlueLine+0xe4>)
100013aa:	781b      	ldrb	r3, [r3, #0]
100013ac:	1c1a      	adds	r2, r3, #0
100013ae:	1c13      	adds	r3, r2, #0
100013b0:	005b      	lsls	r3, r3, #1
100013b2:	189b      	adds	r3, r3, r2
100013b4:	68fa      	ldr	r2, [r7, #12]
100013b6:	18d3      	adds	r3, r2, r3
100013b8:	2200      	movs	r2, #0
100013ba:	701a      	strb	r2, [r3, #0]
	leds[3*redPosition+1] = BRIGHTNESS;
100013bc:	4b18      	ldr	r3, [pc, #96]	; (10001420 <redDotOnBlueLine+0xe4>)
100013be:	781b      	ldrb	r3, [r3, #0]
100013c0:	1c1a      	adds	r2, r3, #0
100013c2:	1c13      	adds	r3, r2, #0
100013c4:	005b      	lsls	r3, r3, #1
100013c6:	189b      	adds	r3, r3, r2
100013c8:	3301      	adds	r3, #1
100013ca:	68fa      	ldr	r2, [r7, #12]
100013cc:	18d3      	adds	r3, r2, r3
100013ce:	22ff      	movs	r2, #255	; 0xff
100013d0:	701a      	strb	r2, [r3, #0]
	leds[3*redPosition+2] = 0x00;
100013d2:	4b13      	ldr	r3, [pc, #76]	; (10001420 <redDotOnBlueLine+0xe4>)
100013d4:	781b      	ldrb	r3, [r3, #0]
100013d6:	1c1a      	adds	r2, r3, #0
100013d8:	1c13      	adds	r3, r2, #0
100013da:	005b      	lsls	r3, r3, #1
100013dc:	189b      	adds	r3, r3, r2
100013de:	3302      	adds	r3, #2
100013e0:	68fa      	ldr	r2, [r7, #12]
100013e2:	18d3      	adds	r3, r2, r3
100013e4:	2200      	movs	r2, #0
100013e6:	701a      	strb	r2, [r3, #0]

	if(++redPosition >= WS2812_QUANTITY) redPosition = 0;
100013e8:	4b0d      	ldr	r3, [pc, #52]	; (10001420 <redDotOnBlueLine+0xe4>)
100013ea:	781b      	ldrb	r3, [r3, #0]
100013ec:	3301      	adds	r3, #1
100013ee:	b2da      	uxtb	r2, r3
100013f0:	4b0b      	ldr	r3, [pc, #44]	; (10001420 <redDotOnBlueLine+0xe4>)
100013f2:	701a      	strb	r2, [r3, #0]
100013f4:	4b0a      	ldr	r3, [pc, #40]	; (10001420 <redDotOnBlueLine+0xe4>)
100013f6:	781b      	ldrb	r3, [r3, #0]
100013f8:	2b14      	cmp	r3, #20
100013fa:	d902      	bls.n	10001402 <redDotOnBlueLine+0xc6>
100013fc:	4b08      	ldr	r3, [pc, #32]	; (10001420 <redDotOnBlueLine+0xe4>)
100013fe:	2200      	movs	r2, #0
10001400:	701a      	strb	r2, [r3, #0]
	if(bluePosition >= WS2812_QUANTITY) bluePosition = 0;
10001402:	4b08      	ldr	r3, [pc, #32]	; (10001424 <redDotOnBlueLine+0xe8>)
10001404:	781b      	ldrb	r3, [r3, #0]
10001406:	2b14      	cmp	r3, #20
10001408:	d902      	bls.n	10001410 <redDotOnBlueLine+0xd4>
1000140a:	4b06      	ldr	r3, [pc, #24]	; (10001424 <redDotOnBlueLine+0xe8>)
1000140c:	2200      	movs	r2, #0
1000140e:	701a      	strb	r2, [r3, #0]

	ws2812_sendarray(leds,63); //write new colors to to LEDS:
10001410:	68fb      	ldr	r3, [r7, #12]
10001412:	1c18      	adds	r0, r3, #0
10001414:	213f      	movs	r1, #63	; 0x3f
10001416:	f000 f807 	bl	10001428 <ws2812_sendarray>
}
1000141a:	46bd      	mov	sp, r7
1000141c:	b004      	add	sp, #16
1000141e:	bd80      	pop	{r7, pc}
10001420:	20000920 	.word	0x20000920
10001424:	20000921 	.word	0x20000921

10001428 <ws2812_sendarray>:
#define ws2812_DEL8 ws2812_DEL4 ws2812_DEL4
#define ws2812_DEL16 ws2812_DEL8 ws2812_DEL8


void ws2812_sendarray(uint8_t *data,int datlen)
{
10001428:	b5b0      	push	{r4, r5, r7, lr}
1000142a:	b088      	sub	sp, #32
1000142c:	af00      	add	r7, sp, #0
1000142e:	6078      	str	r0, [r7, #4]
10001430:	6039      	str	r1, [r7, #0]
	uint32_t maskhi = ws2812_mask_set;
10001432:	2320      	movs	r3, #32
10001434:	61bb      	str	r3, [r7, #24]
	uint32_t masklo = ws2812_mask_clr;
10001436:	2380      	movs	r3, #128	; 0x80
10001438:	039b      	lsls	r3, r3, #14
1000143a:	617b      	str	r3, [r7, #20]
	volatile uint32_t *set = ws2812_port_set;
1000143c:	4b14      	ldr	r3, [pc, #80]	; (10001490 <end45+0x1c>)
1000143e:	613b      	str	r3, [r7, #16]
	volatile uint32_t *clr = ws2812_port_clr;
10001440:	4b13      	ldr	r3, [pc, #76]	; (10001490 <end45+0x1c>)
10001442:	60fb      	str	r3, [r7, #12]
	uint32_t i;
	uint32_t curbyte;

	while (datlen--) {
10001444:	e017      	b.n	10001476 <end45+0x2>
		curbyte=*data++;
10001446:	687b      	ldr	r3, [r7, #4]
10001448:	781b      	ldrb	r3, [r3, #0]
1000144a:	60bb      	str	r3, [r7, #8]
1000144c:	687b      	ldr	r3, [r7, #4]
1000144e:	3301      	adds	r3, #1
10001450:	607b      	str	r3, [r7, #4]

	asm volatile(
10001452:	68bb      	ldr	r3, [r7, #8]
10001454:	693a      	ldr	r2, [r7, #16]
10001456:	68f9      	ldr	r1, [r7, #12]
10001458:	6978      	ldr	r0, [r7, #20]
1000145a:	69bd      	ldr	r5, [r7, #24]
1000145c:	69fc      	ldr	r4, [r7, #28]
1000145e:	061b      	lsls	r3, r3, #24
10001460:	2408      	movs	r4, #8

10001462 <ilop45>:
10001462:	005b      	lsls	r3, r3, #1
10001464:	6015      	str	r5, [r2, #0]
10001466:	46c0      	nop			; (mov r8, r8)
10001468:	d200      	bcs.n	1000146c <one45>
1000146a:	6008      	str	r0, [r1, #0]

1000146c <one45>:
1000146c:	3c01      	subs	r4, #1
1000146e:	6008      	str	r0, [r1, #0]
10001470:	d000      	beq.n	10001474 <end45>
10001472:	e7f6      	b.n	10001462 <ilop45>

10001474 <end45>:
10001474:	61fc      	str	r4, [r7, #28]
	volatile uint32_t *set = ws2812_port_set;
	volatile uint32_t *clr = ws2812_port_clr;
	uint32_t i;
	uint32_t curbyte;

	while (datlen--) {
10001476:	683b      	ldr	r3, [r7, #0]
10001478:	1e5a      	subs	r2, r3, #1
1000147a:	4193      	sbcs	r3, r2
1000147c:	b2db      	uxtb	r3, r3
1000147e:	683a      	ldr	r2, [r7, #0]
10001480:	3a01      	subs	r2, #1
10001482:	603a      	str	r2, [r7, #0]
10001484:	2b00      	cmp	r3, #0
10001486:	d1de      	bne.n	10001446 <ws2812_sendarray+0x1e>
			"end%=:								\n\t"
			:	[ctr] "+r" (i)
			:	[dat] "r" (curbyte), [set] "r" (set), [clr] "r" (clr), [masklo] "r" (masklo), [maskhi] "r" (maskhi)
			);
	}
}
10001488:	46bd      	mov	sp, r7
1000148a:	b008      	add	sp, #32
1000148c:	bdb0      	pop	{r4, r5, r7, pc}
1000148e:	46c0      	nop			; (mov r8, r8)
10001490:	40040004 	.word	0x40040004

10001494 <NMI_Handler>:
/* Default exception Handlers - Users may override this default functionality by
   defining handlers of the same name in their C code */
    .thumb 
    .text

    Insert_ExceptionHandler NMI_Handler
10001494:	e7fe      	b.n	10001494 <NMI_Handler>

10001496 <HardFault_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler HardFault_Handler
10001496:	e7fe      	b.n	10001496 <HardFault_Handler>

10001498 <SVC_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler SVC_Handler
10001498:	e7fe      	b.n	10001498 <SVC_Handler>

1000149a <PendSV_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler PendSV_Handler
1000149a:	e7fe      	b.n	1000149a <PendSV_Handler>
/* ======================================================================== */
    Insert_ExceptionHandler SysTick_Handler
1000149c:	e7fe      	b.n	1000149c <PendSV_Handler+0x2>

1000149e <SCU_0_IRQHandler>:
/* ============= END OF EXCEPTION HANDLER DEFINITION ======================== */

/* ============= START OF INTERRUPT HANDLER DEFINITION ====================== */

/* IRQ Handlers */
    Insert_ExceptionHandler SCU_0_IRQHandler
1000149e:	e7fe      	b.n	1000149e <SCU_0_IRQHandler>

100014a0 <SCU_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_1_IRQHandler
100014a0:	e7fe      	b.n	100014a0 <SCU_1_IRQHandler>

100014a2 <SCU_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_2_IRQHandler
100014a2:	e7fe      	b.n	100014a2 <SCU_2_IRQHandler>

100014a4 <ERU0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_0_IRQHandler
100014a4:	e7fe      	b.n	100014a4 <ERU0_0_IRQHandler>

100014a6 <ERU0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_1_IRQHandler
100014a6:	e7fe      	b.n	100014a6 <ERU0_1_IRQHandler>

100014a8 <ERU0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_2_IRQHandler
100014a8:	e7fe      	b.n	100014a8 <ERU0_2_IRQHandler>

100014aa <ERU0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_3_IRQHandler
100014aa:	e7fe      	b.n	100014aa <ERU0_3_IRQHandler>

100014ac <VADC0_C0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_0_IRQHandler
100014ac:	e7fe      	b.n	100014ac <VADC0_C0_0_IRQHandler>

100014ae <VADC0_C0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_1_IRQHandler
100014ae:	e7fe      	b.n	100014ae <VADC0_C0_1_IRQHandler>

100014b0 <CCU40_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_0_IRQHandler
100014b0:	e7fe      	b.n	100014b0 <CCU40_0_IRQHandler>

100014b2 <CCU40_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_1_IRQHandler
100014b2:	e7fe      	b.n	100014b2 <CCU40_1_IRQHandler>

100014b4 <CCU40_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_2_IRQHandler
100014b4:	e7fe      	b.n	100014b4 <CCU40_2_IRQHandler>

100014b6 <CCU40_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_3_IRQHandler
100014b6:	e7fe      	b.n	100014b6 <CCU40_3_IRQHandler>

100014b8 <USIC0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_0_IRQHandler
100014b8:	e7fe      	b.n	100014b8 <USIC0_0_IRQHandler>

100014ba <USIC0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_1_IRQHandler
100014ba:	e7fe      	b.n	100014ba <USIC0_1_IRQHandler>

100014bc <USIC0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_2_IRQHandler
100014bc:	e7fe      	b.n	100014bc <USIC0_2_IRQHandler>

100014be <USIC0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_3_IRQHandler
100014be:	e7fe      	b.n	100014be <USIC0_3_IRQHandler>

100014c0 <USIC0_4_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_4_IRQHandler
100014c0:	e7fe      	b.n	100014c0 <USIC0_4_IRQHandler>

100014c2 <USIC0_5_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_5_IRQHandler
100014c2:	e7fe      	b.n	100014c2 <USIC0_5_IRQHandler>

100014c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{    
100014c4:	b580      	push	{r7, lr}
100014c6:	af00      	add	r7, sp, #0
   * while((SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk));
   * SCU_GENERAL->PASSWD = 0x000000C3UL; // enable bit protection
   * SystemCoreClockUpdate();
   *
   */
  SystemCoreClockUpdate();
100014c8:	f000 f802 	bl	100014d0 <SystemCoreClockUpdate>
}
100014cc:	46bd      	mov	sp, r7
100014ce:	bd80      	pop	{r7, pc}

100014d0 <SystemCoreClockUpdate>:
  * @note   -  
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
100014d0:	b580      	push	{r7, lr}
100014d2:	b082      	sub	sp, #8
100014d4:	af00      	add	r7, sp, #0
  uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100014d6:	4b11      	ldr	r3, [pc, #68]	; (1000151c <SystemCoreClockUpdate+0x4c>)
100014d8:	681a      	ldr	r2, [r3, #0]
100014da:	23ff      	movs	r3, #255	; 0xff
100014dc:	021b      	lsls	r3, r3, #8
100014de:	4013      	ands	r3, r2
100014e0:	0a1b      	lsrs	r3, r3, #8
100014e2:	607b      	str	r3, [r7, #4]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100014e4:	4b0d      	ldr	r3, [pc, #52]	; (1000151c <SystemCoreClockUpdate+0x4c>)
100014e6:	681a      	ldr	r2, [r3, #0]
100014e8:	23ff      	movs	r3, #255	; 0xff
100014ea:	4013      	ands	r3, r2
100014ec:	603b      	str	r3, [r7, #0]
  
  if(IDIV)
100014ee:	687b      	ldr	r3, [r7, #4]
100014f0:	2b00      	cmp	r3, #0
100014f2:	d00c      	beq.n	1000150e <SystemCoreClockUpdate+0x3e>
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((MCLK_MHZ << 7) / ((IDIV << 8) + FDIV)) << 1;
100014f4:	687b      	ldr	r3, [r7, #4]
100014f6:	021a      	lsls	r2, r3, #8
100014f8:	683b      	ldr	r3, [r7, #0]
100014fa:	18d3      	adds	r3, r2, r3
100014fc:	4808      	ldr	r0, [pc, #32]	; (10001520 <SystemCoreClockUpdate+0x50>)
100014fe:	1c19      	adds	r1, r3, #0
10001500:	f001 fe56 	bl	100031b0 <__aeabi_uidiv>
10001504:	1c03      	adds	r3, r0, #0
10001506:	005a      	lsls	r2, r3, #1
10001508:	4b06      	ldr	r3, [pc, #24]	; (10001524 <SystemCoreClockUpdate+0x54>)
1000150a:	601a      	str	r2, [r3, #0]
1000150c:	e002      	b.n	10001514 <SystemCoreClockUpdate+0x44>
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = MCLK_MHZ;
1000150e:	4b05      	ldr	r3, [pc, #20]	; (10001524 <SystemCoreClockUpdate+0x54>)
10001510:	4a05      	ldr	r2, [pc, #20]	; (10001528 <SystemCoreClockUpdate+0x58>)
10001512:	601a      	str	r2, [r3, #0]
  }
}
10001514:	46bd      	mov	sp, r7
10001516:	b002      	add	sp, #8
10001518:	bd80      	pop	{r7, pc}
1000151a:	46c0      	nop			; (mov r8, r8)
1000151c:	40010300 	.word	0x40010300
10001520:	f4240000 	.word	0xf4240000
10001524:	20000940 	.word	0x20000940
10001528:	01e84800 	.word	0x01e84800

1000152c <_open>:
/* ========================================================================= */
/*
 * File open
 */
__attribute__((weak)) int _open(const char *name, int flags, int mode)
{
1000152c:	b580      	push	{r7, lr}
1000152e:	b084      	sub	sp, #16
10001530:	af00      	add	r7, sp, #0
10001532:	60f8      	str	r0, [r7, #12]
10001534:	60b9      	str	r1, [r7, #8]
10001536:	607a      	str	r2, [r7, #4]
 flags = flags;
 mode = mode;
 return -1;
10001538:	2301      	movs	r3, #1
1000153a:	425b      	negs	r3, r3
}
1000153c:	1c18      	adds	r0, r3, #0
1000153e:	46bd      	mov	sp, r7
10001540:	b004      	add	sp, #16
10001542:	bd80      	pop	{r7, pc}

10001544 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
10001544:	b580      	push	{r7, lr}
10001546:	b084      	sub	sp, #16
10001548:	af00      	add	r7, sp, #0
1000154a:	60f8      	str	r0, [r7, #12]
1000154c:	60b9      	str	r1, [r7, #8]
1000154e:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
10001550:	2301      	movs	r3, #1
10001552:	425b      	negs	r3, r3
}
10001554:	1c18      	adds	r0, r3, #0
10001556:	46bd      	mov	sp, r7
10001558:	b004      	add	sp, #16
1000155a:	bd80      	pop	{r7, pc}

1000155c <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
1000155c:	b580      	push	{r7, lr}
1000155e:	b084      	sub	sp, #16
10001560:	af00      	add	r7, sp, #0
10001562:	60f8      	str	r0, [r7, #12]
10001564:	60b9      	str	r1, [r7, #8]
10001566:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
10001568:	2300      	movs	r3, #0
}
1000156a:	1c18      	adds	r0, r3, #0
1000156c:	46bd      	mov	sp, r7
1000156e:	b004      	add	sp, #16
10001570:	bd80      	pop	{r7, pc}
10001572:	46c0      	nop			; (mov r8, r8)

10001574 <_write>:

/*
 * File write
 */
__attribute__((weak)) int _write(int file, char *buf, int nbytes)
{
10001574:	b580      	push	{r7, lr}
10001576:	b084      	sub	sp, #16
10001578:	af00      	add	r7, sp, #0
1000157a:	60f8      	str	r0, [r7, #12]
1000157c:	60b9      	str	r1, [r7, #8]
1000157e:	607a      	str	r2, [r7, #4]
 return -1;
10001580:	2301      	movs	r3, #1
10001582:	425b      	negs	r3, r3
}
10001584:	1c18      	adds	r0, r3, #0
10001586:	46bd      	mov	sp, r7
10001588:	b004      	add	sp, #16
1000158a:	bd80      	pop	{r7, pc}

1000158c <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
1000158c:	b580      	push	{r7, lr}
1000158e:	af00      	add	r7, sp, #0
 return -1;
10001590:	2301      	movs	r3, #1
10001592:	425b      	negs	r3, r3
}
10001594:	1c18      	adds	r0, r3, #0
10001596:	46bd      	mov	sp, r7
10001598:	bd80      	pop	{r7, pc}
1000159a:	46c0      	nop			; (mov r8, r8)

1000159c <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
1000159c:	b580      	push	{r7, lr}
1000159e:	b082      	sub	sp, #8
100015a0:	af00      	add	r7, sp, #0
100015a2:	6078      	str	r0, [r7, #4]
100015a4:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
100015a6:	683b      	ldr	r3, [r7, #0]
100015a8:	2b00      	cmp	r3, #0
100015aa:	d002      	beq.n	100015b2 <_fstat+0x16>
  return -1;
100015ac:	2301      	movs	r3, #1
100015ae:	425b      	negs	r3, r3
100015b0:	e001      	b.n	100015b6 <_fstat+0x1a>
 else
  return -2;
100015b2:	2302      	movs	r3, #2
100015b4:	425b      	negs	r3, r3
}
100015b6:	1c18      	adds	r0, r3, #0
100015b8:	46bd      	mov	sp, r7
100015ba:	b002      	add	sp, #8
100015bc:	bd80      	pop	{r7, pc}
100015be:	46c0      	nop			; (mov r8, r8)

100015c0 <_link>:
/*
 * File linking
 */
__attribute__((weak)) int _link (char *old, char *new)
{
100015c0:	b580      	push	{r7, lr}
100015c2:	b082      	sub	sp, #8
100015c4:	af00      	add	r7, sp, #0
100015c6:	6078      	str	r0, [r7, #4]
100015c8:	6039      	str	r1, [r7, #0]
 if (old == new)
100015ca:	687a      	ldr	r2, [r7, #4]
100015cc:	683b      	ldr	r3, [r7, #0]
100015ce:	429a      	cmp	r2, r3
100015d0:	d102      	bne.n	100015d8 <_link+0x18>
  return -1;
100015d2:	2301      	movs	r3, #1
100015d4:	425b      	negs	r3, r3
100015d6:	e001      	b.n	100015dc <_link+0x1c>
 else
  return -2;
100015d8:	2302      	movs	r3, #2
100015da:	425b      	negs	r3, r3
}
100015dc:	1c18      	adds	r0, r3, #0
100015de:	46bd      	mov	sp, r7
100015e0:	b002      	add	sp, #8
100015e2:	bd80      	pop	{r7, pc}

100015e4 <_unlink>:

/*
 * Unlinking directory entry
 */
__attribute__((weak)) int _unlink(char *name)
{
100015e4:	b580      	push	{r7, lr}
100015e6:	b082      	sub	sp, #8
100015e8:	af00      	add	r7, sp, #0
100015ea:	6078      	str	r0, [r7, #4]
 return -1;
100015ec:	2301      	movs	r3, #1
100015ee:	425b      	negs	r3, r3
}
100015f0:	1c18      	adds	r0, r3, #0
100015f2:	46bd      	mov	sp, r7
100015f4:	b002      	add	sp, #8
100015f6:	bd80      	pop	{r7, pc}

100015f8 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
100015f8:	b580      	push	{r7, lr}
100015fa:	b086      	sub	sp, #24
100015fc:	af00      	add	r7, sp, #0
100015fe:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
10001600:	4b14      	ldr	r3, [pc, #80]	; (10001654 <_sbrk+0x5c>)
10001602:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
10001604:	4b14      	ldr	r3, [pc, #80]	; (10001658 <_sbrk+0x60>)
10001606:	681b      	ldr	r3, [r3, #0]
10001608:	2b00      	cmp	r3, #0
1000160a:	d108      	bne.n	1000161e <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
1000160c:	4b12      	ldr	r3, [pc, #72]	; (10001658 <_sbrk+0x60>)
1000160e:	4a13      	ldr	r2, [pc, #76]	; (1000165c <_sbrk+0x64>)
10001610:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
10001612:	4b11      	ldr	r3, [pc, #68]	; (10001658 <_sbrk+0x60>)
10001614:	681a      	ldr	r2, [r3, #0]
10001616:	697b      	ldr	r3, [r7, #20]
10001618:	18d2      	adds	r2, r2, r3
1000161a:	4b11      	ldr	r3, [pc, #68]	; (10001660 <_sbrk+0x68>)
1000161c:	601a      	str	r2, [r3, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
1000161e:	4b0e      	ldr	r3, [pc, #56]	; (10001658 <_sbrk+0x60>)
10001620:	681b      	ldr	r3, [r3, #0]
10001622:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
10001624:	4b0c      	ldr	r3, [pc, #48]	; (10001658 <_sbrk+0x60>)
10001626:	681b      	ldr	r3, [r3, #0]
10001628:	1c1a      	adds	r2, r3, #0
1000162a:	687b      	ldr	r3, [r7, #4]
1000162c:	18d3      	adds	r3, r2, r3
1000162e:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
10001630:	2207      	movs	r2, #7
10001632:	4393      	bics	r3, r2
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
10001634:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
10001636:	4b0a      	ldr	r3, [pc, #40]	; (10001660 <_sbrk+0x68>)
10001638:	681b      	ldr	r3, [r3, #0]
1000163a:	68fa      	ldr	r2, [r7, #12]
1000163c:	429a      	cmp	r2, r3
1000163e:	d301      	bcc.n	10001644 <_sbrk+0x4c>
  return ((unsigned char *)NULL);
10001640:	2300      	movs	r3, #0
10001642:	e003      	b.n	1000164c <_sbrk+0x54>
 else
 {
  heap = NextBreak;
10001644:	4b04      	ldr	r3, [pc, #16]	; (10001658 <_sbrk+0x60>)
10001646:	68fa      	ldr	r2, [r7, #12]
10001648:	601a      	str	r2, [r3, #0]
  return CurrBreak;
1000164a:	693b      	ldr	r3, [r7, #16]
 }
}
1000164c:	1c18      	adds	r0, r3, #0
1000164e:	46bd      	mov	sp, r7
10001650:	b006      	add	sp, #24
10001652:	bd80      	pop	{r7, pc}
10001654:	00003568 	.word	0x00003568
10001658:	20000928 	.word	0x20000928
1000165c:	20000a98 	.word	0x20000a98
10001660:	2000092c 	.word	0x2000092c

10001664 <_times>:
/* ========================================================================= */
/*
 * Process timing information
 */
__attribute__((weak)) int _times(struct tms *buf)
{
10001664:	b580      	push	{r7, lr}
10001666:	b082      	sub	sp, #8
10001668:	af00      	add	r7, sp, #0
1000166a:	6078      	str	r0, [r7, #4]
 return -1;
1000166c:	2301      	movs	r3, #1
1000166e:	425b      	negs	r3, r3
}
10001670:	1c18      	adds	r0, r3, #0
10001672:	46bd      	mov	sp, r7
10001674:	b002      	add	sp, #8
10001676:	bd80      	pop	{r7, pc}

10001678 <_wait>:
/*
 * Waiting for a child process to complete
 */
__attribute__((weak)) int _wait(int *status)
{
10001678:	b580      	push	{r7, lr}
1000167a:	b082      	sub	sp, #8
1000167c:	af00      	add	r7, sp, #0
1000167e:	6078      	str	r0, [r7, #4]
 return -1;
10001680:	2301      	movs	r3, #1
10001682:	425b      	negs	r3, r3
}
10001684:	1c18      	adds	r0, r3, #0
10001686:	46bd      	mov	sp, r7
10001688:	b002      	add	sp, #8
1000168a:	bd80      	pop	{r7, pc}

1000168c <_kill>:

/*
 * Kill a process
 */
__attribute__((weak)) int _kill(int pid,int sig)
{
1000168c:	b580      	push	{r7, lr}
1000168e:	b082      	sub	sp, #8
10001690:	af00      	add	r7, sp, #0
10001692:	6078      	str	r0, [r7, #4]
10001694:	6039      	str	r1, [r7, #0]
 pid = pid;
 sig = sig;
 return -1;
10001696:	2301      	movs	r3, #1
10001698:	425b      	negs	r3, r3
}
1000169a:	1c18      	adds	r0, r3, #0
1000169c:	46bd      	mov	sp, r7
1000169e:	b002      	add	sp, #8
100016a0:	bd80      	pop	{r7, pc}
100016a2:	46c0      	nop			; (mov r8, r8)

100016a4 <_fork>:

/*
 * Forking a child process
 */
__attribute__((weak)) int _fork(void)
{
100016a4:	b580      	push	{r7, lr}
100016a6:	af00      	add	r7, sp, #0
 return -1;
100016a8:	2301      	movs	r3, #1
100016aa:	425b      	negs	r3, r3
}
100016ac:	1c18      	adds	r0, r3, #0
100016ae:	46bd      	mov	sp, r7
100016b0:	bd80      	pop	{r7, pc}
100016b2:	46c0      	nop			; (mov r8, r8)

100016b4 <_getpid>:

/*
 * Process ID
 */
__attribute__((weak)) int _getpid(void)
{
100016b4:	b580      	push	{r7, lr}
100016b6:	af00      	add	r7, sp, #0
 return -1;
100016b8:	2301      	movs	r3, #1
100016ba:	425b      	negs	r3, r3
}
100016bc:	1c18      	adds	r0, r3, #0
100016be:	46bd      	mov	sp, r7
100016c0:	bd80      	pop	{r7, pc}
100016c2:	46c0      	nop			; (mov r8, r8)

100016c4 <_exit>:

/*
 * Program/process exit
 */
__attribute__((weak)) void _exit(int rc)
{
100016c4:	b580      	push	{r7, lr}
100016c6:	b082      	sub	sp, #8
100016c8:	af00      	add	r7, sp, #0
100016ca:	6078      	str	r0, [r7, #4]
 rc = rc;
 while(1){}
100016cc:	e7fe      	b.n	100016cc <_exit+0x8>
100016ce:	46c0      	nop			; (mov r8, r8)

100016d0 <_init>:
}

/* Init */
__attribute__((weak)) void _init(void)
{}
100016d0:	b580      	push	{r7, lr}
100016d2:	af00      	add	r7, sp, #0
100016d4:	46bd      	mov	sp, r7
100016d6:	bd80      	pop	{r7, pc}

100016d8 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
100016d8:	b580      	push	{r7, lr}
100016da:	b082      	sub	sp, #8
100016dc:	af00      	add	r7, sp, #0
100016de:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
100016e0:	2301      	movs	r3, #1
100016e2:	425b      	negs	r3, r3
}
100016e4:	1c18      	adds	r0, r3, #0
100016e6:	46bd      	mov	sp, r7
100016e8:	b002      	add	sp, #8
100016ea:	bd80      	pop	{r7, pc}

100016ec <UART001_lInit>:
 * @return  None <BR>
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/ 
void UART001_lInit (const UART001_HandleType* Handle)
{
100016ec:	b580      	push	{r7, lr}
100016ee:	b084      	sub	sp, #16
100016f0:	af00      	add	r7, sp, #0
100016f2:	6078      	str	r0, [r7, #4]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
100016f4:	687b      	ldr	r3, [r7, #4]
100016f6:	681b      	ldr	r3, [r3, #0]
100016f8:	60fb      	str	r3, [r7, #12]
 
  /** UART initialisation  */

  /* Disable UART mode before configuring all USIC registers to avoid 
   * unintended edges */ 
  UartRegs->CCR &= ~( ((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk))); 
100016fa:	68fb      	ldr	r3, [r7, #12]
100016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100016fe:	2202      	movs	r2, #2
10001700:	1c19      	adds	r1, r3, #0
10001702:	4391      	bics	r1, r2
10001704:	1c0a      	adds	r2, r1, #0
10001706:	68fb      	ldr	r3, [r7, #12]
10001708:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable the USIC Channel */
  UartRegs->KSCFG |= ((((uint32_t)MASK_ONE  & USIC_CH_KSCFG_MODEN_Msk)) | \
1000170a:	68fb      	ldr	r3, [r7, #12]
1000170c:	68db      	ldr	r3, [r3, #12]
1000170e:	2203      	movs	r2, #3
10001710:	431a      	orrs	r2, r3
10001712:	68fb      	ldr	r3, [r7, #12]
10001714:	60da      	str	r2, [r3, #12]
                         USIC_CH_KSCFG_BPMODEN_Msk)); 
   
  /* Configuration of USIC Channel Fractional Divider */

  /* Fractional divider mode selected */
  UartRegs->FDR |= (((uint32_t)SHIFT_TWO << USIC_CH_FDR_DM_Pos) \
10001716:	68fb      	ldr	r3, [r7, #12]
10001718:	691b      	ldr	r3, [r3, #16]
1000171a:	2280      	movs	r2, #128	; 0x80
1000171c:	0212      	lsls	r2, r2, #8
1000171e:	431a      	orrs	r2, r3
10001720:	68fb      	ldr	r3, [r7, #12]
10001722:	611a      	str	r2, [r3, #16]
                                                     & USIC_CH_FDR_DM_Msk);
  
  /* Step value */
  UartRegs->FDR |= ((Handle->BGR_STEP) & USIC_CH_FDR_STEP_Msk);
10001724:	68fb      	ldr	r3, [r7, #12]
10001726:	691a      	ldr	r2, [r3, #16]
10001728:	687b      	ldr	r3, [r7, #4]
1000172a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
1000172c:	059b      	lsls	r3, r3, #22
1000172e:	0d9b      	lsrs	r3, r3, #22
10001730:	431a      	orrs	r2, r3
10001732:	68fb      	ldr	r3, [r7, #12]
10001734:	611a      	str	r2, [r3, #16]
          
  /* The PreDivider for CTQ, PCTQ = 0  */
  /* The Denominator for CTQ, DCTQ = 16 */
    
  UartRegs->BRG |= \
10001736:	68fb      	ldr	r3, [r7, #12]
10001738:	695a      	ldr	r2, [r3, #20]
	  ((((uint32_t)(Handle->BGR_PCTQ) << USIC_CH_BRG_PCTQ_Pos) & \
1000173a:	6879      	ldr	r1, [r7, #4]
1000173c:	2330      	movs	r3, #48	; 0x30
1000173e:	5ccb      	ldrb	r3, [r1, r3]
10001740:	0219      	lsls	r1, r3, #8
10001742:	23c0      	movs	r3, #192	; 0xc0
10001744:	009b      	lsls	r3, r3, #2
10001746:	4019      	ands	r1, r3
		  	     USIC_CH_BRG_PCTQ_Msk) | \
      (((uint32_t)(Handle->BGR_DCTQ) << USIC_CH_BRG_DCTQ_Pos) & \
10001748:	687b      	ldr	r3, [r7, #4]
1000174a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
1000174c:	0298      	lsls	r0, r3, #10
1000174e:	23f8      	movs	r3, #248	; 0xf8
10001750:	01db      	lsls	r3, r3, #7
10001752:	4003      	ands	r3, r0
  /* The PreDivider for CTQ, PCTQ = 0  */
  /* The Denominator for CTQ, DCTQ = 16 */
    
  UartRegs->BRG |= \
	  ((((uint32_t)(Handle->BGR_PCTQ) << USIC_CH_BRG_PCTQ_Pos) & \
		  	     USIC_CH_BRG_PCTQ_Msk) | \
10001754:	4319      	orrs	r1, r3
      (((uint32_t)(Handle->BGR_DCTQ) << USIC_CH_BRG_DCTQ_Pos) & \
	     USIC_CH_BRG_DCTQ_Msk) | \
      (((uint32_t)(Handle->BGR_PDIV) << USIC_CH_BRG_PDIV_Pos) &  \
10001756:	687b      	ldr	r3, [r7, #4]
10001758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
1000175a:	0418      	lsls	r0, r3, #16
1000175c:	4b4f      	ldr	r3, [pc, #316]	; (1000189c <UART001_lInit+0x1b0>)
1000175e:	4003      	ands	r3, r0
    
  UartRegs->BRG |= \
	  ((((uint32_t)(Handle->BGR_PCTQ) << USIC_CH_BRG_PCTQ_Pos) & \
		  	     USIC_CH_BRG_PCTQ_Msk) | \
      (((uint32_t)(Handle->BGR_DCTQ) << USIC_CH_BRG_DCTQ_Pos) & \
	     USIC_CH_BRG_DCTQ_Msk) | \
10001760:	430b      	orrs	r3, r1
  UartRegs->FDR |= ((Handle->BGR_STEP) & USIC_CH_FDR_STEP_Msk);
          
  /* The PreDivider for CTQ, PCTQ = 0  */
  /* The Denominator for CTQ, DCTQ = 16 */
    
  UartRegs->BRG |= \
10001762:	431a      	orrs	r2, r3
10001764:	68fb      	ldr	r3, [r7, #12]
10001766:	615a      	str	r2, [r3, #20]
  /* Configuration of USIC Shift Control */
  
  /* Transmit/Receive LSB first is selected  */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  UartRegs->SCTR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_SCTR_PDL_Pos) & \
10001768:	68fb      	ldr	r3, [r7, #12]
1000176a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000176c:	2281      	movs	r2, #129	; 0x81
1000176e:	0052      	lsls	r2, r2, #1
10001770:	431a      	orrs	r2, r3
10001772:	68fb      	ldr	r3, [r7, #12]
10001774:	635a      	str	r2, [r3, #52]	; 0x34
    USIC_CH_SCTR_PDL_Msk ) | \
    (((uint32_t)SHIFT_ONE  <<  USIC_CH_SCTR_TRM_Pos ) & USIC_CH_SCTR_TRM_Msk ));
  /* Set Word Length (WLE) & Frame Length (FLE) */
  UartRegs->SCTR |= ((((uint32_t)Handle->DataBits  << USIC_CH_SCTR_FLE_Pos) & \
10001776:	68fb      	ldr	r3, [r7, #12]
10001778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000177a:	687b      	ldr	r3, [r7, #4]
1000177c:	8b9b      	ldrh	r3, [r3, #28]
1000177e:	0419      	lsls	r1, r3, #16
10001780:	23fc      	movs	r3, #252	; 0xfc
10001782:	039b      	lsls	r3, r3, #14
10001784:	4019      	ands	r1, r3
                      USIC_CH_SCTR_FLE_Msk ) | \
                     (((uint32_t)Handle->DataBits  << USIC_CH_SCTR_WLE_Pos) & \
10001786:	687b      	ldr	r3, [r7, #4]
10001788:	8b9b      	ldrh	r3, [r3, #28]
1000178a:	0618      	lsls	r0, r3, #24
1000178c:	23f0      	movs	r3, #240	; 0xf0
1000178e:	051b      	lsls	r3, r3, #20
10001790:	4003      	ands	r3, r0
  UartRegs->SCTR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_SCTR_PDL_Pos) & \
    USIC_CH_SCTR_PDL_Msk ) | \
    (((uint32_t)SHIFT_ONE  <<  USIC_CH_SCTR_TRM_Pos ) & USIC_CH_SCTR_TRM_Msk ));
  /* Set Word Length (WLE) & Frame Length (FLE) */
  UartRegs->SCTR |= ((((uint32_t)Handle->DataBits  << USIC_CH_SCTR_FLE_Pos) & \
                      USIC_CH_SCTR_FLE_Msk ) | \
10001792:	430b      	orrs	r3, r1
  /* Passive Data Level (PDL) = 1 */
  UartRegs->SCTR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_SCTR_PDL_Pos) & \
    USIC_CH_SCTR_PDL_Msk ) | \
    (((uint32_t)SHIFT_ONE  <<  USIC_CH_SCTR_TRM_Pos ) & USIC_CH_SCTR_TRM_Msk ));
  /* Set Word Length (WLE) & Frame Length (FLE) */
  UartRegs->SCTR |= ((((uint32_t)Handle->DataBits  << USIC_CH_SCTR_FLE_Pos) & \
10001794:	431a      	orrs	r2, r3
10001796:	68fb      	ldr	r3, [r7, #12]
10001798:	635a      	str	r2, [r3, #52]	; 0x34
       
  /* Configuration of USIC Transmit Control/Status Register */ 
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
	
  UartRegs->TCSR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_TCSR_TDEN_Pos) & \
1000179a:	68fb      	ldr	r3, [r7, #12]
1000179c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000179e:	22a0      	movs	r2, #160	; 0xa0
100017a0:	00d2      	lsls	r2, r2, #3
100017a2:	431a      	orrs	r2, r3
100017a4:	68fb      	ldr	r3, [r7, #12]
100017a6:	639a      	str	r2, [r3, #56]	; 0x38
  /* Sample Mode (SMD) = 1 */
  /* 1 Stop bit is selected */   
  /* Sample Point (SP) as configured */
  /* Pulse Length (PL) = 0 */
  
  UartRegs->PCR_ASCMode |= ((((uint32_t)MASK_ONE & USIC_CH_PCR_ASCMode_SMD_Msk)) |\
100017a8:	68fb      	ldr	r3, [r7, #12]
100017aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    (((uint32_t)Handle->StopBit  << USIC_CH_PCR_ASCMode_STPB_Pos) & \
100017ac:	687b      	ldr	r3, [r7, #4]
100017ae:	7d5b      	ldrb	r3, [r3, #21]
100017b0:	0059      	lsls	r1, r3, #1
100017b2:	2302      	movs	r3, #2
100017b4:	4019      	ands	r1, r3
    USIC_CH_PCR_ASCMode_STPB_Msk) | \
    (((uint32_t)(Handle->BGR_SP) << USIC_CH_PCR_ASCMode_SP_Pos) & \
100017b6:	687b      	ldr	r3, [r7, #4]
100017b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
100017ba:	0218      	lsls	r0, r3, #8
100017bc:	23f8      	movs	r3, #248	; 0xf8
100017be:	015b      	lsls	r3, r3, #5
100017c0:	4003      	ands	r3, r0
  /* Sample Point (SP) as configured */
  /* Pulse Length (PL) = 0 */
  
  UartRegs->PCR_ASCMode |= ((((uint32_t)MASK_ONE & USIC_CH_PCR_ASCMode_SMD_Msk)) |\
    (((uint32_t)Handle->StopBit  << USIC_CH_PCR_ASCMode_STPB_Pos) & \
    USIC_CH_PCR_ASCMode_STPB_Msk) | \
100017c2:	430b      	orrs	r3, r1
  /* Sample Mode (SMD) = 1 */
  /* 1 Stop bit is selected */   
  /* Sample Point (SP) as configured */
  /* Pulse Length (PL) = 0 */
  
  UartRegs->PCR_ASCMode |= ((((uint32_t)MASK_ONE & USIC_CH_PCR_ASCMode_SMD_Msk)) |\
100017c4:	4313      	orrs	r3, r2
100017c6:	2201      	movs	r2, #1
100017c8:	431a      	orrs	r2, r3
100017ca:	68fb      	ldr	r3, [r7, #12]
100017cc:	63da      	str	r2, [r3, #60]	; 0x3c
    (((uint32_t)Handle->StopBit  << USIC_CH_PCR_ASCMode_STPB_Pos) & \
    USIC_CH_PCR_ASCMode_STPB_Msk) | \
    (((uint32_t)(Handle->BGR_SP) << USIC_CH_PCR_ASCMode_SP_Pos) & \
    USIC_CH_PCR_ASCMode_SP_Msk));
      
  if(Handle->RecvNoiseEn)
100017ce:	687a      	ldr	r2, [r7, #4]
100017d0:	2324      	movs	r3, #36	; 0x24
100017d2:	5cd3      	ldrb	r3, [r2, r3]
100017d4:	2b00      	cmp	r3, #0
100017d6:	d005      	beq.n	100017e4 <UART001_lInit+0xf8>
  {
   	/* Enable Receiver Noise Interrupt*/  
    UartRegs->PCR_ASCMode |=(((uint32_t)SHIFT_ONE  << USIC_CH_PCR_CTR5_Pos) & \
100017d8:	68fb      	ldr	r3, [r7, #12]
100017da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100017dc:	2220      	movs	r2, #32
100017de:	431a      	orrs	r2, r3
100017e0:	68fb      	ldr	r3, [r7, #12]
100017e2:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  	  	  	  USIC_CH_PCR_CTR5_Msk); 
  }
  
  if(Handle->FormatErrEn)
100017e4:	687a      	ldr	r2, [r7, #4]
100017e6:	2325      	movs	r3, #37	; 0x25
100017e8:	5cd3      	ldrb	r3, [r2, r3]
100017ea:	2b00      	cmp	r3, #0
100017ec:	d005      	beq.n	100017fa <UART001_lInit+0x10e>
  {
   	/* Enable Format Error Interrupt*/  
    UartRegs->PCR_ASCMode |=(((uint32_t)SHIFT_ONE  << USIC_CH_PCR_CTR6_Pos) & \
100017ee:	68fb      	ldr	r3, [r7, #12]
100017f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100017f2:	2240      	movs	r2, #64	; 0x40
100017f4:	431a      	orrs	r2, r3
100017f6:	68fb      	ldr	r3, [r7, #12]
100017f8:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  	  	  	                             USIC_CH_PCR_CTR6_Msk); 
  }
  
  if(Handle->FrameFinEn)
100017fa:	687a      	ldr	r2, [r7, #4]
100017fc:	2326      	movs	r3, #38	; 0x26
100017fe:	5cd3      	ldrb	r3, [r2, r3]
10001800:	2b00      	cmp	r3, #0
10001802:	d005      	beq.n	10001810 <UART001_lInit+0x124>
  {
   	/* Enable Frame Finished Interrupt*/  
    UartRegs->PCR_ASCMode |=(((uint32_t)SHIFT_ONE  << USIC_CH_PCR_CTR7_Pos) & \
10001804:	68fb      	ldr	r3, [r7, #12]
10001806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001808:	2280      	movs	r2, #128	; 0x80
1000180a:	431a      	orrs	r2, r3
1000180c:	68fb      	ldr	r3, [r7, #12]
1000180e:	63da      	str	r2, [r3, #60]	; 0x3c
		  	                                   	  	 USIC_CH_PCR_CTR7_Msk); 
  } 
  
  if (Handle->TxFifoEn)
10001810:	687b      	ldr	r3, [r7, #4]
10001812:	7f9b      	ldrb	r3, [r3, #30]
10001814:	2b00      	cmp	r3, #0
10001816:	d011      	beq.n	1000183c <UART001_lInit+0x150>
  {	
	  /* Configuration of Transmitter Buffer Control Register */ 
	  UartRegs->TBCTR |= ((((uint32_t)Handle->TxLimit  << \
10001818:	68fa      	ldr	r2, [r7, #12]
1000181a:	2384      	movs	r3, #132	; 0x84
1000181c:	005b      	lsls	r3, r3, #1
1000181e:	58d2      	ldr	r2, [r2, r3]
10001820:	6879      	ldr	r1, [r7, #4]
10001822:	2320      	movs	r3, #32
10001824:	5ccb      	ldrb	r3, [r1, r3]
10001826:	0219      	lsls	r1, r3, #8
						USIC_CH_TBCTR_LIMIT_Pos ) & USIC_CH_TBCTR_LIMIT_Msk));
10001828:	23fc      	movs	r3, #252	; 0xfc
1000182a:	019b      	lsls	r3, r3, #6
1000182c:	400b      	ands	r3, r1
  } 
  
  if (Handle->TxFifoEn)
  {	
	  /* Configuration of Transmitter Buffer Control Register */ 
	  UartRegs->TBCTR |= ((((uint32_t)Handle->TxLimit  << \
1000182e:	1c11      	adds	r1, r2, #0
10001830:	4319      	orrs	r1, r3
10001832:	68fa      	ldr	r2, [r7, #12]
10001834:	2384      	movs	r3, #132	; 0x84
10001836:	005b      	lsls	r3, r3, #1
10001838:	50d1      	str	r1, [r2, r3]
1000183a:	e006      	b.n	1000184a <UART001_lInit+0x15e>
						USIC_CH_TBCTR_LIMIT_Pos ) & USIC_CH_TBCTR_LIMIT_Msk));
  }
  else
  {
	  /* TBIF is set to simplify polling*/
	  UartRegs->PSR_ASCMode |= (((uint32_t)SHIFT_ONE  << USIC_CH_PSR_TBIF_Pos) & \
1000183c:	68fb      	ldr	r3, [r7, #12]
1000183e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001840:	2280      	movs	r2, #128	; 0x80
10001842:	0192      	lsls	r2, r2, #6
10001844:	431a      	orrs	r2, r3
10001846:	68fb      	ldr	r3, [r7, #12]
10001848:	649a      	str	r2, [r3, #72]	; 0x48
	 		  (uint32_t)USIC_CH_PSR_TBIF_Msk);
  }
  
  if (Handle->RxFifoEn)
1000184a:	687b      	ldr	r3, [r7, #4]
1000184c:	7fdb      	ldrb	r3, [r3, #31]
1000184e:	2b00      	cmp	r3, #0
10001850:	d013      	beq.n	1000187a <UART001_lInit+0x18e>
  {
	  /* Configuration of Receiver Buffer Control Register */ 
	  UartRegs->RBCTR |= ((((uint32_t)Handle->RxLimit  << \
10001852:	68fa      	ldr	r2, [r7, #12]
10001854:	2386      	movs	r3, #134	; 0x86
10001856:	005b      	lsls	r3, r3, #1
10001858:	58d2      	ldr	r2, [r2, r3]
1000185a:	6879      	ldr	r1, [r7, #4]
1000185c:	2321      	movs	r3, #33	; 0x21
1000185e:	5ccb      	ldrb	r3, [r1, r3]
10001860:	0219      	lsls	r1, r3, #8
						   USIC_CH_RBCTR_LIMIT_Pos) & USIC_CH_RBCTR_LIMIT_Msk) | \
10001862:	23fc      	movs	r3, #252	; 0xfc
10001864:	019b      	lsls	r3, r3, #6
10001866:	400b      	ands	r3, r1
  }
  
  if (Handle->RxFifoEn)
  {
	  /* Configuration of Receiver Buffer Control Register */ 
	  UartRegs->RBCTR |= ((((uint32_t)Handle->RxLimit  << \
10001868:	4313      	orrs	r3, r2
1000186a:	2280      	movs	r2, #128	; 0x80
1000186c:	0552      	lsls	r2, r2, #21
1000186e:	1c11      	adds	r1, r2, #0
10001870:	4319      	orrs	r1, r3
10001872:	68fa      	ldr	r2, [r7, #12]
10001874:	2386      	movs	r3, #134	; 0x86
10001876:	005b      	lsls	r3, r3, #1
10001878:	50d1      	str	r1, [r2, r3]
							(((uint32_t)SHIFT_ONE << USIC_CH_RBCTR_LOF_Pos) & \
						   USIC_CH_RBCTR_LOF_Msk));
  }else{}
  
  /* Configuration of Channel Control Register */ 
  UartRegs->CCR |= (((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
1000187a:	68fb      	ldr	r3, [r7, #12]
1000187c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                    (((uint32_t)Handle->Parity  << USIC_CH_CCR_PM_Pos) & \
1000187e:	687b      	ldr	r3, [r7, #4]
10001880:	7d9b      	ldrb	r3, [r3, #22]
10001882:	0219      	lsls	r1, r3, #8
10001884:	23c0      	movs	r3, #192	; 0xc0
10001886:	009b      	lsls	r3, r3, #2
10001888:	400b      	ands	r3, r1
							(((uint32_t)SHIFT_ONE << USIC_CH_RBCTR_LOF_Pos) & \
						   USIC_CH_RBCTR_LOF_Msk));
  }else{}
  
  /* Configuration of Channel Control Register */ 
  UartRegs->CCR |= (((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
1000188a:	4313      	orrs	r3, r2
1000188c:	2202      	movs	r2, #2
1000188e:	431a      	orrs	r2, r3
10001890:	68fb      	ldr	r3, [r7, #12]
10001892:	641a      	str	r2, [r3, #64]	; 0x40
                    (((uint32_t)Handle->Parity  << USIC_CH_CCR_PM_Pos) & \
                     USIC_CH_CCR_PM_Msk));

}
10001894:	46bd      	mov	sp, r7
10001896:	b004      	add	sp, #16
10001898:	bd80      	pop	{r7, pc}
1000189a:	46c0      	nop			; (mov r8, r8)
1000189c:	03ff0000 	.word	0x03ff0000

100018a0 <UART001_lConfigTXPin>:
 * @return  None <BR>
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/ 
void UART001_lConfigTXPin(const UART001_HandleType* Handle)
{
100018a0:	b590      	push	{r4, r7, lr}
100018a2:	b085      	sub	sp, #20
100018a4:	af00      	add	r7, sp, #0
100018a6:	6078      	str	r0, [r7, #4]
	uint32_t TempPortPin;

    /* set the TX portpin to '1' */
    Handle->PinHandle.TX_PortBase->OMR |= (uint32_t)SHIFT_ONE << \
100018a8:	687b      	ldr	r3, [r7, #4]
100018aa:	685b      	ldr	r3, [r3, #4]
100018ac:	687a      	ldr	r2, [r7, #4]
100018ae:	6852      	ldr	r2, [r2, #4]
100018b0:	6851      	ldr	r1, [r2, #4]
   		                                (uint32_t)Handle->PinHandle.TX_Pin;
100018b2:	687a      	ldr	r2, [r7, #4]
100018b4:	7a12      	ldrb	r2, [r2, #8]
void UART001_lConfigTXPin(const UART001_HandleType* Handle)
{
	uint32_t TempPortPin;

    /* set the TX portpin to '1' */
    Handle->PinHandle.TX_PortBase->OMR |= (uint32_t)SHIFT_ONE << \
100018b6:	2001      	movs	r0, #1
100018b8:	1c04      	adds	r4, r0, #0
100018ba:	4094      	lsls	r4, r2
100018bc:	1c22      	adds	r2, r4, #0
100018be:	430a      	orrs	r2, r1
100018c0:	605a      	str	r2, [r3, #4]
   		                                (uint32_t)Handle->PinHandle.TX_Pin;
     
	/* Configure TX portpin as Open-drain General-purpose output */
    TempPortPin = (uint32_t)Handle->PinHandle.TX_Pin;
100018c2:	687b      	ldr	r3, [r7, #4]
100018c4:	7a1b      	ldrb	r3, [r3, #8]
100018c6:	60fb      	str	r3, [r7, #12]

    if (FIRST_NIBBLE > TempPortPin)
100018c8:	68fb      	ldr	r3, [r7, #12]
100018ca:	2b03      	cmp	r3, #3
100018cc:	d80e      	bhi.n	100018ec <UART001_lConfigTXPin+0x4c>
    {
   	  Handle->PinHandle.TX_PortBase->IOCR0 |= \
100018ce:	687b      	ldr	r3, [r7, #4]
100018d0:	685b      	ldr	r3, [r3, #4]
100018d2:	687a      	ldr	r2, [r7, #4]
100018d4:	6852      	ldr	r2, [r2, #4]
100018d6:	6911      	ldr	r1, [r2, #16]
   			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
100018d8:	68fa      	ldr	r2, [r7, #12]
100018da:	00d2      	lsls	r2, r2, #3
    TempPortPin = (uint32_t)Handle->PinHandle.TX_Pin;

    if (FIRST_NIBBLE > TempPortPin)
    {
   	  Handle->PinHandle.TX_PortBase->IOCR0 |= \
   			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
100018dc:	3203      	adds	r2, #3
100018de:	2018      	movs	r0, #24
100018e0:	1c04      	adds	r4, r0, #0
100018e2:	4094      	lsls	r4, r2
100018e4:	1c22      	adds	r2, r4, #0
	/* Configure TX portpin as Open-drain General-purpose output */
    TempPortPin = (uint32_t)Handle->PinHandle.TX_Pin;

    if (FIRST_NIBBLE > TempPortPin)
    {
   	  Handle->PinHandle.TX_PortBase->IOCR0 |= \
100018e6:	430a      	orrs	r2, r1
100018e8:	611a      	str	r2, [r3, #16]
100018ea:	e046      	b.n	1000197a <UART001_lConfigTXPin+0xda>
   			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
    }
    else if ((FIRST_NIBBLE <= TempPortPin) && (SECOND_NIBBLE > TempPortPin))
100018ec:	68fb      	ldr	r3, [r7, #12]
100018ee:	2b03      	cmp	r3, #3
100018f0:	d914      	bls.n	1000191c <UART001_lConfigTXPin+0x7c>
100018f2:	68fb      	ldr	r3, [r7, #12]
100018f4:	2b07      	cmp	r3, #7
100018f6:	d811      	bhi.n	1000191c <UART001_lConfigTXPin+0x7c>
    {
	  TempPortPin = TempPortPin - FIRST_NIBBLE;
100018f8:	68fb      	ldr	r3, [r7, #12]
100018fa:	3b04      	subs	r3, #4
100018fc:	60fb      	str	r3, [r7, #12]
	  Handle->PinHandle.TX_PortBase->IOCR4 |= \
100018fe:	687b      	ldr	r3, [r7, #4]
10001900:	685b      	ldr	r3, [r3, #4]
10001902:	687a      	ldr	r2, [r7, #4]
10001904:	6852      	ldr	r2, [r2, #4]
10001906:	6951      	ldr	r1, [r2, #20]
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
10001908:	68fa      	ldr	r2, [r7, #12]
1000190a:	00d2      	lsls	r2, r2, #3
    }
    else if ((FIRST_NIBBLE <= TempPortPin) && (SECOND_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - FIRST_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR4 |= \
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
1000190c:	3203      	adds	r2, #3
1000190e:	2018      	movs	r0, #24
10001910:	1c04      	adds	r4, r0, #0
10001912:	4094      	lsls	r4, r2
10001914:	1c22      	adds	r2, r4, #0
							(TempPortPin * 8U)));
    }
    else if ((FIRST_NIBBLE <= TempPortPin) && (SECOND_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - FIRST_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR4 |= \
10001916:	430a      	orrs	r2, r1
10001918:	615a      	str	r2, [r3, #20]
1000191a:	e02e      	b.n	1000197a <UART001_lConfigTXPin+0xda>
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
    }
    else if ((SECOND_NIBBLE <= TempPortPin) && (THIRD_NIBBLE > TempPortPin))
1000191c:	68fb      	ldr	r3, [r7, #12]
1000191e:	2b07      	cmp	r3, #7
10001920:	d914      	bls.n	1000194c <UART001_lConfigTXPin+0xac>
10001922:	68fb      	ldr	r3, [r7, #12]
10001924:	2b0b      	cmp	r3, #11
10001926:	d811      	bhi.n	1000194c <UART001_lConfigTXPin+0xac>
    {
 	  TempPortPin = TempPortPin - SECOND_NIBBLE;
10001928:	68fb      	ldr	r3, [r7, #12]
1000192a:	3b08      	subs	r3, #8
1000192c:	60fb      	str	r3, [r7, #12]
 	  Handle->PinHandle.TX_PortBase->IOCR8 |= \
1000192e:	687b      	ldr	r3, [r7, #4]
10001930:	685b      	ldr	r3, [r3, #4]
10001932:	687a      	ldr	r2, [r7, #4]
10001934:	6852      	ldr	r2, [r2, #4]
10001936:	6991      	ldr	r1, [r2, #24]
 			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
10001938:	68fa      	ldr	r2, [r7, #12]
1000193a:	00d2      	lsls	r2, r2, #3
    }
    else if ((SECOND_NIBBLE <= TempPortPin) && (THIRD_NIBBLE > TempPortPin))
    {
 	  TempPortPin = TempPortPin - SECOND_NIBBLE;
 	  Handle->PinHandle.TX_PortBase->IOCR8 |= \
 			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
1000193c:	3203      	adds	r2, #3
1000193e:	2018      	movs	r0, #24
10001940:	1c04      	adds	r4, r0, #0
10001942:	4094      	lsls	r4, r2
10001944:	1c22      	adds	r2, r4, #0
							(TempPortPin * 8U)));
    }
    else if ((SECOND_NIBBLE <= TempPortPin) && (THIRD_NIBBLE > TempPortPin))
    {
 	  TempPortPin = TempPortPin - SECOND_NIBBLE;
 	  Handle->PinHandle.TX_PortBase->IOCR8 |= \
10001946:	430a      	orrs	r2, r1
10001948:	619a      	str	r2, [r3, #24]
1000194a:	e016      	b.n	1000197a <UART001_lConfigTXPin+0xda>
 			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
    }
    else if ((THIRD_NIBBLE <= TempPortPin) && (FOURTH_NIBBLE > TempPortPin))
1000194c:	68fb      	ldr	r3, [r7, #12]
1000194e:	2b0b      	cmp	r3, #11
10001950:	d913      	bls.n	1000197a <UART001_lConfigTXPin+0xda>
10001952:	68fb      	ldr	r3, [r7, #12]
10001954:	2b0f      	cmp	r3, #15
10001956:	d810      	bhi.n	1000197a <UART001_lConfigTXPin+0xda>
    {
	  TempPortPin = TempPortPin - THIRD_NIBBLE;
10001958:	68fb      	ldr	r3, [r7, #12]
1000195a:	3b0c      	subs	r3, #12
1000195c:	60fb      	str	r3, [r7, #12]
	  Handle->PinHandle.TX_PortBase->IOCR12 |= \
1000195e:	687b      	ldr	r3, [r7, #4]
10001960:	685b      	ldr	r3, [r3, #4]
10001962:	687a      	ldr	r2, [r7, #4]
10001964:	6852      	ldr	r2, [r2, #4]
10001966:	69d1      	ldr	r1, [r2, #28]
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
10001968:	68fa      	ldr	r2, [r7, #12]
1000196a:	00d2      	lsls	r2, r2, #3
    }
    else if ((THIRD_NIBBLE <= TempPortPin) && (FOURTH_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - THIRD_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR12 |= \
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
1000196c:	3203      	adds	r2, #3
1000196e:	2018      	movs	r0, #24
10001970:	1c04      	adds	r4, r0, #0
10001972:	4094      	lsls	r4, r2
10001974:	1c22      	adds	r2, r4, #0
							(TempPortPin * 8U)));
    }
    else if ((THIRD_NIBBLE <= TempPortPin) && (FOURTH_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - THIRD_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR12 |= \
10001976:	430a      	orrs	r2, r1
10001978:	61da      	str	r2, [r3, #28]
							(TempPortPin * 8U)));
    }
	else
	{}

}
1000197a:	46bd      	mov	sp, r7
1000197c:	b005      	add	sp, #20
1000197e:	bd90      	pop	{r4, r7, pc}

10001980 <UART001_labsRealType>:
 * 				 -ve float value if Number is >= 0.0 <BR>
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/
float UART001_labsRealType(float Number)
{
10001980:	b580      	push	{r7, lr}
10001982:	b084      	sub	sp, #16
10001984:	af00      	add	r7, sp, #0
10001986:	6078      	str	r0, [r7, #4]
   float return_value;
	if (Number < 0.0F){
10001988:	6878      	ldr	r0, [r7, #4]
1000198a:	2100      	movs	r1, #0
1000198c:	f001 fc72 	bl	10003274 <__aeabi_fcmplt>
10001990:	1c03      	adds	r3, r0, #0
10001992:	2b00      	cmp	r3, #0
10001994:	d005      	beq.n	100019a2 <UART001_labsRealType+0x22>
		return_value = -Number;
10001996:	687b      	ldr	r3, [r7, #4]
10001998:	2280      	movs	r2, #128	; 0x80
1000199a:	0612      	lsls	r2, r2, #24
1000199c:	4053      	eors	r3, r2
1000199e:	60fb      	str	r3, [r7, #12]
100019a0:	e001      	b.n	100019a6 <UART001_labsRealType+0x26>
	}
	else{
		return_value = Number;
100019a2:	687b      	ldr	r3, [r7, #4]
100019a4:	60fb      	str	r3, [r7, #12]
	}
	return return_value;
100019a6:	68fb      	ldr	r3, [r7, #12]
}
100019a8:	1c18      	adds	r0, r3, #0
100019aa:	46bd      	mov	sp, r7
100019ac:	b004      	add	sp, #16
100019ae:	bd80      	pop	{r7, pc}

100019b0 <UART001_lConfigureBaudRate>:
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/
void UART001_lConfigureBaudRate\
                              (uint32_t BaudRate,uint32_t* Pdiv,uint32_t* Step)
{
100019b0:	b5b0      	push	{r4, r5, r7, lr}
100019b2:	b0ae      	sub	sp, #184	; 0xb8
100019b4:	af00      	add	r7, sp, #0
100019b6:	60f8      	str	r0, [r7, #12]
100019b8:	60b9      	str	r1, [r7, #8]
100019ba:	607a      	str	r2, [r7, #4]
	uint32_t fdr_step = 0x00U;
100019bc:	2300      	movs	r3, #0
100019be:	20b4      	movs	r0, #180	; 0xb4
100019c0:	19c0      	adds	r0, r0, r7
100019c2:	6003      	str	r3, [r0, #0]
	uint32_t brg_pdiv = 0x00U;
100019c4:	2300      	movs	r3, #0
100019c6:	21b0      	movs	r1, #176	; 0xb0
100019c8:	19c9      	adds	r1, r1, r7
100019ca:	600b      	str	r3, [r1, #0]
	uint32_t divisor_in = BaudRate ;
100019cc:	68fb      	ldr	r3, [r7, #12]
100019ce:	22ac      	movs	r2, #172	; 0xac
100019d0:	19d2      	adds	r2, r2, r7
100019d2:	6013      	str	r3, [r2, #0]
	/* fPB / 1024 * (Brg_dctq + 1) */
	uint32_t dividend_in = 0U;
100019d4:	2300      	movs	r3, #0
100019d6:	20a8      	movs	r0, #168	; 0xa8
100019d8:	19c0      	adds	r0, r0, r7
100019da:	6003      	str	r3, [r0, #0]
	uint32_t divisor_array[4];
	uint32_t dividend_array[4];
	uint32_t div_array[4];
	uint32_t max, frac,divisor1,divisor2,dividend1,dividend2;
	uint32_t array_count,array_count_1,array_count_2;
	uint32_t do_while_break = 0U;
100019dc:	2300      	movs	r3, #0
100019de:	2188      	movs	r1, #136	; 0x88
100019e0:	19c9      	adds	r1, r1, r7
100019e2:	600b      	str	r3, [r1, #0]
	uint32_t temp = 0U;
100019e4:	2300      	movs	r3, #0
100019e6:	67fb      	str	r3, [r7, #124]	; 0x7c
	float div_factor;
	uint32_t loop_cnt;
	bool swapped;
	dividend_in = (uint32_t)((uint32_t)(UART001_CLOCK * 1000000)/ \
100019e8:	4be0      	ldr	r3, [pc, #896]	; (10001d6c <UART001_lConfigureBaudRate+0x3bc>)
100019ea:	22a8      	movs	r2, #168	; 0xa8
100019ec:	19d2      	adds	r2, r2, r7
100019ee:	6013      	str	r3, [r2, #0]
                    	(UART001_MAX_VALUE * UART001_DCTQ_VALUE)); 
	/* swap if divisor_in/dividend_in > max_divisor/max_dividend */
	div_factor = (float) divisor_in/(float) dividend_in;
100019f0:	23ac      	movs	r3, #172	; 0xac
100019f2:	19db      	adds	r3, r3, r7
100019f4:	6818      	ldr	r0, [r3, #0]
100019f6:	f002 f853 	bl	10003aa0 <__aeabi_ui2f>
100019fa:	1c04      	adds	r4, r0, #0
100019fc:	21a8      	movs	r1, #168	; 0xa8
100019fe:	19c9      	adds	r1, r1, r7
10001a00:	6808      	ldr	r0, [r1, #0]
10001a02:	f002 f84d 	bl	10003aa0 <__aeabi_ui2f>
10001a06:	1c03      	adds	r3, r0, #0
10001a08:	1c20      	adds	r0, r4, #0
10001a0a:	1c19      	adds	r1, r3, #0
10001a0c:	f001 fc7c 	bl	10003308 <__aeabi_fdiv>
10001a10:	1c03      	adds	r3, r0, #0
10001a12:	67bb      	str	r3, [r7, #120]	; 0x78
	if ( div_factor > 1.0F)
10001a14:	6fb8      	ldr	r0, [r7, #120]	; 0x78
10001a16:	21fe      	movs	r1, #254	; 0xfe
10001a18:	0589      	lsls	r1, r1, #22
10001a1a:	f001 fc3f 	bl	1000329c <__aeabi_fcmpgt>
10001a1e:	1c03      	adds	r3, r0, #0
10001a20:	2b00      	cmp	r3, #0
10001a22:	d017      	beq.n	10001a54 <UART001_lConfigureBaudRate+0xa4>
	{
		max = UART001_MAX_VALUE;
10001a24:	2380      	movs	r3, #128	; 0x80
10001a26:	00db      	lsls	r3, r3, #3
10001a28:	22a4      	movs	r2, #164	; 0xa4
10001a2a:	19d2      	adds	r2, r2, r7
10001a2c:	6013      	str	r3, [r2, #0]
		swapped = 1U;
10001a2e:	1c3b      	adds	r3, r7, #0
10001a30:	3383      	adds	r3, #131	; 0x83
10001a32:	2201      	movs	r2, #1
10001a34:	701a      	strb	r2, [r3, #0]
		temp = divisor_in;
10001a36:	20ac      	movs	r0, #172	; 0xac
10001a38:	19c0      	adds	r0, r0, r7
10001a3a:	6803      	ldr	r3, [r0, #0]
10001a3c:	67fb      	str	r3, [r7, #124]	; 0x7c
		divisor_in = dividend_in;
10001a3e:	21a8      	movs	r1, #168	; 0xa8
10001a40:	19c9      	adds	r1, r1, r7
10001a42:	680b      	ldr	r3, [r1, #0]
10001a44:	22ac      	movs	r2, #172	; 0xac
10001a46:	19d2      	adds	r2, r2, r7
10001a48:	6013      	str	r3, [r2, #0]
		dividend_in = temp;
10001a4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10001a4c:	20a8      	movs	r0, #168	; 0xa8
10001a4e:	19c0      	adds	r0, r0, r7
10001a50:	6003      	str	r3, [r0, #0]
10001a52:	e008      	b.n	10001a66 <UART001_lConfigureBaudRate+0xb6>
	}
	else
	{
		swapped = 0U;
10001a54:	1c3b      	adds	r3, r7, #0
10001a56:	3383      	adds	r3, #131	; 0x83
10001a58:	2200      	movs	r2, #0
10001a5a:	701a      	strb	r2, [r3, #0]
		max = UART001_MAX_VALUE;
10001a5c:	2380      	movs	r3, #128	; 0x80
10001a5e:	00db      	lsls	r3, r3, #3
10001a60:	21a4      	movs	r1, #164	; 0xa4
10001a62:	19c9      	adds	r1, r1, r7
10001a64:	600b      	str	r3, [r1, #0]
	}
	/*Init parameters*/
	loop_cnt = 0U;
10001a66:	2300      	movs	r3, #0
10001a68:	2284      	movs	r2, #132	; 0x84
10001a6a:	19d2      	adds	r2, r2, r7
10001a6c:	6013      	str	r3, [r2, #0]
	array_count = 0U;
10001a6e:	2300      	movs	r3, #0
10001a70:	2090      	movs	r0, #144	; 0x90
10001a72:	19c0      	adds	r0, r0, r7
10001a74:	6003      	str	r3, [r0, #0]
	array_count_1 = 0U;
10001a76:	2300      	movs	r3, #0
10001a78:	218c      	movs	r1, #140	; 0x8c
10001a7a:	19c9      	adds	r1, r1, r7
10001a7c:	600b      	str	r3, [r1, #0]
	divisor[0] = divisor_in;
10001a7e:	1c3b      	adds	r3, r7, #0
10001a80:	3360      	adds	r3, #96	; 0x60
10001a82:	20ac      	movs	r0, #172	; 0xac
10001a84:	19c0      	adds	r0, r0, r7
10001a86:	6802      	ldr	r2, [r0, #0]
10001a88:	601a      	str	r2, [r3, #0]
	remainder[0] = dividend_in;
10001a8a:	1c3b      	adds	r3, r7, #0
10001a8c:	3340      	adds	r3, #64	; 0x40
10001a8e:	21a8      	movs	r1, #168	; 0xa8
10001a90:	19c9      	adds	r1, r1, r7
10001a92:	680a      	ldr	r2, [r1, #0]
10001a94:	601a      	str	r2, [r3, #0]
	divisor_array[0] = 1U;
10001a96:	1c3b      	adds	r3, r7, #0
10001a98:	3330      	adds	r3, #48	; 0x30
10001a9a:	2201      	movs	r2, #1
10001a9c:	601a      	str	r2, [r3, #0]
	dividend_array[0] = 0U;
10001a9e:	1c3b      	adds	r3, r7, #0
10001aa0:	3320      	adds	r3, #32
10001aa2:	2200      	movs	r2, #0
10001aa4:	601a      	str	r2, [r3, #0]
	do {
			++loop_cnt;
10001aa6:	2284      	movs	r2, #132	; 0x84
10001aa8:	19d2      	adds	r2, r2, r7
10001aaa:	6813      	ldr	r3, [r2, #0]
10001aac:	3301      	adds	r3, #1
10001aae:	2084      	movs	r0, #132	; 0x84
10001ab0:	19c0      	adds	r0, r0, r7
10001ab2:	6003      	str	r3, [r0, #0]
			array_count_2 = array_count_1; /* on first loop is not used */
10001ab4:	218c      	movs	r1, #140	; 0x8c
10001ab6:	19c9      	adds	r1, r1, r7
10001ab8:	680b      	ldr	r3, [r1, #0]
10001aba:	677b      	str	r3, [r7, #116]	; 0x74
			array_count_1 = array_count;
10001abc:	2290      	movs	r2, #144	; 0x90
10001abe:	19d2      	adds	r2, r2, r7
10001ac0:	6813      	ldr	r3, [r2, #0]
10001ac2:	208c      	movs	r0, #140	; 0x8c
10001ac4:	19c0      	adds	r0, r0, r7
10001ac6:	6003      	str	r3, [r0, #0]
			array_count = loop_cnt % 4U;
10001ac8:	2184      	movs	r1, #132	; 0x84
10001aca:	19c9      	adds	r1, r1, r7
10001acc:	680a      	ldr	r2, [r1, #0]
10001ace:	2303      	movs	r3, #3
10001ad0:	4013      	ands	r3, r2
10001ad2:	2290      	movs	r2, #144	; 0x90
10001ad4:	19d2      	adds	r2, r2, r7
10001ad6:	6013      	str	r3, [r2, #0]
			dividend[array_count] = divisor[array_count_1];
10001ad8:	1c3b      	adds	r3, r7, #0
10001ada:	3360      	adds	r3, #96	; 0x60
10001adc:	208c      	movs	r0, #140	; 0x8c
10001ade:	19c0      	adds	r0, r0, r7
10001ae0:	6802      	ldr	r2, [r0, #0]
10001ae2:	0092      	lsls	r2, r2, #2
10001ae4:	58d1      	ldr	r1, [r2, r3]
10001ae6:	1c3b      	adds	r3, r7, #0
10001ae8:	3350      	adds	r3, #80	; 0x50
10001aea:	2090      	movs	r0, #144	; 0x90
10001aec:	19c0      	adds	r0, r0, r7
10001aee:	6802      	ldr	r2, [r0, #0]
10001af0:	0092      	lsls	r2, r2, #2
10001af2:	50d1      	str	r1, [r2, r3]
			
			divisor[array_count] = remainder[array_count_1];
10001af4:	1c3b      	adds	r3, r7, #0
10001af6:	3340      	adds	r3, #64	; 0x40
10001af8:	218c      	movs	r1, #140	; 0x8c
10001afa:	19c9      	adds	r1, r1, r7
10001afc:	680a      	ldr	r2, [r1, #0]
10001afe:	0092      	lsls	r2, r2, #2
10001b00:	58d1      	ldr	r1, [r2, r3]
10001b02:	1c3b      	adds	r3, r7, #0
10001b04:	3360      	adds	r3, #96	; 0x60
10001b06:	2090      	movs	r0, #144	; 0x90
10001b08:	19c0      	adds	r0, r0, r7
10001b0a:	6802      	ldr	r2, [r0, #0]
10001b0c:	0092      	lsls	r2, r2, #2
10001b0e:	50d1      	str	r1, [r2, r3]
			
			div_array[array_count] = \
			                       dividend[array_count] / divisor[array_count];
10001b10:	1c3b      	adds	r3, r7, #0
10001b12:	3350      	adds	r3, #80	; 0x50
10001b14:	2190      	movs	r1, #144	; 0x90
10001b16:	19c9      	adds	r1, r1, r7
10001b18:	680a      	ldr	r2, [r1, #0]
10001b1a:	0092      	lsls	r2, r2, #2
10001b1c:	58d2      	ldr	r2, [r2, r3]
10001b1e:	1c3b      	adds	r3, r7, #0
10001b20:	3360      	adds	r3, #96	; 0x60
10001b22:	2090      	movs	r0, #144	; 0x90
10001b24:	19c0      	adds	r0, r0, r7
10001b26:	6801      	ldr	r1, [r0, #0]
10001b28:	0089      	lsls	r1, r1, #2
10001b2a:	58cb      	ldr	r3, [r1, r3]
10001b2c:	1c10      	adds	r0, r2, #0
10001b2e:	1c19      	adds	r1, r3, #0
10001b30:	f001 fb3e 	bl	100031b0 <__aeabi_uidiv>
10001b34:	1c03      	adds	r3, r0, #0
10001b36:	1c19      	adds	r1, r3, #0
			array_count = loop_cnt % 4U;
			dividend[array_count] = divisor[array_count_1];
			
			divisor[array_count] = remainder[array_count_1];
			
			div_array[array_count] = \
10001b38:	1c3b      	adds	r3, r7, #0
10001b3a:	3310      	adds	r3, #16
10001b3c:	2090      	movs	r0, #144	; 0x90
10001b3e:	19c0      	adds	r0, r0, r7
10001b40:	6802      	ldr	r2, [r0, #0]
10001b42:	0092      	lsls	r2, r2, #2
10001b44:	50d1      	str	r1, [r2, r3]
			                       dividend[array_count] / divisor[array_count];
			
			remainder[array_count] = \
			                       dividend[array_count] % divisor[array_count];
10001b46:	1c3b      	adds	r3, r7, #0
10001b48:	3350      	adds	r3, #80	; 0x50
10001b4a:	2190      	movs	r1, #144	; 0x90
10001b4c:	19c9      	adds	r1, r1, r7
10001b4e:	680a      	ldr	r2, [r1, #0]
10001b50:	0092      	lsls	r2, r2, #2
10001b52:	58d2      	ldr	r2, [r2, r3]
10001b54:	1c3b      	adds	r3, r7, #0
10001b56:	3360      	adds	r3, #96	; 0x60
10001b58:	2090      	movs	r0, #144	; 0x90
10001b5a:	19c0      	adds	r0, r0, r7
10001b5c:	6801      	ldr	r1, [r0, #0]
10001b5e:	0089      	lsls	r1, r1, #2
10001b60:	58cb      	ldr	r3, [r1, r3]
10001b62:	1c10      	adds	r0, r2, #0
10001b64:	1c19      	adds	r1, r3, #0
10001b66:	f001 fb67 	bl	10003238 <__aeabi_uidivmod>
10001b6a:	1c0b      	adds	r3, r1, #0
10001b6c:	1c19      	adds	r1, r3, #0
			divisor[array_count] = remainder[array_count_1];
			
			div_array[array_count] = \
			                       dividend[array_count] / divisor[array_count];
			
			remainder[array_count] = \
10001b6e:	1c3b      	adds	r3, r7, #0
10001b70:	3340      	adds	r3, #64	; 0x40
10001b72:	2090      	movs	r0, #144	; 0x90
10001b74:	19c0      	adds	r0, r0, r7
10001b76:	6802      	ldr	r2, [r0, #0]
10001b78:	0092      	lsls	r2, r2, #2
10001b7a:	50d1      	str	r1, [r2, r3]
			                       dividend[array_count] % divisor[array_count];
			
			/* This executed only on first loop */
			if (loop_cnt == 1U)
10001b7c:	2184      	movs	r1, #132	; 0x84
10001b7e:	19c9      	adds	r1, r1, r7
10001b80:	680b      	ldr	r3, [r1, #0]
10001b82:	2b01      	cmp	r3, #1
10001b84:	d10a      	bne.n	10001b9c <UART001_lConfigureBaudRate+0x1ec>
			{ 
				divisor_array[1] = div_array[1];
10001b86:	1c3b      	adds	r3, r7, #0
10001b88:	3310      	adds	r3, #16
10001b8a:	685a      	ldr	r2, [r3, #4]
10001b8c:	1c3b      	adds	r3, r7, #0
10001b8e:	3330      	adds	r3, #48	; 0x30
10001b90:	605a      	str	r2, [r3, #4]
				dividend_array[1] = 1U;
10001b92:	1c3b      	adds	r3, r7, #0
10001b94:	3320      	adds	r3, #32
10001b96:	2201      	movs	r2, #1
10001b98:	605a      	str	r2, [r3, #4]
10001b9a:	e037      	b.n	10001c0c <UART001_lConfigureBaudRate+0x25c>
			}
			else
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
10001b9c:	1c3b      	adds	r3, r7, #0
10001b9e:	3310      	adds	r3, #16
10001ba0:	2090      	movs	r0, #144	; 0x90
10001ba2:	19c0      	adds	r0, r0, r7
10001ba4:	6802      	ldr	r2, [r0, #0]
10001ba6:	0092      	lsls	r2, r2, #2
10001ba8:	58d3      	ldr	r3, [r2, r3]
10001baa:	1c3a      	adds	r2, r7, #0
10001bac:	3230      	adds	r2, #48	; 0x30
10001bae:	208c      	movs	r0, #140	; 0x8c
10001bb0:	19c0      	adds	r0, r0, r7
10001bb2:	6801      	ldr	r1, [r0, #0]
10001bb4:	0089      	lsls	r1, r1, #2
10001bb6:	588a      	ldr	r2, [r1, r2]
10001bb8:	435a      	muls	r2, r3
				       divisor_array[array_count_2];
10001bba:	1c3b      	adds	r3, r7, #0
10001bbc:	3330      	adds	r3, #48	; 0x30
10001bbe:	6f79      	ldr	r1, [r7, #116]	; 0x74
10001bc0:	0089      	lsls	r1, r1, #2
10001bc2:	58cb      	ldr	r3, [r1, r3]
				dividend_array[1] = 1U;
			}
			else
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
10001bc4:	18d1      	adds	r1, r2, r3
				divisor_array[1] = div_array[1];
				dividend_array[1] = 1U;
			}
			else
			{
				divisor_array[array_count] = \
10001bc6:	1c3b      	adds	r3, r7, #0
10001bc8:	3330      	adds	r3, #48	; 0x30
10001bca:	2090      	movs	r0, #144	; 0x90
10001bcc:	19c0      	adds	r0, r0, r7
10001bce:	6802      	ldr	r2, [r0, #0]
10001bd0:	0092      	lsls	r2, r2, #2
10001bd2:	50d1      	str	r1, [r2, r3]
				      (div_array[array_count] * divisor_array[array_count_1]) + \
				       divisor_array[array_count_2];
				dividend_array[array_count] = \
				      (div_array[array_count] * dividend_array[array_count_1]) + \
10001bd4:	1c3b      	adds	r3, r7, #0
10001bd6:	3310      	adds	r3, #16
10001bd8:	2190      	movs	r1, #144	; 0x90
10001bda:	19c9      	adds	r1, r1, r7
10001bdc:	680a      	ldr	r2, [r1, #0]
10001bde:	0092      	lsls	r2, r2, #2
10001be0:	58d3      	ldr	r3, [r2, r3]
10001be2:	1c3a      	adds	r2, r7, #0
10001be4:	3220      	adds	r2, #32
10001be6:	208c      	movs	r0, #140	; 0x8c
10001be8:	19c0      	adds	r0, r0, r7
10001bea:	6801      	ldr	r1, [r0, #0]
10001bec:	0089      	lsls	r1, r1, #2
10001bee:	588a      	ldr	r2, [r1, r2]
10001bf0:	435a      	muls	r2, r3
				       dividend_array[array_count_2];
10001bf2:	1c3b      	adds	r3, r7, #0
10001bf4:	3320      	adds	r3, #32
10001bf6:	6f79      	ldr	r1, [r7, #116]	; 0x74
10001bf8:	0089      	lsls	r1, r1, #2
10001bfa:	58cb      	ldr	r3, [r1, r3]
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
				       divisor_array[array_count_2];
				dividend_array[array_count] = \
				      (div_array[array_count] * dividend_array[array_count_1]) + \
10001bfc:	18d1      	adds	r1, r2, r3
			else
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
				       divisor_array[array_count_2];
				dividend_array[array_count] = \
10001bfe:	1c3b      	adds	r3, r7, #0
10001c00:	3320      	adds	r3, #32
10001c02:	2090      	movs	r0, #144	; 0x90
10001c04:	19c0      	adds	r0, r0, r7
10001c06:	6802      	ldr	r2, [r0, #0]
10001c08:	0092      	lsls	r2, r2, #2
10001c0a:	50d1      	str	r1, [r2, r3]
				      (div_array[array_count] * dividend_array[array_count_1]) + \
				       dividend_array[array_count_2];
			}
			if (dividend_array[array_count] > max) 
10001c0c:	1c3b      	adds	r3, r7, #0
10001c0e:	3320      	adds	r3, #32
10001c10:	2190      	movs	r1, #144	; 0x90
10001c12:	19c9      	adds	r1, r1, r7
10001c14:	680a      	ldr	r2, [r1, #0]
10001c16:	0092      	lsls	r2, r2, #2
10001c18:	58d2      	ldr	r2, [r2, r3]
10001c1a:	20a4      	movs	r0, #164	; 0xa4
10001c1c:	19c0      	adds	r0, r0, r7
10001c1e:	6803      	ldr	r3, [r0, #0]
10001c20:	429a      	cmp	r2, r3
10001c22:	d800      	bhi.n	10001c26 <UART001_lConfigureBaudRate+0x276>
10001c24:	e0fd      	b.n	10001e22 <UART001_lConfigureBaudRate+0x472>
			{
				divisor1 = divisor_array[array_count_1];
10001c26:	1c3b      	adds	r3, r7, #0
10001c28:	3330      	adds	r3, #48	; 0x30
10001c2a:	218c      	movs	r1, #140	; 0x8c
10001c2c:	19c9      	adds	r1, r1, r7
10001c2e:	680a      	ldr	r2, [r1, #0]
10001c30:	0092      	lsls	r2, r2, #2
10001c32:	58d3      	ldr	r3, [r2, r3]
10001c34:	22a0      	movs	r2, #160	; 0xa0
10001c36:	19d2      	adds	r2, r2, r7
10001c38:	6013      	str	r3, [r2, #0]
				dividend1 = dividend_array[array_count_1];
10001c3a:	1c3b      	adds	r3, r7, #0
10001c3c:	3320      	adds	r3, #32
10001c3e:	208c      	movs	r0, #140	; 0x8c
10001c40:	19c0      	adds	r0, r0, r7
10001c42:	6802      	ldr	r2, [r0, #0]
10001c44:	0092      	lsls	r2, r2, #2
10001c46:	58d3      	ldr	r3, [r2, r3]
10001c48:	2198      	movs	r1, #152	; 0x98
10001c4a:	19c9      	adds	r1, r1, r7
10001c4c:	600b      	str	r3, [r1, #0]
				frac = (max - dividend_array[array_count_2]) / \
10001c4e:	1c3b      	adds	r3, r7, #0
10001c50:	3320      	adds	r3, #32
10001c52:	6f7a      	ldr	r2, [r7, #116]	; 0x74
10001c54:	0092      	lsls	r2, r2, #2
10001c56:	58d3      	ldr	r3, [r2, r3]
10001c58:	20a4      	movs	r0, #164	; 0xa4
10001c5a:	19c0      	adds	r0, r0, r7
10001c5c:	6802      	ldr	r2, [r0, #0]
10001c5e:	1ad2      	subs	r2, r2, r3
				                               dividend_array[array_count_1];
10001c60:	1c3b      	adds	r3, r7, #0
10001c62:	3320      	adds	r3, #32
10001c64:	208c      	movs	r0, #140	; 0x8c
10001c66:	19c0      	adds	r0, r0, r7
10001c68:	6801      	ldr	r1, [r0, #0]
10001c6a:	0089      	lsls	r1, r1, #2
10001c6c:	58cb      	ldr	r3, [r1, r3]
			}
			if (dividend_array[array_count] > max) 
			{
				divisor1 = divisor_array[array_count_1];
				dividend1 = dividend_array[array_count_1];
				frac = (max - dividend_array[array_count_2]) / \
10001c6e:	1c10      	adds	r0, r2, #0
10001c70:	1c19      	adds	r1, r3, #0
10001c72:	f001 fa9d 	bl	100031b0 <__aeabi_uidiv>
10001c76:	1c03      	adds	r3, r0, #0
10001c78:	673b      	str	r3, [r7, #112]	; 0x70
				                               dividend_array[array_count_1];
				divisor2 = (frac * divisor_array[array_count-1U]) + \
10001c7a:	2190      	movs	r1, #144	; 0x90
10001c7c:	19c9      	adds	r1, r1, r7
10001c7e:	680b      	ldr	r3, [r1, #0]
10001c80:	1e5a      	subs	r2, r3, #1
10001c82:	1c3b      	adds	r3, r7, #0
10001c84:	3330      	adds	r3, #48	; 0x30
10001c86:	0092      	lsls	r2, r2, #2
10001c88:	58d3      	ldr	r3, [r2, r3]
10001c8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
10001c8c:	435a      	muls	r2, r3
				                                divisor_array[array_count-2U];
10001c8e:	2090      	movs	r0, #144	; 0x90
10001c90:	19c0      	adds	r0, r0, r7
10001c92:	6803      	ldr	r3, [r0, #0]
10001c94:	1e99      	subs	r1, r3, #2
10001c96:	1c3b      	adds	r3, r7, #0
10001c98:	3330      	adds	r3, #48	; 0x30
10001c9a:	0089      	lsls	r1, r1, #2
10001c9c:	58cb      	ldr	r3, [r1, r3]
			{
				divisor1 = divisor_array[array_count_1];
				dividend1 = dividend_array[array_count_1];
				frac = (max - dividend_array[array_count_2]) / \
				                               dividend_array[array_count_1];
				divisor2 = (frac * divisor_array[array_count-1U]) + \
10001c9e:	18d3      	adds	r3, r2, r3
10001ca0:	219c      	movs	r1, #156	; 0x9c
10001ca2:	19c9      	adds	r1, r1, r7
10001ca4:	600b      	str	r3, [r1, #0]
				                                divisor_array[array_count-2U];
				dividend2 = (frac * dividend_array[array_count-1U]) + \
10001ca6:	2290      	movs	r2, #144	; 0x90
10001ca8:	19d2      	adds	r2, r2, r7
10001caa:	6813      	ldr	r3, [r2, #0]
10001cac:	1e5a      	subs	r2, r3, #1
10001cae:	1c3b      	adds	r3, r7, #0
10001cb0:	3320      	adds	r3, #32
10001cb2:	0092      	lsls	r2, r2, #2
10001cb4:	58d3      	ldr	r3, [r2, r3]
10001cb6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
10001cb8:	435a      	muls	r2, r3
				                               dividend_array[array_count_2];
10001cba:	1c3b      	adds	r3, r7, #0
10001cbc:	3320      	adds	r3, #32
10001cbe:	6f79      	ldr	r1, [r7, #116]	; 0x74
10001cc0:	0089      	lsls	r1, r1, #2
10001cc2:	58cb      	ldr	r3, [r1, r3]
				dividend1 = dividend_array[array_count_1];
				frac = (max - dividend_array[array_count_2]) / \
				                               dividend_array[array_count_1];
				divisor2 = (frac * divisor_array[array_count-1U]) + \
				                                divisor_array[array_count-2U];
				dividend2 = (frac * dividend_array[array_count-1U]) + \
10001cc4:	18d3      	adds	r3, r2, r3
10001cc6:	2094      	movs	r0, #148	; 0x94
10001cc8:	19c0      	adds	r0, r0, r7
10001cca:	6003      	str	r3, [r0, #0]
				                               dividend_array[array_count_2];
				/* Swap if required */
				if (swapped) {
10001ccc:	1c3b      	adds	r3, r7, #0
10001cce:	3383      	adds	r3, #131	; 0x83
10001cd0:	781b      	ldrb	r3, [r3, #0]
10001cd2:	2b00      	cmp	r3, #0
10001cd4:	d01b      	beq.n	10001d0e <UART001_lConfigureBaudRate+0x35e>
						/* Swap divisor1 and dividend1 */
						temp = divisor1;
10001cd6:	21a0      	movs	r1, #160	; 0xa0
10001cd8:	19c9      	adds	r1, r1, r7
10001cda:	680b      	ldr	r3, [r1, #0]
10001cdc:	67fb      	str	r3, [r7, #124]	; 0x7c
						divisor1 = dividend1;
10001cde:	2298      	movs	r2, #152	; 0x98
10001ce0:	19d2      	adds	r2, r2, r7
10001ce2:	6813      	ldr	r3, [r2, #0]
10001ce4:	20a0      	movs	r0, #160	; 0xa0
10001ce6:	19c0      	adds	r0, r0, r7
10001ce8:	6003      	str	r3, [r0, #0]
						dividend1 = temp;
10001cea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10001cec:	2198      	movs	r1, #152	; 0x98
10001cee:	19c9      	adds	r1, r1, r7
10001cf0:	600b      	str	r3, [r1, #0]
						/* Swap divisor2 and dividend2 */
						temp = divisor2;
10001cf2:	229c      	movs	r2, #156	; 0x9c
10001cf4:	19d2      	adds	r2, r2, r7
10001cf6:	6813      	ldr	r3, [r2, #0]
10001cf8:	67fb      	str	r3, [r7, #124]	; 0x7c
						divisor2 = dividend2;
10001cfa:	2094      	movs	r0, #148	; 0x94
10001cfc:	19c0      	adds	r0, r0, r7
10001cfe:	6803      	ldr	r3, [r0, #0]
10001d00:	219c      	movs	r1, #156	; 0x9c
10001d02:	19c9      	adds	r1, r1, r7
10001d04:	600b      	str	r3, [r1, #0]
						dividend2 = temp;
10001d06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10001d08:	2294      	movs	r2, #148	; 0x94
10001d0a:	19d2      	adds	r2, r2, r7
10001d0c:	6013      	str	r3, [r2, #0]
					}
				/* Remove if one of has divisor 0 */
				if ((dividend1 == 0U) || (divisor1 == 0U)) {
10001d0e:	2098      	movs	r0, #152	; 0x98
10001d10:	19c0      	adds	r0, r0, r7
10001d12:	6803      	ldr	r3, [r0, #0]
10001d14:	2b00      	cmp	r3, #0
10001d16:	d004      	beq.n	10001d22 <UART001_lConfigureBaudRate+0x372>
10001d18:	21a0      	movs	r1, #160	; 0xa0
10001d1a:	19c9      	adds	r1, r1, r7
10001d1c:	680b      	ldr	r3, [r1, #0]
10001d1e:	2b00      	cmp	r3, #0
10001d20:	d10c      	bne.n	10001d3c <UART001_lConfigureBaudRate+0x38c>
					fdr_step = divisor2;
10001d22:	229c      	movs	r2, #156	; 0x9c
10001d24:	19d2      	adds	r2, r2, r7
10001d26:	6813      	ldr	r3, [r2, #0]
10001d28:	20b4      	movs	r0, #180	; 0xb4
10001d2a:	19c0      	adds	r0, r0, r7
10001d2c:	6003      	str	r3, [r0, #0]
					brg_pdiv = dividend2;
10001d2e:	2194      	movs	r1, #148	; 0x94
10001d30:	19c9      	adds	r1, r1, r7
10001d32:	680b      	ldr	r3, [r1, #0]
10001d34:	22b0      	movs	r2, #176	; 0xb0
10001d36:	19d2      	adds	r2, r2, r7
10001d38:	6013      	str	r3, [r2, #0]
10001d3a:	e06d      	b.n	10001e18 <UART001_lConfigureBaudRate+0x468>
				}else if ((dividend2 == 0U) || (divisor2 == 0U)) {
10001d3c:	2094      	movs	r0, #148	; 0x94
10001d3e:	19c0      	adds	r0, r0, r7
10001d40:	6803      	ldr	r3, [r0, #0]
10001d42:	2b00      	cmp	r3, #0
10001d44:	d004      	beq.n	10001d50 <UART001_lConfigureBaudRate+0x3a0>
10001d46:	219c      	movs	r1, #156	; 0x9c
10001d48:	19c9      	adds	r1, r1, r7
10001d4a:	680b      	ldr	r3, [r1, #0]
10001d4c:	2b00      	cmp	r3, #0
10001d4e:	d10f      	bne.n	10001d70 <UART001_lConfigureBaudRate+0x3c0>
					fdr_step = divisor1;
10001d50:	22a0      	movs	r2, #160	; 0xa0
10001d52:	19d2      	adds	r2, r2, r7
10001d54:	6813      	ldr	r3, [r2, #0]
10001d56:	20b4      	movs	r0, #180	; 0xb4
10001d58:	19c0      	adds	r0, r0, r7
10001d5a:	6003      	str	r3, [r0, #0]
					brg_pdiv = dividend1;
10001d5c:	2198      	movs	r1, #152	; 0x98
10001d5e:	19c9      	adds	r1, r1, r7
10001d60:	680b      	ldr	r3, [r1, #0]
10001d62:	22b0      	movs	r2, #176	; 0xb0
10001d64:	19d2      	adds	r2, r2, r7
10001d66:	6013      	str	r3, [r2, #0]
10001d68:	e056      	b.n	10001e18 <UART001_lConfigureBaudRate+0x468>
10001d6a:	46c0      	nop			; (mov r8, r8)
10001d6c:	0000030d 	.word	0x0000030d
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
					    ((float) divisor1 / (float) dividend1 )) > \
10001d70:	23a0      	movs	r3, #160	; 0xa0
10001d72:	19db      	adds	r3, r3, r7
10001d74:	6818      	ldr	r0, [r3, #0]
10001d76:	f001 fe93 	bl	10003aa0 <__aeabi_ui2f>
10001d7a:	1c04      	adds	r4, r0, #0
10001d7c:	2198      	movs	r1, #152	; 0x98
10001d7e:	19c9      	adds	r1, r1, r7
10001d80:	6808      	ldr	r0, [r1, #0]
10001d82:	f001 fe8d 	bl	10003aa0 <__aeabi_ui2f>
10001d86:	1c03      	adds	r3, r0, #0
10001d88:	1c20      	adds	r0, r4, #0
10001d8a:	1c19      	adds	r1, r3, #0
10001d8c:	f001 fabc 	bl	10003308 <__aeabi_fdiv>
10001d90:	1c03      	adds	r3, r0, #0
				}else if ((dividend2 == 0U) || (divisor2 == 0U)) {
					fdr_step = divisor1;
					brg_pdiv = dividend1;
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
10001d92:	6fb8      	ldr	r0, [r7, #120]	; 0x78
10001d94:	1c19      	adds	r1, r3, #0
10001d96:	f001 fca9 	bl	100036ec <__aeabi_fsub>
10001d9a:	1c03      	adds	r3, r0, #0
10001d9c:	1c18      	adds	r0, r3, #0
10001d9e:	f7ff fdef 	bl	10001980 <UART001_labsRealType>
10001da2:	1c04      	adds	r4, r0, #0
					    ((float) divisor1 / (float) dividend1 )) > \
					    UART001_labsRealType(div_factor - \
					    ((float) divisor2 / (float) dividend2 ))) 
10001da4:	229c      	movs	r2, #156	; 0x9c
10001da6:	19d2      	adds	r2, r2, r7
10001da8:	6810      	ldr	r0, [r2, #0]
10001daa:	f001 fe79 	bl	10003aa0 <__aeabi_ui2f>
10001dae:	1c05      	adds	r5, r0, #0
10001db0:	2394      	movs	r3, #148	; 0x94
10001db2:	19db      	adds	r3, r3, r7
10001db4:	6818      	ldr	r0, [r3, #0]
10001db6:	f001 fe73 	bl	10003aa0 <__aeabi_ui2f>
10001dba:	1c03      	adds	r3, r0, #0
10001dbc:	1c28      	adds	r0, r5, #0
10001dbe:	1c19      	adds	r1, r3, #0
10001dc0:	f001 faa2 	bl	10003308 <__aeabi_fdiv>
10001dc4:	1c03      	adds	r3, r0, #0
					brg_pdiv = dividend1;
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
					    ((float) divisor1 / (float) dividend1 )) > \
					    UART001_labsRealType(div_factor - \
10001dc6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
10001dc8:	1c19      	adds	r1, r3, #0
10001dca:	f001 fc8f 	bl	100036ec <__aeabi_fsub>
10001dce:	1c03      	adds	r3, r0, #0
10001dd0:	1c18      	adds	r0, r3, #0
10001dd2:	f7ff fdd5 	bl	10001980 <UART001_labsRealType>
10001dd6:	1c03      	adds	r3, r0, #0
				}else if ((dividend2 == 0U) || (divisor2 == 0U)) {
					fdr_step = divisor1;
					brg_pdiv = dividend1;
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
10001dd8:	1c20      	adds	r0, r4, #0
10001dda:	1c19      	adds	r1, r3, #0
10001ddc:	f001 fa5e 	bl	1000329c <__aeabi_fcmpgt>
10001de0:	1c03      	adds	r3, r0, #0
10001de2:	2b00      	cmp	r3, #0
10001de4:	d00c      	beq.n	10001e00 <UART001_lConfigureBaudRate+0x450>
					    ((float) divisor1 / (float) dividend1 )) > \
					    UART001_labsRealType(div_factor - \
					    ((float) divisor2 / (float) dividend2 ))) 
					{
						fdr_step = divisor2;
10001de6:	209c      	movs	r0, #156	; 0x9c
10001de8:	19c0      	adds	r0, r0, r7
10001dea:	6803      	ldr	r3, [r0, #0]
10001dec:	21b4      	movs	r1, #180	; 0xb4
10001dee:	19c9      	adds	r1, r1, r7
10001df0:	600b      	str	r3, [r1, #0]
						brg_pdiv = dividend2;
10001df2:	2294      	movs	r2, #148	; 0x94
10001df4:	19d2      	adds	r2, r2, r7
10001df6:	6813      	ldr	r3, [r2, #0]
10001df8:	20b0      	movs	r0, #176	; 0xb0
10001dfa:	19c0      	adds	r0, r0, r7
10001dfc:	6003      	str	r3, [r0, #0]
10001dfe:	e00b      	b.n	10001e18 <UART001_lConfigureBaudRate+0x468>
					}else {
						fdr_step = divisor1;
10001e00:	21a0      	movs	r1, #160	; 0xa0
10001e02:	19c9      	adds	r1, r1, r7
10001e04:	680b      	ldr	r3, [r1, #0]
10001e06:	22b4      	movs	r2, #180	; 0xb4
10001e08:	19d2      	adds	r2, r2, r7
10001e0a:	6013      	str	r3, [r2, #0]
						brg_pdiv = dividend1;
10001e0c:	2098      	movs	r0, #152	; 0x98
10001e0e:	19c0      	adds	r0, r0, r7
10001e10:	6803      	ldr	r3, [r0, #0]
10001e12:	21b0      	movs	r1, #176	; 0xb0
10001e14:	19c9      	adds	r1, r1, r7
10001e16:	600b      	str	r3, [r1, #0]
					}
				}
				do_while_break = 0x05U;
10001e18:	2305      	movs	r3, #5
10001e1a:	2288      	movs	r2, #136	; 0x88
10001e1c:	19d2      	adds	r2, r2, r7
10001e1e:	6013      	str	r3, [r2, #0]
10001e20:	e033      	b.n	10001e8a <UART001_lConfigureBaudRate+0x4da>
			}
			else if (remainder[array_count]== 0U) 
10001e22:	1c3b      	adds	r3, r7, #0
10001e24:	3340      	adds	r3, #64	; 0x40
10001e26:	2090      	movs	r0, #144	; 0x90
10001e28:	19c0      	adds	r0, r0, r7
10001e2a:	6802      	ldr	r2, [r0, #0]
10001e2c:	0092      	lsls	r2, r2, #2
10001e2e:	58d3      	ldr	r3, [r2, r3]
10001e30:	2b00      	cmp	r3, #0
10001e32:	d12a      	bne.n	10001e8a <UART001_lConfigureBaudRate+0x4da>
			{
				fdr_step = divisor_array[array_count];
10001e34:	1c3b      	adds	r3, r7, #0
10001e36:	3330      	adds	r3, #48	; 0x30
10001e38:	2190      	movs	r1, #144	; 0x90
10001e3a:	19c9      	adds	r1, r1, r7
10001e3c:	680a      	ldr	r2, [r1, #0]
10001e3e:	0092      	lsls	r2, r2, #2
10001e40:	58d3      	ldr	r3, [r2, r3]
10001e42:	22b4      	movs	r2, #180	; 0xb4
10001e44:	19d2      	adds	r2, r2, r7
10001e46:	6013      	str	r3, [r2, #0]
				brg_pdiv = dividend_array[array_count];
10001e48:	1c3b      	adds	r3, r7, #0
10001e4a:	3320      	adds	r3, #32
10001e4c:	2090      	movs	r0, #144	; 0x90
10001e4e:	19c0      	adds	r0, r0, r7
10001e50:	6802      	ldr	r2, [r0, #0]
10001e52:	0092      	lsls	r2, r2, #2
10001e54:	58d3      	ldr	r3, [r2, r3]
10001e56:	21b0      	movs	r1, #176	; 0xb0
10001e58:	19c9      	adds	r1, r1, r7
10001e5a:	600b      	str	r3, [r1, #0]
				if (swapped)
10001e5c:	1c3b      	adds	r3, r7, #0
10001e5e:	3383      	adds	r3, #131	; 0x83
10001e60:	781b      	ldrb	r3, [r3, #0]
10001e62:	2b00      	cmp	r3, #0
10001e64:	d00d      	beq.n	10001e82 <UART001_lConfigureBaudRate+0x4d2>
				{
					/* Swap fdr_step and brg_pdiv */
					temp = fdr_step;
10001e66:	22b4      	movs	r2, #180	; 0xb4
10001e68:	19d2      	adds	r2, r2, r7
10001e6a:	6813      	ldr	r3, [r2, #0]
10001e6c:	67fb      	str	r3, [r7, #124]	; 0x7c
					fdr_step = brg_pdiv;
10001e6e:	20b0      	movs	r0, #176	; 0xb0
10001e70:	19c0      	adds	r0, r0, r7
10001e72:	6803      	ldr	r3, [r0, #0]
10001e74:	21b4      	movs	r1, #180	; 0xb4
10001e76:	19c9      	adds	r1, r1, r7
10001e78:	600b      	str	r3, [r1, #0]
					brg_pdiv = temp;
10001e7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10001e7c:	22b0      	movs	r2, #176	; 0xb0
10001e7e:	19d2      	adds	r2, r2, r7
10001e80:	6013      	str	r3, [r2, #0]
				}
				do_while_break = 0x05U;
10001e82:	2305      	movs	r3, #5
10001e84:	2088      	movs	r0, #136	; 0x88
10001e86:	19c0      	adds	r0, r0, r7
10001e88:	6003      	str	r3, [r0, #0]
			}
			else {
			  /* Do Nothing */
			}
		} while (do_while_break != 0x05U);
10001e8a:	2188      	movs	r1, #136	; 0x88
10001e8c:	19c9      	adds	r1, r1, r7
10001e8e:	680b      	ldr	r3, [r1, #0]
10001e90:	2b05      	cmp	r3, #5
10001e92:	d000      	beq.n	10001e96 <UART001_lConfigureBaudRate+0x4e6>
10001e94:	e607      	b.n	10001aa6 <UART001_lConfigureBaudRate+0xf6>

	if(fdr_step >= UART001_MAX_VALUE)
10001e96:	23b4      	movs	r3, #180	; 0xb4
10001e98:	19db      	adds	r3, r3, r7
10001e9a:	681a      	ldr	r2, [r3, #0]
10001e9c:	4b0a      	ldr	r3, [pc, #40]	; (10001ec8 <UART001_lConfigureBaudRate+0x518>)
10001e9e:	429a      	cmp	r2, r3
10001ea0:	d903      	bls.n	10001eaa <UART001_lConfigureBaudRate+0x4fa>
	{
	   fdr_step = 1023U;
10001ea2:	4b09      	ldr	r3, [pc, #36]	; (10001ec8 <UART001_lConfigureBaudRate+0x518>)
10001ea4:	20b4      	movs	r0, #180	; 0xb4
10001ea6:	19c0      	adds	r0, r0, r7
10001ea8:	6003      	str	r3, [r0, #0]
	}

	*Step = fdr_step;
10001eaa:	687b      	ldr	r3, [r7, #4]
10001eac:	21b4      	movs	r1, #180	; 0xb4
10001eae:	19c9      	adds	r1, r1, r7
10001eb0:	680a      	ldr	r2, [r1, #0]
10001eb2:	601a      	str	r2, [r3, #0]

	*Pdiv = brg_pdiv - 1U;
10001eb4:	22b0      	movs	r2, #176	; 0xb0
10001eb6:	19d2      	adds	r2, r2, r7
10001eb8:	6813      	ldr	r3, [r2, #0]
10001eba:	1e5a      	subs	r2, r3, #1
10001ebc:	68bb      	ldr	r3, [r7, #8]
10001ebe:	601a      	str	r2, [r3, #0]
}
10001ec0:	46bd      	mov	sp, r7
10001ec2:	b02e      	add	sp, #184	; 0xb8
10001ec4:	bdb0      	pop	{r4, r5, r7, pc}
10001ec6:	46c0      	nop			; (mov r8, r8)
10001ec8:	000003ff 	.word	0x000003ff

10001ecc <UART001_Init>:
 *
 * <b>Reentrant: No </b><BR>
 *
 ******************************************************************************/
void UART001_Init(void)
{
10001ecc:	b580      	push	{r7, lr}
10001ece:	b082      	sub	sp, #8
10001ed0:	af00      	add	r7, sp, #0
    #if (__TARGET_DEVICE__ != XMC45)
	#if ((__TARGET_DEVICE__ == XMC13) || \
	     (__TARGET_DEVICE__ == XMC12) || \
	     (__TARGET_DEVICE__ == XMC11))
	  /* Disable the USIC0/USIC1 clock gating for XMC1000 devices */	     
	  SCU_GENERAL->PASSWD = 0x000000C0UL;
10001ed2:	4b1d      	ldr	r3, [pc, #116]	; (10001f48 <UART001_Init+0x7c>)
10001ed4:	22c0      	movs	r2, #192	; 0xc0
10001ed6:	625a      	str	r2, [r3, #36]	; 0x24
	  WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, \
10001ed8:	4b1c      	ldr	r3, [pc, #112]	; (10001f4c <UART001_Init+0x80>)
10001eda:	4a1c      	ldr	r2, [pc, #112]	; (10001f4c <UART001_Init+0x80>)
10001edc:	6812      	ldr	r2, [r2, #0]
10001ede:	491c      	ldr	r1, [pc, #112]	; (10001f50 <UART001_Init+0x84>)
10001ee0:	430a      	orrs	r2, r1
10001ee2:	601a      	str	r2, [r3, #0]
	                                SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);

	  #if defined(UART001_PER0_USIC0_ENABLED)
	  SET_BIT(SCU_CLK->CGATCLR0, SCU_CLK_CGATCLR0_USIC0_Pos);
10001ee4:	4b19      	ldr	r3, [pc, #100]	; (10001f4c <UART001_Init+0x80>)
10001ee6:	4a19      	ldr	r2, [pc, #100]	; (10001f4c <UART001_Init+0x80>)
10001ee8:	6912      	ldr	r2, [r2, #16]
10001eea:	2108      	movs	r1, #8
10001eec:	430a      	orrs	r2, r1
10001eee:	611a      	str	r2, [r3, #16]
      #endif
      #if defined(UART001_PER1_USIC1_ENABLED)
	  SET_BIT(SCU_CLK->CGATCLR1, SCU_CLK_CGATCLR1_USIC1_Pos);
	  #endif
	  while ((SCU_CLK->CLKCR)&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10001ef0:	46c0      	nop			; (mov r8, r8)
10001ef2:	4b16      	ldr	r3, [pc, #88]	; (10001f4c <UART001_Init+0x80>)
10001ef4:	681a      	ldr	r2, [r3, #0]
10001ef6:	2380      	movs	r3, #128	; 0x80
10001ef8:	05db      	lsls	r3, r3, #23
10001efa:	4013      	ands	r3, r2
10001efc:	d1f9      	bne.n	10001ef2 <UART001_Init+0x26>
	  {
	  	;
	  }
	  SCU_GENERAL->PASSWD = 0x000000C3UL;
10001efe:	4b12      	ldr	r3, [pc, #72]	; (10001f48 <UART001_Init+0x7c>)
10001f00:	22c3      	movs	r2, #195	; 0xc3
10001f02:	625a      	str	r2, [r3, #36]	; 0x24
   #if defined(UART001_PER1_USIC2_ENABLED)
	  RESET001_DeassertReset(PER1_USIC2); 
   #endif 
   #endif  
	  
   for (LoopIndex = (uint32_t)0; LoopIndex < (uint32_t)UART001_NUM_HANDLES; \
10001f04:	2300      	movs	r3, #0
10001f06:	607b      	str	r3, [r7, #4]
10001f08:	e017      	b.n	10001f3a <UART001_Init+0x6e>
	                           LoopIndex++)
   {
	  if (UART001_HandleArray[LoopIndex]->Mode == UART_HALFDUPLEX)
10001f0a:	4b12      	ldr	r3, [pc, #72]	; (10001f54 <UART001_Init+0x88>)
10001f0c:	687a      	ldr	r2, [r7, #4]
10001f0e:	0092      	lsls	r2, r2, #2
10001f10:	58d3      	ldr	r3, [r2, r3]
10001f12:	7d1b      	ldrb	r3, [r3, #20]
10001f14:	2b01      	cmp	r3, #1
10001f16:	d106      	bne.n	10001f26 <UART001_Init+0x5a>
	  {
	   /*Configure TX Pin in Open-drain mode to allow the Wired-AND connection*/
		UART001_lConfigTXPin(UART001_HandleArray[LoopIndex]);
10001f18:	4b0e      	ldr	r3, [pc, #56]	; (10001f54 <UART001_Init+0x88>)
10001f1a:	687a      	ldr	r2, [r7, #4]
10001f1c:	0092      	lsls	r2, r2, #2
10001f1e:	58d3      	ldr	r3, [r2, r3]
10001f20:	1c18      	adds	r0, r3, #0
10001f22:	f7ff fcbd 	bl	100018a0 <UART001_lConfigTXPin>
	  }
	  
	  UART001_lInit(UART001_HandleArray[LoopIndex]);
10001f26:	4b0b      	ldr	r3, [pc, #44]	; (10001f54 <UART001_Init+0x88>)
10001f28:	687a      	ldr	r2, [r7, #4]
10001f2a:	0092      	lsls	r2, r2, #2
10001f2c:	58d3      	ldr	r3, [r2, r3]
10001f2e:	1c18      	adds	r0, r3, #0
10001f30:	f7ff fbdc 	bl	100016ec <UART001_lInit>
	  RESET001_DeassertReset(PER1_USIC2); 
   #endif 
   #endif  
	  
   for (LoopIndex = (uint32_t)0; LoopIndex < (uint32_t)UART001_NUM_HANDLES; \
	                           LoopIndex++)
10001f34:	687b      	ldr	r3, [r7, #4]
10001f36:	3301      	adds	r3, #1
10001f38:	607b      	str	r3, [r7, #4]
   #if defined(UART001_PER1_USIC2_ENABLED)
	  RESET001_DeassertReset(PER1_USIC2); 
   #endif 
   #endif  
	  
   for (LoopIndex = (uint32_t)0; LoopIndex < (uint32_t)UART001_NUM_HANDLES; \
10001f3a:	687b      	ldr	r3, [r7, #4]
10001f3c:	2b00      	cmp	r3, #0
10001f3e:	d0e4      	beq.n	10001f0a <UART001_Init+0x3e>
	  }
	  
	  UART001_lInit(UART001_HandleArray[LoopIndex]);
   }
   
}
10001f40:	46bd      	mov	sp, r7
10001f42:	b002      	add	sp, #8
10001f44:	bd80      	pop	{r7, pc}
10001f46:	46c0      	nop			; (mov r8, r8)
10001f48:	40010000 	.word	0x40010000
10001f4c:	40010300 	.word	0x40010300
10001f50:	3ff00000 	.word	0x3ff00000
10001f54:	20000a90 	.word	0x20000a90

10001f58 <UART001_DeInit>:
 *
 * <b>Reentrant: No </b><BR>
 *
 ******************************************************************************/
 void  UART001_DeInit (const UART001_HandleType* Handle)
{
10001f58:	b580      	push	{r7, lr}
10001f5a:	b082      	sub	sp, #8
10001f5c:	af00      	add	r7, sp, #0
10001f5e:	6078      	str	r0, [r7, #4]
  /* <<<DD_UART001_API_2>>> */
  /* Place holder function */      
}
10001f60:	46bd      	mov	sp, r7
10001f62:	b002      	add	sp, #8
10001f64:	bd80      	pop	{r7, pc}
10001f66:	46c0      	nop			; (mov r8, r8)

10001f68 <UART001_Configure>:
  const UART001_HandleType* Handle,
  uint32_t BaudRate,
  UART_ParityType Parity,
  UART_StopBitType Stopbit
)
{
10001f68:	b580      	push	{r7, lr}
10001f6a:	b08a      	sub	sp, #40	; 0x28
10001f6c:	af00      	add	r7, sp, #0
10001f6e:	60f8      	str	r0, [r7, #12]
10001f70:	60b9      	str	r1, [r7, #8]
10001f72:	1c11      	adds	r1, r2, #0
10001f74:	1c1a      	adds	r2, r3, #0
10001f76:	1dfb      	adds	r3, r7, #7
10001f78:	7019      	strb	r1, [r3, #0]
10001f7a:	1dbb      	adds	r3, r7, #6
10001f7c:	701a      	strb	r2, [r3, #0]
   uint32_t Brg_Pdiv = 0x00U;
10001f7e:	2300      	movs	r3, #0
10001f80:	617b      	str	r3, [r7, #20]
   uint32_t Fdr_Step = 0x00U;
10001f82:	2300      	movs	r3, #0
10001f84:	613b      	str	r3, [r7, #16]
   uint32_t TXIDLE_status;
   uint32_t RXIDLE_status;
   USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
10001f86:	68fb      	ldr	r3, [r7, #12]
10001f88:	681b      	ldr	r3, [r3, #0]
10001f8a:	623b      	str	r3, [r7, #32]
   status_t Status = (status_t)UART001_ERROR;
10001f8c:	2305      	movs	r3, #5
10001f8e:	627b      	str	r3, [r7, #36]	; 0x24
   
   /* <<<DD_UART001_API_3>>>*/

   TXIDLE_status = (uint32_t)\
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_TXIDLE_Msk, \
10001f90:	6a3b      	ldr	r3, [r7, #32]
10001f92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
   status_t Status = (status_t)UART001_ERROR;
   
   /* <<<DD_UART001_API_3>>>*/

   TXIDLE_status = (uint32_t)\
10001f94:	2301      	movs	r3, #1
10001f96:	4013      	ands	r3, r2
10001f98:	61fb      	str	r3, [r7, #28]
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_TXIDLE_Msk, \
	                       USIC_CH_PSR_ASCMode_TXIDLE_Pos);

   RXIDLE_status = (uint32_t)\
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_RXIDLE_Msk, \
10001f9a:	6a3b      	ldr	r3, [r7, #32]
10001f9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
10001f9e:	2302      	movs	r3, #2
10001fa0:	4013      	ands	r3, r2

   TXIDLE_status = (uint32_t)\
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_TXIDLE_Msk, \
	                       USIC_CH_PSR_ASCMode_TXIDLE_Pos);

   RXIDLE_status = (uint32_t)\
10001fa2:	085b      	lsrs	r3, r3, #1
10001fa4:	61bb      	str	r3, [r7, #24]
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_RXIDLE_Msk, \
	                       USIC_CH_PSR_ASCMode_RXIDLE_Pos);
   if(( TXIDLE_status & RXIDLE_status) == 0x01U)
10001fa6:	69fb      	ldr	r3, [r7, #28]
10001fa8:	69ba      	ldr	r2, [r7, #24]
10001faa:	4013      	ands	r3, r2
10001fac:	2b01      	cmp	r3, #1
10001fae:	d156      	bne.n	1000205e <UART001_Configure+0xf6>
    {
      /* Disable UART mode before configuring all USIC registers to avoid 
       * unintended edges */ 
      UartRegs->CCR &= ~( ((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk)));  
10001fb0:	6a3b      	ldr	r3, [r7, #32]
10001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001fb4:	2202      	movs	r2, #2
10001fb6:	1c19      	adds	r1, r3, #0
10001fb8:	4391      	bics	r1, r2
10001fba:	1c0a      	adds	r2, r1, #0
10001fbc:	6a3b      	ldr	r3, [r7, #32]
10001fbe:	641a      	str	r2, [r3, #64]	; 0x40
	  
      /* Configuration of USIC Channel Fractional Divider */
      UART001_lConfigureBaudRate(BaudRate,&Brg_Pdiv,&Fdr_Step);
10001fc0:	68b9      	ldr	r1, [r7, #8]
10001fc2:	1c3a      	adds	r2, r7, #0
10001fc4:	3214      	adds	r2, #20
10001fc6:	1c3b      	adds	r3, r7, #0
10001fc8:	3310      	adds	r3, #16
10001fca:	1c08      	adds	r0, r1, #0
10001fcc:	1c11      	adds	r1, r2, #0
10001fce:	1c1a      	adds	r2, r3, #0
10001fd0:	f7ff fcee 	bl	100019b0 <UART001_lConfigureBaudRate>

      /* Step value: 0x3FF */
      UartRegs->FDR &= ~(USIC_CH_FDR_STEP_Msk);
10001fd4:	6a3b      	ldr	r3, [r7, #32]
10001fd6:	691b      	ldr	r3, [r3, #16]
10001fd8:	0a9b      	lsrs	r3, r3, #10
10001fda:	029a      	lsls	r2, r3, #10
10001fdc:	6a3b      	ldr	r3, [r7, #32]
10001fde:	611a      	str	r2, [r3, #16]
      UartRegs->FDR |= ( Fdr_Step & USIC_CH_FDR_STEP_Msk);
10001fe0:	6a3b      	ldr	r3, [r7, #32]
10001fe2:	691a      	ldr	r2, [r3, #16]
10001fe4:	693b      	ldr	r3, [r7, #16]
10001fe6:	059b      	lsls	r3, r3, #22
10001fe8:	0d9b      	lsrs	r3, r3, #22
10001fea:	431a      	orrs	r2, r3
10001fec:	6a3b      	ldr	r3, [r7, #32]
10001fee:	611a      	str	r2, [r3, #16]
              
      /* The PreDivider for CTQ, PCTQ = 0  */
      /* The Denominator for CTQ, DCTQ = 16 */

      UartRegs->BRG &= ~(USIC_CH_BRG_PDIV_Msk);
10001ff0:	6a3b      	ldr	r3, [r7, #32]
10001ff2:	695a      	ldr	r2, [r3, #20]
10001ff4:	4b1d      	ldr	r3, [pc, #116]	; (1000206c <UART001_Configure+0x104>)
10001ff6:	401a      	ands	r2, r3
10001ff8:	6a3b      	ldr	r3, [r7, #32]
10001ffa:	615a      	str	r2, [r3, #20]
      UartRegs->BRG |= ((((uint32_t)Brg_Pdiv  << USIC_CH_BRG_PDIV_Pos) \
10001ffc:	6a3b      	ldr	r3, [r7, #32]
10001ffe:	695a      	ldr	r2, [r3, #20]
10002000:	697b      	ldr	r3, [r7, #20]
10002002:	0419      	lsls	r1, r3, #16
    		                                          &  USIC_CH_BRG_PDIV_Msk));
10002004:	4b1a      	ldr	r3, [pc, #104]	; (10002070 <UART001_Configure+0x108>)
10002006:	400b      	ands	r3, r1
              
      /* The PreDivider for CTQ, PCTQ = 0  */
      /* The Denominator for CTQ, DCTQ = 16 */

      UartRegs->BRG &= ~(USIC_CH_BRG_PDIV_Msk);
      UartRegs->BRG |= ((((uint32_t)Brg_Pdiv  << USIC_CH_BRG_PDIV_Pos) \
10002008:	431a      	orrs	r2, r3
1000200a:	6a3b      	ldr	r3, [r7, #32]
1000200c:	615a      	str	r2, [r3, #20]
    		                                          &  USIC_CH_BRG_PDIV_Msk));

      /* Configure StopBit */
      UartRegs->PCR_ASCMode &= ~(USIC_CH_PCR_ASCMode_STPB_Msk);
1000200e:	6a3b      	ldr	r3, [r7, #32]
10002010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002012:	2202      	movs	r2, #2
10002014:	1c19      	adds	r1, r3, #0
10002016:	4391      	bics	r1, r2
10002018:	1c0a      	adds	r2, r1, #0
1000201a:	6a3b      	ldr	r3, [r7, #32]
1000201c:	63da      	str	r2, [r3, #60]	; 0x3c
      UartRegs->PCR_ASCMode |= \
1000201e:	6a3b      	ldr	r3, [r7, #32]
10002020:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                      (((uint32_t)Stopbit << USIC_CH_PCR_ASCMode_STPB_Pos) & \
10002022:	1dbb      	adds	r3, r7, #6
10002024:	781b      	ldrb	r3, [r3, #0]
10002026:	0059      	lsls	r1, r3, #1
10002028:	2302      	movs	r3, #2
1000202a:	400b      	ands	r3, r1
      UartRegs->BRG |= ((((uint32_t)Brg_Pdiv  << USIC_CH_BRG_PDIV_Pos) \
    		                                          &  USIC_CH_BRG_PDIV_Msk));

      /* Configure StopBit */
      UartRegs->PCR_ASCMode &= ~(USIC_CH_PCR_ASCMode_STPB_Msk);
      UartRegs->PCR_ASCMode |= \
1000202c:	431a      	orrs	r2, r3
1000202e:	6a3b      	ldr	r3, [r7, #32]
10002030:	63da      	str	r2, [r3, #60]	; 0x3c
                      (((uint32_t)Stopbit << USIC_CH_PCR_ASCMode_STPB_Pos) & \
                       USIC_CH_PCR_ASCMode_STPB_Msk);
          
      /* Configure Parity*/
      UartRegs->CCR &= ~(USIC_CH_CCR_PM_Msk);
10002032:	6a3b      	ldr	r3, [r7, #32]
10002034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10002036:	4b0f      	ldr	r3, [pc, #60]	; (10002074 <UART001_Configure+0x10c>)
10002038:	401a      	ands	r2, r3
1000203a:	6a3b      	ldr	r3, [r7, #32]
1000203c:	641a      	str	r2, [r3, #64]	; 0x40
      UartRegs->CCR |= (((UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
1000203e:	6a3b      	ldr	r3, [r7, #32]
10002040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                        (((uint32_t)Parity  << USIC_CH_CCR_PM_Pos) & \
10002042:	1dfb      	adds	r3, r7, #7
10002044:	781b      	ldrb	r3, [r3, #0]
10002046:	0219      	lsls	r1, r3, #8
10002048:	23c0      	movs	r3, #192	; 0xc0
1000204a:	009b      	lsls	r3, r3, #2
1000204c:	400b      	ands	r3, r1
                      (((uint32_t)Stopbit << USIC_CH_PCR_ASCMode_STPB_Pos) & \
                       USIC_CH_PCR_ASCMode_STPB_Msk);
          
      /* Configure Parity*/
      UartRegs->CCR &= ~(USIC_CH_CCR_PM_Msk);
      UartRegs->CCR |= (((UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
1000204e:	4313      	orrs	r3, r2
10002050:	2202      	movs	r2, #2
10002052:	431a      	orrs	r2, r3
10002054:	6a3b      	ldr	r3, [r7, #32]
10002056:	641a      	str	r2, [r3, #64]	; 0x40
                        (((uint32_t)Parity  << USIC_CH_CCR_PM_Pos) & \
                                                       USIC_CH_CCR_PM_Msk));

      Status = (status_t)DAVEApp_SUCCESS;
10002058:	2300      	movs	r3, #0
1000205a:	627b      	str	r3, [r7, #36]	; 0x24
1000205c:	e001      	b.n	10002062 <UART001_Configure+0xfa>
    }
    else
    {
      Status = (status_t)UART001_BUSY;
1000205e:	2303      	movs	r3, #3
10002060:	627b      	str	r3, [r7, #36]	; 0x24
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Status), &Status);
    }
  
  return Status;
10002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
10002064:	1c18      	adds	r0, r3, #0
10002066:	46bd      	mov	sp, r7
10002068:	b00a      	add	sp, #40	; 0x28
1000206a:	bd80      	pop	{r7, pc}
1000206c:	fc00ffff 	.word	0xfc00ffff
10002070:	03ff0000 	.word	0x03ff0000
10002074:	fffffcff 	.word	0xfffffcff

10002078 <UART001_ReadDataMultiple>:
(
  const UART001_HandleType* Handle,
  uint16_t* DataPtr,
  uint32_t Count
)
{ 
10002078:	b580      	push	{r7, lr}
1000207a:	b086      	sub	sp, #24
1000207c:	af00      	add	r7, sp, #0
1000207e:	60f8      	str	r0, [r7, #12]
10002080:	60b9      	str	r1, [r7, #8]
10002082:	607a      	str	r2, [r7, #4]
  uint32_t ReadCount = 0x00U;
10002084:	2300      	movs	r3, #0
10002086:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
10002088:	68fb      	ldr	r3, [r7, #12]
1000208a:	681b      	ldr	r3, [r3, #0]
1000208c:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
1000208e:	68fb      	ldr	r3, [r7, #12]
10002090:	7fdb      	ldrb	r3, [r3, #31]
10002092:	2b00      	cmp	r3, #0
10002094:	d01c      	beq.n	100020d0 <UART001_ReadDataMultiple+0x58>
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
10002096:	e00f      	b.n	100020b8 <UART001_ReadDataMultiple+0x40>
	  {
		*DataPtr = (uint16_t)UartRegs->OUTR;
10002098:	693a      	ldr	r2, [r7, #16]
1000209a:	238e      	movs	r3, #142	; 0x8e
1000209c:	005b      	lsls	r3, r3, #1
1000209e:	58d3      	ldr	r3, [r2, r3]
100020a0:	b29a      	uxth	r2, r3
100020a2:	68bb      	ldr	r3, [r7, #8]
100020a4:	801a      	strh	r2, [r3, #0]
		Count--;
100020a6:	687b      	ldr	r3, [r7, #4]
100020a8:	3b01      	subs	r3, #1
100020aa:	607b      	str	r3, [r7, #4]
		ReadCount++;
100020ac:	697b      	ldr	r3, [r7, #20]
100020ae:	3301      	adds	r3, #1
100020b0:	617b      	str	r3, [r7, #20]
		DataPtr++;
100020b2:	68bb      	ldr	r3, [r7, #8]
100020b4:	3302      	adds	r3, #2
100020b6:	60bb      	str	r3, [r7, #8]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
100020b8:	693a      	ldr	r2, [r7, #16]
100020ba:	238a      	movs	r3, #138	; 0x8a
100020bc:	005b      	lsls	r3, r3, #1
100020be:	58d2      	ldr	r2, [r2, r3]
100020c0:	2308      	movs	r3, #8
100020c2:	4013      	ands	r3, r2
100020c4:	08db      	lsrs	r3, r3, #3
100020c6:	d10b      	bne.n	100020e0 <UART001_ReadDataMultiple+0x68>
100020c8:	687b      	ldr	r3, [r7, #4]
100020ca:	2b00      	cmp	r3, #0
100020cc:	d1e4      	bne.n	10002098 <UART001_ReadDataMultiple+0x20>
100020ce:	e007      	b.n	100020e0 <UART001_ReadDataMultiple+0x68>
	  }
  }
  else
  {
	  /* If FIFO is disabled read data from standard receive buffer */
	  *DataPtr = (uint16_t)UartRegs->RBUF;
100020d0:	693b      	ldr	r3, [r7, #16]
100020d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100020d4:	b29a      	uxth	r2, r3
100020d6:	68bb      	ldr	r3, [r7, #8]
100020d8:	801a      	strh	r2, [r3, #0]
	  ReadCount++;
100020da:	697b      	ldr	r3, [r7, #20]
100020dc:	3301      	adds	r3, #1
100020de:	617b      	str	r3, [r7, #20]
  }
  return ReadCount;
100020e0:	697b      	ldr	r3, [r7, #20]
}
100020e2:	1c18      	adds	r0, r3, #0
100020e4:	46bd      	mov	sp, r7
100020e6:	b006      	add	sp, #24
100020e8:	bd80      	pop	{r7, pc}
100020ea:	46c0      	nop			; (mov r8, r8)

100020ec <UART001_ReadDataBytes>:
(
  const UART001_HandleType* Handle,
  uint8_t* DataPtr,
  uint32_t Count
)
{ 
100020ec:	b580      	push	{r7, lr}
100020ee:	b086      	sub	sp, #24
100020f0:	af00      	add	r7, sp, #0
100020f2:	60f8      	str	r0, [r7, #12]
100020f4:	60b9      	str	r1, [r7, #8]
100020f6:	607a      	str	r2, [r7, #4]
  uint32_t ReadCount = 0x00U;
100020f8:	2300      	movs	r3, #0
100020fa:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
100020fc:	68fb      	ldr	r3, [r7, #12]
100020fe:	681b      	ldr	r3, [r3, #0]
10002100:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
10002102:	68fb      	ldr	r3, [r7, #12]
10002104:	7fdb      	ldrb	r3, [r3, #31]
10002106:	2b00      	cmp	r3, #0
10002108:	d01c      	beq.n	10002144 <UART001_ReadDataBytes+0x58>
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
1000210a:	e00f      	b.n	1000212c <UART001_ReadDataBytes+0x40>
	  {
		*DataPtr = (uint8_t)UartRegs->OUTR;
1000210c:	693a      	ldr	r2, [r7, #16]
1000210e:	238e      	movs	r3, #142	; 0x8e
10002110:	005b      	lsls	r3, r3, #1
10002112:	58d3      	ldr	r3, [r2, r3]
10002114:	b2da      	uxtb	r2, r3
10002116:	68bb      	ldr	r3, [r7, #8]
10002118:	701a      	strb	r2, [r3, #0]
		Count--;
1000211a:	687b      	ldr	r3, [r7, #4]
1000211c:	3b01      	subs	r3, #1
1000211e:	607b      	str	r3, [r7, #4]
		ReadCount++;
10002120:	697b      	ldr	r3, [r7, #20]
10002122:	3301      	adds	r3, #1
10002124:	617b      	str	r3, [r7, #20]
		DataPtr++;
10002126:	68bb      	ldr	r3, [r7, #8]
10002128:	3301      	adds	r3, #1
1000212a:	60bb      	str	r3, [r7, #8]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
1000212c:	693a      	ldr	r2, [r7, #16]
1000212e:	238a      	movs	r3, #138	; 0x8a
10002130:	005b      	lsls	r3, r3, #1
10002132:	58d2      	ldr	r2, [r2, r3]
10002134:	2308      	movs	r3, #8
10002136:	4013      	ands	r3, r2
10002138:	08db      	lsrs	r3, r3, #3
1000213a:	d10b      	bne.n	10002154 <UART001_ReadDataBytes+0x68>
1000213c:	687b      	ldr	r3, [r7, #4]
1000213e:	2b00      	cmp	r3, #0
10002140:	d1e4      	bne.n	1000210c <UART001_ReadDataBytes+0x20>
10002142:	e007      	b.n	10002154 <UART001_ReadDataBytes+0x68>
	  }
  }
  else
  {
	  /* If FIFO is disabled read data from standard receive buffer */
	  *DataPtr = (uint8_t)UartRegs->RBUF;
10002144:	693b      	ldr	r3, [r7, #16]
10002146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002148:	b2da      	uxtb	r2, r3
1000214a:	68bb      	ldr	r3, [r7, #8]
1000214c:	701a      	strb	r2, [r3, #0]
	  ReadCount++;
1000214e:	697b      	ldr	r3, [r7, #20]
10002150:	3301      	adds	r3, #1
10002152:	617b      	str	r3, [r7, #20]
  }  
  return ReadCount;
10002154:	697b      	ldr	r3, [r7, #20]
}
10002156:	1c18      	adds	r0, r3, #0
10002158:	46bd      	mov	sp, r7
1000215a:	b006      	add	sp, #24
1000215c:	bd80      	pop	{r7, pc}
1000215e:	46c0      	nop			; (mov r8, r8)

10002160 <UART001_WriteDataMultiple>:
(
  const UART001_HandleType* Handle,
  uint16_t* DataPtr,
  uint32_t Count
)
{
10002160:	b580      	push	{r7, lr}
10002162:	b086      	sub	sp, #24
10002164:	af00      	add	r7, sp, #0
10002166:	60f8      	str	r0, [r7, #12]
10002168:	60b9      	str	r1, [r7, #8]
1000216a:	607a      	str	r2, [r7, #4]
  uint32_t WriteCount = 0x00U;
1000216c:	2300      	movs	r3, #0
1000216e:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs; 
10002170:	68fb      	ldr	r3, [r7, #12]
10002172:	681b      	ldr	r3, [r3, #0]
10002174:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_5>>>*/
  /* If FIFO is enabled write data to the transmit FIFO buffer */
  if(Handle->TxFifoEn) 
10002176:	68fb      	ldr	r3, [r7, #12]
10002178:	7f9b      	ldrb	r3, [r3, #30]
1000217a:	2b00      	cmp	r3, #0
1000217c:	d01d      	beq.n	100021ba <UART001_WriteDataMultiple+0x5a>
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
1000217e:	e00f      	b.n	100021a0 <UART001_WriteDataMultiple+0x40>
	  {
		UartRegs->IN[0] = *DataPtr;
10002180:	68bb      	ldr	r3, [r7, #8]
10002182:	881b      	ldrh	r3, [r3, #0]
10002184:	1c19      	adds	r1, r3, #0
10002186:	693a      	ldr	r2, [r7, #16]
10002188:	23c0      	movs	r3, #192	; 0xc0
1000218a:	005b      	lsls	r3, r3, #1
1000218c:	50d1      	str	r1, [r2, r3]
		Count--;
1000218e:	687b      	ldr	r3, [r7, #4]
10002190:	3b01      	subs	r3, #1
10002192:	607b      	str	r3, [r7, #4]
		WriteCount++;
10002194:	697b      	ldr	r3, [r7, #20]
10002196:	3301      	adds	r3, #1
10002198:	617b      	str	r3, [r7, #20]
		DataPtr++;
1000219a:	68bb      	ldr	r3, [r7, #8]
1000219c:	3302      	adds	r3, #2
1000219e:	60bb      	str	r3, [r7, #8]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs; 
  /* <<<DD_UART001_API_5>>>*/
  /* If FIFO is enabled write data to the transmit FIFO buffer */
  if(Handle->TxFifoEn) 
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
100021a0:	693a      	ldr	r2, [r7, #16]
100021a2:	238a      	movs	r3, #138	; 0x8a
100021a4:	005b      	lsls	r3, r3, #1
100021a6:	58d2      	ldr	r2, [r2, r3]
100021a8:	2380      	movs	r3, #128	; 0x80
100021aa:	015b      	lsls	r3, r3, #5
100021ac:	4013      	ands	r3, r2
100021ae:	0b1b      	lsrs	r3, r3, #12
100021b0:	d111      	bne.n	100021d6 <UART001_WriteDataMultiple+0x76>
100021b2:	687b      	ldr	r3, [r7, #4]
100021b4:	2b00      	cmp	r3, #0
100021b6:	d1e3      	bne.n	10002180 <UART001_WriteDataMultiple+0x20>
100021b8:	e00d      	b.n	100021d6 <UART001_WriteDataMultiple+0x76>
	  }
  }
  else
  {	  
	  /* If FIFO is disabled write data to the standard transmit buffer */
	  if (!(USIC_CH_TCSR_TDV_Msk & UartRegs->TCSR))
100021ba:	693b      	ldr	r3, [r7, #16]
100021bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
100021be:	2380      	movs	r3, #128	; 0x80
100021c0:	4013      	ands	r3, r2
100021c2:	d108      	bne.n	100021d6 <UART001_WriteDataMultiple+0x76>
	  {
		UartRegs->TBUF[0] = *DataPtr;	
100021c4:	68bb      	ldr	r3, [r7, #8]
100021c6:	881b      	ldrh	r3, [r3, #0]
100021c8:	1c19      	adds	r1, r3, #0
100021ca:	693a      	ldr	r2, [r7, #16]
100021cc:	2380      	movs	r3, #128	; 0x80
100021ce:	50d1      	str	r1, [r2, r3]
		WriteCount++; 
100021d0:	697b      	ldr	r3, [r7, #20]
100021d2:	3301      	adds	r3, #1
100021d4:	617b      	str	r3, [r7, #20]
	  }
  }
  return WriteCount;
100021d6:	697b      	ldr	r3, [r7, #20]
}
100021d8:	1c18      	adds	r0, r3, #0
100021da:	46bd      	mov	sp, r7
100021dc:	b006      	add	sp, #24
100021de:	bd80      	pop	{r7, pc}

100021e0 <UART001_WriteDataBytes>:
(
  const UART001_HandleType* Handle,
  const uint8_t* DataPtr,
  uint32_t Count
)
{
100021e0:	b580      	push	{r7, lr}
100021e2:	b086      	sub	sp, #24
100021e4:	af00      	add	r7, sp, #0
100021e6:	60f8      	str	r0, [r7, #12]
100021e8:	60b9      	str	r1, [r7, #8]
100021ea:	607a      	str	r2, [r7, #4]
  uint32_t WriteCount = 0x00U;
100021ec:	2300      	movs	r3, #0
100021ee:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs; 
100021f0:	68fb      	ldr	r3, [r7, #12]
100021f2:	681b      	ldr	r3, [r3, #0]
100021f4:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_6>>> */
  
  /* If FIFO is enabled write data to the transmit FIFO buffer */  
  if(Handle->TxFifoEn) 
100021f6:	68fb      	ldr	r3, [r7, #12]
100021f8:	7f9b      	ldrb	r3, [r3, #30]
100021fa:	2b00      	cmp	r3, #0
100021fc:	d01d      	beq.n	1000223a <UART001_WriteDataBytes+0x5a>
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
100021fe:	e00f      	b.n	10002220 <UART001_WriteDataBytes+0x40>
	  {
		UartRegs->IN[0] = *DataPtr;
10002200:	68bb      	ldr	r3, [r7, #8]
10002202:	781b      	ldrb	r3, [r3, #0]
10002204:	1c19      	adds	r1, r3, #0
10002206:	693a      	ldr	r2, [r7, #16]
10002208:	23c0      	movs	r3, #192	; 0xc0
1000220a:	005b      	lsls	r3, r3, #1
1000220c:	50d1      	str	r1, [r2, r3]
		Count--;
1000220e:	687b      	ldr	r3, [r7, #4]
10002210:	3b01      	subs	r3, #1
10002212:	607b      	str	r3, [r7, #4]
		WriteCount++;
10002214:	697b      	ldr	r3, [r7, #20]
10002216:	3301      	adds	r3, #1
10002218:	617b      	str	r3, [r7, #20]
		DataPtr++;
1000221a:	68bb      	ldr	r3, [r7, #8]
1000221c:	3301      	adds	r3, #1
1000221e:	60bb      	str	r3, [r7, #8]
  /* <<<DD_UART001_API_6>>> */
  
  /* If FIFO is enabled write data to the transmit FIFO buffer */  
  if(Handle->TxFifoEn) 
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
10002220:	693a      	ldr	r2, [r7, #16]
10002222:	238a      	movs	r3, #138	; 0x8a
10002224:	005b      	lsls	r3, r3, #1
10002226:	58d2      	ldr	r2, [r2, r3]
10002228:	2380      	movs	r3, #128	; 0x80
1000222a:	015b      	lsls	r3, r3, #5
1000222c:	4013      	ands	r3, r2
1000222e:	0b1b      	lsrs	r3, r3, #12
10002230:	d111      	bne.n	10002256 <UART001_WriteDataBytes+0x76>
10002232:	687b      	ldr	r3, [r7, #4]
10002234:	2b00      	cmp	r3, #0
10002236:	d1e3      	bne.n	10002200 <UART001_WriteDataBytes+0x20>
10002238:	e00d      	b.n	10002256 <UART001_WriteDataBytes+0x76>
	  }
  }
  else
  {	  
	  /* If FIFO is disabled write data to the standard transmit buffer */  
	  if (!(USIC_CH_TCSR_TDV_Msk & UartRegs->TCSR))
1000223a:	693b      	ldr	r3, [r7, #16]
1000223c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1000223e:	2380      	movs	r3, #128	; 0x80
10002240:	4013      	ands	r3, r2
10002242:	d108      	bne.n	10002256 <UART001_WriteDataBytes+0x76>
	  {
		UartRegs->TBUF[0] = *DataPtr;	
10002244:	68bb      	ldr	r3, [r7, #8]
10002246:	781b      	ldrb	r3, [r3, #0]
10002248:	1c19      	adds	r1, r3, #0
1000224a:	693a      	ldr	r2, [r7, #16]
1000224c:	2380      	movs	r3, #128	; 0x80
1000224e:	50d1      	str	r1, [r2, r3]
		WriteCount++; 
10002250:	697b      	ldr	r3, [r7, #20]
10002252:	3301      	adds	r3, #1
10002254:	617b      	str	r3, [r7, #20]
	  }
  }
  return WriteCount;
10002256:	697b      	ldr	r3, [r7, #20]
}
10002258:	1c18      	adds	r0, r3, #0
1000225a:	46bd      	mov	sp, r7
1000225c:	b006      	add	sp, #24
1000225e:	bd80      	pop	{r7, pc}

10002260 <UART001_GetFlagStatus>:
status_t UART001_GetFlagStatus 
(
  const UART001_HandleType* Handle,
  UART001_FlagStatusType Flag
)
{
10002260:	b580      	push	{r7, lr}
10002262:	b086      	sub	sp, #24
10002264:	af00      	add	r7, sp, #0
10002266:	6078      	str	r0, [r7, #4]
10002268:	1c0a      	adds	r2, r1, #0
1000226a:	1cfb      	adds	r3, r7, #3
1000226c:	701a      	strb	r2, [r3, #0]
  status_t Status = (status_t)UART001_RESET;
1000226e:	2301      	movs	r3, #1
10002270:	617b      	str	r3, [r7, #20]
  uint32_t TempValue = 0x00U;
10002272:	2300      	movs	r3, #0
10002274:	613b      	str	r3, [r7, #16]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
10002276:	687b      	ldr	r3, [r7, #4]
10002278:	681b      	ldr	r3, [r3, #0]
1000227a:	60fb      	str	r3, [r7, #12]
  
  /* <<<DD_UART001_API_7>>>*/
  if(Flag <= UART001_ALT_REC_IND_FLAG)
1000227c:	1cfb      	adds	r3, r7, #3
1000227e:	781b      	ldrb	r3, [r3, #0]
10002280:	2b0f      	cmp	r3, #15
10002282:	d80a      	bhi.n	1000229a <UART001_GetFlagStatus+0x3a>
  {
    TempValue = UartRegs->PSR_ASCMode;
10002284:	68fb      	ldr	r3, [r7, #12]
10002286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002288:	613b      	str	r3, [r7, #16]
    TempValue  &= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
1000228a:	1cfb      	adds	r3, r7, #3
1000228c:	781b      	ldrb	r3, [r3, #0]
1000228e:	2201      	movs	r2, #1
10002290:	409a      	lsls	r2, r3
10002292:	693b      	ldr	r3, [r7, #16]
10002294:	4013      	ands	r3, r2
10002296:	613b      	str	r3, [r7, #16]
10002298:	e01e      	b.n	100022d8 <UART001_GetFlagStatus+0x78>
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
1000229a:	1cfb      	adds	r3, r7, #3
1000229c:	781b      	ldrb	r3, [r3, #0]
1000229e:	2b12      	cmp	r3, #18
100022a0:	d80d      	bhi.n	100022be <UART001_GetFlagStatus+0x5e>
  {
    TempValue = UartRegs->TRBSR;
100022a2:	68fa      	ldr	r2, [r7, #12]
100022a4:	238a      	movs	r3, #138	; 0x8a
100022a6:	005b      	lsls	r3, r3, #1
100022a8:	58d3      	ldr	r3, [r2, r3]
100022aa:	613b      	str	r3, [r7, #16]
    TempValue  &= ((uint32_t)SHIFT_ONE << \
                  ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG));
100022ac:	1cfb      	adds	r3, r7, #3
100022ae:	781b      	ldrb	r3, [r3, #0]
100022b0:	3b10      	subs	r3, #16
    TempValue  &= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
  {
    TempValue = UartRegs->TRBSR;
    TempValue  &= ((uint32_t)SHIFT_ONE << \
100022b2:	2201      	movs	r2, #1
100022b4:	409a      	lsls	r2, r3
100022b6:	693b      	ldr	r3, [r7, #16]
100022b8:	4013      	ands	r3, r2
100022ba:	613b      	str	r3, [r7, #16]
100022bc:	e00c      	b.n	100022d8 <UART001_GetFlagStatus+0x78>
                  ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG));
    
  }
  else
  {
    TempValue = UartRegs->TRBSR;
100022be:	68fa      	ldr	r2, [r7, #12]
100022c0:	238a      	movs	r3, #138	; 0x8a
100022c2:	005b      	lsls	r3, r3, #1
100022c4:	58d3      	ldr	r3, [r2, r3]
100022c6:	613b      	str	r3, [r7, #16]
    TempValue  &= ((uint32_t)SHIFT_ONE << \
       (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + 0x05U ));
100022c8:	1cfb      	adds	r3, r7, #3
100022ca:	781b      	ldrb	r3, [r3, #0]
100022cc:	3b0b      	subs	r3, #11
    
  }
  else
  {
    TempValue = UartRegs->TRBSR;
    TempValue  &= ((uint32_t)SHIFT_ONE << \
100022ce:	2201      	movs	r2, #1
100022d0:	409a      	lsls	r2, r3
100022d2:	693b      	ldr	r3, [r7, #16]
100022d4:	4013      	ands	r3, r2
100022d6:	613b      	str	r3, [r7, #16]
       (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + 0x05U ));
  } 

  if(TempValue)
100022d8:	693b      	ldr	r3, [r7, #16]
100022da:	2b00      	cmp	r3, #0
100022dc:	d001      	beq.n	100022e2 <UART001_GetFlagStatus+0x82>
  {
    Status = (status_t)UART001_SET;
100022de:	2302      	movs	r3, #2
100022e0:	617b      	str	r3, [r7, #20]
  }
  return Status;
100022e2:	697b      	ldr	r3, [r7, #20]
}
100022e4:	1c18      	adds	r0, r3, #0
100022e6:	46bd      	mov	sp, r7
100022e8:	b006      	add	sp, #24
100022ea:	bd80      	pop	{r7, pc}

100022ec <UART001_ClearFlag>:
void UART001_ClearFlag
(
  const UART001_HandleType* Handle,
  UART001_FlagStatusType Flag
)
{
100022ec:	b580      	push	{r7, lr}
100022ee:	b084      	sub	sp, #16
100022f0:	af00      	add	r7, sp, #0
100022f2:	6078      	str	r0, [r7, #4]
100022f4:	1c0a      	adds	r2, r1, #0
100022f6:	1cfb      	adds	r3, r7, #3
100022f8:	701a      	strb	r2, [r3, #0]

  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
100022fa:	687b      	ldr	r3, [r7, #4]
100022fc:	681b      	ldr	r3, [r3, #0]
100022fe:	60fb      	str	r3, [r7, #12]
  
  /* <<<DD_UART001_API_8>>>*/
  if(Flag <= UART001_ALT_REC_IND_FLAG)
10002300:	1cfb      	adds	r3, r7, #3
10002302:	781b      	ldrb	r3, [r3, #0]
10002304:	2b0f      	cmp	r3, #15
10002306:	d80b      	bhi.n	10002320 <UART001_ClearFlag+0x34>
  {
    UartRegs->PSCR  |= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
10002308:	68fb      	ldr	r3, [r7, #12]
1000230a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
1000230c:	1cfb      	adds	r3, r7, #3
1000230e:	781b      	ldrb	r3, [r3, #0]
10002310:	2101      	movs	r1, #1
10002312:	1c08      	adds	r0, r1, #0
10002314:	4098      	lsls	r0, r3
10002316:	1c03      	adds	r3, r0, #0
10002318:	431a      	orrs	r2, r3
1000231a:	68fb      	ldr	r3, [r7, #12]
1000231c:	64da      	str	r2, [r3, #76]	; 0x4c
1000231e:	e026      	b.n	1000236e <UART001_ClearFlag+0x82>
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
10002320:	1cfb      	adds	r3, r7, #3
10002322:	781b      	ldrb	r3, [r3, #0]
10002324:	2b12      	cmp	r3, #18
10002326:	d811      	bhi.n	1000234c <UART001_ClearFlag+0x60>
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
10002328:	68fa      	ldr	r2, [r7, #12]
1000232a:	238c      	movs	r3, #140	; 0x8c
1000232c:	005b      	lsls	r3, r3, #1
1000232e:	58d2      	ldr	r2, [r2, r3]
                 ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG)); 
10002330:	1cfb      	adds	r3, r7, #3
10002332:	781b      	ldrb	r3, [r3, #0]
10002334:	3b10      	subs	r3, #16
  {
    UartRegs->PSCR  |= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
10002336:	2101      	movs	r1, #1
10002338:	1c08      	adds	r0, r1, #0
1000233a:	4098      	lsls	r0, r3
1000233c:	1c03      	adds	r3, r0, #0
1000233e:	1c11      	adds	r1, r2, #0
10002340:	4319      	orrs	r1, r3
10002342:	68fa      	ldr	r2, [r7, #12]
10002344:	238c      	movs	r3, #140	; 0x8c
10002346:	005b      	lsls	r3, r3, #1
10002348:	50d1      	str	r1, [r2, r3]
1000234a:	e010      	b.n	1000236e <UART001_ClearFlag+0x82>
                 ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG)); 
  }
  else
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
1000234c:	68fa      	ldr	r2, [r7, #12]
1000234e:	238c      	movs	r3, #140	; 0x8c
10002350:	005b      	lsls	r3, r3, #1
10002352:	58d2      	ldr	r2, [r2, r3]
               (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + \
10002354:	1cfb      	adds	r3, r7, #3
10002356:	781b      	ldrb	r3, [r3, #0]
10002358:	3b0b      	subs	r3, #11
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
                 ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG)); 
  }
  else
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
1000235a:	2101      	movs	r1, #1
1000235c:	1c08      	adds	r0, r1, #0
1000235e:	4098      	lsls	r0, r3
10002360:	1c03      	adds	r3, r0, #0
10002362:	1c11      	adds	r1, r2, #0
10002364:	4319      	orrs	r1, r3
10002366:	68fa      	ldr	r2, [r7, #12]
10002368:	238c      	movs	r3, #140	; 0x8c
1000236a:	005b      	lsls	r3, r3, #1
1000236c:	50d1      	str	r1, [r2, r3]
               (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + \
                                                       UART001_FLAG_OFFSET ));
  }  
  
}
1000236e:	46bd      	mov	sp, r7
10002370:	b004      	add	sp, #16
10002372:	bd80      	pop	{r7, pc}

10002374 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002374:	b5b0      	push	{r4, r5, r7, lr}
10002376:	b082      	sub	sp, #8
10002378:	af00      	add	r7, sp, #0
1000237a:	1c02      	adds	r2, r0, #0
1000237c:	6039      	str	r1, [r7, #0]
1000237e:	1dfb      	adds	r3, r7, #7
10002380:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
10002382:	1dfb      	adds	r3, r7, #7
10002384:	781b      	ldrb	r3, [r3, #0]
10002386:	2b7f      	cmp	r3, #127	; 0x7f
10002388:	d932      	bls.n	100023f0 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
1000238a:	4930      	ldr	r1, [pc, #192]	; (1000244c <NVIC_SetPriority+0xd8>)
1000238c:	1dfb      	adds	r3, r7, #7
1000238e:	781b      	ldrb	r3, [r3, #0]
10002390:	1c1a      	adds	r2, r3, #0
10002392:	230f      	movs	r3, #15
10002394:	4013      	ands	r3, r2
10002396:	3b08      	subs	r3, #8
10002398:	0898      	lsrs	r0, r3, #2
1000239a:	4a2c      	ldr	r2, [pc, #176]	; (1000244c <NVIC_SetPriority+0xd8>)
1000239c:	1dfb      	adds	r3, r7, #7
1000239e:	781b      	ldrb	r3, [r3, #0]
100023a0:	1c1c      	adds	r4, r3, #0
100023a2:	230f      	movs	r3, #15
100023a4:	4023      	ands	r3, r4
100023a6:	3b08      	subs	r3, #8
100023a8:	089b      	lsrs	r3, r3, #2
100023aa:	3306      	adds	r3, #6
100023ac:	009b      	lsls	r3, r3, #2
100023ae:	18d3      	adds	r3, r2, r3
100023b0:	685b      	ldr	r3, [r3, #4]
100023b2:	1dfa      	adds	r2, r7, #7
100023b4:	7812      	ldrb	r2, [r2, #0]
100023b6:	1c14      	adds	r4, r2, #0
100023b8:	2203      	movs	r2, #3
100023ba:	4022      	ands	r2, r4
100023bc:	00d2      	lsls	r2, r2, #3
100023be:	24ff      	movs	r4, #255	; 0xff
100023c0:	1c25      	adds	r5, r4, #0
100023c2:	4095      	lsls	r5, r2
100023c4:	1c2a      	adds	r2, r5, #0
100023c6:	43d2      	mvns	r2, r2
100023c8:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
100023ca:	683b      	ldr	r3, [r7, #0]
100023cc:	019c      	lsls	r4, r3, #6
100023ce:	23ff      	movs	r3, #255	; 0xff
100023d0:	401c      	ands	r4, r3
100023d2:	1dfb      	adds	r3, r7, #7
100023d4:	781b      	ldrb	r3, [r3, #0]
100023d6:	1c1d      	adds	r5, r3, #0
100023d8:	2303      	movs	r3, #3
100023da:	402b      	ands	r3, r5
100023dc:	00db      	lsls	r3, r3, #3
100023de:	1c25      	adds	r5, r4, #0
100023e0:	409d      	lsls	r5, r3
100023e2:	1c2b      	adds	r3, r5, #0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
100023e4:	431a      	orrs	r2, r3
100023e6:	1d83      	adds	r3, r0, #6
100023e8:	009b      	lsls	r3, r3, #2
100023ea:	18cb      	adds	r3, r1, r3
100023ec:	605a      	str	r2, [r3, #4]
100023ee:	e029      	b.n	10002444 <NVIC_SetPriority+0xd0>
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
100023f0:	4b17      	ldr	r3, [pc, #92]	; (10002450 <NVIC_SetPriority+0xdc>)
100023f2:	1dfa      	adds	r2, r7, #7
100023f4:	7812      	ldrb	r2, [r2, #0]
100023f6:	b252      	sxtb	r2, r2
100023f8:	0892      	lsrs	r2, r2, #2
100023fa:	4915      	ldr	r1, [pc, #84]	; (10002450 <NVIC_SetPriority+0xdc>)
100023fc:	1df8      	adds	r0, r7, #7
100023fe:	7800      	ldrb	r0, [r0, #0]
10002400:	b240      	sxtb	r0, r0
10002402:	0880      	lsrs	r0, r0, #2
10002404:	30c0      	adds	r0, #192	; 0xc0
10002406:	0080      	lsls	r0, r0, #2
10002408:	5841      	ldr	r1, [r0, r1]
1000240a:	1df8      	adds	r0, r7, #7
1000240c:	7800      	ldrb	r0, [r0, #0]
1000240e:	1c04      	adds	r4, r0, #0
10002410:	2003      	movs	r0, #3
10002412:	4020      	ands	r0, r4
10002414:	00c0      	lsls	r0, r0, #3
10002416:	24ff      	movs	r4, #255	; 0xff
10002418:	1c25      	adds	r5, r4, #0
1000241a:	4085      	lsls	r5, r0
1000241c:	1c28      	adds	r0, r5, #0
1000241e:	43c0      	mvns	r0, r0
10002420:	4008      	ands	r0, r1
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
10002422:	6839      	ldr	r1, [r7, #0]
10002424:	018c      	lsls	r4, r1, #6
10002426:	21ff      	movs	r1, #255	; 0xff
10002428:	400c      	ands	r4, r1
1000242a:	1df9      	adds	r1, r7, #7
1000242c:	7809      	ldrb	r1, [r1, #0]
1000242e:	1c0d      	adds	r5, r1, #0
10002430:	2103      	movs	r1, #3
10002432:	4029      	ands	r1, r5
10002434:	00c9      	lsls	r1, r1, #3
10002436:	1c25      	adds	r5, r4, #0
10002438:	408d      	lsls	r5, r1
1000243a:	1c29      	adds	r1, r5, #0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
1000243c:	4301      	orrs	r1, r0
1000243e:	32c0      	adds	r2, #192	; 0xc0
10002440:	0092      	lsls	r2, r2, #2
10002442:	50d1      	str	r1, [r2, r3]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
10002444:	46bd      	mov	sp, r7
10002446:	b002      	add	sp, #8
10002448:	bdb0      	pop	{r4, r5, r7, pc}
1000244a:	46c0      	nop			; (mov r8, r8)
1000244c:	e000ed00 	.word	0xe000ed00
10002450:	e000e100 	.word	0xe000e100

10002454 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10002454:	b580      	push	{r7, lr}
10002456:	b082      	sub	sp, #8
10002458:	af00      	add	r7, sp, #0
1000245a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1000245c:	687b      	ldr	r3, [r7, #4]
1000245e:	1e5a      	subs	r2, r3, #1
10002460:	4b0c      	ldr	r3, [pc, #48]	; (10002494 <SysTick_Config+0x40>)
10002462:	429a      	cmp	r2, r3
10002464:	d901      	bls.n	1000246a <SysTick_Config+0x16>
10002466:	2301      	movs	r3, #1
10002468:	e010      	b.n	1000248c <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1000246a:	4b0b      	ldr	r3, [pc, #44]	; (10002498 <SysTick_Config+0x44>)
1000246c:	687a      	ldr	r2, [r7, #4]
1000246e:	3a01      	subs	r2, #1
10002470:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
10002472:	2301      	movs	r3, #1
10002474:	425b      	negs	r3, r3
10002476:	1c18      	adds	r0, r3, #0
10002478:	2103      	movs	r1, #3
1000247a:	f7ff ff7b 	bl	10002374 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1000247e:	4b06      	ldr	r3, [pc, #24]	; (10002498 <SysTick_Config+0x44>)
10002480:	2200      	movs	r2, #0
10002482:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10002484:	4b04      	ldr	r3, [pc, #16]	; (10002498 <SysTick_Config+0x44>)
10002486:	2207      	movs	r2, #7
10002488:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
1000248a:	2300      	movs	r3, #0
}
1000248c:	1c18      	adds	r0, r3, #0
1000248e:	46bd      	mov	sp, r7
10002490:	b002      	add	sp, #8
10002492:	bd80      	pop	{r7, pc}
10002494:	00ffffff 	.word	0x00ffffff
10002498:	e000e010 	.word	0xe000e010

1000249c <SYSTM001_lInsertTimerList>:

/*
 * This function is called to insert a timer into the timer list.
 */
static void  SYSTM001_lInsertTimerList (uint32_t Index)
{
1000249c:	b580      	push	{r7, lr}
1000249e:	b086      	sub	sp, #24
100024a0:	af00      	add	r7, sp, #0
100024a2:	6078      	str	r0, [r7, #4]
  SYSTM001_TimerObject* TmrObjPtr;
  int32_t DeltaTicks;
  uint32_t TempTmrCnt;
   /* Get timer time */
  TempTmrCnt = TimerTbl[Index].TimerCount;
100024a4:	4a50      	ldr	r2, [pc, #320]	; (100025e8 <SYSTM001_lInsertTimerList+0x14c>)
100024a6:	687b      	ldr	r3, [r7, #4]
100024a8:	015b      	lsls	r3, r3, #5
100024aa:	18d3      	adds	r3, r2, r3
100024ac:	3308      	adds	r3, #8
100024ae:	681b      	ldr	r3, [r3, #0]
100024b0:	60fb      	str	r3, [r7, #12]
  /* Check if timer count is zero */
  /* <<<DD_SYSTM001_PRIV _API_1>>> */

  /* Check if Timer list is NULL */
  if(TimerList == NULL)
100024b2:	4b4e      	ldr	r3, [pc, #312]	; (100025ec <SYSTM001_lInsertTimerList+0x150>)
100024b4:	681b      	ldr	r3, [r3, #0]
100024b6:	2b00      	cmp	r3, #0
100024b8:	d106      	bne.n	100024c8 <SYSTM001_lInsertTimerList+0x2c>
  {
      /* Set this as first Timer */
      TimerList = &TimerTbl[Index];
100024ba:	687b      	ldr	r3, [r7, #4]
100024bc:	015a      	lsls	r2, r3, #5
100024be:	4b4a      	ldr	r3, [pc, #296]	; (100025e8 <SYSTM001_lInsertTimerList+0x14c>)
100024c0:	18d2      	adds	r2, r2, r3
100024c2:	4b4a      	ldr	r3, [pc, #296]	; (100025ec <SYSTM001_lInsertTimerList+0x150>)
100024c4:	601a      	str	r2, [r3, #0]
100024c6:	e08b      	b.n	100025e0 <SYSTM001_lInsertTimerList+0x144>
  }
  /* IF Not, find the correct place ,and insert the specified timer */
  else
  {
    TmrObjPtr = TimerList;
100024c8:	4b48      	ldr	r3, [pc, #288]	; (100025ec <SYSTM001_lInsertTimerList+0x150>)
100024ca:	681b      	ldr	r3, [r3, #0]
100024cc:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    DeltaTicks = (int32_t)TempTmrCnt;
100024ce:	68fb      	ldr	r3, [r7, #12]
100024d0:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while(TmrObjPtr != NULL)
100024d2:	e081      	b.n	100025d8 <SYSTM001_lInsertTimerList+0x13c>
    {
      /* Get timer Count Difference  */
      DeltaTicks -= (int32_t)TmrObjPtr->TimerCount;
100024d4:	697b      	ldr	r3, [r7, #20]
100024d6:	689b      	ldr	r3, [r3, #8]
100024d8:	693a      	ldr	r2, [r7, #16]
100024da:	1ad3      	subs	r3, r2, r3
100024dc:	613b      	str	r3, [r7, #16]
      /* Is delta ticks<0? */
      if(DeltaTicks < 0)
100024de:	693b      	ldr	r3, [r7, #16]
100024e0:	2b00      	cmp	r3, #0
100024e2:	da5a      	bge.n	1000259a <SYSTM001_lInsertTimerList+0xfe>
      {
        /*  Check If head item */
        if(TmrObjPtr->TimerPrev!= NULL)
100024e4:	697b      	ldr	r3, [r7, #20]
100024e6:	69db      	ldr	r3, [r3, #28]
100024e8:	2b00      	cmp	r3, #0
100024ea:	d01c      	beq.n	10002526 <SYSTM001_lInsertTimerList+0x8a>
        {
          /* If Insert to list */
          TmrObjPtr->TimerPrev->TimerNext = &TimerTbl[Index];
100024ec:	697b      	ldr	r3, [r7, #20]
100024ee:	69db      	ldr	r3, [r3, #28]
100024f0:	687a      	ldr	r2, [r7, #4]
100024f2:	0151      	lsls	r1, r2, #5
100024f4:	4a3c      	ldr	r2, [pc, #240]	; (100025e8 <SYSTM001_lInsertTimerList+0x14c>)
100024f6:	188a      	adds	r2, r1, r2
100024f8:	619a      	str	r2, [r3, #24]
          TimerTbl[Index].TimerPrev = TmrObjPtr->TimerPrev;
100024fa:	697b      	ldr	r3, [r7, #20]
100024fc:	69da      	ldr	r2, [r3, #28]
100024fe:	493a      	ldr	r1, [pc, #232]	; (100025e8 <SYSTM001_lInsertTimerList+0x14c>)
10002500:	687b      	ldr	r3, [r7, #4]
10002502:	015b      	lsls	r3, r3, #5
10002504:	18cb      	adds	r3, r1, r3
10002506:	331c      	adds	r3, #28
10002508:	601a      	str	r2, [r3, #0]
          TimerTbl[Index].TimerNext = TmrObjPtr;
1000250a:	4a37      	ldr	r2, [pc, #220]	; (100025e8 <SYSTM001_lInsertTimerList+0x14c>)
1000250c:	687b      	ldr	r3, [r7, #4]
1000250e:	015b      	lsls	r3, r3, #5
10002510:	18d3      	adds	r3, r2, r3
10002512:	3318      	adds	r3, #24
10002514:	697a      	ldr	r2, [r7, #20]
10002516:	601a      	str	r2, [r3, #0]
          TmrObjPtr->TimerPrev = &TimerTbl[Index];
10002518:	687b      	ldr	r3, [r7, #4]
1000251a:	015a      	lsls	r2, r3, #5
1000251c:	4b32      	ldr	r3, [pc, #200]	; (100025e8 <SYSTM001_lInsertTimerList+0x14c>)
1000251e:	18d2      	adds	r2, r2, r3
10002520:	697b      	ldr	r3, [r7, #20]
10002522:	61da      	str	r2, [r3, #28]
10002524:	e014      	b.n	10002550 <SYSTM001_lInsertTimerList+0xb4>
        }
        else
        {
          /* Set Timer as first item */
          TimerTbl[Index].TimerNext = TimerList;
10002526:	4b31      	ldr	r3, [pc, #196]	; (100025ec <SYSTM001_lInsertTimerList+0x150>)
10002528:	681a      	ldr	r2, [r3, #0]
1000252a:	492f      	ldr	r1, [pc, #188]	; (100025e8 <SYSTM001_lInsertTimerList+0x14c>)
1000252c:	687b      	ldr	r3, [r7, #4]
1000252e:	015b      	lsls	r3, r3, #5
10002530:	18cb      	adds	r3, r1, r3
10002532:	3318      	adds	r3, #24
10002534:	601a      	str	r2, [r3, #0]
          TimerList->TimerPrev = &TimerTbl[Index];
10002536:	4b2d      	ldr	r3, [pc, #180]	; (100025ec <SYSTM001_lInsertTimerList+0x150>)
10002538:	681b      	ldr	r3, [r3, #0]
1000253a:	687a      	ldr	r2, [r7, #4]
1000253c:	0151      	lsls	r1, r2, #5
1000253e:	4a2a      	ldr	r2, [pc, #168]	; (100025e8 <SYSTM001_lInsertTimerList+0x14c>)
10002540:	188a      	adds	r2, r1, r2
10002542:	61da      	str	r2, [r3, #28]
          TimerList = &TimerTbl[Index];
10002544:	687b      	ldr	r3, [r7, #4]
10002546:	015a      	lsls	r2, r3, #5
10002548:	4b27      	ldr	r3, [pc, #156]	; (100025e8 <SYSTM001_lInsertTimerList+0x14c>)
1000254a:	18d2      	adds	r2, r2, r3
1000254c:	4b27      	ldr	r3, [pc, #156]	; (100025ec <SYSTM001_lInsertTimerList+0x150>)
1000254e:	601a      	str	r2, [r3, #0]
        }
        TimerTbl[Index].TimerCount = \
                TimerTbl[Index].TimerNext->TimerCount + (uint32_t)DeltaTicks;
10002550:	4a25      	ldr	r2, [pc, #148]	; (100025e8 <SYSTM001_lInsertTimerList+0x14c>)
10002552:	687b      	ldr	r3, [r7, #4]
10002554:	015b      	lsls	r3, r3, #5
10002556:	18d3      	adds	r3, r2, r3
10002558:	3318      	adds	r3, #24
1000255a:	681b      	ldr	r3, [r3, #0]
1000255c:	689a      	ldr	r2, [r3, #8]
1000255e:	693b      	ldr	r3, [r7, #16]
10002560:	18d2      	adds	r2, r2, r3
          /* Set Timer as first item */
          TimerTbl[Index].TimerNext = TimerList;
          TimerList->TimerPrev = &TimerTbl[Index];
          TimerList = &TimerTbl[Index];
        }
        TimerTbl[Index].TimerCount = \
10002562:	4921      	ldr	r1, [pc, #132]	; (100025e8 <SYSTM001_lInsertTimerList+0x14c>)
10002564:	687b      	ldr	r3, [r7, #4]
10002566:	015b      	lsls	r3, r3, #5
10002568:	18cb      	adds	r3, r1, r3
1000256a:	3308      	adds	r3, #8
1000256c:	601a      	str	r2, [r3, #0]
                TimerTbl[Index].TimerNext->TimerCount + (uint32_t)DeltaTicks;
        TimerTbl[Index].TimerNext->TimerCount  -= TimerTbl[Index].TimerCount;
1000256e:	4a1e      	ldr	r2, [pc, #120]	; (100025e8 <SYSTM001_lInsertTimerList+0x14c>)
10002570:	687b      	ldr	r3, [r7, #4]
10002572:	015b      	lsls	r3, r3, #5
10002574:	18d3      	adds	r3, r2, r3
10002576:	3318      	adds	r3, #24
10002578:	681b      	ldr	r3, [r3, #0]
1000257a:	491b      	ldr	r1, [pc, #108]	; (100025e8 <SYSTM001_lInsertTimerList+0x14c>)
1000257c:	687a      	ldr	r2, [r7, #4]
1000257e:	0152      	lsls	r2, r2, #5
10002580:	188a      	adds	r2, r1, r2
10002582:	3218      	adds	r2, #24
10002584:	6812      	ldr	r2, [r2, #0]
10002586:	6891      	ldr	r1, [r2, #8]
10002588:	4817      	ldr	r0, [pc, #92]	; (100025e8 <SYSTM001_lInsertTimerList+0x14c>)
1000258a:	687a      	ldr	r2, [r7, #4]
1000258c:	0152      	lsls	r2, r2, #5
1000258e:	1882      	adds	r2, r0, r2
10002590:	3208      	adds	r2, #8
10002592:	6812      	ldr	r2, [r2, #0]
10002594:	1a8a      	subs	r2, r1, r2
10002596:	609a      	str	r2, [r3, #8]
        break;
10002598:	e022      	b.n	100025e0 <SYSTM001_lInsertTimerList+0x144>
      }
      /* Is last item in list? */
      else
      {
        if((DeltaTicks >= 0) && (TmrObjPtr->TimerNext == NULL))
1000259a:	693b      	ldr	r3, [r7, #16]
1000259c:	2b00      	cmp	r3, #0
1000259e:	db18      	blt.n	100025d2 <SYSTM001_lInsertTimerList+0x136>
100025a0:	697b      	ldr	r3, [r7, #20]
100025a2:	699b      	ldr	r3, [r3, #24]
100025a4:	2b00      	cmp	r3, #0
100025a6:	d114      	bne.n	100025d2 <SYSTM001_lInsertTimerList+0x136>
        {
          /* Yes,insert into */
          TimerTbl[Index].TimerPrev = TmrObjPtr;
100025a8:	4a0f      	ldr	r2, [pc, #60]	; (100025e8 <SYSTM001_lInsertTimerList+0x14c>)
100025aa:	687b      	ldr	r3, [r7, #4]
100025ac:	015b      	lsls	r3, r3, #5
100025ae:	18d3      	adds	r3, r2, r3
100025b0:	331c      	adds	r3, #28
100025b2:	697a      	ldr	r2, [r7, #20]
100025b4:	601a      	str	r2, [r3, #0]
          TmrObjPtr->TimerNext = &TimerTbl[Index];
100025b6:	687b      	ldr	r3, [r7, #4]
100025b8:	015a      	lsls	r2, r3, #5
100025ba:	4b0b      	ldr	r3, [pc, #44]	; (100025e8 <SYSTM001_lInsertTimerList+0x14c>)
100025bc:	18d2      	adds	r2, r2, r3
100025be:	697b      	ldr	r3, [r7, #20]
100025c0:	619a      	str	r2, [r3, #24]
          TimerTbl[Index].TimerCount = (uint32_t)DeltaTicks;
100025c2:	693a      	ldr	r2, [r7, #16]
100025c4:	4908      	ldr	r1, [pc, #32]	; (100025e8 <SYSTM001_lInsertTimerList+0x14c>)
100025c6:	687b      	ldr	r3, [r7, #4]
100025c8:	015b      	lsls	r3, r3, #5
100025ca:	18cb      	adds	r3, r1, r3
100025cc:	3308      	adds	r3, #8
100025ce:	601a      	str	r2, [r3, #0]
          break;
100025d0:	e006      	b.n	100025e0 <SYSTM001_lInsertTimerList+0x144>
        }
      }
      /* Get the next item in timer list    */
      TmrObjPtr = TmrObjPtr->TimerNext;
100025d2:	697b      	ldr	r3, [r7, #20]
100025d4:	699b      	ldr	r3, [r3, #24]
100025d6:	617b      	str	r3, [r7, #20]
  {
    TmrObjPtr = TimerList;
    /* Get timer tick */
    DeltaTicks = (int32_t)TempTmrCnt;
    /* Find correct place for inserting the timer */
    while(TmrObjPtr != NULL)
100025d8:	697b      	ldr	r3, [r7, #20]
100025da:	2b00      	cmp	r3, #0
100025dc:	d000      	beq.n	100025e0 <SYSTM001_lInsertTimerList+0x144>
100025de:	e779      	b.n	100024d4 <SYSTM001_lInsertTimerList+0x38>
      }
      /* Get the next item in timer list    */
      TmrObjPtr = TmrObjPtr->TimerNext;
    }
  }
}
100025e0:	46bd      	mov	sp, r7
100025e2:	b006      	add	sp, #24
100025e4:	bd80      	pop	{r7, pc}
100025e6:	46c0      	nop			; (mov r8, r8)
100025e8:	20000944 	.word	0x20000944
100025ec:	20000930 	.word	0x20000930

100025f0 <SYSTM001_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void  SYSTM001_lRemoveTimerList(uint32_t Index)
{
100025f0:	b580      	push	{r7, lr}
100025f2:	b084      	sub	sp, #16
100025f4:	af00      	add	r7, sp, #0
100025f6:	6078      	str	r0, [r7, #4]
  SYSTM001_TimerObject* TmrObjPtr;
  TmrObjPtr = &TimerTbl[Index];
100025f8:	687b      	ldr	r3, [r7, #4]
100025fa:	015a      	lsls	r2, r3, #5
100025fc:	4b27      	ldr	r3, [pc, #156]	; (1000269c <SYSTM001_lRemoveTimerList+0xac>)
100025fe:	18d3      	adds	r3, r2, r3
10002600:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  /* <<<DD_SYSTM001_PRIV _API_2>>> */
  if((TmrObjPtr->TimerPrev == NULL) && (TmrObjPtr->TimerNext == NULL))
10002602:	68fb      	ldr	r3, [r7, #12]
10002604:	69db      	ldr	r3, [r3, #28]
10002606:	2b00      	cmp	r3, #0
10002608:	d107      	bne.n	1000261a <SYSTM001_lRemoveTimerList+0x2a>
1000260a:	68fb      	ldr	r3, [r7, #12]
1000260c:	699b      	ldr	r3, [r3, #24]
1000260e:	2b00      	cmp	r3, #0
10002610:	d103      	bne.n	1000261a <SYSTM001_lRemoveTimerList+0x2a>
  {
    /* set timer list as NULL */ 
    TimerList = NULL;                 	
10002612:	4b23      	ldr	r3, [pc, #140]	; (100026a0 <SYSTM001_lRemoveTimerList+0xb0>)
10002614:	2200      	movs	r2, #0
10002616:	601a      	str	r2, [r3, #0]
10002618:	e03d      	b.n	10002696 <SYSTM001_lRemoveTimerList+0xa6>
  }
   /* Check if the first item in timer list   */
  else if(TmrObjPtr->TimerPrev == NULL)     
1000261a:	68fb      	ldr	r3, [r7, #12]
1000261c:	69db      	ldr	r3, [r3, #28]
1000261e:	2b00      	cmp	r3, #0
10002620:	d114      	bne.n	1000264c <SYSTM001_lRemoveTimerList+0x5c>
  {   
    /* Remove timer from list,and reset timer list */
    TimerList  = TmrObjPtr->TimerNext;
10002622:	68fb      	ldr	r3, [r7, #12]
10002624:	699a      	ldr	r2, [r3, #24]
10002626:	4b1e      	ldr	r3, [pc, #120]	; (100026a0 <SYSTM001_lRemoveTimerList+0xb0>)
10002628:	601a      	str	r2, [r3, #0]
    TimerList->TimerPrev = NULL;
1000262a:	4b1d      	ldr	r3, [pc, #116]	; (100026a0 <SYSTM001_lRemoveTimerList+0xb0>)
1000262c:	681b      	ldr	r3, [r3, #0]
1000262e:	2200      	movs	r2, #0
10002630:	61da      	str	r2, [r3, #28]
    TmrObjPtr->TimerNext->TimerCount += TmrObjPtr->TimerCount;
10002632:	68fb      	ldr	r3, [r7, #12]
10002634:	699b      	ldr	r3, [r3, #24]
10002636:	68fa      	ldr	r2, [r7, #12]
10002638:	6992      	ldr	r2, [r2, #24]
1000263a:	6891      	ldr	r1, [r2, #8]
1000263c:	68fa      	ldr	r2, [r7, #12]
1000263e:	6892      	ldr	r2, [r2, #8]
10002640:	188a      	adds	r2, r1, r2
10002642:	609a      	str	r2, [r3, #8]
    TmrObjPtr->TimerNext    = NULL;  
10002644:	68fb      	ldr	r3, [r7, #12]
10002646:	2200      	movs	r2, #0
10002648:	619a      	str	r2, [r3, #24]
1000264a:	e024      	b.n	10002696 <SYSTM001_lRemoveTimerList+0xa6>
  }
  /* Check if the last item in timer list   */
  else if(TmrObjPtr->TimerNext == NULL)      
1000264c:	68fb      	ldr	r3, [r7, #12]
1000264e:	699b      	ldr	r3, [r3, #24]
10002650:	2b00      	cmp	r3, #0
10002652:	d107      	bne.n	10002664 <SYSTM001_lRemoveTimerList+0x74>
  {
    /* Remove timer from list */
    TmrObjPtr->TimerPrev->TimerNext = NULL;	
10002654:	68fb      	ldr	r3, [r7, #12]
10002656:	69db      	ldr	r3, [r3, #28]
10002658:	2200      	movs	r2, #0
1000265a:	619a      	str	r2, [r3, #24]
    TmrObjPtr->TimerPrev = NULL;
1000265c:	68fb      	ldr	r3, [r7, #12]
1000265e:	2200      	movs	r2, #0
10002660:	61da      	str	r2, [r3, #28]
10002662:	e018      	b.n	10002696 <SYSTM001_lRemoveTimerList+0xa6>
  }
  else                                /*  remove timer from list         */
  {
    /*  Remove timer from list */
    TmrObjPtr->TimerPrev->TimerNext  =  TmrObjPtr->TimerNext;
10002664:	68fb      	ldr	r3, [r7, #12]
10002666:	69db      	ldr	r3, [r3, #28]
10002668:	68fa      	ldr	r2, [r7, #12]
1000266a:	6992      	ldr	r2, [r2, #24]
1000266c:	619a      	str	r2, [r3, #24]
    TmrObjPtr->TimerNext->TimerPrev  =  TmrObjPtr->TimerPrev;
1000266e:	68fb      	ldr	r3, [r7, #12]
10002670:	699b      	ldr	r3, [r3, #24]
10002672:	68fa      	ldr	r2, [r7, #12]
10002674:	69d2      	ldr	r2, [r2, #28]
10002676:	61da      	str	r2, [r3, #28]
    TmrObjPtr->TimerNext->TimerCount  += TmrObjPtr->TimerCount;
10002678:	68fb      	ldr	r3, [r7, #12]
1000267a:	699b      	ldr	r3, [r3, #24]
1000267c:	68fa      	ldr	r2, [r7, #12]
1000267e:	6992      	ldr	r2, [r2, #24]
10002680:	6891      	ldr	r1, [r2, #8]
10002682:	68fa      	ldr	r2, [r7, #12]
10002684:	6892      	ldr	r2, [r2, #8]
10002686:	188a      	adds	r2, r1, r2
10002688:	609a      	str	r2, [r3, #8]
    TmrObjPtr->TimerNext = NULL;
1000268a:	68fb      	ldr	r3, [r7, #12]
1000268c:	2200      	movs	r2, #0
1000268e:	619a      	str	r2, [r3, #24]
    TmrObjPtr->TimerPrev = NULL;
10002690:	68fb      	ldr	r3, [r7, #12]
10002692:	2200      	movs	r2, #0
10002694:	61da      	str	r2, [r3, #28]
  }
}
10002696:	46bd      	mov	sp, r7
10002698:	b004      	add	sp, #16
1000269a:	bd80      	pop	{r7, pc}
1000269c:	20000944 	.word	0x20000944
100026a0:	20000930 	.word	0x20000930

100026a4 <SYSTM001_lTimerHandler>:

/*
 * Handler function  called from Systick event handler. 
 */
static void  SYSTM001_lTimerHandler (void)
{
100026a4:	b580      	push	{r7, lr}
100026a6:	b082      	sub	sp, #8
100026a8:	af00      	add	r7, sp, #0
  SYSTM001_TimerObject* TmrObjPtr;
   /* Get first item of timer list       */
  TmrObjPtr = TimerList;         
100026aa:	4b1f      	ldr	r3, [pc, #124]	; (10002728 <SYSTM001_lTimerHandler+0x84>)
100026ac:	681b      	ldr	r3, [r3, #0]
100026ae:	607b      	str	r3, [r7, #4]
  /* <<<DD_SYSTM001_PRIV _API_3>>> */  
  while((TmrObjPtr != NULL) && (TmrObjPtr->TimerCount == 0UL) )
100026b0:	e02d      	b.n	1000270e <SYSTM001_lTimerHandler+0x6a>
  {	
    /* Check whether timer is a one shot timer */
    if(TmrObjPtr->TimerType == SYSTM001_ONE_SHOT)
100026b2:	687b      	ldr	r3, [r7, #4]
100026b4:	791b      	ldrb	r3, [r3, #4]
100026b6:	2b00      	cmp	r3, #0
100026b8:	d10e      	bne.n	100026d8 <SYSTM001_lTimerHandler+0x34>
    {
      /* Yes,remove this timer from timer list */
      SYSTM001_lRemoveTimerList(TmrObjPtr->TimerID);
100026ba:	687b      	ldr	r3, [r7, #4]
100026bc:	681b      	ldr	r3, [r3, #0]
100026be:	1c18      	adds	r0, r3, #0
100026c0:	f7ff ff96 	bl	100025f0 <SYSTM001_lRemoveTimerList>
      /* Set timer status as SYSTM001_STATE_STOPPED */
      TmrObjPtr->TimerState = SYSTM001_STATE_STOPPED;
100026c4:	687b      	ldr	r3, [r7, #4]
100026c6:	2201      	movs	r2, #1
100026c8:	715a      	strb	r2, [r3, #5]
      /* Call timer callback function */
      (TmrObjPtr->TimerCallBack)(TmrObjPtr->ParamToCallBack);
100026ca:	687b      	ldr	r3, [r7, #4]
100026cc:	691a      	ldr	r2, [r3, #16]
100026ce:	687b      	ldr	r3, [r7, #4]
100026d0:	695b      	ldr	r3, [r3, #20]
100026d2:	1c18      	adds	r0, r3, #0
100026d4:	4790      	blx	r2
100026d6:	e017      	b.n	10002708 <SYSTM001_lTimerHandler+0x64>
    }
    /* Check whether timer is SYSTM001_PERIODIC */
    else if(TmrObjPtr->TimerType == SYSTM001_PERIODIC)
100026d8:	687b      	ldr	r3, [r7, #4]
100026da:	791b      	ldrb	r3, [r3, #4]
100026dc:	2b01      	cmp	r3, #1
100026de:	d11e      	bne.n	1000271e <SYSTM001_lTimerHandler+0x7a>
    {
      /* Yes,remove this timer from timer list */
      SYSTM001_lRemoveTimerList(TmrObjPtr->TimerID);
100026e0:	687b      	ldr	r3, [r7, #4]
100026e2:	681b      	ldr	r3, [r3, #0]
100026e4:	1c18      	adds	r0, r3, #0
100026e6:	f7ff ff83 	bl	100025f0 <SYSTM001_lRemoveTimerList>
      /* Reset timer tick             */
      TmrObjPtr->TimerCount = TmrObjPtr->TimerReload;
100026ea:	687b      	ldr	r3, [r7, #4]
100026ec:	68da      	ldr	r2, [r3, #12]
100026ee:	687b      	ldr	r3, [r7, #4]
100026f0:	609a      	str	r2, [r3, #8]
        /* Insert timer into timer list */
      SYSTM001_lInsertTimerList(TmrObjPtr->TimerID);
100026f2:	687b      	ldr	r3, [r7, #4]
100026f4:	681b      	ldr	r3, [r3, #0]
100026f6:	1c18      	adds	r0, r3, #0
100026f8:	f7ff fed0 	bl	1000249c <SYSTM001_lInsertTimerList>
      /* Call timer callback function */
      (TmrObjPtr->TimerCallBack)(TmrObjPtr->ParamToCallBack);
100026fc:	687b      	ldr	r3, [r7, #4]
100026fe:	691a      	ldr	r2, [r3, #16]
10002700:	687b      	ldr	r3, [r7, #4]
10002702:	695b      	ldr	r3, [r3, #20]
10002704:	1c18      	adds	r0, r3, #0
10002706:	4790      	blx	r2
    else
    {
      break;
    }
    /* Get first item of timer list */
    TmrObjPtr = TimerList;
10002708:	4b07      	ldr	r3, [pc, #28]	; (10002728 <SYSTM001_lTimerHandler+0x84>)
1000270a:	681b      	ldr	r3, [r3, #0]
1000270c:	607b      	str	r3, [r7, #4]
{
  SYSTM001_TimerObject* TmrObjPtr;
   /* Get first item of timer list       */
  TmrObjPtr = TimerList;         
  /* <<<DD_SYSTM001_PRIV _API_3>>> */  
  while((TmrObjPtr != NULL) && (TmrObjPtr->TimerCount == 0UL) )
1000270e:	687b      	ldr	r3, [r7, #4]
10002710:	2b00      	cmp	r3, #0
10002712:	d005      	beq.n	10002720 <SYSTM001_lTimerHandler+0x7c>
10002714:	687b      	ldr	r3, [r7, #4]
10002716:	689b      	ldr	r3, [r3, #8]
10002718:	2b00      	cmp	r3, #0
1000271a:	d0ca      	beq.n	100026b2 <SYSTM001_lTimerHandler+0xe>
1000271c:	e000      	b.n	10002720 <SYSTM001_lTimerHandler+0x7c>
      /* Call timer callback function */
      (TmrObjPtr->TimerCallBack)(TmrObjPtr->ParamToCallBack);
    }
    else
    {
      break;
1000271e:	46c0      	nop			; (mov r8, r8)
    }
    /* Get first item of timer list */
    TmrObjPtr = TimerList;
  }
}
10002720:	46bd      	mov	sp, r7
10002722:	b002      	add	sp, #8
10002724:	bd80      	pop	{r7, pc}
10002726:	46c0      	nop			; (mov r8, r8)
10002728:	20000930 	.word	0x20000930

1000272c <SysTick_Handler>:

/*
 *  SysTick Event Handler 
 */
void  SysTick_Handler(void)
{ 
1000272c:	b580      	push	{r7, lr}
1000272e:	b082      	sub	sp, #8
10002730:	af00      	add	r7, sp, #0
  SYSTM001_TimerObject* TmrObjPtr;
  TmrObjPtr = TimerList;
10002732:	4b0e      	ldr	r3, [pc, #56]	; (1000276c <SysTick_Handler+0x40>)
10002734:	681b      	ldr	r3, [r3, #0]
10002736:	607b      	str	r3, [r7, #4]
  /* <<<DD_SYSTM001_PRIV _API_4>>> */
  SysTickCount++;
10002738:	4b0d      	ldr	r3, [pc, #52]	; (10002770 <SysTick_Handler+0x44>)
1000273a:	681b      	ldr	r3, [r3, #0]
1000273c:	1c5a      	adds	r2, r3, #1
1000273e:	4b0c      	ldr	r3, [pc, #48]	; (10002770 <SysTick_Handler+0x44>)
10002740:	601a      	str	r2, [r3, #0]
  if(TmrObjPtr == NULL)
10002742:	687b      	ldr	r3, [r7, #4]
10002744:	2b00      	cmp	r3, #0
10002746:	d00e      	beq.n	10002766 <SysTick_Handler+0x3a>
    /* Not supposed to be here */
   ;  
  }
  else
  {
    if(TmrObjPtr->TimerCount > 1UL)
10002748:	687b      	ldr	r3, [r7, #4]
1000274a:	689b      	ldr	r3, [r3, #8]
1000274c:	2b01      	cmp	r3, #1
1000274e:	d905      	bls.n	1000275c <SysTick_Handler+0x30>
    {
      TmrObjPtr->TimerCount--;
10002750:	687b      	ldr	r3, [r7, #4]
10002752:	689b      	ldr	r3, [r3, #8]
10002754:	1e5a      	subs	r2, r3, #1
10002756:	687b      	ldr	r3, [r7, #4]
10002758:	609a      	str	r2, [r3, #8]
1000275a:	e004      	b.n	10002766 <SysTick_Handler+0x3a>
    }
    else
    { 
      TmrObjPtr->TimerCount = 0;
1000275c:	687b      	ldr	r3, [r7, #4]
1000275e:	2200      	movs	r2, #0
10002760:	609a      	str	r2, [r3, #8]
      SYSTM001_lTimerHandler();
10002762:	f7ff ff9f 	bl	100026a4 <SYSTM001_lTimerHandler>
    }
  }
}
10002766:	46bd      	mov	sp, r7
10002768:	b002      	add	sp, #8
1000276a:	bd80      	pop	{r7, pc}
1000276c:	20000930 	.word	0x20000930
10002770:	20000938 	.word	0x20000938

10002774 <SYSTM001_Init>:
/*
 *  Initialization function which initializes the App internal data
 *  structures to default values. 
 */
void  SYSTM001_Init( void)
{
10002774:	b580      	push	{r7, lr}
10002776:	b082      	sub	sp, #8
10002778:	af00      	add	r7, sp, #0
    uint32_t Status = 0UL;
1000277a:	2300      	movs	r3, #0
1000277c:	607b      	str	r3, [r7, #4]

  /** Initialize the header of the list */
  TimerList = NULL;
1000277e:	4b0c      	ldr	r3, [pc, #48]	; (100027b0 <SYSTM001_Init+0x3c>)
10002780:	2200      	movs	r2, #0
10002782:	601a      	str	r2, [r3, #0]
  /* Clock Initialization */
  CLK002_Init();
10002784:	f000 fc00 	bl	10002f88 <CLK002_Init>
  /**   Initialize timer tracker  */
  Status = SysTick_Config((uint32_t)(SYSTM001_SYSTICK_INTERVAL * SYSTM001_SYS_CORE_CLOCK * 1000U));
10002788:	23fa      	movs	r3, #250	; 0xfa
1000278a:	015b      	lsls	r3, r3, #5
1000278c:	1c18      	adds	r0, r3, #0
1000278e:	f7ff fe61 	bl	10002454 <SysTick_Config>
10002792:	1c03      	adds	r3, r0, #0
10002794:	607b      	str	r3, [r7, #4]
  if(Status == 1U)
  {
        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Status), &Status);
  }
    NVIC_SetPriority(SysTick_IRQn, 1);
10002796:	2301      	movs	r3, #1
10002798:	425b      	negs	r3, r3
1000279a:	1c18      	adds	r0, r3, #0
1000279c:	2101      	movs	r1, #1
1000279e:	f7ff fde9 	bl	10002374 <NVIC_SetPriority>
  TimerTracker = 0UL;
100027a2:	4b04      	ldr	r3, [pc, #16]	; (100027b4 <SYSTM001_Init+0x40>)
100027a4:	2200      	movs	r2, #0
100027a6:	601a      	str	r2, [r3, #0]

}
100027a8:	46bd      	mov	sp, r7
100027aa:	b002      	add	sp, #8
100027ac:	bd80      	pop	{r7, pc}
100027ae:	46c0      	nop			; (mov r8, r8)
100027b0:	20000930 	.word	0x20000930
100027b4:	20000934 	.word	0x20000934

100027b8 <SYSTM001_CreateTimer>:
  uint32_t Period,
  SYSTM001_TimerType TimerType, 
  SYSTM001_TimerCallBackPtr TimerCallBack, 
  void  * pCallBackArgPtr
)
{
100027b8:	b580      	push	{r7, lr}
100027ba:	b088      	sub	sp, #32
100027bc:	af00      	add	r7, sp, #0
100027be:	60f8      	str	r0, [r7, #12]
100027c0:	607a      	str	r2, [r7, #4]
100027c2:	603b      	str	r3, [r7, #0]
100027c4:	1c3b      	adds	r3, r7, #0
100027c6:	330b      	adds	r3, #11
100027c8:	1c0a      	adds	r2, r1, #0
100027ca:	701a      	strb	r2, [r3, #0]
  uint32_t TimerID = 0UL;
100027cc:	2300      	movs	r3, #0
100027ce:	61fb      	str	r3, [r7, #28]
  uint32_t Count = 0UL;
100027d0:	2300      	movs	r3, #0
100027d2:	61bb      	str	r3, [r7, #24]
  uint32_t Error = 0UL;  
100027d4:	2300      	movs	r3, #0
100027d6:	617b      	str	r3, [r7, #20]

  /* Check for input parameter */
    if((TimerType != SYSTM001_ONE_SHOT) && (TimerType != SYSTM001_PERIODIC))
100027d8:	1c3b      	adds	r3, r7, #0
100027da:	330b      	adds	r3, #11
100027dc:	781b      	ldrb	r3, [r3, #0]
100027de:	2b00      	cmp	r3, #0
100027e0:	d006      	beq.n	100027f0 <SYSTM001_CreateTimer+0x38>
100027e2:	1c3b      	adds	r3, r7, #0
100027e4:	330b      	adds	r3, #11
100027e6:	781b      	ldrb	r3, [r3, #0]
100027e8:	2b01      	cmp	r3, #1
100027ea:	d001      	beq.n	100027f0 <SYSTM001_CreateTimer+0x38>
    {
      Error=(uint32_t)1UL;
100027ec:	2301      	movs	r3, #1
100027ee:	617b      	str	r3, [r7, #20]
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
      
    }
    if(Period < (uint32_t)SYSTM001_SYSTICK_INTERVAL)
100027f0:	68fb      	ldr	r3, [r7, #12]
100027f2:	2b00      	cmp	r3, #0
100027f4:	d101      	bne.n	100027fa <SYSTM001_CreateTimer+0x42>
    {
      Error=(uint32_t)1UL;
100027f6:	2301      	movs	r3, #1
100027f8:	617b      	str	r3, [r7, #20]
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
    }
    if(Period == 0)          /* Timer with '0' time is not allowed. */
100027fa:	68fb      	ldr	r3, [r7, #12]
100027fc:	2b00      	cmp	r3, #0
100027fe:	d101      	bne.n	10002804 <SYSTM001_CreateTimer+0x4c>
    {
      Error=(uint32_t)1UL;
10002800:	2301      	movs	r3, #1
10002802:	617b      	str	r3, [r7, #20]
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
    }

    if(TimerCallBack == NULL)
10002804:	687b      	ldr	r3, [r7, #4]
10002806:	2b00      	cmp	r3, #0
10002808:	d101      	bne.n	1000280e <SYSTM001_CreateTimer+0x56>
    {
      Error=(uint32_t)1UL;
1000280a:	2301      	movs	r3, #1
1000280c:	617b      	str	r3, [r7, #20]
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
    }
    if (!Error)	
1000280e:	697b      	ldr	r3, [r7, #20]
10002810:	2b00      	cmp	r3, #0
10002812:	d159      	bne.n	100028c8 <SYSTM001_CreateTimer+0x110>
    {
       for(Count = 0UL; Count < SYSTM001_CFG_MAX_TMR; Count++)
10002814:	2300      	movs	r3, #0
10002816:	61bb      	str	r3, [r7, #24]
10002818:	e053      	b.n	100028c2 <SYSTM001_CreateTimer+0x10a>
       {
           /* Check for free timer ID */
           if((TimerTracker & ((uint32_t)1U << Count)) == 0U)
1000281a:	4b2e      	ldr	r3, [pc, #184]	; (100028d4 <SYSTM001_CreateTimer+0x11c>)
1000281c:	681a      	ldr	r2, [r3, #0]
1000281e:	69bb      	ldr	r3, [r7, #24]
10002820:	40da      	lsrs	r2, r3
10002822:	2301      	movs	r3, #1
10002824:	4013      	ands	r3, r2
10002826:	d149      	bne.n	100028bc <SYSTM001_CreateTimer+0x104>
           {
               /* If yes,assign ID to this timer      */
               TimerTracker |= ((uint32_t)1U << Count);
10002828:	69bb      	ldr	r3, [r7, #24]
1000282a:	2201      	movs	r2, #1
1000282c:	409a      	lsls	r2, r3
1000282e:	4b29      	ldr	r3, [pc, #164]	; (100028d4 <SYSTM001_CreateTimer+0x11c>)
10002830:	681b      	ldr	r3, [r3, #0]
10002832:	431a      	orrs	r2, r3
10002834:	4b27      	ldr	r3, [pc, #156]	; (100028d4 <SYSTM001_CreateTimer+0x11c>)
10002836:	601a      	str	r2, [r3, #0]
               /* Initialize timer as per input values */
               TimerTbl[Count].TimerID     = Count;
10002838:	4b27      	ldr	r3, [pc, #156]	; (100028d8 <SYSTM001_CreateTimer+0x120>)
1000283a:	69ba      	ldr	r2, [r7, #24]
1000283c:	0152      	lsls	r2, r2, #5
1000283e:	69b9      	ldr	r1, [r7, #24]
10002840:	50d1      	str	r1, [r2, r3]
               TimerTbl[Count].TimerType   = TimerType;
10002842:	4925      	ldr	r1, [pc, #148]	; (100028d8 <SYSTM001_CreateTimer+0x120>)
10002844:	69bb      	ldr	r3, [r7, #24]
10002846:	015b      	lsls	r3, r3, #5
10002848:	1c3a      	adds	r2, r7, #0
1000284a:	320b      	adds	r2, #11
1000284c:	18cb      	adds	r3, r1, r3
1000284e:	7812      	ldrb	r2, [r2, #0]
10002850:	711a      	strb	r2, [r3, #4]
               TimerTbl[Count].TimerState  = SYSTM001_STATE_STOPPED;
10002852:	4a21      	ldr	r2, [pc, #132]	; (100028d8 <SYSTM001_CreateTimer+0x120>)
10002854:	69bb      	ldr	r3, [r7, #24]
10002856:	015b      	lsls	r3, r3, #5
10002858:	18d3      	adds	r3, r2, r3
1000285a:	2201      	movs	r2, #1
1000285c:	715a      	strb	r2, [r3, #5]
             TimerTbl[Count].TimerCount  = ((Period / SYSTM001_SYSTICK_INTERVAL)\
                                                    +HW_TIMER_ADDITIONAL_CNT);
1000285e:	68fb      	ldr	r3, [r7, #12]
10002860:	1c5a      	adds	r2, r3, #1
               TimerTracker |= ((uint32_t)1U << Count);
               /* Initialize timer as per input values */
               TimerTbl[Count].TimerID     = Count;
               TimerTbl[Count].TimerType   = TimerType;
               TimerTbl[Count].TimerState  = SYSTM001_STATE_STOPPED;
             TimerTbl[Count].TimerCount  = ((Period / SYSTM001_SYSTICK_INTERVAL)\
10002862:	491d      	ldr	r1, [pc, #116]	; (100028d8 <SYSTM001_CreateTimer+0x120>)
10002864:	69bb      	ldr	r3, [r7, #24]
10002866:	015b      	lsls	r3, r3, #5
10002868:	18cb      	adds	r3, r1, r3
1000286a:	3308      	adds	r3, #8
1000286c:	601a      	str	r2, [r3, #0]
                                                    +HW_TIMER_ADDITIONAL_CNT);
               TimerTbl[Count].TimerReload	= (Period / SYSTM001_SYSTICK_INTERVAL);
1000286e:	4a1a      	ldr	r2, [pc, #104]	; (100028d8 <SYSTM001_CreateTimer+0x120>)
10002870:	69bb      	ldr	r3, [r7, #24]
10002872:	015b      	lsls	r3, r3, #5
10002874:	18d3      	adds	r3, r2, r3
10002876:	330c      	adds	r3, #12
10002878:	68fa      	ldr	r2, [r7, #12]
1000287a:	601a      	str	r2, [r3, #0]
               TimerTbl[Count].TimerCallBack = TimerCallBack;
1000287c:	4a16      	ldr	r2, [pc, #88]	; (100028d8 <SYSTM001_CreateTimer+0x120>)
1000287e:	69bb      	ldr	r3, [r7, #24]
10002880:	015b      	lsls	r3, r3, #5
10002882:	18d3      	adds	r3, r2, r3
10002884:	3310      	adds	r3, #16
10002886:	687a      	ldr	r2, [r7, #4]
10002888:	601a      	str	r2, [r3, #0]
               TimerTbl[Count].ParamToCallBack = pCallBackArgPtr;
1000288a:	4a13      	ldr	r2, [pc, #76]	; (100028d8 <SYSTM001_CreateTimer+0x120>)
1000288c:	69bb      	ldr	r3, [r7, #24]
1000288e:	015b      	lsls	r3, r3, #5
10002890:	18d3      	adds	r3, r2, r3
10002892:	3314      	adds	r3, #20
10002894:	683a      	ldr	r2, [r7, #0]
10002896:	601a      	str	r2, [r3, #0]
               TimerTbl[Count].TimerPrev   = NULL;
10002898:	4a0f      	ldr	r2, [pc, #60]	; (100028d8 <SYSTM001_CreateTimer+0x120>)
1000289a:	69bb      	ldr	r3, [r7, #24]
1000289c:	015b      	lsls	r3, r3, #5
1000289e:	18d3      	adds	r3, r2, r3
100028a0:	331c      	adds	r3, #28
100028a2:	2200      	movs	r2, #0
100028a4:	601a      	str	r2, [r3, #0]
               TimerTbl[Count].TimerNext   = NULL;
100028a6:	4a0c      	ldr	r2, [pc, #48]	; (100028d8 <SYSTM001_CreateTimer+0x120>)
100028a8:	69bb      	ldr	r3, [r7, #24]
100028aa:	015b      	lsls	r3, r3, #5
100028ac:	18d3      	adds	r3, r2, r3
100028ae:	3318      	adds	r3, #24
100028b0:	2200      	movs	r2, #0
100028b2:	601a      	str	r2, [r3, #0]
               TimerID = Count + 1U;
100028b4:	69bb      	ldr	r3, [r7, #24]
100028b6:	3301      	adds	r3, #1
100028b8:	61fb      	str	r3, [r7, #28]
               break;
100028ba:	e005      	b.n	100028c8 <SYSTM001_CreateTimer+0x110>
      Error=(uint32_t)1UL;
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
    }
    if (!Error)	
    {
       for(Count = 0UL; Count < SYSTM001_CFG_MAX_TMR; Count++)
100028bc:	69bb      	ldr	r3, [r7, #24]
100028be:	3301      	adds	r3, #1
100028c0:	61bb      	str	r3, [r7, #24]
100028c2:	69bb      	ldr	r3, [r7, #24]
100028c4:	2b09      	cmp	r3, #9
100028c6:	d9a8      	bls.n	1000281a <SYSTM001_CreateTimer+0x62>
               break;
            }
        }
    }

  return (handle_t)TimerID;
100028c8:	69fb      	ldr	r3, [r7, #28]
}  
100028ca:	1c18      	adds	r0, r3, #0
100028cc:	46bd      	mov	sp, r7
100028ce:	b008      	add	sp, #32
100028d0:	bd80      	pop	{r7, pc}
100028d2:	46c0      	nop			; (mov r8, r8)
100028d4:	20000934 	.word	0x20000934
100028d8:	20000944 	.word	0x20000944

100028dc <SYSTM001_StartTimer>:

/*
 *  Interface to start the software timer .
 */
status_t SYSTM001_StartTimer(handle_t  Handle) 
{
100028dc:	b580      	push	{r7, lr}
100028de:	b084      	sub	sp, #16
100028e0:	af00      	add	r7, sp, #0
100028e2:	6078      	str	r0, [r7, #4]
  status_t Error = (status_t )DAVEApp_SUCCESS;
100028e4:	2300      	movs	r3, #0
100028e6:	60fb      	str	r3, [r7, #12]


  /* Check validity of parameter */
  if(Handle > SYSTM001_CFG_MAX_TMR)
100028e8:	687b      	ldr	r3, [r7, #4]
100028ea:	2b0a      	cmp	r3, #10
100028ec:	d901      	bls.n	100028f2 <SYSTM001_StartTimer+0x16>
  {
    Error = (status_t)SYSTM001_INVALID_HANDLE_ERROR;
100028ee:	2301      	movs	r3, #1
100028f0:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  if( (TimerTracker & (1UL << (uint32_t)(Handle - 1U))) == 0UL)
100028f2:	4b18      	ldr	r3, [pc, #96]	; (10002954 <SYSTM001_StartTimer+0x78>)
100028f4:	681a      	ldr	r2, [r3, #0]
100028f6:	687b      	ldr	r3, [r7, #4]
100028f8:	3b01      	subs	r3, #1
100028fa:	40da      	lsrs	r2, r3
100028fc:	2301      	movs	r3, #1
100028fe:	4013      	ands	r3, r2
10002900:	d101      	bne.n	10002906 <SYSTM001_StartTimer+0x2a>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10002902:	2301      	movs	r3, #1
10002904:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  /* Any timer with time '0', can't start again. */
  if(TimerTbl[Handle - 1U].TimerCount == 0UL)
10002906:	687b      	ldr	r3, [r7, #4]
10002908:	3b01      	subs	r3, #1
1000290a:	4a13      	ldr	r2, [pc, #76]	; (10002958 <SYSTM001_StartTimer+0x7c>)
1000290c:	015b      	lsls	r3, r3, #5
1000290e:	18d3      	adds	r3, r2, r3
10002910:	3308      	adds	r3, #8
10002912:	681b      	ldr	r3, [r3, #0]
10002914:	2b00      	cmp	r3, #0
10002916:	d101      	bne.n	1000291c <SYSTM001_StartTimer+0x40>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10002918:	2301      	movs	r3, #1
1000291a:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  
  
  if(Error == (status_t)DAVEApp_SUCCESS)
1000291c:	68fb      	ldr	r3, [r7, #12]
1000291e:	2b00      	cmp	r3, #0
10002920:	d113      	bne.n	1000294a <SYSTM001_StartTimer+0x6e>
  {
    /* Check if timer is running */
    if(TimerTbl[(Handle - 1U)].TimerState != SYSTM001_STATE_RUNNING)
10002922:	687b      	ldr	r3, [r7, #4]
10002924:	3b01      	subs	r3, #1
10002926:	4a0c      	ldr	r2, [pc, #48]	; (10002958 <SYSTM001_StartTimer+0x7c>)
10002928:	015b      	lsls	r3, r3, #5
1000292a:	18d3      	adds	r3, r2, r3
1000292c:	795b      	ldrb	r3, [r3, #5]
1000292e:	2b00      	cmp	r3, #0
10002930:	d00b      	beq.n	1000294a <SYSTM001_StartTimer+0x6e>
    {
      /* set timer status as SYSTM001_STATE_RUNNING */
      TimerTbl[(Handle - 1U)].TimerState = SYSTM001_STATE_RUNNING;
10002932:	687b      	ldr	r3, [r7, #4]
10002934:	3b01      	subs	r3, #1
10002936:	4a08      	ldr	r2, [pc, #32]	; (10002958 <SYSTM001_StartTimer+0x7c>)
10002938:	015b      	lsls	r3, r3, #5
1000293a:	18d3      	adds	r3, r2, r3
1000293c:	2200      	movs	r2, #0
1000293e:	715a      	strb	r2, [r3, #5]
      /* Insert this timer into timer list  */
      SYSTM001_lInsertTimerList((Handle - 1U));
10002940:	687b      	ldr	r3, [r7, #4]
10002942:	3b01      	subs	r3, #1
10002944:	1c18      	adds	r0, r3, #0
10002946:	f7ff fda9 	bl	1000249c <SYSTM001_lInsertTimerList>
    }
  }

  return Error;
1000294a:	68fb      	ldr	r3, [r7, #12]
}
1000294c:	1c18      	adds	r0, r3, #0
1000294e:	46bd      	mov	sp, r7
10002950:	b004      	add	sp, #16
10002952:	bd80      	pop	{r7, pc}
10002954:	20000934 	.word	0x20000934
10002958:	20000944 	.word	0x20000944

1000295c <SYSTM001_StopTimer>:

/*
 *  Interface to stop the software timer.
 */
status_t SYSTM001_StopTimer(handle_t Handle) 
{
1000295c:	b580      	push	{r7, lr}
1000295e:	b084      	sub	sp, #16
10002960:	af00      	add	r7, sp, #0
10002962:	6078      	str	r0, [r7, #4]
  status_t Error = (status_t )DAVEApp_SUCCESS;
10002964:	2300      	movs	r3, #0
10002966:	60fb      	str	r3, [r7, #12]


  /* Check validity of parameter        */
  if(Handle > SYSTM001_CFG_MAX_TMR)
10002968:	687b      	ldr	r3, [r7, #4]
1000296a:	2b0a      	cmp	r3, #10
1000296c:	d901      	bls.n	10002972 <SYSTM001_StopTimer+0x16>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
1000296e:	2301      	movs	r3, #1
10002970:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  if( (TimerTracker & (1UL << (uint32_t)(Handle - 1U))) == 0UL)
10002972:	4b13      	ldr	r3, [pc, #76]	; (100029c0 <SYSTM001_StopTimer+0x64>)
10002974:	681a      	ldr	r2, [r3, #0]
10002976:	687b      	ldr	r3, [r7, #4]
10002978:	3b01      	subs	r3, #1
1000297a:	40da      	lsrs	r2, r3
1000297c:	2301      	movs	r3, #1
1000297e:	4013      	ands	r3, r2
10002980:	d101      	bne.n	10002986 <SYSTM001_StopTimer+0x2a>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10002982:	2301      	movs	r3, #1
10002984:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }

  if(Error == (status_t)DAVEApp_SUCCESS)
10002986:	68fb      	ldr	r3, [r7, #12]
10002988:	2b00      	cmp	r3, #0
1000298a:	d113      	bne.n	100029b4 <SYSTM001_StopTimer+0x58>
  {
    /* Check whether Timer is in Stop state */
    if(TimerTbl[(Handle - 1U)].TimerState != SYSTM001_STATE_STOPPED)
1000298c:	687b      	ldr	r3, [r7, #4]
1000298e:	3b01      	subs	r3, #1
10002990:	4a0c      	ldr	r2, [pc, #48]	; (100029c4 <SYSTM001_StopTimer+0x68>)
10002992:	015b      	lsls	r3, r3, #5
10002994:	18d3      	adds	r3, r2, r3
10002996:	795b      	ldrb	r3, [r3, #5]
10002998:	2b01      	cmp	r3, #1
1000299a:	d00b      	beq.n	100029b4 <SYSTM001_StopTimer+0x58>
    {
      /* remove Timer from node list */
      SYSTM001_lRemoveTimerList((Handle - 1U));
1000299c:	687b      	ldr	r3, [r7, #4]
1000299e:	3b01      	subs	r3, #1
100029a0:	1c18      	adds	r0, r3, #0
100029a2:	f7ff fe25 	bl	100025f0 <SYSTM001_lRemoveTimerList>

      /* Set timer status as SYSTM001_STATE_STOPPED  */
      TimerTbl[(Handle - 1U)].TimerState = SYSTM001_STATE_STOPPED;
100029a6:	687b      	ldr	r3, [r7, #4]
100029a8:	3b01      	subs	r3, #1
100029aa:	4a06      	ldr	r2, [pc, #24]	; (100029c4 <SYSTM001_StopTimer+0x68>)
100029ac:	015b      	lsls	r3, r3, #5
100029ae:	18d3      	adds	r3, r2, r3
100029b0:	2201      	movs	r2, #1
100029b2:	715a      	strb	r2, [r3, #5]
    }
  }

  return Error;
100029b4:	68fb      	ldr	r3, [r7, #12]
}
100029b6:	1c18      	adds	r0, r3, #0
100029b8:	46bd      	mov	sp, r7
100029ba:	b004      	add	sp, #16
100029bc:	bd80      	pop	{r7, pc}
100029be:	46c0      	nop			; (mov r8, r8)
100029c0:	20000934 	.word	0x20000934
100029c4:	20000944 	.word	0x20000944

100029c8 <SYSTM001_DeleteTimer>:

/*
 *  Function to delete the Timer instance.
 */
status_t SYSTM001_DeleteTimer(handle_t Handle) 
{
100029c8:	b580      	push	{r7, lr}
100029ca:	b084      	sub	sp, #16
100029cc:	af00      	add	r7, sp, #0
100029ce:	6078      	str	r0, [r7, #4]
  status_t Error = (status_t )DAVEApp_SUCCESS;
100029d0:	2300      	movs	r3, #0
100029d2:	60fb      	str	r3, [r7, #12]

  /* Check validity of parameter        */
  if(Handle > SYSTM001_CFG_MAX_TMR)
100029d4:	687b      	ldr	r3, [r7, #4]
100029d6:	2b0a      	cmp	r3, #10
100029d8:	d901      	bls.n	100029de <SYSTM001_DeleteTimer+0x16>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
100029da:	2301      	movs	r3, #1
100029dc:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  if( (TimerTracker & (1UL << (uint32_t)(Handle - 1U))) == 0UL)
100029de:	4b15      	ldr	r3, [pc, #84]	; (10002a34 <SYSTM001_DeleteTimer+0x6c>)
100029e0:	681a      	ldr	r2, [r3, #0]
100029e2:	687b      	ldr	r3, [r7, #4]
100029e4:	3b01      	subs	r3, #1
100029e6:	40da      	lsrs	r2, r3
100029e8:	2301      	movs	r3, #1
100029ea:	4013      	ands	r3, r2
100029ec:	d101      	bne.n	100029f2 <SYSTM001_DeleteTimer+0x2a>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
100029ee:	2301      	movs	r3, #1
100029f0:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }

  if(Error == (status_t)DAVEApp_SUCCESS)
100029f2:	68fb      	ldr	r3, [r7, #12]
100029f4:	2b00      	cmp	r3, #0
100029f6:	d118      	bne.n	10002a2a <SYSTM001_DeleteTimer+0x62>
  {
    /* Check if timer is running */
    if(TimerTbl[(Handle - 1U)].TimerState == SYSTM001_STATE_RUNNING)
100029f8:	687b      	ldr	r3, [r7, #4]
100029fa:	3b01      	subs	r3, #1
100029fc:	4a0e      	ldr	r2, [pc, #56]	; (10002a38 <SYSTM001_DeleteTimer+0x70>)
100029fe:	015b      	lsls	r3, r3, #5
10002a00:	18d3      	adds	r3, r2, r3
10002a02:	795b      	ldrb	r3, [r3, #5]
10002a04:	2b00      	cmp	r3, #0
10002a06:	d104      	bne.n	10002a12 <SYSTM001_DeleteTimer+0x4a>
    {
      /* Yes,remove this timer from timer list*/
      SYSTM001_lRemoveTimerList((Handle - 1U));
10002a08:	687b      	ldr	r3, [r7, #4]
10002a0a:	3b01      	subs	r3, #1
10002a0c:	1c18      	adds	r0, r3, #0
10002a0e:	f7ff fdef 	bl	100025f0 <SYSTM001_lRemoveTimerList>
    }

    /* Release resource that this timer hold*/
    TimerTracker &=~((uint32_t)1U << (Handle - 1U));
10002a12:	687b      	ldr	r3, [r7, #4]
10002a14:	3b01      	subs	r3, #1
10002a16:	2201      	movs	r2, #1
10002a18:	1c11      	adds	r1, r2, #0
10002a1a:	4099      	lsls	r1, r3
10002a1c:	1c0b      	adds	r3, r1, #0
10002a1e:	43da      	mvns	r2, r3
10002a20:	4b04      	ldr	r3, [pc, #16]	; (10002a34 <SYSTM001_DeleteTimer+0x6c>)
10002a22:	681b      	ldr	r3, [r3, #0]
10002a24:	401a      	ands	r2, r3
10002a26:	4b03      	ldr	r3, [pc, #12]	; (10002a34 <SYSTM001_DeleteTimer+0x6c>)
10002a28:	601a      	str	r2, [r3, #0]
  }

  return Error;
10002a2a:	68fb      	ldr	r3, [r7, #12]

}
10002a2c:	1c18      	adds	r0, r3, #0
10002a2e:	46bd      	mov	sp, r7
10002a30:	b004      	add	sp, #16
10002a32:	bd80      	pop	{r7, pc}
10002a34:	20000934 	.word	0x20000934
10002a38:	20000944 	.word	0x20000944

10002a3c <SYSTM001_GetTime>:

/*
 *  Interface to get the current system time.
 */
uint32_t  SYSTM001_GetTime(void)
{
10002a3c:	b580      	push	{r7, lr}
10002a3e:	af00      	add	r7, sp, #0
  /* <<<DD_SYSTM001 _API_6>>> */
  return CONVERT_SYSTICK_COUNT_TO_MSEC(SysTickCount);
10002a40:	4b02      	ldr	r3, [pc, #8]	; (10002a4c <SYSTM001_GetTime+0x10>)
10002a42:	681b      	ldr	r3, [r3, #0]
}
10002a44:	1c18      	adds	r0, r3, #0
10002a46:	46bd      	mov	sp, r7
10002a48:	bd80      	pop	{r7, pc}
10002a4a:	46c0      	nop			; (mov r8, r8)
10002a4c:	20000938 	.word	0x20000938

10002a50 <SYSTM001_GetSysTickCount>:
/*
 *  Utility function to get the no of system ticks for the 
 *  specified period.
 */
uint32_t  SYSTM001_GetSysTickCount(uint32_t Period ) 
{
10002a50:	b590      	push	{r4, r7, lr}
10002a52:	b085      	sub	sp, #20
10002a54:	af00      	add	r7, sp, #0
10002a56:	6078      	str	r0, [r7, #4]
  /* <<<DD_SYSTM001 _API_7>>> */
  uint32_t	Count  = CONVERT_MSEC_TO_SYSICK_COUNT(Period);
10002a58:	6878      	ldr	r0, [r7, #4]
10002a5a:	f001 fe9d 	bl	10004798 <__aeabi_ui2d>
10002a5e:	1c03      	adds	r3, r0, #0
10002a60:	1c0c      	adds	r4, r1, #0
10002a62:	1c18      	adds	r0, r3, #0
10002a64:	1c21      	adds	r1, r4, #0
10002a66:	4b0d      	ldr	r3, [pc, #52]	; (10002a9c <SYSTM001_GetSysTickCount+0x4c>)
10002a68:	4a0b      	ldr	r2, [pc, #44]	; (10002a98 <SYSTM001_GetSysTickCount+0x48>)
10002a6a:	f001 f86d 	bl	10003b48 <__aeabi_dmul>
10002a6e:	1c03      	adds	r3, r0, #0
10002a70:	1c0c      	adds	r4, r1, #0
10002a72:	1c18      	adds	r0, r3, #0
10002a74:	1c21      	adds	r1, r4, #0
10002a76:	4a0a      	ldr	r2, [pc, #40]	; (10002aa0 <SYSTM001_GetSysTickCount+0x50>)
10002a78:	4b0a      	ldr	r3, [pc, #40]	; (10002aa4 <SYSTM001_GetSysTickCount+0x54>)
10002a7a:	f001 f865 	bl	10003b48 <__aeabi_dmul>
10002a7e:	1c03      	adds	r3, r0, #0
10002a80:	1c0c      	adds	r4, r1, #0
10002a82:	1c18      	adds	r0, r3, #0
10002a84:	1c21      	adds	r1, r4, #0
10002a86:	f000 fc1f 	bl	100032c8 <__aeabi_d2uiz>
10002a8a:	1c03      	adds	r3, r0, #0
10002a8c:	60fb      	str	r3, [r7, #12]
  return Count;
10002a8e:	68fb      	ldr	r3, [r7, #12]
}
10002a90:	1c18      	adds	r0, r3, #0
10002a92:	46bd      	mov	sp, r7
10002a94:	b005      	add	sp, #20
10002a96:	bd90      	pop	{r4, r7, pc}
10002a98:	00000000 	.word	0x00000000
10002a9c:	40200000 	.word	0x40200000
10002aa0:	00000000 	.word	0x00000000
10002aa4:	408f4000 	.word	0x408f4000

10002aa8 <IO004_Init>:
/** @ingroup IO004_Func
 * @{
 */

void IO004_Init(void)
{
10002aa8:	b580      	push	{r7, lr}
10002aaa:	af00      	add	r7, sp, #0
   /* <<<DD_IO004_API_1>>> */

	   

  /* Configuration of 1 Port 0 based on User configuration */
  IO004_Handle0.PortRegs->OMR = 0U<< 0;
10002aac:	4b0a      	ldr	r3, [pc, #40]	; (10002ad8 <IO004_Init+0x30>)
10002aae:	685b      	ldr	r3, [r3, #4]
10002ab0:	2200      	movs	r2, #0
10002ab2:	605a      	str	r2, [r3, #4]
  
  IO004_Handle0.PortRegs->IOCR0 |= (0U << 3);   
10002ab4:	4b08      	ldr	r3, [pc, #32]	; (10002ad8 <IO004_Init+0x30>)
10002ab6:	685b      	ldr	r3, [r3, #4]
10002ab8:	4a07      	ldr	r2, [pc, #28]	; (10002ad8 <IO004_Init+0x30>)
10002aba:	6852      	ldr	r2, [r2, #4]
10002abc:	6912      	ldr	r2, [r2, #16]
10002abe:	611a      	str	r2, [r3, #16]

  /* Configuration of 1 Port 1 based on User configuration */
  IO004_Handle1.PortRegs->OMR = 0U<< 1;
10002ac0:	4b06      	ldr	r3, [pc, #24]	; (10002adc <IO004_Init+0x34>)
10002ac2:	685b      	ldr	r3, [r3, #4]
10002ac4:	2200      	movs	r2, #0
10002ac6:	605a      	str	r2, [r3, #4]
  
  IO004_Handle1.PortRegs->IOCR0 |= (0U << 11);
10002ac8:	4b04      	ldr	r3, [pc, #16]	; (10002adc <IO004_Init+0x34>)
10002aca:	685b      	ldr	r3, [r3, #4]
10002acc:	4a03      	ldr	r2, [pc, #12]	; (10002adc <IO004_Init+0x34>)
10002ace:	6852      	ldr	r2, [r2, #4]
10002ad0:	6912      	ldr	r2, [r2, #16]
10002ad2:	611a      	str	r2, [r3, #16]
}
10002ad4:	46bd      	mov	sp, r7
10002ad6:	bd80      	pop	{r7, pc}
10002ad8:	10004d98 	.word	0x10004d98
10002adc:	10004da0 	.word	0x10004da0

10002ae0 <IO004_DisableOutputDriver>:

void IO004_DisableOutputDriver(const IO004_HandleType* Handle,IO004_InputModeType Mode)
{
10002ae0:	b590      	push	{r4, r7, lr}
10002ae2:	b085      	sub	sp, #20
10002ae4:	af00      	add	r7, sp, #0
10002ae6:	6078      	str	r0, [r7, #4]
10002ae8:	1c0a      	adds	r2, r1, #0
10002aea:	1cfb      	adds	r3, r7, #3
10002aec:	701a      	strb	r2, [r3, #0]
  uint8_t Pin = Handle->PortPin;
10002aee:	1c3b      	adds	r3, r7, #0
10002af0:	330f      	adds	r3, #15
10002af2:	687a      	ldr	r2, [r7, #4]
10002af4:	7852      	ldrb	r2, [r2, #1]
10002af6:	701a      	strb	r2, [r3, #0]
  /* <<<DD_IO004_API_2>>> */
  if(Pin < 4U)
10002af8:	1c3b      	adds	r3, r7, #0
10002afa:	330f      	adds	r3, #15
10002afc:	781b      	ldrb	r3, [r3, #0]
10002afe:	2b03      	cmp	r3, #3
10002b00:	d824      	bhi.n	10002b4c <IO004_DisableOutputDriver+0x6c>
  {
    Handle->PortRegs->IOCR0  =  (uint32_t)(Handle->PortRegs->IOCR0 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002b02:	687b      	ldr	r3, [r7, #4]
10002b04:	685b      	ldr	r3, [r3, #4]
10002b06:	687a      	ldr	r2, [r7, #4]
10002b08:	6852      	ldr	r2, [r2, #4]
10002b0a:	6912      	ldr	r2, [r2, #16]
10002b0c:	1c39      	adds	r1, r7, #0
10002b0e:	310f      	adds	r1, #15
10002b10:	7809      	ldrb	r1, [r1, #0]
10002b12:	00c9      	lsls	r1, r1, #3
10002b14:	3103      	adds	r1, #3
10002b16:	201f      	movs	r0, #31
10002b18:	1c04      	adds	r4, r0, #0
10002b1a:	408c      	lsls	r4, r1
10002b1c:	1c21      	adds	r1, r4, #0
10002b1e:	43c9      	mvns	r1, r1
10002b20:	400a      	ands	r2, r1
10002b22:	611a      	str	r2, [r3, #16]
    Handle->PortRegs->IOCR0 |= (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002b24:	687b      	ldr	r3, [r7, #4]
10002b26:	685b      	ldr	r3, [r3, #4]
10002b28:	687a      	ldr	r2, [r7, #4]
10002b2a:	6852      	ldr	r2, [r2, #4]
10002b2c:	6911      	ldr	r1, [r2, #16]
10002b2e:	1cfa      	adds	r2, r7, #3
10002b30:	7810      	ldrb	r0, [r2, #0]
10002b32:	221f      	movs	r2, #31
10002b34:	4010      	ands	r0, r2
10002b36:	1c3a      	adds	r2, r7, #0
10002b38:	320f      	adds	r2, #15
10002b3a:	7812      	ldrb	r2, [r2, #0]
10002b3c:	00d2      	lsls	r2, r2, #3
10002b3e:	3203      	adds	r2, #3
10002b40:	1c04      	adds	r4, r0, #0
10002b42:	4094      	lsls	r4, r2
10002b44:	1c22      	adds	r2, r4, #0
10002b46:	430a      	orrs	r2, r1
10002b48:	611a      	str	r2, [r3, #16]
10002b4a:	e0a0      	b.n	10002c8e <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 4U) && (Pin <= 7U))
10002b4c:	1c3b      	adds	r3, r7, #0
10002b4e:	330f      	adds	r3, #15
10002b50:	781b      	ldrb	r3, [r3, #0]
10002b52:	2b03      	cmp	r3, #3
10002b54:	d930      	bls.n	10002bb8 <IO004_DisableOutputDriver+0xd8>
10002b56:	1c3b      	adds	r3, r7, #0
10002b58:	330f      	adds	r3, #15
10002b5a:	781b      	ldrb	r3, [r3, #0]
10002b5c:	2b07      	cmp	r3, #7
10002b5e:	d82b      	bhi.n	10002bb8 <IO004_DisableOutputDriver+0xd8>
  {
    Pin = Pin - 4U;
10002b60:	1c3b      	adds	r3, r7, #0
10002b62:	330f      	adds	r3, #15
10002b64:	1c3a      	adds	r2, r7, #0
10002b66:	320f      	adds	r2, #15
10002b68:	7812      	ldrb	r2, [r2, #0]
10002b6a:	3a04      	subs	r2, #4
10002b6c:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR4  =  (uint32_t)(Handle->PortRegs->IOCR4 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002b6e:	687b      	ldr	r3, [r7, #4]
10002b70:	685b      	ldr	r3, [r3, #4]
10002b72:	687a      	ldr	r2, [r7, #4]
10002b74:	6852      	ldr	r2, [r2, #4]
10002b76:	6952      	ldr	r2, [r2, #20]
10002b78:	1c39      	adds	r1, r7, #0
10002b7a:	310f      	adds	r1, #15
10002b7c:	7809      	ldrb	r1, [r1, #0]
10002b7e:	00c9      	lsls	r1, r1, #3
10002b80:	3103      	adds	r1, #3
10002b82:	201f      	movs	r0, #31
10002b84:	1c04      	adds	r4, r0, #0
10002b86:	408c      	lsls	r4, r1
10002b88:	1c21      	adds	r1, r4, #0
10002b8a:	43c9      	mvns	r1, r1
10002b8c:	400a      	ands	r2, r1
10002b8e:	615a      	str	r2, [r3, #20]
    Handle->PortRegs->IOCR4 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002b90:	687b      	ldr	r3, [r7, #4]
10002b92:	685b      	ldr	r3, [r3, #4]
10002b94:	687a      	ldr	r2, [r7, #4]
10002b96:	6852      	ldr	r2, [r2, #4]
10002b98:	6951      	ldr	r1, [r2, #20]
10002b9a:	1cfa      	adds	r2, r7, #3
10002b9c:	7810      	ldrb	r0, [r2, #0]
10002b9e:	221f      	movs	r2, #31
10002ba0:	4010      	ands	r0, r2
10002ba2:	1c3a      	adds	r2, r7, #0
10002ba4:	320f      	adds	r2, #15
10002ba6:	7812      	ldrb	r2, [r2, #0]
10002ba8:	00d2      	lsls	r2, r2, #3
10002baa:	3203      	adds	r2, #3
10002bac:	1c04      	adds	r4, r0, #0
10002bae:	4094      	lsls	r4, r2
10002bb0:	1c22      	adds	r2, r4, #0
10002bb2:	430a      	orrs	r2, r1
10002bb4:	615a      	str	r2, [r3, #20]
10002bb6:	e06a      	b.n	10002c8e <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 8U) && (Pin <= 11U))
10002bb8:	1c3b      	adds	r3, r7, #0
10002bba:	330f      	adds	r3, #15
10002bbc:	781b      	ldrb	r3, [r3, #0]
10002bbe:	2b07      	cmp	r3, #7
10002bc0:	d930      	bls.n	10002c24 <IO004_DisableOutputDriver+0x144>
10002bc2:	1c3b      	adds	r3, r7, #0
10002bc4:	330f      	adds	r3, #15
10002bc6:	781b      	ldrb	r3, [r3, #0]
10002bc8:	2b0b      	cmp	r3, #11
10002bca:	d82b      	bhi.n	10002c24 <IO004_DisableOutputDriver+0x144>
  {
    Pin = Pin - 8U;
10002bcc:	1c3b      	adds	r3, r7, #0
10002bce:	330f      	adds	r3, #15
10002bd0:	1c3a      	adds	r2, r7, #0
10002bd2:	320f      	adds	r2, #15
10002bd4:	7812      	ldrb	r2, [r2, #0]
10002bd6:	3a08      	subs	r2, #8
10002bd8:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR8  =  (uint32_t)(Handle->PortRegs->IOCR8 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002bda:	687b      	ldr	r3, [r7, #4]
10002bdc:	685b      	ldr	r3, [r3, #4]
10002bde:	687a      	ldr	r2, [r7, #4]
10002be0:	6852      	ldr	r2, [r2, #4]
10002be2:	6992      	ldr	r2, [r2, #24]
10002be4:	1c39      	adds	r1, r7, #0
10002be6:	310f      	adds	r1, #15
10002be8:	7809      	ldrb	r1, [r1, #0]
10002bea:	00c9      	lsls	r1, r1, #3
10002bec:	3103      	adds	r1, #3
10002bee:	201f      	movs	r0, #31
10002bf0:	1c04      	adds	r4, r0, #0
10002bf2:	408c      	lsls	r4, r1
10002bf4:	1c21      	adds	r1, r4, #0
10002bf6:	43c9      	mvns	r1, r1
10002bf8:	400a      	ands	r2, r1
10002bfa:	619a      	str	r2, [r3, #24]
    Handle->PortRegs->IOCR8 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002bfc:	687b      	ldr	r3, [r7, #4]
10002bfe:	685b      	ldr	r3, [r3, #4]
10002c00:	687a      	ldr	r2, [r7, #4]
10002c02:	6852      	ldr	r2, [r2, #4]
10002c04:	6991      	ldr	r1, [r2, #24]
10002c06:	1cfa      	adds	r2, r7, #3
10002c08:	7810      	ldrb	r0, [r2, #0]
10002c0a:	221f      	movs	r2, #31
10002c0c:	4010      	ands	r0, r2
10002c0e:	1c3a      	adds	r2, r7, #0
10002c10:	320f      	adds	r2, #15
10002c12:	7812      	ldrb	r2, [r2, #0]
10002c14:	00d2      	lsls	r2, r2, #3
10002c16:	3203      	adds	r2, #3
10002c18:	1c04      	adds	r4, r0, #0
10002c1a:	4094      	lsls	r4, r2
10002c1c:	1c22      	adds	r2, r4, #0
10002c1e:	430a      	orrs	r2, r1
10002c20:	619a      	str	r2, [r3, #24]
10002c22:	e034      	b.n	10002c8e <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 12U) && (Pin <= 15U))
10002c24:	1c3b      	adds	r3, r7, #0
10002c26:	330f      	adds	r3, #15
10002c28:	781b      	ldrb	r3, [r3, #0]
10002c2a:	2b0b      	cmp	r3, #11
10002c2c:	d92f      	bls.n	10002c8e <IO004_DisableOutputDriver+0x1ae>
10002c2e:	1c3b      	adds	r3, r7, #0
10002c30:	330f      	adds	r3, #15
10002c32:	781b      	ldrb	r3, [r3, #0]
10002c34:	2b0f      	cmp	r3, #15
10002c36:	d82a      	bhi.n	10002c8e <IO004_DisableOutputDriver+0x1ae>
  {
    Pin = Pin - 12U;
10002c38:	1c3b      	adds	r3, r7, #0
10002c3a:	330f      	adds	r3, #15
10002c3c:	1c3a      	adds	r2, r7, #0
10002c3e:	320f      	adds	r2, #15
10002c40:	7812      	ldrb	r2, [r2, #0]
10002c42:	3a0c      	subs	r2, #12
10002c44:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR12  =  (uint32_t)(Handle->PortRegs->IOCR12 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002c46:	687b      	ldr	r3, [r7, #4]
10002c48:	685b      	ldr	r3, [r3, #4]
10002c4a:	687a      	ldr	r2, [r7, #4]
10002c4c:	6852      	ldr	r2, [r2, #4]
10002c4e:	69d2      	ldr	r2, [r2, #28]
10002c50:	1c39      	adds	r1, r7, #0
10002c52:	310f      	adds	r1, #15
10002c54:	7809      	ldrb	r1, [r1, #0]
10002c56:	00c9      	lsls	r1, r1, #3
10002c58:	3103      	adds	r1, #3
10002c5a:	201f      	movs	r0, #31
10002c5c:	1c04      	adds	r4, r0, #0
10002c5e:	408c      	lsls	r4, r1
10002c60:	1c21      	adds	r1, r4, #0
10002c62:	43c9      	mvns	r1, r1
10002c64:	400a      	ands	r2, r1
10002c66:	61da      	str	r2, [r3, #28]
    Handle->PortRegs->IOCR12 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002c68:	687b      	ldr	r3, [r7, #4]
10002c6a:	685b      	ldr	r3, [r3, #4]
10002c6c:	687a      	ldr	r2, [r7, #4]
10002c6e:	6852      	ldr	r2, [r2, #4]
10002c70:	69d1      	ldr	r1, [r2, #28]
10002c72:	1cfa      	adds	r2, r7, #3
10002c74:	7810      	ldrb	r0, [r2, #0]
10002c76:	221f      	movs	r2, #31
10002c78:	4010      	ands	r0, r2
10002c7a:	1c3a      	adds	r2, r7, #0
10002c7c:	320f      	adds	r2, #15
10002c7e:	7812      	ldrb	r2, [r2, #0]
10002c80:	00d2      	lsls	r2, r2, #3
10002c82:	3203      	adds	r2, #3
10002c84:	1c04      	adds	r4, r0, #0
10002c86:	4094      	lsls	r4, r2
10002c88:	1c22      	adds	r2, r4, #0
10002c8a:	430a      	orrs	r2, r1
10002c8c:	61da      	str	r2, [r3, #28]
  else
  {
	  /*Not supposed to be here */
  }

}
10002c8e:	46bd      	mov	sp, r7
10002c90:	b005      	add	sp, #20
10002c92:	bd90      	pop	{r4, r7, pc}

10002c94 <IO004_EnableOutputDriver>:

void IO004_EnableOutputDriver(const IO004_HandleType* Handle,IO004_OutputModeType Mode)
{
10002c94:	b590      	push	{r4, r7, lr}
10002c96:	b085      	sub	sp, #20
10002c98:	af00      	add	r7, sp, #0
10002c9a:	6078      	str	r0, [r7, #4]
10002c9c:	1c0a      	adds	r2, r1, #0
10002c9e:	1cfb      	adds	r3, r7, #3
10002ca0:	701a      	strb	r2, [r3, #0]

  uint8_t Pin = Handle->PortPin;
10002ca2:	1c3b      	adds	r3, r7, #0
10002ca4:	330f      	adds	r3, #15
10002ca6:	687a      	ldr	r2, [r7, #4]
10002ca8:	7852      	ldrb	r2, [r2, #1]
10002caa:	701a      	strb	r2, [r3, #0]
  /* <<<DD_IO004_API_2>>> */
  if(Pin < 4U)
10002cac:	1c3b      	adds	r3, r7, #0
10002cae:	330f      	adds	r3, #15
10002cb0:	781b      	ldrb	r3, [r3, #0]
10002cb2:	2b03      	cmp	r3, #3
10002cb4:	d824      	bhi.n	10002d00 <IO004_EnableOutputDriver+0x6c>
  {
    Handle->PortRegs->IOCR0  =  (uint32_t)(Handle->PortRegs->IOCR0 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002cb6:	687b      	ldr	r3, [r7, #4]
10002cb8:	685b      	ldr	r3, [r3, #4]
10002cba:	687a      	ldr	r2, [r7, #4]
10002cbc:	6852      	ldr	r2, [r2, #4]
10002cbe:	6912      	ldr	r2, [r2, #16]
10002cc0:	1c39      	adds	r1, r7, #0
10002cc2:	310f      	adds	r1, #15
10002cc4:	7809      	ldrb	r1, [r1, #0]
10002cc6:	00c9      	lsls	r1, r1, #3
10002cc8:	3103      	adds	r1, #3
10002cca:	201f      	movs	r0, #31
10002ccc:	1c04      	adds	r4, r0, #0
10002cce:	408c      	lsls	r4, r1
10002cd0:	1c21      	adds	r1, r4, #0
10002cd2:	43c9      	mvns	r1, r1
10002cd4:	400a      	ands	r2, r1
10002cd6:	611a      	str	r2, [r3, #16]
    Handle->PortRegs->IOCR0 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002cd8:	687b      	ldr	r3, [r7, #4]
10002cda:	685b      	ldr	r3, [r3, #4]
10002cdc:	687a      	ldr	r2, [r7, #4]
10002cde:	6852      	ldr	r2, [r2, #4]
10002ce0:	6911      	ldr	r1, [r2, #16]
10002ce2:	1cfa      	adds	r2, r7, #3
10002ce4:	7810      	ldrb	r0, [r2, #0]
10002ce6:	221f      	movs	r2, #31
10002ce8:	4010      	ands	r0, r2
10002cea:	1c3a      	adds	r2, r7, #0
10002cec:	320f      	adds	r2, #15
10002cee:	7812      	ldrb	r2, [r2, #0]
10002cf0:	00d2      	lsls	r2, r2, #3
10002cf2:	3203      	adds	r2, #3
10002cf4:	1c04      	adds	r4, r0, #0
10002cf6:	4094      	lsls	r4, r2
10002cf8:	1c22      	adds	r2, r4, #0
10002cfa:	430a      	orrs	r2, r1
10002cfc:	611a      	str	r2, [r3, #16]
10002cfe:	e0a0      	b.n	10002e42 <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 4U) && (Pin <= 7U))
10002d00:	1c3b      	adds	r3, r7, #0
10002d02:	330f      	adds	r3, #15
10002d04:	781b      	ldrb	r3, [r3, #0]
10002d06:	2b03      	cmp	r3, #3
10002d08:	d930      	bls.n	10002d6c <IO004_EnableOutputDriver+0xd8>
10002d0a:	1c3b      	adds	r3, r7, #0
10002d0c:	330f      	adds	r3, #15
10002d0e:	781b      	ldrb	r3, [r3, #0]
10002d10:	2b07      	cmp	r3, #7
10002d12:	d82b      	bhi.n	10002d6c <IO004_EnableOutputDriver+0xd8>
  {
    Pin = Pin - 4U;
10002d14:	1c3b      	adds	r3, r7, #0
10002d16:	330f      	adds	r3, #15
10002d18:	1c3a      	adds	r2, r7, #0
10002d1a:	320f      	adds	r2, #15
10002d1c:	7812      	ldrb	r2, [r2, #0]
10002d1e:	3a04      	subs	r2, #4
10002d20:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR4  =  (uint32_t)(Handle->PortRegs->IOCR4 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002d22:	687b      	ldr	r3, [r7, #4]
10002d24:	685b      	ldr	r3, [r3, #4]
10002d26:	687a      	ldr	r2, [r7, #4]
10002d28:	6852      	ldr	r2, [r2, #4]
10002d2a:	6952      	ldr	r2, [r2, #20]
10002d2c:	1c39      	adds	r1, r7, #0
10002d2e:	310f      	adds	r1, #15
10002d30:	7809      	ldrb	r1, [r1, #0]
10002d32:	00c9      	lsls	r1, r1, #3
10002d34:	3103      	adds	r1, #3
10002d36:	201f      	movs	r0, #31
10002d38:	1c04      	adds	r4, r0, #0
10002d3a:	408c      	lsls	r4, r1
10002d3c:	1c21      	adds	r1, r4, #0
10002d3e:	43c9      	mvns	r1, r1
10002d40:	400a      	ands	r2, r1
10002d42:	615a      	str	r2, [r3, #20]
    Handle->PortRegs->IOCR4 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002d44:	687b      	ldr	r3, [r7, #4]
10002d46:	685b      	ldr	r3, [r3, #4]
10002d48:	687a      	ldr	r2, [r7, #4]
10002d4a:	6852      	ldr	r2, [r2, #4]
10002d4c:	6951      	ldr	r1, [r2, #20]
10002d4e:	1cfa      	adds	r2, r7, #3
10002d50:	7810      	ldrb	r0, [r2, #0]
10002d52:	221f      	movs	r2, #31
10002d54:	4010      	ands	r0, r2
10002d56:	1c3a      	adds	r2, r7, #0
10002d58:	320f      	adds	r2, #15
10002d5a:	7812      	ldrb	r2, [r2, #0]
10002d5c:	00d2      	lsls	r2, r2, #3
10002d5e:	3203      	adds	r2, #3
10002d60:	1c04      	adds	r4, r0, #0
10002d62:	4094      	lsls	r4, r2
10002d64:	1c22      	adds	r2, r4, #0
10002d66:	430a      	orrs	r2, r1
10002d68:	615a      	str	r2, [r3, #20]
10002d6a:	e06a      	b.n	10002e42 <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 8U) && (Pin <= 11U))
10002d6c:	1c3b      	adds	r3, r7, #0
10002d6e:	330f      	adds	r3, #15
10002d70:	781b      	ldrb	r3, [r3, #0]
10002d72:	2b07      	cmp	r3, #7
10002d74:	d930      	bls.n	10002dd8 <IO004_EnableOutputDriver+0x144>
10002d76:	1c3b      	adds	r3, r7, #0
10002d78:	330f      	adds	r3, #15
10002d7a:	781b      	ldrb	r3, [r3, #0]
10002d7c:	2b0b      	cmp	r3, #11
10002d7e:	d82b      	bhi.n	10002dd8 <IO004_EnableOutputDriver+0x144>
  {
    Pin = Pin - 8U;
10002d80:	1c3b      	adds	r3, r7, #0
10002d82:	330f      	adds	r3, #15
10002d84:	1c3a      	adds	r2, r7, #0
10002d86:	320f      	adds	r2, #15
10002d88:	7812      	ldrb	r2, [r2, #0]
10002d8a:	3a08      	subs	r2, #8
10002d8c:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR8  =  (uint32_t)(Handle->PortRegs->IOCR8 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002d8e:	687b      	ldr	r3, [r7, #4]
10002d90:	685b      	ldr	r3, [r3, #4]
10002d92:	687a      	ldr	r2, [r7, #4]
10002d94:	6852      	ldr	r2, [r2, #4]
10002d96:	6992      	ldr	r2, [r2, #24]
10002d98:	1c39      	adds	r1, r7, #0
10002d9a:	310f      	adds	r1, #15
10002d9c:	7809      	ldrb	r1, [r1, #0]
10002d9e:	00c9      	lsls	r1, r1, #3
10002da0:	3103      	adds	r1, #3
10002da2:	201f      	movs	r0, #31
10002da4:	1c04      	adds	r4, r0, #0
10002da6:	408c      	lsls	r4, r1
10002da8:	1c21      	adds	r1, r4, #0
10002daa:	43c9      	mvns	r1, r1
10002dac:	400a      	ands	r2, r1
10002dae:	619a      	str	r2, [r3, #24]
    Handle->PortRegs->IOCR8 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002db0:	687b      	ldr	r3, [r7, #4]
10002db2:	685b      	ldr	r3, [r3, #4]
10002db4:	687a      	ldr	r2, [r7, #4]
10002db6:	6852      	ldr	r2, [r2, #4]
10002db8:	6991      	ldr	r1, [r2, #24]
10002dba:	1cfa      	adds	r2, r7, #3
10002dbc:	7810      	ldrb	r0, [r2, #0]
10002dbe:	221f      	movs	r2, #31
10002dc0:	4010      	ands	r0, r2
10002dc2:	1c3a      	adds	r2, r7, #0
10002dc4:	320f      	adds	r2, #15
10002dc6:	7812      	ldrb	r2, [r2, #0]
10002dc8:	00d2      	lsls	r2, r2, #3
10002dca:	3203      	adds	r2, #3
10002dcc:	1c04      	adds	r4, r0, #0
10002dce:	4094      	lsls	r4, r2
10002dd0:	1c22      	adds	r2, r4, #0
10002dd2:	430a      	orrs	r2, r1
10002dd4:	619a      	str	r2, [r3, #24]
10002dd6:	e034      	b.n	10002e42 <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 12U) && (Pin <= 15U))
10002dd8:	1c3b      	adds	r3, r7, #0
10002dda:	330f      	adds	r3, #15
10002ddc:	781b      	ldrb	r3, [r3, #0]
10002dde:	2b0b      	cmp	r3, #11
10002de0:	d92f      	bls.n	10002e42 <IO004_EnableOutputDriver+0x1ae>
10002de2:	1c3b      	adds	r3, r7, #0
10002de4:	330f      	adds	r3, #15
10002de6:	781b      	ldrb	r3, [r3, #0]
10002de8:	2b0f      	cmp	r3, #15
10002dea:	d82a      	bhi.n	10002e42 <IO004_EnableOutputDriver+0x1ae>
  {
    Pin = Pin - 12U;
10002dec:	1c3b      	adds	r3, r7, #0
10002dee:	330f      	adds	r3, #15
10002df0:	1c3a      	adds	r2, r7, #0
10002df2:	320f      	adds	r2, #15
10002df4:	7812      	ldrb	r2, [r2, #0]
10002df6:	3a0c      	subs	r2, #12
10002df8:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR12  =  (uint32_t)(Handle->PortRegs->IOCR12 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002dfa:	687b      	ldr	r3, [r7, #4]
10002dfc:	685b      	ldr	r3, [r3, #4]
10002dfe:	687a      	ldr	r2, [r7, #4]
10002e00:	6852      	ldr	r2, [r2, #4]
10002e02:	69d2      	ldr	r2, [r2, #28]
10002e04:	1c39      	adds	r1, r7, #0
10002e06:	310f      	adds	r1, #15
10002e08:	7809      	ldrb	r1, [r1, #0]
10002e0a:	00c9      	lsls	r1, r1, #3
10002e0c:	3103      	adds	r1, #3
10002e0e:	201f      	movs	r0, #31
10002e10:	1c04      	adds	r4, r0, #0
10002e12:	408c      	lsls	r4, r1
10002e14:	1c21      	adds	r1, r4, #0
10002e16:	43c9      	mvns	r1, r1
10002e18:	400a      	ands	r2, r1
10002e1a:	61da      	str	r2, [r3, #28]
    Handle->PortRegs->IOCR12 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002e1c:	687b      	ldr	r3, [r7, #4]
10002e1e:	685b      	ldr	r3, [r3, #4]
10002e20:	687a      	ldr	r2, [r7, #4]
10002e22:	6852      	ldr	r2, [r2, #4]
10002e24:	69d1      	ldr	r1, [r2, #28]
10002e26:	1cfa      	adds	r2, r7, #3
10002e28:	7810      	ldrb	r0, [r2, #0]
10002e2a:	221f      	movs	r2, #31
10002e2c:	4010      	ands	r0, r2
10002e2e:	1c3a      	adds	r2, r7, #0
10002e30:	320f      	adds	r2, #15
10002e32:	7812      	ldrb	r2, [r2, #0]
10002e34:	00d2      	lsls	r2, r2, #3
10002e36:	3203      	adds	r2, #3
10002e38:	1c04      	adds	r4, r0, #0
10002e3a:	4094      	lsls	r4, r2
10002e3c:	1c22      	adds	r2, r4, #0
10002e3e:	430a      	orrs	r2, r1
10002e40:	61da      	str	r2, [r3, #28]
  }
  else
  {
	  /*Not supposed to be here */
  }
}
10002e42:	46bd      	mov	sp, r7
10002e44:	b005      	add	sp, #20
10002e46:	bd90      	pop	{r4, r7, pc}

10002e48 <DAVE_Init>:
// @Parameters    None
//
//****************************************************************************

void DAVE_Init(void)
{
10002e48:	b580      	push	{r7, lr}
10002e4a:	af00      	add	r7, sp, #0

//****************************************************************************
// @Initialization of APPs Init Functions
//****************************************************************************
	//  MUX configurations
	DAVE_MUX_PreInit(); 
10002e4c:	f000 f88e 	bl	10002f6c <DAVE_MUX_PreInit>
	//  Initialization of app 'CLK002'		     
	CLK002_Init();
10002e50:	f000 f89a 	bl	10002f88 <CLK002_Init>
	 
	//  Initialization of app 'UART001'		     
	UART001_Init();
10002e54:	f7ff f83a 	bl	10001ecc <UART001_Init>
	 
	//  Initialization of app 'IO004'		     
	IO004_Init();
10002e58:	f7ff fe26 	bl	10002aa8 <IO004_Init>
	 
	//  Initialization of app 'SYSTM001'		     
	SYSTM001_Init();
10002e5c:	f7ff fc8a 	bl	10002774 <SYSTM001_Init>
	
      
	//  MUX configurations
	DAVE_MUX_Init();	
10002e60:	f000 f802 	bl	10002e68 <DAVE_MUX_Init>
} //  End of function DAVE_Init
10002e64:	46bd      	mov	sp, r7
10002e66:	bd80      	pop	{r7, pc}

10002e68 <DAVE_MUX_Init>:
** Description      : This is the Mux configuration                           **
**                                                                            **
*******************************************************************************/
           
void DAVE_MUX_Init(void)
{  
10002e68:	b580      	push	{r7, lr}
10002e6a:	b086      	sub	sp, #24
10002e6c:	af00      	add	r7, sp, #0
//********* MODULE USIC CONFIGURATIONS *************************	        
        
           
   /* Disable mode before configuring all USIC registers to avoid unintended edges */   
      /* Variable to store the CCR_MODE values for various USIC channels */ 
      uint32_t UsicCcrMode[6] = {0};
10002e6e:	1c3b      	adds	r3, r7, #0
10002e70:	2200      	movs	r2, #0
10002e72:	601a      	str	r2, [r3, #0]
10002e74:	3304      	adds	r3, #4
10002e76:	2200      	movs	r2, #0
10002e78:	601a      	str	r2, [r3, #0]
10002e7a:	3304      	adds	r3, #4
10002e7c:	2200      	movs	r2, #0
10002e7e:	601a      	str	r2, [r3, #0]
10002e80:	3304      	adds	r3, #4
10002e82:	2200      	movs	r2, #0
10002e84:	601a      	str	r2, [r3, #0]
10002e86:	3304      	adds	r3, #4
10002e88:	2200      	movs	r2, #0
10002e8a:	601a      	str	r2, [r3, #0]
10002e8c:	3304      	adds	r3, #4
10002e8e:	2200      	movs	r2, #0
10002e90:	601a      	str	r2, [r3, #0]
10002e92:	3304      	adds	r3, #4
                
    UsicCcrMode[1] |= (uint32_t) RD_REG(USIC0_CH1->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos); 
10002e94:	1c3b      	adds	r3, r7, #0
10002e96:	685a      	ldr	r2, [r3, #4]
10002e98:	4b2e      	ldr	r3, [pc, #184]	; (10002f54 <DAVE_MUX_Init+0xec>)
10002e9a:	6c19      	ldr	r1, [r3, #64]	; 0x40
10002e9c:	230f      	movs	r3, #15
10002e9e:	400b      	ands	r3, r1
10002ea0:	431a      	orrs	r2, r3
10002ea2:	1c3b      	adds	r3, r7, #0
10002ea4:	605a      	str	r2, [r3, #4]
    WR_REG(USIC0_CH1->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos,0);   
10002ea6:	4b2b      	ldr	r3, [pc, #172]	; (10002f54 <DAVE_MUX_Init+0xec>)
10002ea8:	4a2a      	ldr	r2, [pc, #168]	; (10002f54 <DAVE_MUX_Init+0xec>)
10002eaa:	6c12      	ldr	r2, [r2, #64]	; 0x40
10002eac:	210f      	movs	r1, #15
10002eae:	438a      	bics	r2, r1
10002eb0:	641a      	str	r2, [r3, #64]	; 0x40
      
    						
   /*USIC 0 Channel 0 Mux Related SFR/Bitfields Configurations*/ 									  					 				 				 		       				              				  					    					 					   				  					 				 				       				  										 									 					 					  									      					              					  						    					      
       						
   /*USIC 0 Channel 1 Mux Related SFR/Bitfields Configurations*/ 						         
 WR_REG(USIC0_CH1->DX0CR, USIC_CH_DX0CR_DSEL_Msk, USIC_CH_DX0CR_DSEL_Pos,6); 
10002eb2:	4b28      	ldr	r3, [pc, #160]	; (10002f54 <DAVE_MUX_Init+0xec>)
10002eb4:	4a27      	ldr	r2, [pc, #156]	; (10002f54 <DAVE_MUX_Init+0xec>)
10002eb6:	69d2      	ldr	r2, [r2, #28]
10002eb8:	2107      	movs	r1, #7
10002eba:	438a      	bics	r2, r1
10002ebc:	2106      	movs	r1, #6
10002ebe:	430a      	orrs	r2, r1
10002ec0:	61da      	str	r2, [r3, #28]
  			  					 				   
 WR_REG(USIC0_CH1->DX3CR, USIC_CH_DX3CR_DSEL_Msk, USIC_CH_DX3CR_DSEL_Pos,1);
10002ec2:	4b24      	ldr	r3, [pc, #144]	; (10002f54 <DAVE_MUX_Init+0xec>)
10002ec4:	4a23      	ldr	r2, [pc, #140]	; (10002f54 <DAVE_MUX_Init+0xec>)
10002ec6:	6a92      	ldr	r2, [r2, #40]	; 0x28
10002ec8:	2107      	movs	r1, #7
10002eca:	438a      	bics	r2, r1
10002ecc:	2101      	movs	r1, #1
10002ece:	430a      	orrs	r2, r1
10002ed0:	629a      	str	r2, [r3, #40]	; 0x28
    				 		       				              				  					    					 					   				  					 				 				       				  										 									 					 					  									      					              					  						    					      
                 
   // Data Pointer & Buffer Size for Transmitter Buffer Control  
 WR_REG(USIC0_CH1->TBCTR, USIC_CH_TBCTR_DPTRSIZE_Msk, USIC_CH_TBCTR_DPTRSIZE_Pos,0x01000002);		/*    DPTR = 2,  SIZE = 1 */ 
10002ed2:	4a20      	ldr	r2, [pc, #128]	; (10002f54 <DAVE_MUX_Init+0xec>)
10002ed4:	491f      	ldr	r1, [pc, #124]	; (10002f54 <DAVE_MUX_Init+0xec>)
10002ed6:	2384      	movs	r3, #132	; 0x84
10002ed8:	005b      	lsls	r3, r3, #1
10002eda:	58c9      	ldr	r1, [r1, r3]
10002edc:	4b1e      	ldr	r3, [pc, #120]	; (10002f58 <DAVE_MUX_Init+0xf0>)
10002ede:	400b      	ands	r3, r1
10002ee0:	491e      	ldr	r1, [pc, #120]	; (10002f5c <DAVE_MUX_Init+0xf4>)
10002ee2:	4319      	orrs	r1, r3
10002ee4:	2384      	movs	r3, #132	; 0x84
10002ee6:	005b      	lsls	r3, r3, #1
10002ee8:	50d1      	str	r1, [r2, r3]
         
  // Data Pointer & Buffer Size for Receiver Buffer Control  
 WR_REG(USIC0_CH1->RBCTR, USIC_CH_RBCTR_DPTRSIZE_Msk, USIC_CH_RBCTR_DPTRSIZE_Pos,0x01000000);		/*    DPTR = 0,  SIZE = 1 */ 
10002eea:	4a1a      	ldr	r2, [pc, #104]	; (10002f54 <DAVE_MUX_Init+0xec>)
10002eec:	4919      	ldr	r1, [pc, #100]	; (10002f54 <DAVE_MUX_Init+0xec>)
10002eee:	2386      	movs	r3, #134	; 0x86
10002ef0:	005b      	lsls	r3, r3, #1
10002ef2:	58c9      	ldr	r1, [r1, r3]
10002ef4:	4b18      	ldr	r3, [pc, #96]	; (10002f58 <DAVE_MUX_Init+0xf0>)
10002ef6:	400b      	ands	r3, r1
10002ef8:	2180      	movs	r1, #128	; 0x80
10002efa:	0449      	lsls	r1, r1, #17
10002efc:	4319      	orrs	r1, r3
10002efe:	2386      	movs	r3, #134	; 0x86
10002f00:	005b      	lsls	r3, r3, #1
10002f02:	50d1      	str	r1, [r2, r3]
   /*USIC 2 Channel 1 Mux Related SFR/Bitfields Configurations*/ 									  					 				 				 		       				              				  					    					 					   				  					 				 				       				  										 									 					 					  									      					              					  						    					      
         
  
  /* Enable mode after configuring all USIC registers to avoid unintended edges */  
             
   WR_REG(USIC0_CH1->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos,UsicCcrMode[1]);   
10002f04:	4b13      	ldr	r3, [pc, #76]	; (10002f54 <DAVE_MUX_Init+0xec>)
10002f06:	1c3a      	adds	r2, r7, #0
10002f08:	6851      	ldr	r1, [r2, #4]
10002f0a:	220f      	movs	r2, #15
10002f0c:	4011      	ands	r1, r2
10002f0e:	4a11      	ldr	r2, [pc, #68]	; (10002f54 <DAVE_MUX_Init+0xec>)
10002f10:	6c12      	ldr	r2, [r2, #64]	; 0x40
10002f12:	200f      	movs	r0, #15
10002f14:	4382      	bics	r2, r0
10002f16:	430a      	orrs	r2, r1
10002f18:	641a      	str	r2, [r3, #64]	; 0x40
   	 
            	         
                                                 

/*        PORT Macro definitions for IOCR_OE, IOCR_PCR & HWSEL_HW     */                                      
  WR_REG(PORT1->IOCR0, PORT_IOCR_PC0_OE_Msk, PORT_IOCR_PC0_OE_Pos, PORT_IOCR_OE1);                /*    P1.0 : PORT1_IOCR0_PC0_OE */					   
10002f1a:	4b11      	ldr	r3, [pc, #68]	; (10002f60 <DAVE_MUX_Init+0xf8>)
10002f1c:	4a10      	ldr	r2, [pc, #64]	; (10002f60 <DAVE_MUX_Init+0xf8>)
10002f1e:	6912      	ldr	r2, [r2, #16]
10002f20:	2180      	movs	r1, #128	; 0x80
10002f22:	430a      	orrs	r2, r1
10002f24:	611a      	str	r2, [r3, #16]
					                         
  WR_REG(PORT1->IOCR0, PORT_IOCR_PC1_OE_Msk, PORT_IOCR_PC1_OE_Pos, PORT_IOCR_OE1);                /*    P1.1 : PORT1_IOCR0_PC1_OE */					   
10002f26:	4b0e      	ldr	r3, [pc, #56]	; (10002f60 <DAVE_MUX_Init+0xf8>)
10002f28:	4a0d      	ldr	r2, [pc, #52]	; (10002f60 <DAVE_MUX_Init+0xf8>)
10002f2a:	6912      	ldr	r2, [r2, #16]
10002f2c:	2180      	movs	r1, #128	; 0x80
10002f2e:	0209      	lsls	r1, r1, #8
10002f30:	430a      	orrs	r2, r1
10002f32:	611a      	str	r2, [r3, #16]
					  
           
  WR_REG(PORT2->PDISC, PORT2_PDISC_PDIS10_Msk, PORT2_PDISC_PDIS10_Pos, PORT_PDISC_PDIS0);            /*    P2.10 : PORT2_PDISC_PDIS10 */                       
10002f34:	4b0b      	ldr	r3, [pc, #44]	; (10002f64 <DAVE_MUX_Init+0xfc>)
10002f36:	4a0b      	ldr	r2, [pc, #44]	; (10002f64 <DAVE_MUX_Init+0xfc>)
10002f38:	6e11      	ldr	r1, [r2, #96]	; 0x60
10002f3a:	4a0b      	ldr	r2, [pc, #44]	; (10002f68 <DAVE_MUX_Init+0x100>)
10002f3c:	400a      	ands	r2, r1
10002f3e:	661a      	str	r2, [r3, #96]	; 0x60
  WR_REG(PORT2->IOCR8, 0xb80000U, PORT_IOCR_PC2_PCR_Pos, 0x17U);                /*P2.10 : PORT2_IOCR8_PC10_PCR and PORT2_IOCR8_PC10_OE */					   
10002f40:	4b08      	ldr	r3, [pc, #32]	; (10002f64 <DAVE_MUX_Init+0xfc>)
10002f42:	4a08      	ldr	r2, [pc, #32]	; (10002f64 <DAVE_MUX_Init+0xfc>)
10002f44:	6992      	ldr	r2, [r2, #24]
10002f46:	21b8      	movs	r1, #184	; 0xb8
10002f48:	0409      	lsls	r1, r1, #16
10002f4a:	430a      	orrs	r2, r1
10002f4c:	619a      	str	r2, [r3, #24]
					      
}
10002f4e:	46bd      	mov	sp, r7
10002f50:	b006      	add	sp, #24
10002f52:	bd80      	pop	{r7, pc}
10002f54:	48000200 	.word	0x48000200
10002f58:	f8ffffc0 	.word	0xf8ffffc0
10002f5c:	01000002 	.word	0x01000002
10002f60:	40040100 	.word	0x40040100
10002f64:	40040200 	.word	0x40040200
10002f68:	fffffbff 	.word	0xfffffbff

10002f6c <DAVE_MUX_PreInit>:
** Description      : This is the Mux configuration                           **
**                                                                            **
*******************************************************************************/
 
void DAVE_MUX_PreInit(void)
{            
10002f6c:	b580      	push	{r7, lr}
10002f6e:	af00      	add	r7, sp, #0

/*        PORT Macro definitions for IOCR_OE, IOCR_PCR & HWSEL_HW     */               
           
  WR_REG(PORT2->PDISC, PORT2_PDISC_PDIS9_Msk, PORT2_PDISC_PDIS9_Pos, PORT_PDISC_PDIS0);            /*    P2.9 : PORT2_PDISC_PDIS9 */    
10002f70:	4b03      	ldr	r3, [pc, #12]	; (10002f80 <DAVE_MUX_PreInit+0x14>)
10002f72:	4a03      	ldr	r2, [pc, #12]	; (10002f80 <DAVE_MUX_PreInit+0x14>)
10002f74:	6e11      	ldr	r1, [r2, #96]	; 0x60
10002f76:	4a03      	ldr	r2, [pc, #12]	; (10002f84 <DAVE_MUX_PreInit+0x18>)
10002f78:	400a      	ands	r2, r1
10002f7a:	661a      	str	r2, [r3, #96]	; 0x60
}
10002f7c:	46bd      	mov	sp, r7
10002f7e:	bd80      	pop	{r7, pc}
10002f80:	40040200 	.word	0x40040200
10002f84:	fffffdff 	.word	0xfffffdff

10002f88 <CLK002_Init>:
  * @note   -
  * @param  None
  * @retval None
  */
void CLK002_Init(void)
{
10002f88:	b580      	push	{r7, lr}
10002f8a:	af00      	add	r7, sp, #0
    /* Open the lock that protects privileged bits. */
    SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_ALLOW;
10002f8c:	4b0a      	ldr	r3, [pc, #40]	; (10002fb8 <CLK002_Init+0x30>)
10002f8e:	22c0      	movs	r2, #192	; 0xc0
10002f90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Loop until protection is removed. */
    while(((SCU_GENERAL->PASSWD)&SCU_GENERAL_PASSWD_PROTS_Msk))
10002f92:	46c0      	nop			; (mov r8, r8)
10002f94:	4b08      	ldr	r3, [pc, #32]	; (10002fb8 <CLK002_Init+0x30>)
10002f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10002f98:	2304      	movs	r3, #4
10002f9a:	4013      	ands	r3, r2
10002f9c:	d1fa      	bne.n	10002f94 <CLK002_Init+0xc>
    {
	    ;
    }

    /* Update PCLK selection mux. */
    SCU_CLK->CLKCR|=(((uint32_t)CLK002_CLKCR_PCLKSEL<<\
10002f9e:	4b07      	ldr	r3, [pc, #28]	; (10002fbc <CLK002_Init+0x34>)
10002fa0:	4a06      	ldr	r2, [pc, #24]	; (10002fbc <CLK002_Init+0x34>)
10002fa2:	6812      	ldr	r2, [r2, #0]
10002fa4:	601a      	str	r2, [r3, #0]
	             (uint32_t)SCU_CLK_CLKCR_PCLKSEL_Pos)&SCU_CLK_CLKCR_PCLKSEL_Msk);

    CLK002_lDivUpdate();
10002fa6:	f000 f811 	bl	10002fcc <CLK002_lDivUpdate>

    /*Close the lock opened above. */
    SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_DISALLOW;
10002faa:	4b03      	ldr	r3, [pc, #12]	; (10002fb8 <CLK002_Init+0x30>)
10002fac:	22c3      	movs	r2, #195	; 0xc3
10002fae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update the clock variable */
    SystemCoreClockUpdate();
10002fb0:	f7fe fa8e 	bl	100014d0 <SystemCoreClockUpdate>
}
10002fb4:	46bd      	mov	sp, r7
10002fb6:	bd80      	pop	{r7, pc}
10002fb8:	40010000 	.word	0x40010000
10002fbc:	40010300 	.word	0x40010300

10002fc0 <AllowClkInitByStartup>:
*         proceeds with program  loading. Return 0 to disallow CStart from
*         performing clock tree setup.
*/

uint32_t AllowClkInitByStartup(void)
{
10002fc0:	b580      	push	{r7, lr}
10002fc2:	af00      	add	r7, sp, #0
    /* Return FALSE - Do not allow any initialisation by startup code. */
    return ((uint32_t)0);
10002fc4:	2300      	movs	r3, #0
}
10002fc6:	1c18      	adds	r0, r3, #0
10002fc8:	46bd      	mov	sp, r7
10002fca:	bd80      	pop	{r7, pc}

10002fcc <CLK002_lDivUpdate>:
  * @note   -
  * @param  None
  * @retval None
  */
static void CLK002_lDivUpdate(void)
{
10002fcc:	b580      	push	{r7, lr}
10002fce:	b084      	sub	sp, #16
10002fd0:	af00      	add	r7, sp, #0
 /*  Find out current and target value of idiv */
 uint32_t lCurrIdiv= (uint32_t) 0;      /* Current idiv. */
10002fd2:	2300      	movs	r3, #0
10002fd4:	60fb      	str	r3, [r7, #12]
 uint32_t lTargetidiv= (uint32_t) 0;    /* Target idiv. */
10002fd6:	2300      	movs	r3, #0
10002fd8:	60bb      	str	r3, [r7, #8]
 uint32_t lCLKCR;
 lCurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
10002fda:	4b18      	ldr	r3, [pc, #96]	; (1000303c <CLK002_lDivUpdate+0x70>)
10002fdc:	681a      	ldr	r2, [r3, #0]
10002fde:	23ff      	movs	r3, #255	; 0xff
10002fe0:	021b      	lsls	r3, r3, #8
10002fe2:	4013      	ands	r3, r2
10002fe4:	0a1b      	lsrs	r3, r3, #8
10002fe6:	60fb      	str	r3, [r7, #12]
 lTargetidiv = CLK002_CLKCR_IDIV;
10002fe8:	2304      	movs	r3, #4
10002fea:	60bb      	str	r3, [r7, #8]

 /* Update FDIV here, unconditionally. */

  lCLKCR = SCU_CLK->CLKCR;
10002fec:	4b13      	ldr	r3, [pc, #76]	; (1000303c <CLK002_lDivUpdate+0x70>)
10002fee:	681b      	ldr	r3, [r3, #0]
10002ff0:	607b      	str	r3, [r7, #4]
  WR_REG(lCLKCR, SCU_CLK_CLKCR_FDIV_Msk, SCU_CLK_CLKCR_FDIV_Pos,CLK002_CLKCR_FDIV);
10002ff2:	687b      	ldr	r3, [r7, #4]
10002ff4:	22ff      	movs	r2, #255	; 0xff
10002ff6:	4393      	bics	r3, r2
10002ff8:	607b      	str	r3, [r7, #4]
  SCU_CLK->CLKCR = lCLKCR;
10002ffa:	4b10      	ldr	r3, [pc, #64]	; (1000303c <CLK002_lDivUpdate+0x70>)
10002ffc:	687a      	ldr	r2, [r7, #4]
10002ffe:	601a      	str	r2, [r3, #0]

     /* Delay, till frequency stable, appox. 15us. */


  WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10003000:	4b0e      	ldr	r3, [pc, #56]	; (1000303c <CLK002_lDivUpdate+0x70>)
10003002:	4a0e      	ldr	r2, [pc, #56]	; (1000303c <CLK002_lDivUpdate+0x70>)
10003004:	6812      	ldr	r2, [r2, #0]
10003006:	490e      	ldr	r1, [pc, #56]	; (10003040 <CLK002_lDivUpdate+0x74>)
10003008:	430a      	orrs	r2, r1
1000300a:	601a      	str	r2, [r3, #0]
  while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
1000300c:	46c0      	nop			; (mov r8, r8)
1000300e:	4b0b      	ldr	r3, [pc, #44]	; (1000303c <CLK002_lDivUpdate+0x70>)
10003010:	681a      	ldr	r2, [r3, #0]
10003012:	2380      	movs	r3, #128	; 0x80
10003014:	05db      	lsls	r3, r3, #23
10003016:	4013      	ands	r3, r2
10003018:	d1f9      	bne.n	1000300e <CLK002_lDivUpdate+0x42>
    ;
  }


    /* Find out current value of direction in which idiv has to update. */
 if (lCurrIdiv==lTargetidiv)
1000301a:	68fa      	ldr	r2, [r7, #12]
1000301c:	68bb      	ldr	r3, [r7, #8]
1000301e:	429a      	cmp	r2, r3
10003020:	d008      	beq.n	10003034 <CLK002_lDivUpdate+0x68>
  {
   /*No change in IDIV. */
  }
 else if(lCurrIdiv < lTargetidiv)
10003022:	68fa      	ldr	r2, [r7, #12]
10003024:	68bb      	ldr	r3, [r7, #8]
10003026:	429a      	cmp	r2, r3
10003028:	d202      	bcs.n	10003030 <CLK002_lDivUpdate+0x64>
  {
    CLK002_lFrequencyDownScaling();
1000302a:	f000 f869 	bl	10003100 <CLK002_lFrequencyDownScaling>
1000302e:	e001      	b.n	10003034 <CLK002_lDivUpdate+0x68>
  }
  else
   {
     CLK002_lFrequencyUpScaling();
10003030:	f000 f808 	bl	10003044 <CLK002_lFrequencyUpScaling>
   }

}
10003034:	46bd      	mov	sp, r7
10003036:	b004      	add	sp, #16
10003038:	bd80      	pop	{r7, pc}
1000303a:	46c0      	nop			; (mov r8, r8)
1000303c:	40010300 	.word	0x40010300
10003040:	3ff00000 	.word	0x3ff00000

10003044 <CLK002_lFrequencyUpScaling>:
  * @note   -
  * @param  None
  * @retval None
  */
static void     CLK002_lFrequencyUpScaling()
{
10003044:	b580      	push	{r7, lr}
10003046:	b084      	sub	sp, #16
10003048:	af00      	add	r7, sp, #0
  uint32_t CurrIdiv;
  uint32_t TargetIdiv;
  uint32_t lCLKCR;
  CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
1000304a:	4b2a      	ldr	r3, [pc, #168]	; (100030f4 <CLK002_lFrequencyUpScaling+0xb0>)
1000304c:	681a      	ldr	r2, [r3, #0]
1000304e:	23ff      	movs	r3, #255	; 0xff
10003050:	021b      	lsls	r3, r3, #8
10003052:	4013      	ands	r3, r2
10003054:	0a1b      	lsrs	r3, r3, #8
10003056:	60fb      	str	r3, [r7, #12]
  TargetIdiv = CLK002_CLKCR_IDIV;
10003058:	2304      	movs	r3, #4
1000305a:	60bb      	str	r3, [r7, #8]
  while(1)
  {
    if(CurrIdiv > (TargetIdiv * 4UL))
1000305c:	68bb      	ldr	r3, [r7, #8]
1000305e:	009a      	lsls	r2, r3, #2
10003060:	68fb      	ldr	r3, [r7, #12]
10003062:	429a      	cmp	r2, r3
10003064:	d224      	bcs.n	100030b0 <CLK002_lFrequencyUpScaling+0x6c>
    {
        CurrIdiv = (CurrIdiv & 0xFFFFFFFCU) + 4U;
10003066:	68fb      	ldr	r3, [r7, #12]
10003068:	2203      	movs	r2, #3
1000306a:	4393      	bics	r3, r2
1000306c:	3304      	adds	r3, #4
1000306e:	60fb      	str	r3, [r7, #12]
        CurrIdiv  = CurrIdiv >> 2;   /* Divide by 4. */
10003070:	68fb      	ldr	r3, [r7, #12]
10003072:	089b      	lsrs	r3, r3, #2
10003074:	60fb      	str	r3, [r7, #12]
        /* Program interim value of IDIV. */

        lCLKCR = SCU_CLK->CLKCR;
10003076:	4b1f      	ldr	r3, [pc, #124]	; (100030f4 <CLK002_lFrequencyUpScaling+0xb0>)
10003078:	681b      	ldr	r3, [r3, #0]
1000307a:	607b      	str	r3, [r7, #4]
        WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
1000307c:	68fb      	ldr	r3, [r7, #12]
1000307e:	021b      	lsls	r3, r3, #8
10003080:	041b      	lsls	r3, r3, #16
10003082:	0c1a      	lsrs	r2, r3, #16
10003084:	6879      	ldr	r1, [r7, #4]
10003086:	4b1c      	ldr	r3, [pc, #112]	; (100030f8 <CLK002_lFrequencyUpScaling+0xb4>)
10003088:	400b      	ands	r3, r1
1000308a:	4313      	orrs	r3, r2
1000308c:	607b      	str	r3, [r7, #4]
        SCU_CLK->CLKCR = lCLKCR;
1000308e:	4b19      	ldr	r3, [pc, #100]	; (100030f4 <CLK002_lFrequencyUpScaling+0xb0>)
10003090:	687a      	ldr	r2, [r7, #4]
10003092:	601a      	str	r2, [r3, #0]

        /* Wait till frequency stable. */
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10003094:	4b17      	ldr	r3, [pc, #92]	; (100030f4 <CLK002_lFrequencyUpScaling+0xb0>)
10003096:	4a17      	ldr	r2, [pc, #92]	; (100030f4 <CLK002_lFrequencyUpScaling+0xb0>)
10003098:	6812      	ldr	r2, [r2, #0]
1000309a:	4918      	ldr	r1, [pc, #96]	; (100030fc <CLK002_lFrequencyUpScaling+0xb8>)
1000309c:	430a      	orrs	r2, r1
1000309e:	601a      	str	r2, [r3, #0]
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
100030a0:	46c0      	nop			; (mov r8, r8)
100030a2:	4b14      	ldr	r3, [pc, #80]	; (100030f4 <CLK002_lFrequencyUpScaling+0xb0>)
100030a4:	681a      	ldr	r2, [r3, #0]
100030a6:	2380      	movs	r3, #128	; 0x80
100030a8:	05db      	lsls	r3, r3, #23
100030aa:	4013      	ands	r3, r2
100030ac:	d1f9      	bne.n	100030a2 <CLK002_lFrequencyUpScaling+0x5e>
100030ae:	e01c      	b.n	100030ea <CLK002_lFrequencyUpScaling+0xa6>
        }
    }
    else
    {
        /* Program TargetIDiv into IDIV bitfield of CLKCR. */
        lCLKCR = SCU_CLK->CLKCR;
100030b0:	4b10      	ldr	r3, [pc, #64]	; (100030f4 <CLK002_lFrequencyUpScaling+0xb0>)
100030b2:	681b      	ldr	r3, [r3, #0]
100030b4:	607b      	str	r3, [r7, #4]
        WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
100030b6:	68bb      	ldr	r3, [r7, #8]
100030b8:	021b      	lsls	r3, r3, #8
100030ba:	041b      	lsls	r3, r3, #16
100030bc:	0c1a      	lsrs	r2, r3, #16
100030be:	6879      	ldr	r1, [r7, #4]
100030c0:	4b0d      	ldr	r3, [pc, #52]	; (100030f8 <CLK002_lFrequencyUpScaling+0xb4>)
100030c2:	400b      	ands	r3, r1
100030c4:	4313      	orrs	r3, r2
100030c6:	607b      	str	r3, [r7, #4]
        SCU_CLK->CLKCR = lCLKCR;
100030c8:	4b0a      	ldr	r3, [pc, #40]	; (100030f4 <CLK002_lFrequencyUpScaling+0xb0>)
100030ca:	687a      	ldr	r2, [r7, #4]
100030cc:	601a      	str	r2, [r3, #0]
        /* Wait till frequency stable. */
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
100030ce:	4b09      	ldr	r3, [pc, #36]	; (100030f4 <CLK002_lFrequencyUpScaling+0xb0>)
100030d0:	4a08      	ldr	r2, [pc, #32]	; (100030f4 <CLK002_lFrequencyUpScaling+0xb0>)
100030d2:	6812      	ldr	r2, [r2, #0]
100030d4:	4909      	ldr	r1, [pc, #36]	; (100030fc <CLK002_lFrequencyUpScaling+0xb8>)
100030d6:	430a      	orrs	r2, r1
100030d8:	601a      	str	r2, [r3, #0]
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
100030da:	46c0      	nop			; (mov r8, r8)
100030dc:	4b05      	ldr	r3, [pc, #20]	; (100030f4 <CLK002_lFrequencyUpScaling+0xb0>)
100030de:	681a      	ldr	r2, [r3, #0]
100030e0:	2380      	movs	r3, #128	; 0x80
100030e2:	05db      	lsls	r3, r3, #23
100030e4:	4013      	ands	r3, r2
100030e6:	d1f9      	bne.n	100030dc <CLK002_lFrequencyUpScaling+0x98>
        {
            ;
        }
        break;
100030e8:	e000      	b.n	100030ec <CLK002_lFrequencyUpScaling+0xa8>
    }

  }
100030ea:	e7b7      	b.n	1000305c <CLK002_lFrequencyUpScaling+0x18>

}
100030ec:	46bd      	mov	sp, r7
100030ee:	b004      	add	sp, #16
100030f0:	bd80      	pop	{r7, pc}
100030f2:	46c0      	nop			; (mov r8, r8)
100030f4:	40010300 	.word	0x40010300
100030f8:	ffff00ff 	.word	0xffff00ff
100030fc:	3ff00000 	.word	0x3ff00000

10003100 <CLK002_lFrequencyDownScaling>:
  * @note   -
  * @param  None
  * @retval None
  */
static void     CLK002_lFrequencyDownScaling()
{
10003100:	b580      	push	{r7, lr}
10003102:	b084      	sub	sp, #16
10003104:	af00      	add	r7, sp, #0
    uint32_t CurrIdiv;
    uint32_t TargetIdiv;
    uint32_t lCLKCR;
    CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
10003106:	4b27      	ldr	r3, [pc, #156]	; (100031a4 <CLK002_lFrequencyDownScaling+0xa4>)
10003108:	681a      	ldr	r2, [r3, #0]
1000310a:	23ff      	movs	r3, #255	; 0xff
1000310c:	021b      	lsls	r3, r3, #8
1000310e:	4013      	ands	r3, r2
10003110:	0a1b      	lsrs	r3, r3, #8
10003112:	60fb      	str	r3, [r7, #12]
    TargetIdiv = CLK002_CLKCR_IDIV;
10003114:	2304      	movs	r3, #4
10003116:	60bb      	str	r3, [r7, #8]
    while(1)
    {
        if((CurrIdiv * 4UL) < TargetIdiv )
10003118:	68fb      	ldr	r3, [r7, #12]
1000311a:	009a      	lsls	r2, r3, #2
1000311c:	68bb      	ldr	r3, [r7, #8]
1000311e:	429a      	cmp	r2, r3
10003120:	d21f      	bcs.n	10003162 <CLK002_lFrequencyDownScaling+0x62>
        {
            CurrIdiv  = CurrIdiv << 2;   /* Multiply by 4. */
10003122:	68fb      	ldr	r3, [r7, #12]
10003124:	009b      	lsls	r3, r3, #2
10003126:	60fb      	str	r3, [r7, #12]
            /* Program interim value of IDIV */
            lCLKCR = SCU_CLK->CLKCR;
10003128:	4b1e      	ldr	r3, [pc, #120]	; (100031a4 <CLK002_lFrequencyDownScaling+0xa4>)
1000312a:	681b      	ldr	r3, [r3, #0]
1000312c:	607b      	str	r3, [r7, #4]
            WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
1000312e:	68fb      	ldr	r3, [r7, #12]
10003130:	021b      	lsls	r3, r3, #8
10003132:	041b      	lsls	r3, r3, #16
10003134:	0c1a      	lsrs	r2, r3, #16
10003136:	6879      	ldr	r1, [r7, #4]
10003138:	4b1b      	ldr	r3, [pc, #108]	; (100031a8 <CLK002_lFrequencyDownScaling+0xa8>)
1000313a:	400b      	ands	r3, r1
1000313c:	4313      	orrs	r3, r2
1000313e:	607b      	str	r3, [r7, #4]
            SCU_CLK->CLKCR = lCLKCR;
10003140:	4b18      	ldr	r3, [pc, #96]	; (100031a4 <CLK002_lFrequencyDownScaling+0xa4>)
10003142:	687a      	ldr	r2, [r7, #4]
10003144:	601a      	str	r2, [r3, #0]
            /* Wait till frequency stable. */
            WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10003146:	4b17      	ldr	r3, [pc, #92]	; (100031a4 <CLK002_lFrequencyDownScaling+0xa4>)
10003148:	4a16      	ldr	r2, [pc, #88]	; (100031a4 <CLK002_lFrequencyDownScaling+0xa4>)
1000314a:	6812      	ldr	r2, [r2, #0]
1000314c:	4917      	ldr	r1, [pc, #92]	; (100031ac <CLK002_lFrequencyDownScaling+0xac>)
1000314e:	430a      	orrs	r2, r1
10003150:	601a      	str	r2, [r3, #0]
            while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10003152:	46c0      	nop			; (mov r8, r8)
10003154:	4b13      	ldr	r3, [pc, #76]	; (100031a4 <CLK002_lFrequencyDownScaling+0xa4>)
10003156:	681a      	ldr	r2, [r3, #0]
10003158:	2380      	movs	r3, #128	; 0x80
1000315a:	05db      	lsls	r3, r3, #23
1000315c:	4013      	ands	r3, r2
1000315e:	d1f9      	bne.n	10003154 <CLK002_lFrequencyDownScaling+0x54>
10003160:	e01c      	b.n	1000319c <CLK002_lFrequencyDownScaling+0x9c>
            }
        }
        else
        {
            /* Program TargetIDiv into IDIV bitfield of CLKCR */
            lCLKCR = SCU_CLK->CLKCR;
10003162:	4b10      	ldr	r3, [pc, #64]	; (100031a4 <CLK002_lFrequencyDownScaling+0xa4>)
10003164:	681b      	ldr	r3, [r3, #0]
10003166:	607b      	str	r3, [r7, #4]
            WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
10003168:	68bb      	ldr	r3, [r7, #8]
1000316a:	021b      	lsls	r3, r3, #8
1000316c:	041b      	lsls	r3, r3, #16
1000316e:	0c1a      	lsrs	r2, r3, #16
10003170:	6879      	ldr	r1, [r7, #4]
10003172:	4b0d      	ldr	r3, [pc, #52]	; (100031a8 <CLK002_lFrequencyDownScaling+0xa8>)
10003174:	400b      	ands	r3, r1
10003176:	4313      	orrs	r3, r2
10003178:	607b      	str	r3, [r7, #4]
            SCU_CLK->CLKCR = lCLKCR;
1000317a:	4b0a      	ldr	r3, [pc, #40]	; (100031a4 <CLK002_lFrequencyDownScaling+0xa4>)
1000317c:	687a      	ldr	r2, [r7, #4]
1000317e:	601a      	str	r2, [r3, #0]
            /* Wait till frequency stable. */
           
            WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10003180:	4b08      	ldr	r3, [pc, #32]	; (100031a4 <CLK002_lFrequencyDownScaling+0xa4>)
10003182:	4a08      	ldr	r2, [pc, #32]	; (100031a4 <CLK002_lFrequencyDownScaling+0xa4>)
10003184:	6812      	ldr	r2, [r2, #0]
10003186:	4909      	ldr	r1, [pc, #36]	; (100031ac <CLK002_lFrequencyDownScaling+0xac>)
10003188:	430a      	orrs	r2, r1
1000318a:	601a      	str	r2, [r3, #0]
            while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
1000318c:	46c0      	nop			; (mov r8, r8)
1000318e:	4b05      	ldr	r3, [pc, #20]	; (100031a4 <CLK002_lFrequencyDownScaling+0xa4>)
10003190:	681a      	ldr	r2, [r3, #0]
10003192:	2380      	movs	r3, #128	; 0x80
10003194:	05db      	lsls	r3, r3, #23
10003196:	4013      	ands	r3, r2
10003198:	d1f9      	bne.n	1000318e <CLK002_lFrequencyDownScaling+0x8e>
            {
                ;
            }
             break;
1000319a:	e000      	b.n	1000319e <CLK002_lFrequencyDownScaling+0x9e>
        }

	  }
1000319c:	e7bc      	b.n	10003118 <CLK002_lFrequencyDownScaling+0x18>
}
1000319e:	46bd      	mov	sp, r7
100031a0:	b004      	add	sp, #16
100031a2:	bd80      	pop	{r7, pc}
100031a4:	40010300 	.word	0x40010300
100031a8:	ffff00ff 	.word	0xffff00ff
100031ac:	3ff00000 	.word	0x3ff00000

100031b0 <__aeabi_uidiv>:
100031b0:	2900      	cmp	r1, #0
100031b2:	d034      	beq.n	1000321e <.udivsi3_skip_div0_test+0x6a>

100031b4 <.udivsi3_skip_div0_test>:
100031b4:	2301      	movs	r3, #1
100031b6:	2200      	movs	r2, #0
100031b8:	b410      	push	{r4}
100031ba:	4288      	cmp	r0, r1
100031bc:	d32c      	bcc.n	10003218 <.udivsi3_skip_div0_test+0x64>
100031be:	2401      	movs	r4, #1
100031c0:	0724      	lsls	r4, r4, #28
100031c2:	42a1      	cmp	r1, r4
100031c4:	d204      	bcs.n	100031d0 <.udivsi3_skip_div0_test+0x1c>
100031c6:	4281      	cmp	r1, r0
100031c8:	d202      	bcs.n	100031d0 <.udivsi3_skip_div0_test+0x1c>
100031ca:	0109      	lsls	r1, r1, #4
100031cc:	011b      	lsls	r3, r3, #4
100031ce:	e7f8      	b.n	100031c2 <.udivsi3_skip_div0_test+0xe>
100031d0:	00e4      	lsls	r4, r4, #3
100031d2:	42a1      	cmp	r1, r4
100031d4:	d204      	bcs.n	100031e0 <.udivsi3_skip_div0_test+0x2c>
100031d6:	4281      	cmp	r1, r0
100031d8:	d202      	bcs.n	100031e0 <.udivsi3_skip_div0_test+0x2c>
100031da:	0049      	lsls	r1, r1, #1
100031dc:	005b      	lsls	r3, r3, #1
100031de:	e7f8      	b.n	100031d2 <.udivsi3_skip_div0_test+0x1e>
100031e0:	4288      	cmp	r0, r1
100031e2:	d301      	bcc.n	100031e8 <.udivsi3_skip_div0_test+0x34>
100031e4:	1a40      	subs	r0, r0, r1
100031e6:	431a      	orrs	r2, r3
100031e8:	084c      	lsrs	r4, r1, #1
100031ea:	42a0      	cmp	r0, r4
100031ec:	d302      	bcc.n	100031f4 <.udivsi3_skip_div0_test+0x40>
100031ee:	1b00      	subs	r0, r0, r4
100031f0:	085c      	lsrs	r4, r3, #1
100031f2:	4322      	orrs	r2, r4
100031f4:	088c      	lsrs	r4, r1, #2
100031f6:	42a0      	cmp	r0, r4
100031f8:	d302      	bcc.n	10003200 <.udivsi3_skip_div0_test+0x4c>
100031fa:	1b00      	subs	r0, r0, r4
100031fc:	089c      	lsrs	r4, r3, #2
100031fe:	4322      	orrs	r2, r4
10003200:	08cc      	lsrs	r4, r1, #3
10003202:	42a0      	cmp	r0, r4
10003204:	d302      	bcc.n	1000320c <.udivsi3_skip_div0_test+0x58>
10003206:	1b00      	subs	r0, r0, r4
10003208:	08dc      	lsrs	r4, r3, #3
1000320a:	4322      	orrs	r2, r4
1000320c:	2800      	cmp	r0, #0
1000320e:	d003      	beq.n	10003218 <.udivsi3_skip_div0_test+0x64>
10003210:	091b      	lsrs	r3, r3, #4
10003212:	d001      	beq.n	10003218 <.udivsi3_skip_div0_test+0x64>
10003214:	0909      	lsrs	r1, r1, #4
10003216:	e7e3      	b.n	100031e0 <.udivsi3_skip_div0_test+0x2c>
10003218:	1c10      	adds	r0, r2, #0
1000321a:	bc10      	pop	{r4}
1000321c:	4770      	bx	lr
1000321e:	2800      	cmp	r0, #0
10003220:	d001      	beq.n	10003226 <.udivsi3_skip_div0_test+0x72>
10003222:	2000      	movs	r0, #0
10003224:	43c0      	mvns	r0, r0
10003226:	b407      	push	{r0, r1, r2}
10003228:	4802      	ldr	r0, [pc, #8]	; (10003234 <.udivsi3_skip_div0_test+0x80>)
1000322a:	a102      	add	r1, pc, #8	; (adr r1, 10003234 <.udivsi3_skip_div0_test+0x80>)
1000322c:	1840      	adds	r0, r0, r1
1000322e:	9002      	str	r0, [sp, #8]
10003230:	bd03      	pop	{r0, r1, pc}
10003232:	46c0      	nop			; (mov r8, r8)
10003234:	00000019 	.word	0x00000019

10003238 <__aeabi_uidivmod>:
10003238:	2900      	cmp	r1, #0
1000323a:	d0f0      	beq.n	1000321e <.udivsi3_skip_div0_test+0x6a>
1000323c:	b503      	push	{r0, r1, lr}
1000323e:	f7ff ffb9 	bl	100031b4 <.udivsi3_skip_div0_test>
10003242:	bc0e      	pop	{r1, r2, r3}
10003244:	4342      	muls	r2, r0
10003246:	1a89      	subs	r1, r1, r2
10003248:	4718      	bx	r3
1000324a:	46c0      	nop			; (mov r8, r8)

1000324c <__aeabi_idiv0>:
1000324c:	4770      	bx	lr
1000324e:	46c0      	nop			; (mov r8, r8)

10003250 <__aeabi_cfrcmple>:
10003250:	4684      	mov	ip, r0
10003252:	1c08      	adds	r0, r1, #0
10003254:	4661      	mov	r1, ip
10003256:	e7ff      	b.n	10003258 <__aeabi_cfcmpeq>

10003258 <__aeabi_cfcmpeq>:
10003258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000325a:	f000 f9ff 	bl	1000365c <__lesf2>
1000325e:	2800      	cmp	r0, #0
10003260:	d401      	bmi.n	10003266 <__aeabi_cfcmpeq+0xe>
10003262:	2100      	movs	r1, #0
10003264:	42c8      	cmn	r0, r1
10003266:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10003268 <__aeabi_fcmpeq>:
10003268:	b510      	push	{r4, lr}
1000326a:	f000 f987 	bl	1000357c <__eqsf2>
1000326e:	4240      	negs	r0, r0
10003270:	3001      	adds	r0, #1
10003272:	bd10      	pop	{r4, pc}

10003274 <__aeabi_fcmplt>:
10003274:	b510      	push	{r4, lr}
10003276:	f000 f9f1 	bl	1000365c <__lesf2>
1000327a:	2800      	cmp	r0, #0
1000327c:	db01      	blt.n	10003282 <__aeabi_fcmplt+0xe>
1000327e:	2000      	movs	r0, #0
10003280:	bd10      	pop	{r4, pc}
10003282:	2001      	movs	r0, #1
10003284:	bd10      	pop	{r4, pc}
10003286:	46c0      	nop			; (mov r8, r8)

10003288 <__aeabi_fcmple>:
10003288:	b510      	push	{r4, lr}
1000328a:	f000 f9e7 	bl	1000365c <__lesf2>
1000328e:	2800      	cmp	r0, #0
10003290:	dd01      	ble.n	10003296 <__aeabi_fcmple+0xe>
10003292:	2000      	movs	r0, #0
10003294:	bd10      	pop	{r4, pc}
10003296:	2001      	movs	r0, #1
10003298:	bd10      	pop	{r4, pc}
1000329a:	46c0      	nop			; (mov r8, r8)

1000329c <__aeabi_fcmpgt>:
1000329c:	b510      	push	{r4, lr}
1000329e:	f000 f995 	bl	100035cc <__gesf2>
100032a2:	2800      	cmp	r0, #0
100032a4:	dc01      	bgt.n	100032aa <__aeabi_fcmpgt+0xe>
100032a6:	2000      	movs	r0, #0
100032a8:	bd10      	pop	{r4, pc}
100032aa:	2001      	movs	r0, #1
100032ac:	bd10      	pop	{r4, pc}
100032ae:	46c0      	nop			; (mov r8, r8)

100032b0 <__aeabi_fcmpge>:
100032b0:	b510      	push	{r4, lr}
100032b2:	f000 f98b 	bl	100035cc <__gesf2>
100032b6:	2800      	cmp	r0, #0
100032b8:	da01      	bge.n	100032be <__aeabi_fcmpge+0xe>
100032ba:	2000      	movs	r0, #0
100032bc:	bd10      	pop	{r4, pc}
100032be:	2001      	movs	r0, #1
100032c0:	bd10      	pop	{r4, pc}
100032c2:	46c0      	nop			; (mov r8, r8)
100032c4:	0000      	movs	r0, r0
	...

100032c8 <__aeabi_d2uiz>:
100032c8:	b538      	push	{r3, r4, r5, lr}
100032ca:	4b0e      	ldr	r3, [pc, #56]	; (10003304 <__aeabi_d2uiz+0x3c>)
100032cc:	4a0c      	ldr	r2, [pc, #48]	; (10003300 <__aeabi_d2uiz+0x38>)
100032ce:	1c04      	adds	r4, r0, #0
100032d0:	1c0d      	adds	r5, r1, #0
100032d2:	f001 fac7 	bl	10004864 <__aeabi_dcmpge>
100032d6:	2800      	cmp	r0, #0
100032d8:	d104      	bne.n	100032e4 <__aeabi_d2uiz+0x1c>
100032da:	1c20      	adds	r0, r4, #0
100032dc:	1c29      	adds	r1, r5, #0
100032de:	f001 fa27 	bl	10004730 <__aeabi_d2iz>
100032e2:	bd38      	pop	{r3, r4, r5, pc}
100032e4:	4b07      	ldr	r3, [pc, #28]	; (10003304 <__aeabi_d2uiz+0x3c>)
100032e6:	4a06      	ldr	r2, [pc, #24]	; (10003300 <__aeabi_d2uiz+0x38>)
100032e8:	1c20      	adds	r0, r4, #0
100032ea:	1c29      	adds	r1, r5, #0
100032ec:	f000 fe9e 	bl	1000402c <__aeabi_dsub>
100032f0:	f001 fa1e 	bl	10004730 <__aeabi_d2iz>
100032f4:	2380      	movs	r3, #128	; 0x80
100032f6:	0619      	lsls	r1, r3, #24
100032f8:	1840      	adds	r0, r0, r1
100032fa:	e7f2      	b.n	100032e2 <__aeabi_d2uiz+0x1a>
100032fc:	46c0      	nop			; (mov r8, r8)
100032fe:	46c0      	nop			; (mov r8, r8)
10003300:	00000000 	.word	0x00000000
10003304:	41e00000 	.word	0x41e00000

10003308 <__aeabi_fdiv>:
10003308:	b5f0      	push	{r4, r5, r6, r7, lr}
1000330a:	465f      	mov	r7, fp
1000330c:	4656      	mov	r6, sl
1000330e:	464d      	mov	r5, r9
10003310:	4644      	mov	r4, r8
10003312:	b4f0      	push	{r4, r5, r6, r7}
10003314:	0245      	lsls	r5, r0, #9
10003316:	0044      	lsls	r4, r0, #1
10003318:	b083      	sub	sp, #12
1000331a:	1c0e      	adds	r6, r1, #0
1000331c:	0a6d      	lsrs	r5, r5, #9
1000331e:	0e24      	lsrs	r4, r4, #24
10003320:	0fc7      	lsrs	r7, r0, #31
10003322:	2c00      	cmp	r4, #0
10003324:	d107      	bne.n	10003336 <__aeabi_fdiv+0x2e>
10003326:	2d00      	cmp	r5, #0
10003328:	d000      	beq.n	1000332c <__aeabi_fdiv+0x24>
1000332a:	e091      	b.n	10003450 <__aeabi_fdiv+0x148>
1000332c:	2104      	movs	r1, #4
1000332e:	2201      	movs	r2, #1
10003330:	4688      	mov	r8, r1
10003332:	4692      	mov	sl, r2
10003334:	e009      	b.n	1000334a <__aeabi_fdiv+0x42>
10003336:	2cff      	cmp	r4, #255	; 0xff
10003338:	d055      	beq.n	100033e6 <__aeabi_fdiv+0xde>
1000333a:	2380      	movs	r3, #128	; 0x80
1000333c:	0418      	lsls	r0, r3, #16
1000333e:	2100      	movs	r1, #0
10003340:	4305      	orrs	r5, r0
10003342:	00ed      	lsls	r5, r5, #3
10003344:	3c7f      	subs	r4, #127	; 0x7f
10003346:	4688      	mov	r8, r1
10003348:	468a      	mov	sl, r1
1000334a:	1c33      	adds	r3, r6, #0
1000334c:	0058      	lsls	r0, r3, #1
1000334e:	0276      	lsls	r6, r6, #9
10003350:	0fd9      	lsrs	r1, r3, #31
10003352:	0a76      	lsrs	r6, r6, #9
10003354:	0e00      	lsrs	r0, r0, #24
10003356:	468b      	mov	fp, r1
10003358:	d14c      	bne.n	100033f4 <__aeabi_fdiv+0xec>
1000335a:	2201      	movs	r2, #1
1000335c:	4694      	mov	ip, r2
1000335e:	2e00      	cmp	r6, #0
10003360:	d000      	beq.n	10003364 <__aeabi_fdiv+0x5c>
10003362:	e081      	b.n	10003468 <__aeabi_fdiv+0x160>
10003364:	465b      	mov	r3, fp
10003366:	407b      	eors	r3, r7
10003368:	4662      	mov	r2, ip
1000336a:	4641      	mov	r1, r8
1000336c:	9301      	str	r3, [sp, #4]
1000336e:	430a      	orrs	r2, r1
10003370:	2a0f      	cmp	r2, #15
10003372:	d950      	bls.n	10003416 <__aeabi_fdiv+0x10e>
10003374:	1a20      	subs	r0, r4, r0
10003376:	0169      	lsls	r1, r5, #5
10003378:	4681      	mov	r9, r0
1000337a:	0175      	lsls	r5, r6, #5
1000337c:	42a9      	cmp	r1, r5
1000337e:	d300      	bcc.n	10003382 <__aeabi_fdiv+0x7a>
10003380:	e0b3      	b.n	100034ea <__aeabi_fdiv+0x1e2>
10003382:	2201      	movs	r2, #1
10003384:	4253      	negs	r3, r2
10003386:	4499      	add	r9, r3
10003388:	241b      	movs	r4, #27
1000338a:	2600      	movs	r6, #0
1000338c:	2701      	movs	r7, #1
1000338e:	1e62      	subs	r2, r4, #1
10003390:	1c38      	adds	r0, r7, #0
10003392:	4010      	ands	r0, r2
10003394:	004b      	lsls	r3, r1, #1
10003396:	0076      	lsls	r6, r6, #1
10003398:	2900      	cmp	r1, #0
1000339a:	da00      	bge.n	1000339e <__aeabi_fdiv+0x96>
1000339c:	e0a9      	b.n	100034f2 <__aeabi_fdiv+0x1ea>
1000339e:	429d      	cmp	r5, r3
100033a0:	d800      	bhi.n	100033a4 <__aeabi_fdiv+0x9c>
100033a2:	e0a6      	b.n	100034f2 <__aeabi_fdiv+0x1ea>
100033a4:	3c01      	subs	r4, #1
100033a6:	2c00      	cmp	r4, #0
100033a8:	dc00      	bgt.n	100033ac <__aeabi_fdiv+0xa4>
100033aa:	e0ab      	b.n	10003504 <__aeabi_fdiv+0x1fc>
100033ac:	2800      	cmp	r0, #0
100033ae:	d00c      	beq.n	100033ca <__aeabi_fdiv+0xc2>
100033b0:	1c19      	adds	r1, r3, #0
100033b2:	0076      	lsls	r6, r6, #1
100033b4:	005b      	lsls	r3, r3, #1
100033b6:	2900      	cmp	r1, #0
100033b8:	db01      	blt.n	100033be <__aeabi_fdiv+0xb6>
100033ba:	429d      	cmp	r5, r3
100033bc:	d801      	bhi.n	100033c2 <__aeabi_fdiv+0xba>
100033be:	1b5b      	subs	r3, r3, r5
100033c0:	433e      	orrs	r6, r7
100033c2:	3c01      	subs	r4, #1
100033c4:	2c00      	cmp	r4, #0
100033c6:	dc00      	bgt.n	100033ca <__aeabi_fdiv+0xc2>
100033c8:	e09c      	b.n	10003504 <__aeabi_fdiv+0x1fc>
100033ca:	0059      	lsls	r1, r3, #1
100033cc:	0072      	lsls	r2, r6, #1
100033ce:	2b00      	cmp	r3, #0
100033d0:	db01      	blt.n	100033d6 <__aeabi_fdiv+0xce>
100033d2:	428d      	cmp	r5, r1
100033d4:	d801      	bhi.n	100033da <__aeabi_fdiv+0xd2>
100033d6:	1b49      	subs	r1, r1, r5
100033d8:	433a      	orrs	r2, r7
100033da:	3c01      	subs	r4, #1
100033dc:	004b      	lsls	r3, r1, #1
100033de:	0056      	lsls	r6, r2, #1
100033e0:	2900      	cmp	r1, #0
100033e2:	daea      	bge.n	100033ba <__aeabi_fdiv+0xb2>
100033e4:	e7eb      	b.n	100033be <__aeabi_fdiv+0xb6>
100033e6:	2d00      	cmp	r5, #0
100033e8:	d12d      	bne.n	10003446 <__aeabi_fdiv+0x13e>
100033ea:	2008      	movs	r0, #8
100033ec:	2102      	movs	r1, #2
100033ee:	4680      	mov	r8, r0
100033f0:	468a      	mov	sl, r1
100033f2:	e7aa      	b.n	1000334a <__aeabi_fdiv+0x42>
100033f4:	28ff      	cmp	r0, #255	; 0xff
100033f6:	d020      	beq.n	1000343a <__aeabi_fdiv+0x132>
100033f8:	2280      	movs	r2, #128	; 0x80
100033fa:	0413      	lsls	r3, r2, #16
100033fc:	2100      	movs	r1, #0
100033fe:	431e      	orrs	r6, r3
10003400:	468c      	mov	ip, r1
10003402:	465b      	mov	r3, fp
10003404:	407b      	eors	r3, r7
10003406:	4662      	mov	r2, ip
10003408:	4641      	mov	r1, r8
1000340a:	00f6      	lsls	r6, r6, #3
1000340c:	387f      	subs	r0, #127	; 0x7f
1000340e:	9301      	str	r3, [sp, #4]
10003410:	430a      	orrs	r2, r1
10003412:	2a0f      	cmp	r2, #15
10003414:	d8ae      	bhi.n	10003374 <__aeabi_fdiv+0x6c>
10003416:	4956      	ldr	r1, [pc, #344]	; (10003570 <__aeabi_fdiv+0x268>)
10003418:	0092      	lsls	r2, r2, #2
1000341a:	588a      	ldr	r2, [r1, r2]
1000341c:	4697      	mov	pc, r2
1000341e:	9b01      	ldr	r3, [sp, #4]
10003420:	26ff      	movs	r6, #255	; 0xff
10003422:	2500      	movs	r5, #0
10003424:	05f0      	lsls	r0, r6, #23
10003426:	4328      	orrs	r0, r5
10003428:	07de      	lsls	r6, r3, #31
1000342a:	4330      	orrs	r0, r6
1000342c:	b003      	add	sp, #12
1000342e:	bc3c      	pop	{r2, r3, r4, r5}
10003430:	4690      	mov	r8, r2
10003432:	4699      	mov	r9, r3
10003434:	46a2      	mov	sl, r4
10003436:	46ab      	mov	fp, r5
10003438:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000343a:	1c33      	adds	r3, r6, #0
1000343c:	1e5a      	subs	r2, r3, #1
1000343e:	4193      	sbcs	r3, r2
10003440:	3302      	adds	r3, #2
10003442:	469c      	mov	ip, r3
10003444:	e78e      	b.n	10003364 <__aeabi_fdiv+0x5c>
10003446:	220c      	movs	r2, #12
10003448:	2303      	movs	r3, #3
1000344a:	4690      	mov	r8, r2
1000344c:	469a      	mov	sl, r3
1000344e:	e77c      	b.n	1000334a <__aeabi_fdiv+0x42>
10003450:	1c28      	adds	r0, r5, #0
10003452:	f001 fa11 	bl	10004878 <__clzsi2>
10003456:	2276      	movs	r2, #118	; 0x76
10003458:	1f44      	subs	r4, r0, #5
1000345a:	4253      	negs	r3, r2
1000345c:	40a5      	lsls	r5, r4
1000345e:	1a1c      	subs	r4, r3, r0
10003460:	2000      	movs	r0, #0
10003462:	4680      	mov	r8, r0
10003464:	4682      	mov	sl, r0
10003466:	e770      	b.n	1000334a <__aeabi_fdiv+0x42>
10003468:	1c30      	adds	r0, r6, #0
1000346a:	f001 fa05 	bl	10004878 <__clzsi2>
1000346e:	2376      	movs	r3, #118	; 0x76
10003470:	1f41      	subs	r1, r0, #5
10003472:	408e      	lsls	r6, r1
10003474:	425a      	negs	r2, r3
10003476:	2100      	movs	r1, #0
10003478:	1a10      	subs	r0, r2, r0
1000347a:	468c      	mov	ip, r1
1000347c:	e772      	b.n	10003364 <__aeabi_fdiv+0x5c>
1000347e:	2300      	movs	r3, #0
10003480:	4d3c      	ldr	r5, [pc, #240]	; (10003574 <__aeabi_fdiv+0x26c>)
10003482:	26ff      	movs	r6, #255	; 0xff
10003484:	e7ce      	b.n	10003424 <__aeabi_fdiv+0x11c>
10003486:	465f      	mov	r7, fp
10003488:	1c35      	adds	r5, r6, #0
1000348a:	9701      	str	r7, [sp, #4]
1000348c:	4663      	mov	r3, ip
1000348e:	2b02      	cmp	r3, #2
10003490:	d0c5      	beq.n	1000341e <__aeabi_fdiv+0x116>
10003492:	2b03      	cmp	r3, #3
10003494:	d063      	beq.n	1000355e <__aeabi_fdiv+0x256>
10003496:	2b01      	cmp	r3, #1
10003498:	d043      	beq.n	10003522 <__aeabi_fdiv+0x21a>
1000349a:	4649      	mov	r1, r9
1000349c:	317f      	adds	r1, #127	; 0x7f
1000349e:	2900      	cmp	r1, #0
100034a0:	dd35      	ble.n	1000350e <__aeabi_fdiv+0x206>
100034a2:	270f      	movs	r7, #15
100034a4:	402f      	ands	r7, r5
100034a6:	2f04      	cmp	r7, #4
100034a8:	d000      	beq.n	100034ac <__aeabi_fdiv+0x1a4>
100034aa:	3504      	adds	r5, #4
100034ac:	012b      	lsls	r3, r5, #4
100034ae:	d503      	bpl.n	100034b8 <__aeabi_fdiv+0x1b0>
100034b0:	4a31      	ldr	r2, [pc, #196]	; (10003578 <__aeabi_fdiv+0x270>)
100034b2:	4649      	mov	r1, r9
100034b4:	4015      	ands	r5, r2
100034b6:	3180      	adds	r1, #128	; 0x80
100034b8:	29fe      	cmp	r1, #254	; 0xfe
100034ba:	dcb0      	bgt.n	1000341e <__aeabi_fdiv+0x116>
100034bc:	01a8      	lsls	r0, r5, #6
100034be:	0a45      	lsrs	r5, r0, #9
100034c0:	b2ce      	uxtb	r6, r1
100034c2:	9b01      	ldr	r3, [sp, #4]
100034c4:	e7ae      	b.n	10003424 <__aeabi_fdiv+0x11c>
100034c6:	2600      	movs	r6, #0
100034c8:	2500      	movs	r5, #0
100034ca:	e7ab      	b.n	10003424 <__aeabi_fdiv+0x11c>
100034cc:	2080      	movs	r0, #128	; 0x80
100034ce:	03c1      	lsls	r1, r0, #15
100034d0:	420d      	tst	r5, r1
100034d2:	d011      	beq.n	100034f8 <__aeabi_fdiv+0x1f0>
100034d4:	420e      	tst	r6, r1
100034d6:	d10f      	bne.n	100034f8 <__aeabi_fdiv+0x1f0>
100034d8:	430e      	orrs	r6, r1
100034da:	0273      	lsls	r3, r6, #9
100034dc:	0a5d      	lsrs	r5, r3, #9
100034de:	26ff      	movs	r6, #255	; 0xff
100034e0:	465b      	mov	r3, fp
100034e2:	e79f      	b.n	10003424 <__aeabi_fdiv+0x11c>
100034e4:	9701      	str	r7, [sp, #4]
100034e6:	4653      	mov	r3, sl
100034e8:	e7d1      	b.n	1000348e <__aeabi_fdiv+0x186>
100034ea:	1b49      	subs	r1, r1, r5
100034ec:	241a      	movs	r4, #26
100034ee:	2601      	movs	r6, #1
100034f0:	e74c      	b.n	1000338c <__aeabi_fdiv+0x84>
100034f2:	1b5b      	subs	r3, r3, r5
100034f4:	433e      	orrs	r6, r7
100034f6:	e755      	b.n	100033a4 <__aeabi_fdiv+0x9c>
100034f8:	430d      	orrs	r5, r1
100034fa:	026a      	lsls	r2, r5, #9
100034fc:	0a55      	lsrs	r5, r2, #9
100034fe:	1c3b      	adds	r3, r7, #0
10003500:	26ff      	movs	r6, #255	; 0xff
10003502:	e78f      	b.n	10003424 <__aeabi_fdiv+0x11c>
10003504:	1c1d      	adds	r5, r3, #0
10003506:	1e6b      	subs	r3, r5, #1
10003508:	419d      	sbcs	r5, r3
1000350a:	4335      	orrs	r5, r6
1000350c:	e7c5      	b.n	1000349a <__aeabi_fdiv+0x192>
1000350e:	247e      	movs	r4, #126	; 0x7e
10003510:	4267      	negs	r7, r4
10003512:	464a      	mov	r2, r9
10003514:	1ab9      	subs	r1, r7, r2
10003516:	291b      	cmp	r1, #27
10003518:	dd08      	ble.n	1000352c <__aeabi_fdiv+0x224>
1000351a:	9b01      	ldr	r3, [sp, #4]
1000351c:	2600      	movs	r6, #0
1000351e:	2500      	movs	r5, #0
10003520:	e780      	b.n	10003424 <__aeabi_fdiv+0x11c>
10003522:	9d01      	ldr	r5, [sp, #4]
10003524:	2600      	movs	r6, #0
10003526:	402b      	ands	r3, r5
10003528:	2500      	movs	r5, #0
1000352a:	e77b      	b.n	10003424 <__aeabi_fdiv+0x11c>
1000352c:	464e      	mov	r6, r9
1000352e:	369e      	adds	r6, #158	; 0x9e
10003530:	1c28      	adds	r0, r5, #0
10003532:	40b5      	lsls	r5, r6
10003534:	1c2b      	adds	r3, r5, #0
10003536:	1e5d      	subs	r5, r3, #1
10003538:	41ab      	sbcs	r3, r5
1000353a:	40c8      	lsrs	r0, r1
1000353c:	4303      	orrs	r3, r0
1000353e:	250f      	movs	r5, #15
10003540:	401d      	ands	r5, r3
10003542:	2d04      	cmp	r5, #4
10003544:	d000      	beq.n	10003548 <__aeabi_fdiv+0x240>
10003546:	3304      	adds	r3, #4
10003548:	015a      	lsls	r2, r3, #5
1000354a:	d503      	bpl.n	10003554 <__aeabi_fdiv+0x24c>
1000354c:	9b01      	ldr	r3, [sp, #4]
1000354e:	2601      	movs	r6, #1
10003550:	2500      	movs	r5, #0
10003552:	e767      	b.n	10003424 <__aeabi_fdiv+0x11c>
10003554:	019c      	lsls	r4, r3, #6
10003556:	0a65      	lsrs	r5, r4, #9
10003558:	9b01      	ldr	r3, [sp, #4]
1000355a:	2600      	movs	r6, #0
1000355c:	e762      	b.n	10003424 <__aeabi_fdiv+0x11c>
1000355e:	2780      	movs	r7, #128	; 0x80
10003560:	03fc      	lsls	r4, r7, #15
10003562:	4325      	orrs	r5, r4
10003564:	026e      	lsls	r6, r5, #9
10003566:	0a75      	lsrs	r5, r6, #9
10003568:	9b01      	ldr	r3, [sp, #4]
1000356a:	26ff      	movs	r6, #255	; 0xff
1000356c:	e75a      	b.n	10003424 <__aeabi_fdiv+0x11c>
1000356e:	46c0      	nop			; (mov r8, r8)
10003570:	10004da8 	.word	0x10004da8
10003574:	007fffff 	.word	0x007fffff
10003578:	f7ffffff 	.word	0xf7ffffff

1000357c <__eqsf2>:
1000357c:	0243      	lsls	r3, r0, #9
1000357e:	0042      	lsls	r2, r0, #1
10003580:	b570      	push	{r4, r5, r6, lr}
10003582:	0a5c      	lsrs	r4, r3, #9
10003584:	0fc6      	lsrs	r6, r0, #31
10003586:	0e13      	lsrs	r3, r2, #24
10003588:	0248      	lsls	r0, r1, #9
1000358a:	004a      	lsls	r2, r1, #1
1000358c:	0a45      	lsrs	r5, r0, #9
1000358e:	0e12      	lsrs	r2, r2, #24
10003590:	0fc9      	lsrs	r1, r1, #31
10003592:	2bff      	cmp	r3, #255	; 0xff
10003594:	d005      	beq.n	100035a2 <__eqsf2+0x26>
10003596:	2aff      	cmp	r2, #255	; 0xff
10003598:	d008      	beq.n	100035ac <__eqsf2+0x30>
1000359a:	2001      	movs	r0, #1
1000359c:	4293      	cmp	r3, r2
1000359e:	d00b      	beq.n	100035b8 <__eqsf2+0x3c>
100035a0:	bd70      	pop	{r4, r5, r6, pc}
100035a2:	2001      	movs	r0, #1
100035a4:	2c00      	cmp	r4, #0
100035a6:	d1fb      	bne.n	100035a0 <__eqsf2+0x24>
100035a8:	2aff      	cmp	r2, #255	; 0xff
100035aa:	d1f6      	bne.n	1000359a <__eqsf2+0x1e>
100035ac:	2001      	movs	r0, #1
100035ae:	2d00      	cmp	r5, #0
100035b0:	d1f6      	bne.n	100035a0 <__eqsf2+0x24>
100035b2:	2001      	movs	r0, #1
100035b4:	4293      	cmp	r3, r2
100035b6:	d1f3      	bne.n	100035a0 <__eqsf2+0x24>
100035b8:	42ac      	cmp	r4, r5
100035ba:	d1f1      	bne.n	100035a0 <__eqsf2+0x24>
100035bc:	428e      	cmp	r6, r1
100035be:	d003      	beq.n	100035c8 <__eqsf2+0x4c>
100035c0:	2b00      	cmp	r3, #0
100035c2:	d1ed      	bne.n	100035a0 <__eqsf2+0x24>
100035c4:	2c00      	cmp	r4, #0
100035c6:	d1eb      	bne.n	100035a0 <__eqsf2+0x24>
100035c8:	2000      	movs	r0, #0
100035ca:	e7e9      	b.n	100035a0 <__eqsf2+0x24>

100035cc <__gesf2>:
100035cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100035ce:	0243      	lsls	r3, r0, #9
100035d0:	0042      	lsls	r2, r0, #1
100035d2:	004f      	lsls	r7, r1, #1
100035d4:	0fc6      	lsrs	r6, r0, #31
100035d6:	0248      	lsls	r0, r1, #9
100035d8:	0a5c      	lsrs	r4, r3, #9
100035da:	0a45      	lsrs	r5, r0, #9
100035dc:	0e13      	lsrs	r3, r2, #24
100035de:	0fc9      	lsrs	r1, r1, #31
100035e0:	0e3a      	lsrs	r2, r7, #24
100035e2:	2bff      	cmp	r3, #255	; 0xff
100035e4:	d026      	beq.n	10003634 <__gesf2+0x68>
100035e6:	2aff      	cmp	r2, #255	; 0xff
100035e8:	d029      	beq.n	1000363e <__gesf2+0x72>
100035ea:	2b00      	cmp	r3, #0
100035ec:	d10c      	bne.n	10003608 <__gesf2+0x3c>
100035ee:	4260      	negs	r0, r4
100035f0:	4160      	adcs	r0, r4
100035f2:	4684      	mov	ip, r0
100035f4:	2a00      	cmp	r2, #0
100035f6:	d00a      	beq.n	1000360e <__gesf2+0x42>
100035f8:	2800      	cmp	r0, #0
100035fa:	d116      	bne.n	1000362a <__gesf2+0x5e>
100035fc:	428e      	cmp	r6, r1
100035fe:	d021      	beq.n	10003644 <__gesf2+0x78>
10003600:	2e00      	cmp	r6, #0
10003602:	d114      	bne.n	1000362e <__gesf2+0x62>
10003604:	2001      	movs	r0, #1
10003606:	e014      	b.n	10003632 <__gesf2+0x66>
10003608:	2a00      	cmp	r2, #0
1000360a:	d1f7      	bne.n	100035fc <__gesf2+0x30>
1000360c:	4694      	mov	ip, r2
1000360e:	426f      	negs	r7, r5
10003610:	416f      	adcs	r7, r5
10003612:	4660      	mov	r0, ip
10003614:	2800      	cmp	r0, #0
10003616:	d105      	bne.n	10003624 <__gesf2+0x58>
10003618:	2f00      	cmp	r7, #0
1000361a:	d0ef      	beq.n	100035fc <__gesf2+0x30>
1000361c:	2001      	movs	r0, #1
1000361e:	2e00      	cmp	r6, #0
10003620:	d007      	beq.n	10003632 <__gesf2+0x66>
10003622:	e004      	b.n	1000362e <__gesf2+0x62>
10003624:	2000      	movs	r0, #0
10003626:	2f00      	cmp	r7, #0
10003628:	d103      	bne.n	10003632 <__gesf2+0x66>
1000362a:	2900      	cmp	r1, #0
1000362c:	d1ea      	bne.n	10003604 <__gesf2+0x38>
1000362e:	2101      	movs	r1, #1
10003630:	4248      	negs	r0, r1
10003632:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003634:	2c00      	cmp	r4, #0
10003636:	d0d6      	beq.n	100035e6 <__gesf2+0x1a>
10003638:	2202      	movs	r2, #2
1000363a:	4250      	negs	r0, r2
1000363c:	e7f9      	b.n	10003632 <__gesf2+0x66>
1000363e:	2d00      	cmp	r5, #0
10003640:	d0d3      	beq.n	100035ea <__gesf2+0x1e>
10003642:	e7f9      	b.n	10003638 <__gesf2+0x6c>
10003644:	4293      	cmp	r3, r2
10003646:	dcdb      	bgt.n	10003600 <__gesf2+0x34>
10003648:	db04      	blt.n	10003654 <__gesf2+0x88>
1000364a:	42ac      	cmp	r4, r5
1000364c:	d8d8      	bhi.n	10003600 <__gesf2+0x34>
1000364e:	2000      	movs	r0, #0
10003650:	42ac      	cmp	r4, r5
10003652:	d2ee      	bcs.n	10003632 <__gesf2+0x66>
10003654:	2e00      	cmp	r6, #0
10003656:	d0ea      	beq.n	1000362e <__gesf2+0x62>
10003658:	2001      	movs	r0, #1
1000365a:	e7ea      	b.n	10003632 <__gesf2+0x66>

1000365c <__lesf2>:
1000365c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000365e:	0243      	lsls	r3, r0, #9
10003660:	0042      	lsls	r2, r0, #1
10003662:	004f      	lsls	r7, r1, #1
10003664:	0fc6      	lsrs	r6, r0, #31
10003666:	0248      	lsls	r0, r1, #9
10003668:	0a5c      	lsrs	r4, r3, #9
1000366a:	0a45      	lsrs	r5, r0, #9
1000366c:	0e13      	lsrs	r3, r2, #24
1000366e:	0fc9      	lsrs	r1, r1, #31
10003670:	0e3a      	lsrs	r2, r7, #24
10003672:	2bff      	cmp	r3, #255	; 0xff
10003674:	d026      	beq.n	100036c4 <__lesf2+0x68>
10003676:	2aff      	cmp	r2, #255	; 0xff
10003678:	d028      	beq.n	100036cc <__lesf2+0x70>
1000367a:	2b00      	cmp	r3, #0
1000367c:	d00f      	beq.n	1000369e <__lesf2+0x42>
1000367e:	2a00      	cmp	r2, #0
10003680:	d114      	bne.n	100036ac <__lesf2+0x50>
10003682:	4694      	mov	ip, r2
10003684:	426f      	negs	r7, r5
10003686:	416f      	adcs	r7, r5
10003688:	4660      	mov	r0, ip
1000368a:	2800      	cmp	r0, #0
1000368c:	d014      	beq.n	100036b8 <__lesf2+0x5c>
1000368e:	2000      	movs	r0, #0
10003690:	2f00      	cmp	r7, #0
10003692:	d103      	bne.n	1000369c <__lesf2+0x40>
10003694:	2900      	cmp	r1, #0
10003696:	d10d      	bne.n	100036b4 <__lesf2+0x58>
10003698:	2101      	movs	r1, #1
1000369a:	4248      	negs	r0, r1
1000369c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000369e:	4260      	negs	r0, r4
100036a0:	4160      	adcs	r0, r4
100036a2:	4684      	mov	ip, r0
100036a4:	2a00      	cmp	r2, #0
100036a6:	d0ed      	beq.n	10003684 <__lesf2+0x28>
100036a8:	2800      	cmp	r0, #0
100036aa:	d1f3      	bne.n	10003694 <__lesf2+0x38>
100036ac:	428e      	cmp	r6, r1
100036ae:	d011      	beq.n	100036d4 <__lesf2+0x78>
100036b0:	2e00      	cmp	r6, #0
100036b2:	d1f1      	bne.n	10003698 <__lesf2+0x3c>
100036b4:	2001      	movs	r0, #1
100036b6:	e7f1      	b.n	1000369c <__lesf2+0x40>
100036b8:	2f00      	cmp	r7, #0
100036ba:	d0f7      	beq.n	100036ac <__lesf2+0x50>
100036bc:	2001      	movs	r0, #1
100036be:	2e00      	cmp	r6, #0
100036c0:	d0ec      	beq.n	1000369c <__lesf2+0x40>
100036c2:	e7e9      	b.n	10003698 <__lesf2+0x3c>
100036c4:	2002      	movs	r0, #2
100036c6:	2c00      	cmp	r4, #0
100036c8:	d1e8      	bne.n	1000369c <__lesf2+0x40>
100036ca:	e7d4      	b.n	10003676 <__lesf2+0x1a>
100036cc:	2002      	movs	r0, #2
100036ce:	2d00      	cmp	r5, #0
100036d0:	d1e4      	bne.n	1000369c <__lesf2+0x40>
100036d2:	e7d2      	b.n	1000367a <__lesf2+0x1e>
100036d4:	4293      	cmp	r3, r2
100036d6:	dceb      	bgt.n	100036b0 <__lesf2+0x54>
100036d8:	db04      	blt.n	100036e4 <__lesf2+0x88>
100036da:	42ac      	cmp	r4, r5
100036dc:	d8e8      	bhi.n	100036b0 <__lesf2+0x54>
100036de:	2000      	movs	r0, #0
100036e0:	42ac      	cmp	r4, r5
100036e2:	d2db      	bcs.n	1000369c <__lesf2+0x40>
100036e4:	2e00      	cmp	r6, #0
100036e6:	d0d7      	beq.n	10003698 <__lesf2+0x3c>
100036e8:	2001      	movs	r0, #1
100036ea:	e7d7      	b.n	1000369c <__lesf2+0x40>

100036ec <__aeabi_fsub>:
100036ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100036ee:	0243      	lsls	r3, r0, #9
100036f0:	0045      	lsls	r5, r0, #1
100036f2:	024f      	lsls	r7, r1, #9
100036f4:	004c      	lsls	r4, r1, #1
100036f6:	0fc2      	lsrs	r2, r0, #31
100036f8:	0998      	lsrs	r0, r3, #6
100036fa:	4684      	mov	ip, r0
100036fc:	0e2d      	lsrs	r5, r5, #24
100036fe:	0e20      	lsrs	r0, r4, #24
10003700:	0fc9      	lsrs	r1, r1, #31
10003702:	09bf      	lsrs	r7, r7, #6
10003704:	28ff      	cmp	r0, #255	; 0xff
10003706:	d054      	beq.n	100037b2 <__aeabi_fsub+0xc6>
10003708:	2601      	movs	r6, #1
1000370a:	4071      	eors	r1, r6
1000370c:	428a      	cmp	r2, r1
1000370e:	d03b      	beq.n	10003788 <__aeabi_fsub+0x9c>
10003710:	1a2c      	subs	r4, r5, r0
10003712:	2c00      	cmp	r4, #0
10003714:	dc00      	bgt.n	10003718 <__aeabi_fsub+0x2c>
10003716:	e089      	b.n	1000382c <__aeabi_fsub+0x140>
10003718:	2800      	cmp	r0, #0
1000371a:	d125      	bne.n	10003768 <__aeabi_fsub+0x7c>
1000371c:	2f00      	cmp	r7, #0
1000371e:	d14b      	bne.n	100037b8 <__aeabi_fsub+0xcc>
10003720:	1c6e      	adds	r6, r5, #1
10003722:	1c2c      	adds	r4, r5, #0
10003724:	4663      	mov	r3, ip
10003726:	1c15      	adds	r5, r2, #0
10003728:	220f      	movs	r2, #15
1000372a:	401a      	ands	r2, r3
1000372c:	2a04      	cmp	r2, #4
1000372e:	d000      	beq.n	10003732 <__aeabi_fsub+0x46>
10003730:	3304      	adds	r3, #4
10003732:	2780      	movs	r7, #128	; 0x80
10003734:	04f9      	lsls	r1, r7, #19
10003736:	2201      	movs	r2, #1
10003738:	4019      	ands	r1, r3
1000373a:	402a      	ands	r2, r5
1000373c:	2900      	cmp	r1, #0
1000373e:	d006      	beq.n	1000374e <__aeabi_fsub+0x62>
10003740:	2eff      	cmp	r6, #255	; 0xff
10003742:	d100      	bne.n	10003746 <__aeabi_fsub+0x5a>
10003744:	e081      	b.n	1000384a <__aeabi_fsub+0x15e>
10003746:	4db1      	ldr	r5, [pc, #708]	; (10003a0c <__aeabi_fsub+0x320>)
10003748:	1c34      	adds	r4, r6, #0
1000374a:	402b      	ands	r3, r5
1000374c:	3601      	adds	r6, #1
1000374e:	b2f6      	uxtb	r6, r6
10003750:	08dd      	lsrs	r5, r3, #3
10003752:	2e01      	cmp	r6, #1
10003754:	dd62      	ble.n	1000381c <__aeabi_fsub+0x130>
10003756:	026b      	lsls	r3, r5, #9
10003758:	0a5d      	lsrs	r5, r3, #9
1000375a:	b2e4      	uxtb	r4, r4
1000375c:	05e4      	lsls	r4, r4, #23
1000375e:	4325      	orrs	r5, r4
10003760:	1c28      	adds	r0, r5, #0
10003762:	07d2      	lsls	r2, r2, #31
10003764:	4310      	orrs	r0, r2
10003766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10003768:	2dff      	cmp	r5, #255	; 0xff
1000376a:	d051      	beq.n	10003810 <__aeabi_fsub+0x124>
1000376c:	2180      	movs	r1, #128	; 0x80
1000376e:	04cb      	lsls	r3, r1, #19
10003770:	431f      	orrs	r7, r3
10003772:	2601      	movs	r6, #1
10003774:	2c1b      	cmp	r4, #27
10003776:	dd70      	ble.n	1000385a <__aeabi_fsub+0x16e>
10003778:	4667      	mov	r7, ip
1000377a:	1c2c      	adds	r4, r5, #0
1000377c:	1bbb      	subs	r3, r7, r6
1000377e:	1c15      	adds	r5, r2, #0
10003780:	0158      	lsls	r0, r3, #5
10003782:	d422      	bmi.n	100037ca <__aeabi_fsub+0xde>
10003784:	1c66      	adds	r6, r4, #1
10003786:	e7cf      	b.n	10003728 <__aeabi_fsub+0x3c>
10003788:	1a2e      	subs	r6, r5, r0
1000378a:	2e00      	cmp	r6, #0
1000378c:	dd76      	ble.n	1000387c <__aeabi_fsub+0x190>
1000378e:	2800      	cmp	r0, #0
10003790:	d032      	beq.n	100037f8 <__aeabi_fsub+0x10c>
10003792:	2dff      	cmp	r5, #255	; 0xff
10003794:	d03c      	beq.n	10003810 <__aeabi_fsub+0x124>
10003796:	2480      	movs	r4, #128	; 0x80
10003798:	04e1      	lsls	r1, r4, #19
1000379a:	430f      	orrs	r7, r1
1000379c:	2301      	movs	r3, #1
1000379e:	2e1b      	cmp	r6, #27
100037a0:	dc00      	bgt.n	100037a4 <__aeabi_fsub+0xb8>
100037a2:	e0d1      	b.n	10003948 <__aeabi_fsub+0x25c>
100037a4:	4463      	add	r3, ip
100037a6:	1c2c      	adds	r4, r5, #0
100037a8:	0158      	lsls	r0, r3, #5
100037aa:	d47a      	bmi.n	100038a2 <__aeabi_fsub+0x1b6>
100037ac:	1c66      	adds	r6, r4, #1
100037ae:	1c15      	adds	r5, r2, #0
100037b0:	e7ba      	b.n	10003728 <__aeabi_fsub+0x3c>
100037b2:	2f00      	cmp	r7, #0
100037b4:	d1aa      	bne.n	1000370c <__aeabi_fsub+0x20>
100037b6:	e7a7      	b.n	10003708 <__aeabi_fsub+0x1c>
100037b8:	3c01      	subs	r4, #1
100037ba:	2c00      	cmp	r4, #0
100037bc:	d16d      	bne.n	1000389a <__aeabi_fsub+0x1ae>
100037be:	4663      	mov	r3, ip
100037c0:	1c2c      	adds	r4, r5, #0
100037c2:	1bdb      	subs	r3, r3, r7
100037c4:	1c15      	adds	r5, r2, #0
100037c6:	0158      	lsls	r0, r3, #5
100037c8:	d5dc      	bpl.n	10003784 <__aeabi_fsub+0x98>
100037ca:	019a      	lsls	r2, r3, #6
100037cc:	0996      	lsrs	r6, r2, #6
100037ce:	1c30      	adds	r0, r6, #0
100037d0:	f001 f852 	bl	10004878 <__clzsi2>
100037d4:	3805      	subs	r0, #5
100037d6:	4086      	lsls	r6, r0
100037d8:	4284      	cmp	r4, r0
100037da:	dc39      	bgt.n	10003850 <__aeabi_fsub+0x164>
100037dc:	1b00      	subs	r0, r0, r4
100037de:	231f      	movs	r3, #31
100037e0:	1a1a      	subs	r2, r3, r0
100037e2:	1c33      	adds	r3, r6, #0
100037e4:	1c31      	adds	r1, r6, #0
100037e6:	1c44      	adds	r4, r0, #1
100037e8:	4093      	lsls	r3, r2
100037ea:	40e1      	lsrs	r1, r4
100037ec:	1e5e      	subs	r6, r3, #1
100037ee:	41b3      	sbcs	r3, r6
100037f0:	430b      	orrs	r3, r1
100037f2:	2601      	movs	r6, #1
100037f4:	2400      	movs	r4, #0
100037f6:	e797      	b.n	10003728 <__aeabi_fsub+0x3c>
100037f8:	2f00      	cmp	r7, #0
100037fa:	d100      	bne.n	100037fe <__aeabi_fsub+0x112>
100037fc:	e790      	b.n	10003720 <__aeabi_fsub+0x34>
100037fe:	3e01      	subs	r6, #1
10003800:	2e00      	cmp	r6, #0
10003802:	d103      	bne.n	1000380c <__aeabi_fsub+0x120>
10003804:	4664      	mov	r4, ip
10003806:	193b      	adds	r3, r7, r4
10003808:	1c2c      	adds	r4, r5, #0
1000380a:	e7cd      	b.n	100037a8 <__aeabi_fsub+0xbc>
1000380c:	2dff      	cmp	r5, #255	; 0xff
1000380e:	d1c5      	bne.n	1000379c <__aeabi_fsub+0xb0>
10003810:	1c15      	adds	r5, r2, #0
10003812:	2280      	movs	r2, #128	; 0x80
10003814:	4663      	mov	r3, ip
10003816:	0056      	lsls	r6, r2, #1
10003818:	24ff      	movs	r4, #255	; 0xff
1000381a:	e785      	b.n	10003728 <__aeabi_fsub+0x3c>
1000381c:	2d00      	cmp	r5, #0
1000381e:	d09c      	beq.n	1000375a <__aeabi_fsub+0x6e>
10003820:	2c00      	cmp	r4, #0
10003822:	d028      	beq.n	10003876 <__aeabi_fsub+0x18a>
10003824:	2080      	movs	r0, #128	; 0x80
10003826:	03c7      	lsls	r7, r0, #15
10003828:	433d      	orrs	r5, r7
1000382a:	e794      	b.n	10003756 <__aeabi_fsub+0x6a>
1000382c:	2c00      	cmp	r4, #0
1000382e:	d145      	bne.n	100038bc <__aeabi_fsub+0x1d0>
10003830:	1c6b      	adds	r3, r5, #1
10003832:	b2d8      	uxtb	r0, r3
10003834:	2801      	cmp	r0, #1
10003836:	dc00      	bgt.n	1000383a <__aeabi_fsub+0x14e>
10003838:	e090      	b.n	1000395c <__aeabi_fsub+0x270>
1000383a:	4664      	mov	r4, ip
1000383c:	1be6      	subs	r6, r4, r7
1000383e:	0173      	lsls	r3, r6, #5
10003840:	d557      	bpl.n	100038f2 <__aeabi_fsub+0x206>
10003842:	1b3e      	subs	r6, r7, r4
10003844:	1c2c      	adds	r4, r5, #0
10003846:	1c0d      	adds	r5, r1, #0
10003848:	e7c1      	b.n	100037ce <__aeabi_fsub+0xe2>
1000384a:	24ff      	movs	r4, #255	; 0xff
1000384c:	2500      	movs	r5, #0
1000384e:	e785      	b.n	1000375c <__aeabi_fsub+0x70>
10003850:	4b6e      	ldr	r3, [pc, #440]	; (10003a0c <__aeabi_fsub+0x320>)
10003852:	1a24      	subs	r4, r4, r0
10003854:	4033      	ands	r3, r6
10003856:	1c66      	adds	r6, r4, #1
10003858:	e766      	b.n	10003728 <__aeabi_fsub+0x3c>
1000385a:	1c38      	adds	r0, r7, #0
1000385c:	2120      	movs	r1, #32
1000385e:	40e0      	lsrs	r0, r4
10003860:	1b0c      	subs	r4, r1, r4
10003862:	40a7      	lsls	r7, r4
10003864:	1c3e      	adds	r6, r7, #0
10003866:	1e77      	subs	r7, r6, #1
10003868:	41be      	sbcs	r6, r7
1000386a:	4306      	orrs	r6, r0
1000386c:	4667      	mov	r7, ip
1000386e:	1c2c      	adds	r4, r5, #0
10003870:	1bbb      	subs	r3, r7, r6
10003872:	1c15      	adds	r5, r2, #0
10003874:	e784      	b.n	10003780 <__aeabi_fsub+0x94>
10003876:	0269      	lsls	r1, r5, #9
10003878:	0a4d      	lsrs	r5, r1, #9
1000387a:	e76f      	b.n	1000375c <__aeabi_fsub+0x70>
1000387c:	2e00      	cmp	r6, #0
1000387e:	d179      	bne.n	10003974 <__aeabi_fsub+0x288>
10003880:	1c6c      	adds	r4, r5, #1
10003882:	b2e0      	uxtb	r0, r4
10003884:	2801      	cmp	r0, #1
10003886:	dd4b      	ble.n	10003920 <__aeabi_fsub+0x234>
10003888:	2cff      	cmp	r4, #255	; 0xff
1000388a:	d100      	bne.n	1000388e <__aeabi_fsub+0x1a2>
1000388c:	e098      	b.n	100039c0 <__aeabi_fsub+0x2d4>
1000388e:	4661      	mov	r1, ip
10003890:	187f      	adds	r7, r7, r1
10003892:	1cae      	adds	r6, r5, #2
10003894:	087b      	lsrs	r3, r7, #1
10003896:	1c15      	adds	r5, r2, #0
10003898:	e746      	b.n	10003728 <__aeabi_fsub+0x3c>
1000389a:	2dff      	cmp	r5, #255	; 0xff
1000389c:	d000      	beq.n	100038a0 <__aeabi_fsub+0x1b4>
1000389e:	e768      	b.n	10003772 <__aeabi_fsub+0x86>
100038a0:	e7b6      	b.n	10003810 <__aeabi_fsub+0x124>
100038a2:	1c67      	adds	r7, r4, #1
100038a4:	2fff      	cmp	r7, #255	; 0xff
100038a6:	d036      	beq.n	10003916 <__aeabi_fsub+0x22a>
100038a8:	4858      	ldr	r0, [pc, #352]	; (10003a0c <__aeabi_fsub+0x320>)
100038aa:	2101      	movs	r1, #1
100038ac:	4019      	ands	r1, r3
100038ae:	4003      	ands	r3, r0
100038b0:	085b      	lsrs	r3, r3, #1
100038b2:	1ca6      	adds	r6, r4, #2
100038b4:	430b      	orrs	r3, r1
100038b6:	1c3c      	adds	r4, r7, #0
100038b8:	1c15      	adds	r5, r2, #0
100038ba:	e735      	b.n	10003728 <__aeabi_fsub+0x3c>
100038bc:	4266      	negs	r6, r4
100038be:	2d00      	cmp	r5, #0
100038c0:	d01e      	beq.n	10003900 <__aeabi_fsub+0x214>
100038c2:	28ff      	cmp	r0, #255	; 0xff
100038c4:	d06f      	beq.n	100039a6 <__aeabi_fsub+0x2ba>
100038c6:	2580      	movs	r5, #128	; 0x80
100038c8:	4662      	mov	r2, ip
100038ca:	04eb      	lsls	r3, r5, #19
100038cc:	431a      	orrs	r2, r3
100038ce:	4694      	mov	ip, r2
100038d0:	2501      	movs	r5, #1
100038d2:	2e1b      	cmp	r6, #27
100038d4:	dc09      	bgt.n	100038ea <__aeabi_fsub+0x1fe>
100038d6:	4662      	mov	r2, ip
100038d8:	2320      	movs	r3, #32
100038da:	40f2      	lsrs	r2, r6
100038dc:	4664      	mov	r4, ip
100038de:	1b9e      	subs	r6, r3, r6
100038e0:	40b4      	lsls	r4, r6
100038e2:	1c25      	adds	r5, r4, #0
100038e4:	1e6c      	subs	r4, r5, #1
100038e6:	41a5      	sbcs	r5, r4
100038e8:	4315      	orrs	r5, r2
100038ea:	1b7b      	subs	r3, r7, r5
100038ec:	1c04      	adds	r4, r0, #0
100038ee:	1c0d      	adds	r5, r1, #0
100038f0:	e769      	b.n	100037c6 <__aeabi_fsub+0xda>
100038f2:	2e00      	cmp	r6, #0
100038f4:	d10c      	bne.n	10003910 <__aeabi_fsub+0x224>
100038f6:	2200      	movs	r2, #0
100038f8:	2601      	movs	r6, #1
100038fa:	2304      	movs	r3, #4
100038fc:	2400      	movs	r4, #0
100038fe:	e726      	b.n	1000374e <__aeabi_fsub+0x62>
10003900:	4664      	mov	r4, ip
10003902:	2c00      	cmp	r4, #0
10003904:	d155      	bne.n	100039b2 <__aeabi_fsub+0x2c6>
10003906:	1c46      	adds	r6, r0, #1
10003908:	1c3b      	adds	r3, r7, #0
1000390a:	1c04      	adds	r4, r0, #0
1000390c:	1c0d      	adds	r5, r1, #0
1000390e:	e70b      	b.n	10003728 <__aeabi_fsub+0x3c>
10003910:	1c2c      	adds	r4, r5, #0
10003912:	1c15      	adds	r5, r2, #0
10003914:	e75b      	b.n	100037ce <__aeabi_fsub+0xe2>
10003916:	2380      	movs	r3, #128	; 0x80
10003918:	005e      	lsls	r6, r3, #1
1000391a:	24ff      	movs	r4, #255	; 0xff
1000391c:	2304      	movs	r3, #4
1000391e:	e716      	b.n	1000374e <__aeabi_fsub+0x62>
10003920:	2d00      	cmp	r5, #0
10003922:	d000      	beq.n	10003926 <__aeabi_fsub+0x23a>
10003924:	e08d      	b.n	10003a42 <__aeabi_fsub+0x356>
10003926:	4665      	mov	r5, ip
10003928:	2d00      	cmp	r5, #0
1000392a:	d100      	bne.n	1000392e <__aeabi_fsub+0x242>
1000392c:	e0ad      	b.n	10003a8a <__aeabi_fsub+0x39e>
1000392e:	2f00      	cmp	r7, #0
10003930:	d100      	bne.n	10003934 <__aeabi_fsub+0x248>
10003932:	e081      	b.n	10003a38 <__aeabi_fsub+0x34c>
10003934:	197b      	adds	r3, r7, r5
10003936:	015c      	lsls	r4, r3, #5
10003938:	d400      	bmi.n	1000393c <__aeabi_fsub+0x250>
1000393a:	e07e      	b.n	10003a3a <__aeabi_fsub+0x34e>
1000393c:	4f33      	ldr	r7, [pc, #204]	; (10003a0c <__aeabi_fsub+0x320>)
1000393e:	1c15      	adds	r5, r2, #0
10003940:	403b      	ands	r3, r7
10003942:	2602      	movs	r6, #2
10003944:	2401      	movs	r4, #1
10003946:	e6ef      	b.n	10003728 <__aeabi_fsub+0x3c>
10003948:	1c38      	adds	r0, r7, #0
1000394a:	2320      	movs	r3, #32
1000394c:	40f0      	lsrs	r0, r6
1000394e:	1b9e      	subs	r6, r3, r6
10003950:	40b7      	lsls	r7, r6
10003952:	1c3b      	adds	r3, r7, #0
10003954:	1e5f      	subs	r7, r3, #1
10003956:	41bb      	sbcs	r3, r7
10003958:	4303      	orrs	r3, r0
1000395a:	e723      	b.n	100037a4 <__aeabi_fsub+0xb8>
1000395c:	2d00      	cmp	r5, #0
1000395e:	d115      	bne.n	1000398c <__aeabi_fsub+0x2a0>
10003960:	4665      	mov	r5, ip
10003962:	2d00      	cmp	r5, #0
10003964:	d147      	bne.n	100039f6 <__aeabi_fsub+0x30a>
10003966:	2f00      	cmp	r7, #0
10003968:	d0c5      	beq.n	100038f6 <__aeabi_fsub+0x20a>
1000396a:	1c3b      	adds	r3, r7, #0
1000396c:	1c0d      	adds	r5, r1, #0
1000396e:	2601      	movs	r6, #1
10003970:	2400      	movs	r4, #0
10003972:	e6d9      	b.n	10003728 <__aeabi_fsub+0x3c>
10003974:	4276      	negs	r6, r6
10003976:	2d00      	cmp	r5, #0
10003978:	d126      	bne.n	100039c8 <__aeabi_fsub+0x2dc>
1000397a:	4665      	mov	r5, ip
1000397c:	2d00      	cmp	r5, #0
1000397e:	d000      	beq.n	10003982 <__aeabi_fsub+0x296>
10003980:	e07d      	b.n	10003a7e <__aeabi_fsub+0x392>
10003982:	1c46      	adds	r6, r0, #1
10003984:	1c3b      	adds	r3, r7, #0
10003986:	1c04      	adds	r4, r0, #0
10003988:	1c15      	adds	r5, r2, #0
1000398a:	e6cd      	b.n	10003728 <__aeabi_fsub+0x3c>
1000398c:	4665      	mov	r5, ip
1000398e:	2d00      	cmp	r5, #0
10003990:	d140      	bne.n	10003a14 <__aeabi_fsub+0x328>
10003992:	2f00      	cmp	r7, #0
10003994:	d107      	bne.n	100039a6 <__aeabi_fsub+0x2ba>
10003996:	2180      	movs	r1, #128	; 0x80
10003998:	2200      	movs	r2, #0
1000399a:	004e      	lsls	r6, r1, #1
1000399c:	4b1c      	ldr	r3, [pc, #112]	; (10003a10 <__aeabi_fsub+0x324>)
1000399e:	24ff      	movs	r4, #255	; 0xff
100039a0:	e6d5      	b.n	1000374e <__aeabi_fsub+0x62>
100039a2:	28ff      	cmp	r0, #255	; 0xff
100039a4:	d194      	bne.n	100038d0 <__aeabi_fsub+0x1e4>
100039a6:	2080      	movs	r0, #128	; 0x80
100039a8:	1c3b      	adds	r3, r7, #0
100039aa:	1c0d      	adds	r5, r1, #0
100039ac:	0046      	lsls	r6, r0, #1
100039ae:	24ff      	movs	r4, #255	; 0xff
100039b0:	e6ba      	b.n	10003728 <__aeabi_fsub+0x3c>
100039b2:	3e01      	subs	r6, #1
100039b4:	2e00      	cmp	r6, #0
100039b6:	d1f4      	bne.n	100039a2 <__aeabi_fsub+0x2b6>
100039b8:	1b3b      	subs	r3, r7, r4
100039ba:	1c0d      	adds	r5, r1, #0
100039bc:	1c04      	adds	r4, r0, #0
100039be:	e702      	b.n	100037c6 <__aeabi_fsub+0xda>
100039c0:	2580      	movs	r5, #128	; 0x80
100039c2:	006e      	lsls	r6, r5, #1
100039c4:	2304      	movs	r3, #4
100039c6:	e6c2      	b.n	1000374e <__aeabi_fsub+0x62>
100039c8:	28ff      	cmp	r0, #255	; 0xff
100039ca:	d052      	beq.n	10003a72 <__aeabi_fsub+0x386>
100039cc:	2480      	movs	r4, #128	; 0x80
100039ce:	4661      	mov	r1, ip
100039d0:	04e3      	lsls	r3, r4, #19
100039d2:	4319      	orrs	r1, r3
100039d4:	468c      	mov	ip, r1
100039d6:	2301      	movs	r3, #1
100039d8:	2e1b      	cmp	r6, #27
100039da:	dc09      	bgt.n	100039f0 <__aeabi_fsub+0x304>
100039dc:	2120      	movs	r1, #32
100039de:	4664      	mov	r4, ip
100039e0:	40f4      	lsrs	r4, r6
100039e2:	4665      	mov	r5, ip
100039e4:	1b8e      	subs	r6, r1, r6
100039e6:	40b5      	lsls	r5, r6
100039e8:	1c2b      	adds	r3, r5, #0
100039ea:	1e59      	subs	r1, r3, #1
100039ec:	418b      	sbcs	r3, r1
100039ee:	4323      	orrs	r3, r4
100039f0:	19db      	adds	r3, r3, r7
100039f2:	1c04      	adds	r4, r0, #0
100039f4:	e6d8      	b.n	100037a8 <__aeabi_fsub+0xbc>
100039f6:	2f00      	cmp	r7, #0
100039f8:	d01e      	beq.n	10003a38 <__aeabi_fsub+0x34c>
100039fa:	1beb      	subs	r3, r5, r7
100039fc:	0158      	lsls	r0, r3, #5
100039fe:	d54b      	bpl.n	10003a98 <__aeabi_fsub+0x3ac>
10003a00:	1b7b      	subs	r3, r7, r5
10003a02:	2601      	movs	r6, #1
10003a04:	1c0d      	adds	r5, r1, #0
10003a06:	2400      	movs	r4, #0
10003a08:	e68e      	b.n	10003728 <__aeabi_fsub+0x3c>
10003a0a:	46c0      	nop			; (mov r8, r8)
10003a0c:	fbffffff 	.word	0xfbffffff
10003a10:	03fffffc 	.word	0x03fffffc
10003a14:	2f00      	cmp	r7, #0
10003a16:	d100      	bne.n	10003a1a <__aeabi_fsub+0x32e>
10003a18:	e6fa      	b.n	10003810 <__aeabi_fsub+0x124>
10003a1a:	2080      	movs	r0, #128	; 0x80
10003a1c:	08eb      	lsrs	r3, r5, #3
10003a1e:	03c4      	lsls	r4, r0, #15
10003a20:	4223      	tst	r3, r4
10003a22:	d037      	beq.n	10003a94 <__aeabi_fsub+0x3a8>
10003a24:	08ff      	lsrs	r7, r7, #3
10003a26:	4227      	tst	r7, r4
10003a28:	d134      	bne.n	10003a94 <__aeabi_fsub+0x3a8>
10003a2a:	1c3b      	adds	r3, r7, #0
10003a2c:	1c0d      	adds	r5, r1, #0
10003a2e:	2280      	movs	r2, #128	; 0x80
10003a30:	00db      	lsls	r3, r3, #3
10003a32:	0056      	lsls	r6, r2, #1
10003a34:	24ff      	movs	r4, #255	; 0xff
10003a36:	e677      	b.n	10003728 <__aeabi_fsub+0x3c>
10003a38:	4663      	mov	r3, ip
10003a3a:	1c15      	adds	r5, r2, #0
10003a3c:	2601      	movs	r6, #1
10003a3e:	2400      	movs	r4, #0
10003a40:	e672      	b.n	10003728 <__aeabi_fsub+0x3c>
10003a42:	4664      	mov	r4, ip
10003a44:	2c00      	cmp	r4, #0
10003a46:	d014      	beq.n	10003a72 <__aeabi_fsub+0x386>
10003a48:	2f00      	cmp	r7, #0
10003a4a:	d100      	bne.n	10003a4e <__aeabi_fsub+0x362>
10003a4c:	e6e0      	b.n	10003810 <__aeabi_fsub+0x124>
10003a4e:	2380      	movs	r3, #128	; 0x80
10003a50:	08e6      	lsrs	r6, r4, #3
10003a52:	03d8      	lsls	r0, r3, #15
10003a54:	1c31      	adds	r1, r6, #0
10003a56:	4206      	tst	r6, r0
10003a58:	d003      	beq.n	10003a62 <__aeabi_fsub+0x376>
10003a5a:	08f9      	lsrs	r1, r7, #3
10003a5c:	4201      	tst	r1, r0
10003a5e:	d000      	beq.n	10003a62 <__aeabi_fsub+0x376>
10003a60:	1c31      	adds	r1, r6, #0
10003a62:	1c15      	adds	r5, r2, #0
10003a64:	2280      	movs	r2, #128	; 0x80
10003a66:	00cb      	lsls	r3, r1, #3
10003a68:	0056      	lsls	r6, r2, #1
10003a6a:	24ff      	movs	r4, #255	; 0xff
10003a6c:	e65c      	b.n	10003728 <__aeabi_fsub+0x3c>
10003a6e:	28ff      	cmp	r0, #255	; 0xff
10003a70:	d1b1      	bne.n	100039d6 <__aeabi_fsub+0x2ea>
10003a72:	2080      	movs	r0, #128	; 0x80
10003a74:	1c3b      	adds	r3, r7, #0
10003a76:	1c15      	adds	r5, r2, #0
10003a78:	0046      	lsls	r6, r0, #1
10003a7a:	24ff      	movs	r4, #255	; 0xff
10003a7c:	e654      	b.n	10003728 <__aeabi_fsub+0x3c>
10003a7e:	3e01      	subs	r6, #1
10003a80:	2e00      	cmp	r6, #0
10003a82:	d1f4      	bne.n	10003a6e <__aeabi_fsub+0x382>
10003a84:	197b      	adds	r3, r7, r5
10003a86:	1c04      	adds	r4, r0, #0
10003a88:	e68e      	b.n	100037a8 <__aeabi_fsub+0xbc>
10003a8a:	1c3b      	adds	r3, r7, #0
10003a8c:	1c15      	adds	r5, r2, #0
10003a8e:	2601      	movs	r6, #1
10003a90:	2400      	movs	r4, #0
10003a92:	e649      	b.n	10003728 <__aeabi_fsub+0x3c>
10003a94:	1c15      	adds	r5, r2, #0
10003a96:	e7ca      	b.n	10003a2e <__aeabi_fsub+0x342>
10003a98:	2b00      	cmp	r3, #0
10003a9a:	d100      	bne.n	10003a9e <__aeabi_fsub+0x3b2>
10003a9c:	e72b      	b.n	100038f6 <__aeabi_fsub+0x20a>
10003a9e:	e7cc      	b.n	10003a3a <__aeabi_fsub+0x34e>

10003aa0 <__aeabi_ui2f>:
10003aa0:	b510      	push	{r4, lr}
10003aa2:	1e04      	subs	r4, r0, #0
10003aa4:	d034      	beq.n	10003b10 <__aeabi_ui2f+0x70>
10003aa6:	f000 fee7 	bl	10004878 <__clzsi2>
10003aaa:	239e      	movs	r3, #158	; 0x9e
10003aac:	1a1b      	subs	r3, r3, r0
10003aae:	2b96      	cmp	r3, #150	; 0x96
10003ab0:	dc07      	bgt.n	10003ac2 <__aeabi_ui2f+0x22>
10003ab2:	3808      	subs	r0, #8
10003ab4:	4084      	lsls	r4, r0
10003ab6:	0264      	lsls	r4, r4, #9
10003ab8:	0a61      	lsrs	r1, r4, #9
10003aba:	b2db      	uxtb	r3, r3
10003abc:	05d8      	lsls	r0, r3, #23
10003abe:	4308      	orrs	r0, r1
10003ac0:	bd10      	pop	{r4, pc}
10003ac2:	2b99      	cmp	r3, #153	; 0x99
10003ac4:	dd0a      	ble.n	10003adc <__aeabi_ui2f+0x3c>
10003ac6:	1c02      	adds	r2, r0, #0
10003ac8:	321b      	adds	r2, #27
10003aca:	1c21      	adds	r1, r4, #0
10003acc:	4091      	lsls	r1, r2
10003ace:	1c0a      	adds	r2, r1, #0
10003ad0:	1e51      	subs	r1, r2, #1
10003ad2:	418a      	sbcs	r2, r1
10003ad4:	2105      	movs	r1, #5
10003ad6:	1a09      	subs	r1, r1, r0
10003ad8:	40cc      	lsrs	r4, r1
10003ada:	4314      	orrs	r4, r2
10003adc:	2805      	cmp	r0, #5
10003ade:	dc1a      	bgt.n	10003b16 <__aeabi_ui2f+0x76>
10003ae0:	4a18      	ldr	r2, [pc, #96]	; (10003b44 <__aeabi_ui2f+0xa4>)
10003ae2:	210f      	movs	r1, #15
10003ae4:	4022      	ands	r2, r4
10003ae6:	400c      	ands	r4, r1
10003ae8:	2c04      	cmp	r4, #4
10003aea:	d000      	beq.n	10003aee <__aeabi_ui2f+0x4e>
10003aec:	3204      	adds	r2, #4
10003aee:	0151      	lsls	r1, r2, #5
10003af0:	d505      	bpl.n	10003afe <__aeabi_ui2f+0x5e>
10003af2:	249f      	movs	r4, #159	; 0x9f
10003af4:	1a23      	subs	r3, r4, r0
10003af6:	2bff      	cmp	r3, #255	; 0xff
10003af8:	d021      	beq.n	10003b3e <__aeabi_ui2f+0x9e>
10003afa:	4812      	ldr	r0, [pc, #72]	; (10003b44 <__aeabi_ui2f+0xa4>)
10003afc:	4002      	ands	r2, r0
10003afe:	1c59      	adds	r1, r3, #1
10003b00:	b2cc      	uxtb	r4, r1
10003b02:	08d2      	lsrs	r2, r2, #3
10003b04:	2c01      	cmp	r4, #1
10003b06:	dd09      	ble.n	10003b1c <__aeabi_ui2f+0x7c>
10003b08:	0250      	lsls	r0, r2, #9
10003b0a:	0a41      	lsrs	r1, r0, #9
10003b0c:	b2db      	uxtb	r3, r3
10003b0e:	e7d5      	b.n	10003abc <__aeabi_ui2f+0x1c>
10003b10:	2300      	movs	r3, #0
10003b12:	2100      	movs	r1, #0
10003b14:	e7d2      	b.n	10003abc <__aeabi_ui2f+0x1c>
10003b16:	1f42      	subs	r2, r0, #5
10003b18:	4094      	lsls	r4, r2
10003b1a:	e7e1      	b.n	10003ae0 <__aeabi_ui2f+0x40>
10003b1c:	2a00      	cmp	r2, #0
10003b1e:	d00b      	beq.n	10003b38 <__aeabi_ui2f+0x98>
10003b20:	2b00      	cmp	r3, #0
10003b22:	d006      	beq.n	10003b32 <__aeabi_ui2f+0x92>
10003b24:	2180      	movs	r1, #128	; 0x80
10003b26:	03cc      	lsls	r4, r1, #15
10003b28:	4322      	orrs	r2, r4
10003b2a:	0252      	lsls	r2, r2, #9
10003b2c:	0a51      	lsrs	r1, r2, #9
10003b2e:	b2db      	uxtb	r3, r3
10003b30:	e7c4      	b.n	10003abc <__aeabi_ui2f+0x1c>
10003b32:	0250      	lsls	r0, r2, #9
10003b34:	0a41      	lsrs	r1, r0, #9
10003b36:	e7c1      	b.n	10003abc <__aeabi_ui2f+0x1c>
10003b38:	b2db      	uxtb	r3, r3
10003b3a:	2100      	movs	r1, #0
10003b3c:	e7be      	b.n	10003abc <__aeabi_ui2f+0x1c>
10003b3e:	23ff      	movs	r3, #255	; 0xff
10003b40:	2100      	movs	r1, #0
10003b42:	e7bb      	b.n	10003abc <__aeabi_ui2f+0x1c>
10003b44:	fbffffff 	.word	0xfbffffff

10003b48 <__aeabi_dmul>:
10003b48:	b5f0      	push	{r4, r5, r6, r7, lr}
10003b4a:	4656      	mov	r6, sl
10003b4c:	4644      	mov	r4, r8
10003b4e:	465f      	mov	r7, fp
10003b50:	464d      	mov	r5, r9
10003b52:	b4f0      	push	{r4, r5, r6, r7}
10003b54:	004f      	lsls	r7, r1, #1
10003b56:	1c1d      	adds	r5, r3, #0
10003b58:	030b      	lsls	r3, r1, #12
10003b5a:	1c14      	adds	r4, r2, #0
10003b5c:	0b1a      	lsrs	r2, r3, #12
10003b5e:	0d7b      	lsrs	r3, r7, #21
10003b60:	b087      	sub	sp, #28
10003b62:	1c06      	adds	r6, r0, #0
10003b64:	4692      	mov	sl, r2
10003b66:	4698      	mov	r8, r3
10003b68:	0fcf      	lsrs	r7, r1, #31
10003b6a:	2b00      	cmp	r3, #0
10003b6c:	d121      	bne.n	10003bb2 <__aeabi_dmul+0x6a>
10003b6e:	4302      	orrs	r2, r0
10003b70:	d100      	bne.n	10003b74 <__aeabi_dmul+0x2c>
10003b72:	e149      	b.n	10003e08 <__aeabi_dmul+0x2c0>
10003b74:	4653      	mov	r3, sl
10003b76:	2b00      	cmp	r3, #0
10003b78:	d100      	bne.n	10003b7c <__aeabi_dmul+0x34>
10003b7a:	e1e4      	b.n	10003f46 <__aeabi_dmul+0x3fe>
10003b7c:	4650      	mov	r0, sl
10003b7e:	f000 fe7b 	bl	10004878 <__clzsi2>
10003b82:	1e03      	subs	r3, r0, #0
10003b84:	2b27      	cmp	r3, #39	; 0x27
10003b86:	dd00      	ble.n	10003b8a <__aeabi_dmul+0x42>
10003b88:	e1d8      	b.n	10003f3c <__aeabi_dmul+0x3f4>
10003b8a:	3b08      	subs	r3, #8
10003b8c:	4651      	mov	r1, sl
10003b8e:	4099      	lsls	r1, r3
10003b90:	2228      	movs	r2, #40	; 0x28
10003b92:	4688      	mov	r8, r1
10003b94:	1a11      	subs	r1, r2, r0
10003b96:	1c32      	adds	r2, r6, #0
10003b98:	40ca      	lsrs	r2, r1
10003b9a:	4641      	mov	r1, r8
10003b9c:	430a      	orrs	r2, r1
10003b9e:	4692      	mov	sl, r2
10003ba0:	409e      	lsls	r6, r3
10003ba2:	4bd8      	ldr	r3, [pc, #864]	; (10003f04 <__aeabi_dmul+0x3bc>)
10003ba4:	2200      	movs	r2, #0
10003ba6:	1a18      	subs	r0, r3, r0
10003ba8:	2100      	movs	r1, #0
10003baa:	4680      	mov	r8, r0
10003bac:	4691      	mov	r9, r2
10003bae:	9103      	str	r1, [sp, #12]
10003bb0:	e011      	b.n	10003bd6 <__aeabi_dmul+0x8e>
10003bb2:	48d5      	ldr	r0, [pc, #852]	; (10003f08 <__aeabi_dmul+0x3c0>)
10003bb4:	4283      	cmp	r3, r0
10003bb6:	d03e      	beq.n	10003c36 <__aeabi_dmul+0xee>
10003bb8:	2180      	movs	r1, #128	; 0x80
10003bba:	4653      	mov	r3, sl
10003bbc:	034a      	lsls	r2, r1, #13
10003bbe:	431a      	orrs	r2, r3
10003bc0:	00d0      	lsls	r0, r2, #3
10003bc2:	0f71      	lsrs	r1, r6, #29
10003bc4:	4308      	orrs	r0, r1
10003bc6:	4ad1      	ldr	r2, [pc, #836]	; (10003f0c <__aeabi_dmul+0x3c4>)
10003bc8:	4682      	mov	sl, r0
10003bca:	2300      	movs	r3, #0
10003bcc:	2000      	movs	r0, #0
10003bce:	00f6      	lsls	r6, r6, #3
10003bd0:	4490      	add	r8, r2
10003bd2:	4699      	mov	r9, r3
10003bd4:	9003      	str	r0, [sp, #12]
10003bd6:	1c29      	adds	r1, r5, #0
10003bd8:	1c20      	adds	r0, r4, #0
10003bda:	1c25      	adds	r5, r4, #0
10003bdc:	004a      	lsls	r2, r1, #1
10003bde:	030c      	lsls	r4, r1, #12
10003be0:	0fcb      	lsrs	r3, r1, #31
10003be2:	0b24      	lsrs	r4, r4, #12
10003be4:	0d52      	lsrs	r2, r2, #21
10003be6:	469b      	mov	fp, r3
10003be8:	d131      	bne.n	10003c4e <__aeabi_dmul+0x106>
10003bea:	1c21      	adds	r1, r4, #0
10003bec:	4301      	orrs	r1, r0
10003bee:	d100      	bne.n	10003bf2 <__aeabi_dmul+0xaa>
10003bf0:	e112      	b.n	10003e18 <__aeabi_dmul+0x2d0>
10003bf2:	2c00      	cmp	r4, #0
10003bf4:	d100      	bne.n	10003bf8 <__aeabi_dmul+0xb0>
10003bf6:	e19d      	b.n	10003f34 <__aeabi_dmul+0x3ec>
10003bf8:	1c20      	adds	r0, r4, #0
10003bfa:	f000 fe3d 	bl	10004878 <__clzsi2>
10003bfe:	2827      	cmp	r0, #39	; 0x27
10003c00:	dd00      	ble.n	10003c04 <__aeabi_dmul+0xbc>
10003c02:	e191      	b.n	10003f28 <__aeabi_dmul+0x3e0>
10003c04:	1c03      	adds	r3, r0, #0
10003c06:	2228      	movs	r2, #40	; 0x28
10003c08:	3b08      	subs	r3, #8
10003c0a:	1c29      	adds	r1, r5, #0
10003c0c:	1a12      	subs	r2, r2, r0
10003c0e:	409c      	lsls	r4, r3
10003c10:	40d1      	lsrs	r1, r2
10003c12:	430c      	orrs	r4, r1
10003c14:	409d      	lsls	r5, r3
10003c16:	4bbb      	ldr	r3, [pc, #748]	; (10003f04 <__aeabi_dmul+0x3bc>)
10003c18:	4659      	mov	r1, fp
10003c1a:	1a1a      	subs	r2, r3, r0
10003c1c:	4079      	eors	r1, r7
10003c1e:	2000      	movs	r0, #0
10003c20:	464b      	mov	r3, r9
10003c22:	9101      	str	r1, [sp, #4]
10003c24:	4303      	orrs	r3, r0
10003c26:	2b0f      	cmp	r3, #15
10003c28:	d826      	bhi.n	10003c78 <__aeabi_dmul+0x130>
10003c2a:	0099      	lsls	r1, r3, #2
10003c2c:	4bb8      	ldr	r3, [pc, #736]	; (10003f10 <__aeabi_dmul+0x3c8>)
10003c2e:	468c      	mov	ip, r1
10003c30:	4463      	add	r3, ip
10003c32:	6819      	ldr	r1, [r3, #0]
10003c34:	468f      	mov	pc, r1
10003c36:	1c11      	adds	r1, r2, #0
10003c38:	4331      	orrs	r1, r6
10003c3a:	d000      	beq.n	10003c3e <__aeabi_dmul+0xf6>
10003c3c:	e0df      	b.n	10003dfe <__aeabi_dmul+0x2b6>
10003c3e:	2608      	movs	r6, #8
10003c40:	2000      	movs	r0, #0
10003c42:	2102      	movs	r1, #2
10003c44:	46b1      	mov	r9, r6
10003c46:	4682      	mov	sl, r0
10003c48:	2600      	movs	r6, #0
10003c4a:	9103      	str	r1, [sp, #12]
10003c4c:	e7c3      	b.n	10003bd6 <__aeabi_dmul+0x8e>
10003c4e:	48ae      	ldr	r0, [pc, #696]	; (10003f08 <__aeabi_dmul+0x3c0>)
10003c50:	4282      	cmp	r2, r0
10003c52:	d100      	bne.n	10003c56 <__aeabi_dmul+0x10e>
10003c54:	e0c9      	b.n	10003dea <__aeabi_dmul+0x2a2>
10003c56:	2180      	movs	r1, #128	; 0x80
10003c58:	034b      	lsls	r3, r1, #13
10003c5a:	431c      	orrs	r4, r3
10003c5c:	49ab      	ldr	r1, [pc, #684]	; (10003f0c <__aeabi_dmul+0x3c4>)
10003c5e:	0f68      	lsrs	r0, r5, #29
10003c60:	00e4      	lsls	r4, r4, #3
10003c62:	4304      	orrs	r4, r0
10003c64:	00ed      	lsls	r5, r5, #3
10003c66:	1852      	adds	r2, r2, r1
10003c68:	2000      	movs	r0, #0
10003c6a:	4659      	mov	r1, fp
10003c6c:	4079      	eors	r1, r7
10003c6e:	464b      	mov	r3, r9
10003c70:	9101      	str	r1, [sp, #4]
10003c72:	4303      	orrs	r3, r0
10003c74:	2b0f      	cmp	r3, #15
10003c76:	d9d8      	bls.n	10003c2a <__aeabi_dmul+0xe2>
10003c78:	4442      	add	r2, r8
10003c7a:	0433      	lsls	r3, r6, #16
10003c7c:	0429      	lsls	r1, r5, #16
10003c7e:	9204      	str	r2, [sp, #16]
10003c80:	0c1a      	lsrs	r2, r3, #16
10003c82:	0c0f      	lsrs	r7, r1, #16
10003c84:	1c10      	adds	r0, r2, #0
10003c86:	4378      	muls	r0, r7
10003c88:	0c36      	lsrs	r6, r6, #16
10003c8a:	1c33      	adds	r3, r6, #0
10003c8c:	4680      	mov	r8, r0
10003c8e:	0c2d      	lsrs	r5, r5, #16
10003c90:	437b      	muls	r3, r7
10003c92:	1c30      	adds	r0, r6, #0
10003c94:	4368      	muls	r0, r5
10003c96:	1c11      	adds	r1, r2, #0
10003c98:	4369      	muls	r1, r5
10003c9a:	469c      	mov	ip, r3
10003c9c:	4643      	mov	r3, r8
10003c9e:	4683      	mov	fp, r0
10003ca0:	0c18      	lsrs	r0, r3, #16
10003ca2:	1808      	adds	r0, r1, r0
10003ca4:	4460      	add	r0, ip
10003ca6:	4584      	cmp	ip, r0
10003ca8:	d900      	bls.n	10003cac <__aeabi_dmul+0x164>
10003caa:	e11f      	b.n	10003eec <__aeabi_dmul+0x3a4>
10003cac:	0c01      	lsrs	r1, r0, #16
10003cae:	4643      	mov	r3, r8
10003cb0:	9103      	str	r1, [sp, #12]
10003cb2:	0419      	lsls	r1, r3, #16
10003cb4:	0c0b      	lsrs	r3, r1, #16
10003cb6:	0400      	lsls	r0, r0, #16
10003cb8:	18c0      	adds	r0, r0, r3
10003cba:	0421      	lsls	r1, r4, #16
10003cbc:	0c24      	lsrs	r4, r4, #16
10003cbe:	9005      	str	r0, [sp, #20]
10003cc0:	1c10      	adds	r0, r2, #0
10003cc2:	4362      	muls	r2, r4
10003cc4:	0c09      	lsrs	r1, r1, #16
10003cc6:	9202      	str	r2, [sp, #8]
10003cc8:	4348      	muls	r0, r1
10003cca:	1c32      	adds	r2, r6, #0
10003ccc:	4366      	muls	r6, r4
10003cce:	434a      	muls	r2, r1
10003cd0:	9b02      	ldr	r3, [sp, #8]
10003cd2:	46b1      	mov	r9, r6
10003cd4:	0c06      	lsrs	r6, r0, #16
10003cd6:	4690      	mov	r8, r2
10003cd8:	46b4      	mov	ip, r6
10003cda:	1c1a      	adds	r2, r3, #0
10003cdc:	4462      	add	r2, ip
10003cde:	4442      	add	r2, r8
10003ce0:	4590      	cmp	r8, r2
10003ce2:	d902      	bls.n	10003cea <__aeabi_dmul+0x1a2>
10003ce4:	2680      	movs	r6, #128	; 0x80
10003ce6:	0273      	lsls	r3, r6, #9
10003ce8:	4499      	add	r9, r3
10003cea:	0c16      	lsrs	r6, r2, #16
10003cec:	46b0      	mov	r8, r6
10003cee:	44c1      	add	r9, r8
10003cf0:	0400      	lsls	r0, r0, #16
10003cf2:	464b      	mov	r3, r9
10003cf4:	0c06      	lsrs	r6, r0, #16
10003cf6:	0412      	lsls	r2, r2, #16
10003cf8:	9302      	str	r3, [sp, #8]
10003cfa:	1993      	adds	r3, r2, r6
10003cfc:	4656      	mov	r6, sl
10003cfe:	0432      	lsls	r2, r6, #16
10003d00:	0c10      	lsrs	r0, r2, #16
10003d02:	1c02      	adds	r2, r0, #0
10003d04:	436a      	muls	r2, r5
10003d06:	469c      	mov	ip, r3
10003d08:	1c03      	adds	r3, r0, #0
10003d0a:	437b      	muls	r3, r7
10003d0c:	4691      	mov	r9, r2
10003d0e:	0c32      	lsrs	r2, r6, #16
10003d10:	4357      	muls	r7, r2
10003d12:	4698      	mov	r8, r3
10003d14:	0c1b      	lsrs	r3, r3, #16
10003d16:	469a      	mov	sl, r3
10003d18:	44d1      	add	r9, sl
10003d1a:	44b9      	add	r9, r7
10003d1c:	4355      	muls	r5, r2
10003d1e:	454f      	cmp	r7, r9
10003d20:	d902      	bls.n	10003d28 <__aeabi_dmul+0x1e0>
10003d22:	2780      	movs	r7, #128	; 0x80
10003d24:	027e      	lsls	r6, r7, #9
10003d26:	19ad      	adds	r5, r5, r6
10003d28:	464b      	mov	r3, r9
10003d2a:	0c1f      	lsrs	r7, r3, #16
10003d2c:	4646      	mov	r6, r8
10003d2e:	19ed      	adds	r5, r5, r7
10003d30:	041f      	lsls	r7, r3, #16
10003d32:	0433      	lsls	r3, r6, #16
10003d34:	0c1e      	lsrs	r6, r3, #16
10003d36:	1c03      	adds	r3, r0, #0
10003d38:	434b      	muls	r3, r1
10003d3a:	4360      	muls	r0, r4
10003d3c:	4351      	muls	r1, r2
10003d3e:	4354      	muls	r4, r2
10003d40:	0c1a      	lsrs	r2, r3, #16
10003d42:	1880      	adds	r0, r0, r2
10003d44:	46b0      	mov	r8, r6
10003d46:	1840      	adds	r0, r0, r1
10003d48:	4447      	add	r7, r8
10003d4a:	469a      	mov	sl, r3
10003d4c:	4281      	cmp	r1, r0
10003d4e:	d902      	bls.n	10003d56 <__aeabi_dmul+0x20e>
10003d50:	2180      	movs	r1, #128	; 0x80
10003d52:	024e      	lsls	r6, r1, #9
10003d54:	19a4      	adds	r4, r4, r6
10003d56:	9b03      	ldr	r3, [sp, #12]
10003d58:	1c1a      	adds	r2, r3, #0
10003d5a:	4462      	add	r2, ip
10003d5c:	445a      	add	r2, fp
10003d5e:	4562      	cmp	r2, ip
10003d60:	4189      	sbcs	r1, r1
10003d62:	424e      	negs	r6, r1
10003d64:	4651      	mov	r1, sl
10003d66:	46b3      	mov	fp, r6
10003d68:	0403      	lsls	r3, r0, #16
10003d6a:	040e      	lsls	r6, r1, #16
10003d6c:	469c      	mov	ip, r3
10003d6e:	9902      	ldr	r1, [sp, #8]
10003d70:	0c33      	lsrs	r3, r6, #16
10003d72:	4463      	add	r3, ip
10003d74:	18ce      	adds	r6, r1, r3
10003d76:	46b0      	mov	r8, r6
10003d78:	46c2      	mov	sl, r8
10003d7a:	44da      	add	sl, fp
10003d7c:	19d2      	adds	r2, r2, r7
10003d7e:	42ba      	cmp	r2, r7
10003d80:	41bf      	sbcs	r7, r7
10003d82:	4651      	mov	r1, sl
10003d84:	427b      	negs	r3, r7
10003d86:	186f      	adds	r7, r5, r1
10003d88:	18f9      	adds	r1, r7, r3
10003d8a:	4699      	mov	r9, r3
10003d8c:	45da      	cmp	sl, fp
10003d8e:	419b      	sbcs	r3, r3
10003d90:	425e      	negs	r6, r3
10003d92:	9b02      	ldr	r3, [sp, #8]
10003d94:	46b3      	mov	fp, r6
10003d96:	4598      	cmp	r8, r3
10003d98:	41b6      	sbcs	r6, r6
10003d9a:	4276      	negs	r6, r6
10003d9c:	465b      	mov	r3, fp
10003d9e:	431e      	orrs	r6, r3
10003da0:	0c00      	lsrs	r0, r0, #16
10003da2:	4549      	cmp	r1, r9
10003da4:	419b      	sbcs	r3, r3
10003da6:	42af      	cmp	r7, r5
10003da8:	41ad      	sbcs	r5, r5
10003daa:	1836      	adds	r6, r6, r0
10003dac:	426f      	negs	r7, r5
10003dae:	4258      	negs	r0, r3
10003db0:	4338      	orrs	r0, r7
10003db2:	1836      	adds	r6, r6, r0
10003db4:	9805      	ldr	r0, [sp, #20]
10003db6:	1934      	adds	r4, r6, r4
10003db8:	0256      	lsls	r6, r2, #9
10003dba:	4306      	orrs	r6, r0
10003dbc:	0dcb      	lsrs	r3, r1, #23
10003dbe:	0264      	lsls	r4, r4, #9
10003dc0:	1e70      	subs	r0, r6, #1
10003dc2:	4186      	sbcs	r6, r0
10003dc4:	0dd2      	lsrs	r2, r2, #23
10003dc6:	4316      	orrs	r6, r2
10003dc8:	0249      	lsls	r1, r1, #9
10003dca:	431c      	orrs	r4, r3
10003dcc:	430e      	orrs	r6, r1
10003dce:	01e0      	lsls	r0, r4, #7
10003dd0:	d52f      	bpl.n	10003e32 <__aeabi_dmul+0x2ea>
10003dd2:	2701      	movs	r7, #1
10003dd4:	9d04      	ldr	r5, [sp, #16]
10003dd6:	4037      	ands	r7, r6
10003dd8:	0873      	lsrs	r3, r6, #1
10003dda:	1c3e      	adds	r6, r7, #0
10003ddc:	07e0      	lsls	r0, r4, #31
10003dde:	3501      	adds	r5, #1
10003de0:	431e      	orrs	r6, r3
10003de2:	9504      	str	r5, [sp, #16]
10003de4:	4306      	orrs	r6, r0
10003de6:	0864      	lsrs	r4, r4, #1
10003de8:	e023      	b.n	10003e32 <__aeabi_dmul+0x2ea>
10003dea:	1c23      	adds	r3, r4, #0
10003dec:	432b      	orrs	r3, r5
10003dee:	2003      	movs	r0, #3
10003df0:	2b00      	cmp	r3, #0
10003df2:	d000      	beq.n	10003df6 <__aeabi_dmul+0x2ae>
10003df4:	e739      	b.n	10003c6a <__aeabi_dmul+0x122>
10003df6:	2400      	movs	r4, #0
10003df8:	2500      	movs	r5, #0
10003dfa:	2002      	movs	r0, #2
10003dfc:	e735      	b.n	10003c6a <__aeabi_dmul+0x122>
10003dfe:	220c      	movs	r2, #12
10003e00:	2303      	movs	r3, #3
10003e02:	4691      	mov	r9, r2
10003e04:	9303      	str	r3, [sp, #12]
10003e06:	e6e6      	b.n	10003bd6 <__aeabi_dmul+0x8e>
10003e08:	2604      	movs	r6, #4
10003e0a:	2300      	movs	r3, #0
10003e0c:	2001      	movs	r0, #1
10003e0e:	46b1      	mov	r9, r6
10003e10:	469a      	mov	sl, r3
10003e12:	2600      	movs	r6, #0
10003e14:	9003      	str	r0, [sp, #12]
10003e16:	e6de      	b.n	10003bd6 <__aeabi_dmul+0x8e>
10003e18:	2400      	movs	r4, #0
10003e1a:	2500      	movs	r5, #0
10003e1c:	2001      	movs	r0, #1
10003e1e:	e724      	b.n	10003c6a <__aeabi_dmul+0x122>
10003e20:	9803      	ldr	r0, [sp, #12]
10003e22:	4654      	mov	r4, sl
10003e24:	2802      	cmp	r0, #2
10003e26:	d044      	beq.n	10003eb2 <__aeabi_dmul+0x36a>
10003e28:	2803      	cmp	r0, #3
10003e2a:	d100      	bne.n	10003e2e <__aeabi_dmul+0x2e6>
10003e2c:	e0ea      	b.n	10004004 <__aeabi_dmul+0x4bc>
10003e2e:	2801      	cmp	r0, #1
10003e30:	d060      	beq.n	10003ef4 <__aeabi_dmul+0x3ac>
10003e32:	9a04      	ldr	r2, [sp, #16]
10003e34:	4937      	ldr	r1, [pc, #220]	; (10003f14 <__aeabi_dmul+0x3cc>)
10003e36:	1850      	adds	r0, r2, r1
10003e38:	2800      	cmp	r0, #0
10003e3a:	dc00      	bgt.n	10003e3e <__aeabi_dmul+0x2f6>
10003e3c:	e095      	b.n	10003f6a <__aeabi_dmul+0x422>
10003e3e:	270f      	movs	r7, #15
10003e40:	4037      	ands	r7, r6
10003e42:	2f04      	cmp	r7, #4
10003e44:	d005      	beq.n	10003e52 <__aeabi_dmul+0x30a>
10003e46:	1d31      	adds	r1, r6, #4
10003e48:	42b1      	cmp	r1, r6
10003e4a:	41b6      	sbcs	r6, r6
10003e4c:	4275      	negs	r5, r6
10003e4e:	1964      	adds	r4, r4, r5
10003e50:	1c0e      	adds	r6, r1, #0
10003e52:	01e1      	lsls	r1, r4, #7
10003e54:	d505      	bpl.n	10003e62 <__aeabi_dmul+0x31a>
10003e56:	4830      	ldr	r0, [pc, #192]	; (10003f18 <__aeabi_dmul+0x3d0>)
10003e58:	9a04      	ldr	r2, [sp, #16]
10003e5a:	2380      	movs	r3, #128	; 0x80
10003e5c:	00df      	lsls	r7, r3, #3
10003e5e:	4004      	ands	r4, r0
10003e60:	19d0      	adds	r0, r2, r7
10003e62:	492e      	ldr	r1, [pc, #184]	; (10003f1c <__aeabi_dmul+0x3d4>)
10003e64:	4288      	cmp	r0, r1
10003e66:	dc24      	bgt.n	10003eb2 <__aeabi_dmul+0x36a>
10003e68:	9b01      	ldr	r3, [sp, #4]
10003e6a:	0765      	lsls	r5, r4, #29
10003e6c:	08f6      	lsrs	r6, r6, #3
10003e6e:	0264      	lsls	r4, r4, #9
10003e70:	0542      	lsls	r2, r0, #21
10003e72:	2701      	movs	r7, #1
10003e74:	432e      	orrs	r6, r5
10003e76:	0b24      	lsrs	r4, r4, #12
10003e78:	0d52      	lsrs	r2, r2, #21
10003e7a:	401f      	ands	r7, r3
10003e7c:	2000      	movs	r0, #0
10003e7e:	2100      	movs	r1, #0
10003e80:	0d09      	lsrs	r1, r1, #20
10003e82:	050d      	lsls	r5, r1, #20
10003e84:	4325      	orrs	r5, r4
10003e86:	4c26      	ldr	r4, [pc, #152]	; (10003f20 <__aeabi_dmul+0x3d8>)
10003e88:	0512      	lsls	r2, r2, #20
10003e8a:	402c      	ands	r4, r5
10003e8c:	4314      	orrs	r4, r2
10003e8e:	0063      	lsls	r3, r4, #1
10003e90:	1c30      	adds	r0, r6, #0
10003e92:	085e      	lsrs	r6, r3, #1
10003e94:	07ff      	lsls	r7, r7, #31
10003e96:	1c31      	adds	r1, r6, #0
10003e98:	4339      	orrs	r1, r7
10003e9a:	b007      	add	sp, #28
10003e9c:	bc3c      	pop	{r2, r3, r4, r5}
10003e9e:	4690      	mov	r8, r2
10003ea0:	4699      	mov	r9, r3
10003ea2:	46a2      	mov	sl, r4
10003ea4:	46ab      	mov	fp, r5
10003ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003ea8:	465a      	mov	r2, fp
10003eaa:	1c2e      	adds	r6, r5, #0
10003eac:	9201      	str	r2, [sp, #4]
10003eae:	2802      	cmp	r0, #2
10003eb0:	d1ba      	bne.n	10003e28 <__aeabi_dmul+0x2e0>
10003eb2:	9e01      	ldr	r6, [sp, #4]
10003eb4:	2701      	movs	r7, #1
10003eb6:	4037      	ands	r7, r6
10003eb8:	4a13      	ldr	r2, [pc, #76]	; (10003f08 <__aeabi_dmul+0x3c0>)
10003eba:	2400      	movs	r4, #0
10003ebc:	2600      	movs	r6, #0
10003ebe:	e7dd      	b.n	10003e7c <__aeabi_dmul+0x334>
10003ec0:	4654      	mov	r4, sl
10003ec2:	9701      	str	r7, [sp, #4]
10003ec4:	9803      	ldr	r0, [sp, #12]
10003ec6:	e7ad      	b.n	10003e24 <__aeabi_dmul+0x2dc>
10003ec8:	2601      	movs	r6, #1
10003eca:	2700      	movs	r7, #0
10003ecc:	4c15      	ldr	r4, [pc, #84]	; (10003f24 <__aeabi_dmul+0x3dc>)
10003ece:	4276      	negs	r6, r6
10003ed0:	4a0d      	ldr	r2, [pc, #52]	; (10003f08 <__aeabi_dmul+0x3c0>)
10003ed2:	e7d3      	b.n	10003e7c <__aeabi_dmul+0x334>
10003ed4:	1c2e      	adds	r6, r5, #0
10003ed6:	e7a5      	b.n	10003e24 <__aeabi_dmul+0x2dc>
10003ed8:	2280      	movs	r2, #128	; 0x80
10003eda:	0313      	lsls	r3, r2, #12
10003edc:	4651      	mov	r1, sl
10003ede:	4219      	tst	r1, r3
10003ee0:	d135      	bne.n	10003f4e <__aeabi_dmul+0x406>
10003ee2:	430b      	orrs	r3, r1
10003ee4:	031d      	lsls	r5, r3, #12
10003ee6:	0b2c      	lsrs	r4, r5, #12
10003ee8:	4a07      	ldr	r2, [pc, #28]	; (10003f08 <__aeabi_dmul+0x3c0>)
10003eea:	e7c7      	b.n	10003e7c <__aeabi_dmul+0x334>
10003eec:	2180      	movs	r1, #128	; 0x80
10003eee:	024b      	lsls	r3, r1, #9
10003ef0:	449b      	add	fp, r3
10003ef2:	e6db      	b.n	10003cac <__aeabi_dmul+0x164>
10003ef4:	9b01      	ldr	r3, [sp, #4]
10003ef6:	2200      	movs	r2, #0
10003ef8:	4018      	ands	r0, r3
10003efa:	b2c7      	uxtb	r7, r0
10003efc:	2400      	movs	r4, #0
10003efe:	2600      	movs	r6, #0
10003f00:	e7bc      	b.n	10003e7c <__aeabi_dmul+0x334>
10003f02:	46c0      	nop			; (mov r8, r8)
10003f04:	fffffc0d 	.word	0xfffffc0d
10003f08:	000007ff 	.word	0x000007ff
10003f0c:	fffffc01 	.word	0xfffffc01
10003f10:	10004de8 	.word	0x10004de8
10003f14:	000003ff 	.word	0x000003ff
10003f18:	feffffff 	.word	0xfeffffff
10003f1c:	000007fe 	.word	0x000007fe
10003f20:	800fffff 	.word	0x800fffff
10003f24:	000fffff 	.word	0x000fffff
10003f28:	1c04      	adds	r4, r0, #0
10003f2a:	3c28      	subs	r4, #40	; 0x28
10003f2c:	40a5      	lsls	r5, r4
10003f2e:	1c2c      	adds	r4, r5, #0
10003f30:	2500      	movs	r5, #0
10003f32:	e670      	b.n	10003c16 <__aeabi_dmul+0xce>
10003f34:	f000 fca0 	bl	10004878 <__clzsi2>
10003f38:	3020      	adds	r0, #32
10003f3a:	e660      	b.n	10003bfe <__aeabi_dmul+0xb6>
10003f3c:	3b28      	subs	r3, #40	; 0x28
10003f3e:	409e      	lsls	r6, r3
10003f40:	46b2      	mov	sl, r6
10003f42:	2600      	movs	r6, #0
10003f44:	e62d      	b.n	10003ba2 <__aeabi_dmul+0x5a>
10003f46:	f000 fc97 	bl	10004878 <__clzsi2>
10003f4a:	3020      	adds	r0, #32
10003f4c:	e619      	b.n	10003b82 <__aeabi_dmul+0x3a>
10003f4e:	421c      	tst	r4, r3
10003f50:	d106      	bne.n	10003f60 <__aeabi_dmul+0x418>
10003f52:	431c      	orrs	r4, r3
10003f54:	0326      	lsls	r6, r4, #12
10003f56:	0b34      	lsrs	r4, r6, #12
10003f58:	465f      	mov	r7, fp
10003f5a:	1c2e      	adds	r6, r5, #0
10003f5c:	4a2e      	ldr	r2, [pc, #184]	; (10004018 <__aeabi_dmul+0x4d0>)
10003f5e:	e78d      	b.n	10003e7c <__aeabi_dmul+0x334>
10003f60:	430b      	orrs	r3, r1
10003f62:	0318      	lsls	r0, r3, #12
10003f64:	0b04      	lsrs	r4, r0, #12
10003f66:	4a2c      	ldr	r2, [pc, #176]	; (10004018 <__aeabi_dmul+0x4d0>)
10003f68:	e788      	b.n	10003e7c <__aeabi_dmul+0x334>
10003f6a:	4f2c      	ldr	r7, [pc, #176]	; (1000401c <__aeabi_dmul+0x4d4>)
10003f6c:	9d04      	ldr	r5, [sp, #16]
10003f6e:	1b7b      	subs	r3, r7, r5
10003f70:	2b38      	cmp	r3, #56	; 0x38
10003f72:	dd06      	ble.n	10003f82 <__aeabi_dmul+0x43a>
10003f74:	9e01      	ldr	r6, [sp, #4]
10003f76:	2701      	movs	r7, #1
10003f78:	4037      	ands	r7, r6
10003f7a:	2200      	movs	r2, #0
10003f7c:	2400      	movs	r4, #0
10003f7e:	2600      	movs	r6, #0
10003f80:	e77c      	b.n	10003e7c <__aeabi_dmul+0x334>
10003f82:	2b1f      	cmp	r3, #31
10003f84:	dc21      	bgt.n	10003fca <__aeabi_dmul+0x482>
10003f86:	9a04      	ldr	r2, [sp, #16]
10003f88:	4f25      	ldr	r7, [pc, #148]	; (10004020 <__aeabi_dmul+0x4d8>)
10003f8a:	1c35      	adds	r5, r6, #0
10003f8c:	19d1      	adds	r1, r2, r7
10003f8e:	1c20      	adds	r0, r4, #0
10003f90:	408e      	lsls	r6, r1
10003f92:	40dd      	lsrs	r5, r3
10003f94:	4088      	lsls	r0, r1
10003f96:	1c32      	adds	r2, r6, #0
10003f98:	4328      	orrs	r0, r5
10003f9a:	1e56      	subs	r6, r2, #1
10003f9c:	41b2      	sbcs	r2, r6
10003f9e:	1c06      	adds	r6, r0, #0
10003fa0:	4316      	orrs	r6, r2
10003fa2:	40dc      	lsrs	r4, r3
10003fa4:	230f      	movs	r3, #15
10003fa6:	4033      	ands	r3, r6
10003fa8:	2b04      	cmp	r3, #4
10003faa:	d005      	beq.n	10003fb8 <__aeabi_dmul+0x470>
10003fac:	1d37      	adds	r7, r6, #4
10003fae:	42b7      	cmp	r7, r6
10003fb0:	41b6      	sbcs	r6, r6
10003fb2:	4271      	negs	r1, r6
10003fb4:	1864      	adds	r4, r4, r1
10003fb6:	1c3e      	adds	r6, r7, #0
10003fb8:	0225      	lsls	r5, r4, #8
10003fba:	d517      	bpl.n	10003fec <__aeabi_dmul+0x4a4>
10003fbc:	9b01      	ldr	r3, [sp, #4]
10003fbe:	2701      	movs	r7, #1
10003fc0:	401f      	ands	r7, r3
10003fc2:	2201      	movs	r2, #1
10003fc4:	2400      	movs	r4, #0
10003fc6:	2600      	movs	r6, #0
10003fc8:	e758      	b.n	10003e7c <__aeabi_dmul+0x334>
10003fca:	4816      	ldr	r0, [pc, #88]	; (10004024 <__aeabi_dmul+0x4dc>)
10003fcc:	9a04      	ldr	r2, [sp, #16]
10003fce:	1c21      	adds	r1, r4, #0
10003fd0:	1a87      	subs	r7, r0, r2
10003fd2:	40f9      	lsrs	r1, r7
10003fd4:	1c0d      	adds	r5, r1, #0
10003fd6:	2b20      	cmp	r3, #32
10003fd8:	d012      	beq.n	10004000 <__aeabi_dmul+0x4b8>
10003fda:	4b13      	ldr	r3, [pc, #76]	; (10004028 <__aeabi_dmul+0x4e0>)
10003fdc:	18d0      	adds	r0, r2, r3
10003fde:	4084      	lsls	r4, r0
10003fe0:	4326      	orrs	r6, r4
10003fe2:	1e72      	subs	r2, r6, #1
10003fe4:	4196      	sbcs	r6, r2
10003fe6:	432e      	orrs	r6, r5
10003fe8:	2400      	movs	r4, #0
10003fea:	e7db      	b.n	10003fa4 <__aeabi_dmul+0x45c>
10003fec:	9a01      	ldr	r2, [sp, #4]
10003fee:	0765      	lsls	r5, r4, #29
10003ff0:	08f6      	lsrs	r6, r6, #3
10003ff2:	0260      	lsls	r0, r4, #9
10003ff4:	2701      	movs	r7, #1
10003ff6:	4017      	ands	r7, r2
10003ff8:	432e      	orrs	r6, r5
10003ffa:	0b04      	lsrs	r4, r0, #12
10003ffc:	2200      	movs	r2, #0
10003ffe:	e73d      	b.n	10003e7c <__aeabi_dmul+0x334>
10004000:	2400      	movs	r4, #0
10004002:	e7ed      	b.n	10003fe0 <__aeabi_dmul+0x498>
10004004:	2180      	movs	r1, #128	; 0x80
10004006:	030f      	lsls	r7, r1, #12
10004008:	433c      	orrs	r4, r7
1000400a:	9801      	ldr	r0, [sp, #4]
1000400c:	0324      	lsls	r4, r4, #12
1000400e:	2701      	movs	r7, #1
10004010:	0b24      	lsrs	r4, r4, #12
10004012:	4007      	ands	r7, r0
10004014:	4a00      	ldr	r2, [pc, #0]	; (10004018 <__aeabi_dmul+0x4d0>)
10004016:	e731      	b.n	10003e7c <__aeabi_dmul+0x334>
10004018:	000007ff 	.word	0x000007ff
1000401c:	fffffc02 	.word	0xfffffc02
10004020:	0000041e 	.word	0x0000041e
10004024:	fffffbe2 	.word	0xfffffbe2
10004028:	0000043e 	.word	0x0000043e

1000402c <__aeabi_dsub>:
1000402c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000402e:	4657      	mov	r7, sl
10004030:	464e      	mov	r6, r9
10004032:	4645      	mov	r5, r8
10004034:	b4e0      	push	{r5, r6, r7}
10004036:	1c07      	adds	r7, r0, #0
10004038:	030d      	lsls	r5, r1, #12
1000403a:	004e      	lsls	r6, r1, #1
1000403c:	0a68      	lsrs	r0, r5, #9
1000403e:	0fcc      	lsrs	r4, r1, #31
10004040:	0f79      	lsrs	r1, r7, #29
10004042:	4308      	orrs	r0, r1
10004044:	4684      	mov	ip, r0
10004046:	1c11      	adds	r1, r2, #0
10004048:	0318      	lsls	r0, r3, #12
1000404a:	005a      	lsls	r2, r3, #1
1000404c:	00fd      	lsls	r5, r7, #3
1000404e:	0a40      	lsrs	r0, r0, #9
10004050:	0fdf      	lsrs	r7, r3, #31
10004052:	0f4b      	lsrs	r3, r1, #29
10004054:	4318      	orrs	r0, r3
10004056:	4bca      	ldr	r3, [pc, #808]	; (10004380 <__aeabi_dsub+0x354>)
10004058:	00c9      	lsls	r1, r1, #3
1000405a:	0d76      	lsrs	r6, r6, #21
1000405c:	0d52      	lsrs	r2, r2, #21
1000405e:	468a      	mov	sl, r1
10004060:	429a      	cmp	r2, r3
10004062:	d100      	bne.n	10004066 <__aeabi_dsub+0x3a>
10004064:	e0e0      	b.n	10004228 <__aeabi_dsub+0x1fc>
10004066:	2301      	movs	r3, #1
10004068:	405f      	eors	r7, r3
1000406a:	46b9      	mov	r9, r7
1000406c:	42bc      	cmp	r4, r7
1000406e:	d100      	bne.n	10004072 <__aeabi_dsub+0x46>
10004070:	e0a8      	b.n	100041c4 <__aeabi_dsub+0x198>
10004072:	1ab7      	subs	r7, r6, r2
10004074:	2f00      	cmp	r7, #0
10004076:	dc00      	bgt.n	1000407a <__aeabi_dsub+0x4e>
10004078:	e110      	b.n	1000429c <__aeabi_dsub+0x270>
1000407a:	2a00      	cmp	r2, #0
1000407c:	d112      	bne.n	100040a4 <__aeabi_dsub+0x78>
1000407e:	4652      	mov	r2, sl
10004080:	4302      	orrs	r2, r0
10004082:	d100      	bne.n	10004086 <__aeabi_dsub+0x5a>
10004084:	e0d4      	b.n	10004230 <__aeabi_dsub+0x204>
10004086:	3f01      	subs	r7, #1
10004088:	2f00      	cmp	r7, #0
1000408a:	d000      	beq.n	1000408e <__aeabi_dsub+0x62>
1000408c:	e160      	b.n	10004350 <__aeabi_dsub+0x324>
1000408e:	4651      	mov	r1, sl
10004090:	1a6f      	subs	r7, r5, r1
10004092:	42bd      	cmp	r5, r7
10004094:	41ad      	sbcs	r5, r5
10004096:	4662      	mov	r2, ip
10004098:	426b      	negs	r3, r5
1000409a:	1a10      	subs	r0, r2, r0
1000409c:	1c3d      	adds	r5, r7, #0
1000409e:	1ac3      	subs	r3, r0, r3
100040a0:	1c37      	adds	r7, r6, #0
100040a2:	e024      	b.n	100040ee <__aeabi_dsub+0xc2>
100040a4:	4ab6      	ldr	r2, [pc, #728]	; (10004380 <__aeabi_dsub+0x354>)
100040a6:	4296      	cmp	r6, r2
100040a8:	d100      	bne.n	100040ac <__aeabi_dsub+0x80>
100040aa:	e0e3      	b.n	10004274 <__aeabi_dsub+0x248>
100040ac:	2180      	movs	r1, #128	; 0x80
100040ae:	040b      	lsls	r3, r1, #16
100040b0:	4318      	orrs	r0, r3
100040b2:	2f38      	cmp	r7, #56	; 0x38
100040b4:	dd00      	ble.n	100040b8 <__aeabi_dsub+0x8c>
100040b6:	e123      	b.n	10004300 <__aeabi_dsub+0x2d4>
100040b8:	2f1f      	cmp	r7, #31
100040ba:	dd00      	ble.n	100040be <__aeabi_dsub+0x92>
100040bc:	e166      	b.n	1000438c <__aeabi_dsub+0x360>
100040be:	2120      	movs	r1, #32
100040c0:	1bc9      	subs	r1, r1, r7
100040c2:	1c02      	adds	r2, r0, #0
100040c4:	4653      	mov	r3, sl
100040c6:	408a      	lsls	r2, r1
100040c8:	40fb      	lsrs	r3, r7
100040ca:	431a      	orrs	r2, r3
100040cc:	4653      	mov	r3, sl
100040ce:	408b      	lsls	r3, r1
100040d0:	1c19      	adds	r1, r3, #0
100040d2:	1e4b      	subs	r3, r1, #1
100040d4:	4199      	sbcs	r1, r3
100040d6:	1c03      	adds	r3, r0, #0
100040d8:	430a      	orrs	r2, r1
100040da:	40fb      	lsrs	r3, r7
100040dc:	1aaa      	subs	r2, r5, r2
100040de:	4667      	mov	r7, ip
100040e0:	4295      	cmp	r5, r2
100040e2:	41ad      	sbcs	r5, r5
100040e4:	1af8      	subs	r0, r7, r3
100040e6:	426b      	negs	r3, r5
100040e8:	1ac3      	subs	r3, r0, r3
100040ea:	1c15      	adds	r5, r2, #0
100040ec:	1c37      	adds	r7, r6, #0
100040ee:	021a      	lsls	r2, r3, #8
100040f0:	d400      	bmi.n	100040f4 <__aeabi_dsub+0xc8>
100040f2:	e0c7      	b.n	10004284 <__aeabi_dsub+0x258>
100040f4:	025e      	lsls	r6, r3, #9
100040f6:	0a71      	lsrs	r1, r6, #9
100040f8:	4688      	mov	r8, r1
100040fa:	4642      	mov	r2, r8
100040fc:	2a00      	cmp	r2, #0
100040fe:	d100      	bne.n	10004102 <__aeabi_dsub+0xd6>
10004100:	e0f0      	b.n	100042e4 <__aeabi_dsub+0x2b8>
10004102:	4640      	mov	r0, r8
10004104:	f000 fbb8 	bl	10004878 <__clzsi2>
10004108:	1c02      	adds	r2, r0, #0
1000410a:	3a08      	subs	r2, #8
1000410c:	2a1f      	cmp	r2, #31
1000410e:	dd00      	ble.n	10004112 <__aeabi_dsub+0xe6>
10004110:	e0f1      	b.n	100042f6 <__aeabi_dsub+0x2ca>
10004112:	2328      	movs	r3, #40	; 0x28
10004114:	1a18      	subs	r0, r3, r0
10004116:	1c2e      	adds	r6, r5, #0
10004118:	4641      	mov	r1, r8
1000411a:	40c6      	lsrs	r6, r0
1000411c:	4091      	lsls	r1, r2
1000411e:	1c33      	adds	r3, r6, #0
10004120:	430b      	orrs	r3, r1
10004122:	4095      	lsls	r5, r2
10004124:	4297      	cmp	r7, r2
10004126:	dd00      	ble.n	1000412a <__aeabi_dsub+0xfe>
10004128:	e0a9      	b.n	1000427e <__aeabi_dsub+0x252>
1000412a:	1bd0      	subs	r0, r2, r7
1000412c:	1c41      	adds	r1, r0, #1
1000412e:	291f      	cmp	r1, #31
10004130:	dd00      	ble.n	10004134 <__aeabi_dsub+0x108>
10004132:	e112      	b.n	1000435a <__aeabi_dsub+0x32e>
10004134:	271f      	movs	r7, #31
10004136:	1a3a      	subs	r2, r7, r0
10004138:	1c2e      	adds	r6, r5, #0
1000413a:	1c18      	adds	r0, r3, #0
1000413c:	40ce      	lsrs	r6, r1
1000413e:	4090      	lsls	r0, r2
10004140:	4095      	lsls	r5, r2
10004142:	4330      	orrs	r0, r6
10004144:	1e6a      	subs	r2, r5, #1
10004146:	4195      	sbcs	r5, r2
10004148:	40cb      	lsrs	r3, r1
1000414a:	4305      	orrs	r5, r0
1000414c:	2101      	movs	r1, #1
1000414e:	2700      	movs	r7, #0
10004150:	260f      	movs	r6, #15
10004152:	402e      	ands	r6, r5
10004154:	2e04      	cmp	r6, #4
10004156:	d100      	bne.n	1000415a <__aeabi_dsub+0x12e>
10004158:	e072      	b.n	10004240 <__aeabi_dsub+0x214>
1000415a:	1d2e      	adds	r6, r5, #4
1000415c:	42ae      	cmp	r6, r5
1000415e:	41ad      	sbcs	r5, r5
10004160:	4268      	negs	r0, r5
10004162:	2280      	movs	r2, #128	; 0x80
10004164:	181b      	adds	r3, r3, r0
10004166:	2501      	movs	r5, #1
10004168:	0410      	lsls	r0, r2, #16
1000416a:	4018      	ands	r0, r3
1000416c:	402c      	ands	r4, r5
1000416e:	2800      	cmp	r0, #0
10004170:	d007      	beq.n	10004182 <__aeabi_dsub+0x156>
10004172:	4f83      	ldr	r7, [pc, #524]	; (10004380 <__aeabi_dsub+0x354>)
10004174:	42b9      	cmp	r1, r7
10004176:	d100      	bne.n	1000417a <__aeabi_dsub+0x14e>
10004178:	e0b0      	b.n	100042dc <__aeabi_dsub+0x2b0>
1000417a:	4a82      	ldr	r2, [pc, #520]	; (10004384 <__aeabi_dsub+0x358>)
1000417c:	1c0f      	adds	r7, r1, #0
1000417e:	4013      	ands	r3, r2
10004180:	3101      	adds	r1, #1
10004182:	08f2      	lsrs	r2, r6, #3
10004184:	0549      	lsls	r1, r1, #21
10004186:	075e      	lsls	r6, r3, #29
10004188:	4332      	orrs	r2, r6
1000418a:	08db      	lsrs	r3, r3, #3
1000418c:	0d48      	lsrs	r0, r1, #21
1000418e:	2801      	cmp	r0, #1
10004190:	dc00      	bgt.n	10004194 <__aeabi_dsub+0x168>
10004192:	e079      	b.n	10004288 <__aeabi_dsub+0x25c>
10004194:	031b      	lsls	r3, r3, #12
10004196:	0578      	lsls	r0, r7, #21
10004198:	0b1e      	lsrs	r6, r3, #12
1000419a:	0d47      	lsrs	r7, r0, #21
1000419c:	2000      	movs	r0, #0
1000419e:	2100      	movs	r1, #0
100041a0:	0d09      	lsrs	r1, r1, #20
100041a2:	057d      	lsls	r5, r7, #21
100041a4:	050b      	lsls	r3, r1, #20
100041a6:	4f78      	ldr	r7, [pc, #480]	; (10004388 <__aeabi_dsub+0x35c>)
100041a8:	431e      	orrs	r6, r3
100041aa:	1c10      	adds	r0, r2, #0
100041ac:	4037      	ands	r7, r6
100041ae:	086a      	lsrs	r2, r5, #1
100041b0:	4317      	orrs	r7, r2
100041b2:	007e      	lsls	r6, r7, #1
100041b4:	0871      	lsrs	r1, r6, #1
100041b6:	07e4      	lsls	r4, r4, #31
100041b8:	4321      	orrs	r1, r4
100041ba:	bc1c      	pop	{r2, r3, r4}
100041bc:	4690      	mov	r8, r2
100041be:	4699      	mov	r9, r3
100041c0:	46a2      	mov	sl, r4
100041c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100041c4:	1ab3      	subs	r3, r6, r2
100041c6:	2b00      	cmp	r3, #0
100041c8:	dc00      	bgt.n	100041cc <__aeabi_dsub+0x1a0>
100041ca:	e0a6      	b.n	1000431a <__aeabi_dsub+0x2ee>
100041cc:	2a00      	cmp	r2, #0
100041ce:	d03e      	beq.n	1000424e <__aeabi_dsub+0x222>
100041d0:	4a6b      	ldr	r2, [pc, #428]	; (10004380 <__aeabi_dsub+0x354>)
100041d2:	4296      	cmp	r6, r2
100041d4:	d04e      	beq.n	10004274 <__aeabi_dsub+0x248>
100041d6:	2180      	movs	r1, #128	; 0x80
100041d8:	040f      	lsls	r7, r1, #16
100041da:	4338      	orrs	r0, r7
100041dc:	2b38      	cmp	r3, #56	; 0x38
100041de:	dc00      	bgt.n	100041e2 <__aeabi_dsub+0x1b6>
100041e0:	e118      	b.n	10004414 <__aeabi_dsub+0x3e8>
100041e2:	4653      	mov	r3, sl
100041e4:	4318      	orrs	r0, r3
100041e6:	2700      	movs	r7, #0
100041e8:	2200      	movs	r2, #0
100041ea:	2800      	cmp	r0, #0
100041ec:	d000      	beq.n	100041f0 <__aeabi_dsub+0x1c4>
100041ee:	2201      	movs	r2, #1
100041f0:	1952      	adds	r2, r2, r5
100041f2:	42aa      	cmp	r2, r5
100041f4:	41ad      	sbcs	r5, r5
100041f6:	4467      	add	r7, ip
100041f8:	426b      	negs	r3, r5
100041fa:	18fb      	adds	r3, r7, r3
100041fc:	1c15      	adds	r5, r2, #0
100041fe:	1c37      	adds	r7, r6, #0
10004200:	021e      	lsls	r6, r3, #8
10004202:	d53f      	bpl.n	10004284 <__aeabi_dsub+0x258>
10004204:	485e      	ldr	r0, [pc, #376]	; (10004380 <__aeabi_dsub+0x354>)
10004206:	1c7e      	adds	r6, r7, #1
10004208:	4286      	cmp	r6, r0
1000420a:	d100      	bne.n	1000420e <__aeabi_dsub+0x1e2>
1000420c:	e17b      	b.n	10004506 <__aeabi_dsub+0x4da>
1000420e:	495d      	ldr	r1, [pc, #372]	; (10004384 <__aeabi_dsub+0x358>)
10004210:	2201      	movs	r2, #1
10004212:	402a      	ands	r2, r5
10004214:	400b      	ands	r3, r1
10004216:	0868      	lsrs	r0, r5, #1
10004218:	1c15      	adds	r5, r2, #0
1000421a:	07d9      	lsls	r1, r3, #31
1000421c:	4305      	orrs	r5, r0
1000421e:	430d      	orrs	r5, r1
10004220:	085b      	lsrs	r3, r3, #1
10004222:	1cb9      	adds	r1, r7, #2
10004224:	1c37      	adds	r7, r6, #0
10004226:	e793      	b.n	10004150 <__aeabi_dsub+0x124>
10004228:	4301      	orrs	r1, r0
1000422a:	d100      	bne.n	1000422e <__aeabi_dsub+0x202>
1000422c:	e71b      	b.n	10004066 <__aeabi_dsub+0x3a>
1000422e:	e71c      	b.n	1000406a <__aeabi_dsub+0x3e>
10004230:	1c71      	adds	r1, r6, #1
10004232:	1c37      	adds	r7, r6, #0
10004234:	260f      	movs	r6, #15
10004236:	4663      	mov	r3, ip
10004238:	402e      	ands	r6, r5
1000423a:	2e04      	cmp	r6, #4
1000423c:	d000      	beq.n	10004240 <__aeabi_dsub+0x214>
1000423e:	e78c      	b.n	1000415a <__aeabi_dsub+0x12e>
10004240:	2280      	movs	r2, #128	; 0x80
10004242:	2601      	movs	r6, #1
10004244:	0410      	lsls	r0, r2, #16
10004246:	4034      	ands	r4, r6
10004248:	4018      	ands	r0, r3
1000424a:	1c2e      	adds	r6, r5, #0
1000424c:	e78f      	b.n	1000416e <__aeabi_dsub+0x142>
1000424e:	4652      	mov	r2, sl
10004250:	4302      	orrs	r2, r0
10004252:	d0ed      	beq.n	10004230 <__aeabi_dsub+0x204>
10004254:	3b01      	subs	r3, #1
10004256:	2b00      	cmp	r3, #0
10004258:	d109      	bne.n	1000426e <__aeabi_dsub+0x242>
1000425a:	4657      	mov	r7, sl
1000425c:	1979      	adds	r1, r7, r5
1000425e:	42a9      	cmp	r1, r5
10004260:	4192      	sbcs	r2, r2
10004262:	4255      	negs	r5, r2
10004264:	4460      	add	r0, ip
10004266:	1943      	adds	r3, r0, r5
10004268:	1c37      	adds	r7, r6, #0
1000426a:	1c0d      	adds	r5, r1, #0
1000426c:	e7c8      	b.n	10004200 <__aeabi_dsub+0x1d4>
1000426e:	4944      	ldr	r1, [pc, #272]	; (10004380 <__aeabi_dsub+0x354>)
10004270:	428e      	cmp	r6, r1
10004272:	d1b3      	bne.n	100041dc <__aeabi_dsub+0x1b0>
10004274:	2080      	movs	r0, #128	; 0x80
10004276:	4663      	mov	r3, ip
10004278:	0101      	lsls	r1, r0, #4
1000427a:	1c37      	adds	r7, r6, #0
1000427c:	e768      	b.n	10004150 <__aeabi_dsub+0x124>
1000427e:	1abf      	subs	r7, r7, r2
10004280:	4a40      	ldr	r2, [pc, #256]	; (10004384 <__aeabi_dsub+0x358>)
10004282:	4013      	ands	r3, r2
10004284:	1c79      	adds	r1, r7, #1
10004286:	e763      	b.n	10004150 <__aeabi_dsub+0x124>
10004288:	1c15      	adds	r5, r2, #0
1000428a:	431d      	orrs	r5, r3
1000428c:	d100      	bne.n	10004290 <__aeabi_dsub+0x264>
1000428e:	e221      	b.n	100046d4 <__aeabi_dsub+0x6a8>
10004290:	2f00      	cmp	r7, #0
10004292:	d03e      	beq.n	10004312 <__aeabi_dsub+0x2e6>
10004294:	2680      	movs	r6, #128	; 0x80
10004296:	0331      	lsls	r1, r6, #12
10004298:	430b      	orrs	r3, r1
1000429a:	e77b      	b.n	10004194 <__aeabi_dsub+0x168>
1000429c:	2f00      	cmp	r7, #0
1000429e:	d000      	beq.n	100042a2 <__aeabi_dsub+0x276>
100042a0:	e086      	b.n	100043b0 <__aeabi_dsub+0x384>
100042a2:	1c72      	adds	r2, r6, #1
100042a4:	0551      	lsls	r1, r2, #21
100042a6:	0d4b      	lsrs	r3, r1, #21
100042a8:	2b01      	cmp	r3, #1
100042aa:	dc00      	bgt.n	100042ae <__aeabi_dsub+0x282>
100042ac:	e0f0      	b.n	10004490 <__aeabi_dsub+0x464>
100042ae:	4657      	mov	r7, sl
100042b0:	1bea      	subs	r2, r5, r7
100042b2:	4295      	cmp	r5, r2
100042b4:	419b      	sbcs	r3, r3
100042b6:	4667      	mov	r7, ip
100042b8:	1a39      	subs	r1, r7, r0
100042ba:	425b      	negs	r3, r3
100042bc:	1ac9      	subs	r1, r1, r3
100042be:	4688      	mov	r8, r1
100042c0:	020b      	lsls	r3, r1, #8
100042c2:	d400      	bmi.n	100042c6 <__aeabi_dsub+0x29a>
100042c4:	e09d      	b.n	10004402 <__aeabi_dsub+0x3d6>
100042c6:	4654      	mov	r4, sl
100042c8:	1b65      	subs	r5, r4, r5
100042ca:	45aa      	cmp	sl, r5
100042cc:	4192      	sbcs	r2, r2
100042ce:	1bc0      	subs	r0, r0, r7
100042d0:	4257      	negs	r7, r2
100042d2:	1bc3      	subs	r3, r0, r7
100042d4:	4698      	mov	r8, r3
100042d6:	1c37      	adds	r7, r6, #0
100042d8:	464c      	mov	r4, r9
100042da:	e70e      	b.n	100040fa <__aeabi_dsub+0xce>
100042dc:	1c0f      	adds	r7, r1, #0
100042de:	2600      	movs	r6, #0
100042e0:	2200      	movs	r2, #0
100042e2:	e75b      	b.n	1000419c <__aeabi_dsub+0x170>
100042e4:	1c28      	adds	r0, r5, #0
100042e6:	f000 fac7 	bl	10004878 <__clzsi2>
100042ea:	3020      	adds	r0, #32
100042ec:	1c02      	adds	r2, r0, #0
100042ee:	3a08      	subs	r2, #8
100042f0:	2a1f      	cmp	r2, #31
100042f2:	dc00      	bgt.n	100042f6 <__aeabi_dsub+0x2ca>
100042f4:	e70d      	b.n	10004112 <__aeabi_dsub+0xe6>
100042f6:	3828      	subs	r0, #40	; 0x28
100042f8:	4085      	lsls	r5, r0
100042fa:	1c2b      	adds	r3, r5, #0
100042fc:	2500      	movs	r5, #0
100042fe:	e711      	b.n	10004124 <__aeabi_dsub+0xf8>
10004300:	4657      	mov	r7, sl
10004302:	4338      	orrs	r0, r7
10004304:	2300      	movs	r3, #0
10004306:	2200      	movs	r2, #0
10004308:	2800      	cmp	r0, #0
1000430a:	d100      	bne.n	1000430e <__aeabi_dsub+0x2e2>
1000430c:	e6e6      	b.n	100040dc <__aeabi_dsub+0xb0>
1000430e:	2201      	movs	r2, #1
10004310:	e6e4      	b.n	100040dc <__aeabi_dsub+0xb0>
10004312:	031d      	lsls	r5, r3, #12
10004314:	0b2e      	lsrs	r6, r5, #12
10004316:	2700      	movs	r7, #0
10004318:	e740      	b.n	1000419c <__aeabi_dsub+0x170>
1000431a:	2b00      	cmp	r3, #0
1000431c:	d000      	beq.n	10004320 <__aeabi_dsub+0x2f4>
1000431e:	e0d9      	b.n	100044d4 <__aeabi_dsub+0x4a8>
10004320:	1c77      	adds	r7, r6, #1
10004322:	0579      	lsls	r1, r7, #21
10004324:	0d4a      	lsrs	r2, r1, #21
10004326:	2a01      	cmp	r2, #1
10004328:	dc00      	bgt.n	1000432c <__aeabi_dsub+0x300>
1000432a:	e095      	b.n	10004458 <__aeabi_dsub+0x42c>
1000432c:	4b14      	ldr	r3, [pc, #80]	; (10004380 <__aeabi_dsub+0x354>)
1000432e:	429f      	cmp	r7, r3
10004330:	d100      	bne.n	10004334 <__aeabi_dsub+0x308>
10004332:	e0fe      	b.n	10004532 <__aeabi_dsub+0x506>
10004334:	4651      	mov	r1, sl
10004336:	1949      	adds	r1, r1, r5
10004338:	42a9      	cmp	r1, r5
1000433a:	41ad      	sbcs	r5, r5
1000433c:	4662      	mov	r2, ip
1000433e:	426b      	negs	r3, r5
10004340:	1880      	adds	r0, r0, r2
10004342:	18c2      	adds	r2, r0, r3
10004344:	0849      	lsrs	r1, r1, #1
10004346:	07d5      	lsls	r5, r2, #31
10004348:	430d      	orrs	r5, r1
1000434a:	0853      	lsrs	r3, r2, #1
1000434c:	1cb1      	adds	r1, r6, #2
1000434e:	e6ff      	b.n	10004150 <__aeabi_dsub+0x124>
10004350:	490b      	ldr	r1, [pc, #44]	; (10004380 <__aeabi_dsub+0x354>)
10004352:	428e      	cmp	r6, r1
10004354:	d000      	beq.n	10004358 <__aeabi_dsub+0x32c>
10004356:	e6ac      	b.n	100040b2 <__aeabi_dsub+0x86>
10004358:	e78c      	b.n	10004274 <__aeabi_dsub+0x248>
1000435a:	1c06      	adds	r6, r0, #0
1000435c:	3e1f      	subs	r6, #31
1000435e:	1c1f      	adds	r7, r3, #0
10004360:	40f7      	lsrs	r7, r6
10004362:	1c3e      	adds	r6, r7, #0
10004364:	2920      	cmp	r1, #32
10004366:	d073      	beq.n	10004450 <__aeabi_dsub+0x424>
10004368:	223f      	movs	r2, #63	; 0x3f
1000436a:	1a10      	subs	r0, r2, r0
1000436c:	4083      	lsls	r3, r0
1000436e:	431d      	orrs	r5, r3
10004370:	1e6b      	subs	r3, r5, #1
10004372:	419d      	sbcs	r5, r3
10004374:	4335      	orrs	r5, r6
10004376:	2101      	movs	r1, #1
10004378:	2300      	movs	r3, #0
1000437a:	2700      	movs	r7, #0
1000437c:	e6e8      	b.n	10004150 <__aeabi_dsub+0x124>
1000437e:	46c0      	nop			; (mov r8, r8)
10004380:	000007ff 	.word	0x000007ff
10004384:	ff7fffff 	.word	0xff7fffff
10004388:	800fffff 	.word	0x800fffff
1000438c:	1c3b      	adds	r3, r7, #0
1000438e:	3b20      	subs	r3, #32
10004390:	1c01      	adds	r1, r0, #0
10004392:	40d9      	lsrs	r1, r3
10004394:	1c0b      	adds	r3, r1, #0
10004396:	2f20      	cmp	r7, #32
10004398:	d05c      	beq.n	10004454 <__aeabi_dsub+0x428>
1000439a:	2240      	movs	r2, #64	; 0x40
1000439c:	1bd7      	subs	r7, r2, r7
1000439e:	40b8      	lsls	r0, r7
100043a0:	1c02      	adds	r2, r0, #0
100043a2:	4650      	mov	r0, sl
100043a4:	4302      	orrs	r2, r0
100043a6:	1e51      	subs	r1, r2, #1
100043a8:	418a      	sbcs	r2, r1
100043aa:	431a      	orrs	r2, r3
100043ac:	2300      	movs	r3, #0
100043ae:	e695      	b.n	100040dc <__aeabi_dsub+0xb0>
100043b0:	427f      	negs	r7, r7
100043b2:	2e00      	cmp	r6, #0
100043b4:	d040      	beq.n	10004438 <__aeabi_dsub+0x40c>
100043b6:	4cca      	ldr	r4, [pc, #808]	; (100046e0 <__aeabi_dsub+0x6b4>)
100043b8:	42a2      	cmp	r2, r4
100043ba:	d100      	bne.n	100043be <__aeabi_dsub+0x392>
100043bc:	e11f      	b.n	100045fe <__aeabi_dsub+0x5d2>
100043be:	2180      	movs	r1, #128	; 0x80
100043c0:	4666      	mov	r6, ip
100043c2:	040b      	lsls	r3, r1, #16
100043c4:	431e      	orrs	r6, r3
100043c6:	46b4      	mov	ip, r6
100043c8:	2f38      	cmp	r7, #56	; 0x38
100043ca:	dd00      	ble.n	100043ce <__aeabi_dsub+0x3a2>
100043cc:	e0a9      	b.n	10004522 <__aeabi_dsub+0x4f6>
100043ce:	2f1f      	cmp	r7, #31
100043d0:	dd00      	ble.n	100043d4 <__aeabi_dsub+0x3a8>
100043d2:	e13d      	b.n	10004650 <__aeabi_dsub+0x624>
100043d4:	2320      	movs	r3, #32
100043d6:	1bde      	subs	r6, r3, r7
100043d8:	1c29      	adds	r1, r5, #0
100043da:	4664      	mov	r4, ip
100043dc:	40b4      	lsls	r4, r6
100043de:	40f9      	lsrs	r1, r7
100043e0:	40b5      	lsls	r5, r6
100043e2:	1e6b      	subs	r3, r5, #1
100043e4:	419d      	sbcs	r5, r3
100043e6:	4321      	orrs	r1, r4
100043e8:	4663      	mov	r3, ip
100043ea:	430d      	orrs	r5, r1
100043ec:	40fb      	lsrs	r3, r7
100043ee:	4657      	mov	r7, sl
100043f0:	1b7d      	subs	r5, r7, r5
100043f2:	1ac0      	subs	r0, r0, r3
100043f4:	45aa      	cmp	sl, r5
100043f6:	419b      	sbcs	r3, r3
100043f8:	425f      	negs	r7, r3
100043fa:	1bc3      	subs	r3, r0, r7
100043fc:	464c      	mov	r4, r9
100043fe:	1c17      	adds	r7, r2, #0
10004400:	e675      	b.n	100040ee <__aeabi_dsub+0xc2>
10004402:	1c0d      	adds	r5, r1, #0
10004404:	4315      	orrs	r5, r2
10004406:	d120      	bne.n	1000444a <__aeabi_dsub+0x41e>
10004408:	2400      	movs	r4, #0
1000440a:	2101      	movs	r1, #1
1000440c:	2300      	movs	r3, #0
1000440e:	2604      	movs	r6, #4
10004410:	2700      	movs	r7, #0
10004412:	e6b6      	b.n	10004182 <__aeabi_dsub+0x156>
10004414:	2b1f      	cmp	r3, #31
10004416:	dc4a      	bgt.n	100044ae <__aeabi_dsub+0x482>
10004418:	2120      	movs	r1, #32
1000441a:	1ac9      	subs	r1, r1, r3
1000441c:	1c07      	adds	r7, r0, #0
1000441e:	4652      	mov	r2, sl
10004420:	408f      	lsls	r7, r1
10004422:	40da      	lsrs	r2, r3
10004424:	433a      	orrs	r2, r7
10004426:	4657      	mov	r7, sl
10004428:	408f      	lsls	r7, r1
1000442a:	1c39      	adds	r1, r7, #0
1000442c:	1e4f      	subs	r7, r1, #1
1000442e:	41b9      	sbcs	r1, r7
10004430:	40d8      	lsrs	r0, r3
10004432:	430a      	orrs	r2, r1
10004434:	1c07      	adds	r7, r0, #0
10004436:	e6db      	b.n	100041f0 <__aeabi_dsub+0x1c4>
10004438:	4664      	mov	r4, ip
1000443a:	432c      	orrs	r4, r5
1000443c:	d169      	bne.n	10004512 <__aeabi_dsub+0x4e6>
1000443e:	1c51      	adds	r1, r2, #1
10004440:	1c03      	adds	r3, r0, #0
10004442:	4655      	mov	r5, sl
10004444:	1c17      	adds	r7, r2, #0
10004446:	464c      	mov	r4, r9
10004448:	e682      	b.n	10004150 <__aeabi_dsub+0x124>
1000444a:	1c15      	adds	r5, r2, #0
1000444c:	1c37      	adds	r7, r6, #0
1000444e:	e654      	b.n	100040fa <__aeabi_dsub+0xce>
10004450:	2300      	movs	r3, #0
10004452:	e78c      	b.n	1000436e <__aeabi_dsub+0x342>
10004454:	2200      	movs	r2, #0
10004456:	e7a4      	b.n	100043a2 <__aeabi_dsub+0x376>
10004458:	4667      	mov	r7, ip
1000445a:	432f      	orrs	r7, r5
1000445c:	2e00      	cmp	r6, #0
1000445e:	d000      	beq.n	10004462 <__aeabi_dsub+0x436>
10004460:	e0d4      	b.n	1000460c <__aeabi_dsub+0x5e0>
10004462:	2f00      	cmp	r7, #0
10004464:	d100      	bne.n	10004468 <__aeabi_dsub+0x43c>
10004466:	e126      	b.n	100046b6 <__aeabi_dsub+0x68a>
10004468:	4653      	mov	r3, sl
1000446a:	4303      	orrs	r3, r0
1000446c:	d100      	bne.n	10004470 <__aeabi_dsub+0x444>
1000446e:	e0e4      	b.n	1000463a <__aeabi_dsub+0x60e>
10004470:	4651      	mov	r1, sl
10004472:	194f      	adds	r7, r1, r5
10004474:	42af      	cmp	r7, r5
10004476:	41ad      	sbcs	r5, r5
10004478:	4460      	add	r0, ip
1000447a:	426e      	negs	r6, r5
1000447c:	1983      	adds	r3, r0, r6
1000447e:	021e      	lsls	r6, r3, #8
10004480:	d400      	bmi.n	10004484 <__aeabi_dsub+0x458>
10004482:	e14e      	b.n	10004722 <__aeabi_dsub+0x6f6>
10004484:	4897      	ldr	r0, [pc, #604]	; (100046e4 <__aeabi_dsub+0x6b8>)
10004486:	1c3d      	adds	r5, r7, #0
10004488:	4003      	ands	r3, r0
1000448a:	2102      	movs	r1, #2
1000448c:	2701      	movs	r7, #1
1000448e:	e65f      	b.n	10004150 <__aeabi_dsub+0x124>
10004490:	4661      	mov	r1, ip
10004492:	4329      	orrs	r1, r5
10004494:	2e00      	cmp	r6, #0
10004496:	d129      	bne.n	100044ec <__aeabi_dsub+0x4c0>
10004498:	2900      	cmp	r1, #0
1000449a:	d176      	bne.n	1000458a <__aeabi_dsub+0x55e>
1000449c:	4651      	mov	r1, sl
1000449e:	4301      	orrs	r1, r0
100044a0:	d0b2      	beq.n	10004408 <__aeabi_dsub+0x3dc>
100044a2:	1c03      	adds	r3, r0, #0
100044a4:	4655      	mov	r5, sl
100044a6:	464c      	mov	r4, r9
100044a8:	2101      	movs	r1, #1
100044aa:	2700      	movs	r7, #0
100044ac:	e650      	b.n	10004150 <__aeabi_dsub+0x124>
100044ae:	1c1f      	adds	r7, r3, #0
100044b0:	3f20      	subs	r7, #32
100044b2:	1c01      	adds	r1, r0, #0
100044b4:	40f9      	lsrs	r1, r7
100044b6:	1c0f      	adds	r7, r1, #0
100044b8:	2b20      	cmp	r3, #32
100044ba:	d100      	bne.n	100044be <__aeabi_dsub+0x492>
100044bc:	e0c6      	b.n	1000464c <__aeabi_dsub+0x620>
100044be:	2240      	movs	r2, #64	; 0x40
100044c0:	1ad3      	subs	r3, r2, r3
100044c2:	4098      	lsls	r0, r3
100044c4:	1c02      	adds	r2, r0, #0
100044c6:	4650      	mov	r0, sl
100044c8:	4302      	orrs	r2, r0
100044ca:	1e53      	subs	r3, r2, #1
100044cc:	419a      	sbcs	r2, r3
100044ce:	433a      	orrs	r2, r7
100044d0:	2700      	movs	r7, #0
100044d2:	e68d      	b.n	100041f0 <__aeabi_dsub+0x1c4>
100044d4:	425b      	negs	r3, r3
100044d6:	2e00      	cmp	r6, #0
100044d8:	d130      	bne.n	1000453c <__aeabi_dsub+0x510>
100044da:	4667      	mov	r7, ip
100044dc:	432f      	orrs	r7, r5
100044de:	d000      	beq.n	100044e2 <__aeabi_dsub+0x4b6>
100044e0:	e0c8      	b.n	10004674 <__aeabi_dsub+0x648>
100044e2:	1c51      	adds	r1, r2, #1
100044e4:	1c03      	adds	r3, r0, #0
100044e6:	4655      	mov	r5, sl
100044e8:	1c17      	adds	r7, r2, #0
100044ea:	e631      	b.n	10004150 <__aeabi_dsub+0x124>
100044ec:	2900      	cmp	r1, #0
100044ee:	d165      	bne.n	100045bc <__aeabi_dsub+0x590>
100044f0:	4657      	mov	r7, sl
100044f2:	4307      	orrs	r7, r0
100044f4:	d100      	bne.n	100044f8 <__aeabi_dsub+0x4cc>
100044f6:	e0c8      	b.n	1000468a <__aeabi_dsub+0x65e>
100044f8:	1c03      	adds	r3, r0, #0
100044fa:	2080      	movs	r0, #128	; 0x80
100044fc:	4655      	mov	r5, sl
100044fe:	464c      	mov	r4, r9
10004500:	0101      	lsls	r1, r0, #4
10004502:	4f77      	ldr	r7, [pc, #476]	; (100046e0 <__aeabi_dsub+0x6b4>)
10004504:	e624      	b.n	10004150 <__aeabi_dsub+0x124>
10004506:	2380      	movs	r3, #128	; 0x80
10004508:	1c37      	adds	r7, r6, #0
1000450a:	0119      	lsls	r1, r3, #4
1000450c:	2604      	movs	r6, #4
1000450e:	2300      	movs	r3, #0
10004510:	e637      	b.n	10004182 <__aeabi_dsub+0x156>
10004512:	3f01      	subs	r7, #1
10004514:	2f00      	cmp	r7, #0
10004516:	d16e      	bne.n	100045f6 <__aeabi_dsub+0x5ca>
10004518:	4654      	mov	r4, sl
1000451a:	4661      	mov	r1, ip
1000451c:	1b65      	subs	r5, r4, r5
1000451e:	1a40      	subs	r0, r0, r1
10004520:	e768      	b.n	100043f4 <__aeabi_dsub+0x3c8>
10004522:	4667      	mov	r7, ip
10004524:	433d      	orrs	r5, r7
10004526:	2300      	movs	r3, #0
10004528:	2d00      	cmp	r5, #0
1000452a:	d100      	bne.n	1000452e <__aeabi_dsub+0x502>
1000452c:	e75f      	b.n	100043ee <__aeabi_dsub+0x3c2>
1000452e:	2501      	movs	r5, #1
10004530:	e75d      	b.n	100043ee <__aeabi_dsub+0x3c2>
10004532:	2680      	movs	r6, #128	; 0x80
10004534:	0131      	lsls	r1, r6, #4
10004536:	2300      	movs	r3, #0
10004538:	2604      	movs	r6, #4
1000453a:	e622      	b.n	10004182 <__aeabi_dsub+0x156>
1000453c:	4968      	ldr	r1, [pc, #416]	; (100046e0 <__aeabi_dsub+0x6b4>)
1000453e:	428a      	cmp	r2, r1
10004540:	d100      	bne.n	10004544 <__aeabi_dsub+0x518>
10004542:	e0c1      	b.n	100046c8 <__aeabi_dsub+0x69c>
10004544:	2780      	movs	r7, #128	; 0x80
10004546:	4666      	mov	r6, ip
10004548:	0439      	lsls	r1, r7, #16
1000454a:	430e      	orrs	r6, r1
1000454c:	46b4      	mov	ip, r6
1000454e:	2b38      	cmp	r3, #56	; 0x38
10004550:	dd00      	ble.n	10004554 <__aeabi_dsub+0x528>
10004552:	e0a2      	b.n	1000469a <__aeabi_dsub+0x66e>
10004554:	2b1f      	cmp	r3, #31
10004556:	dd00      	ble.n	1000455a <__aeabi_dsub+0x52e>
10004558:	e0d0      	b.n	100046fc <__aeabi_dsub+0x6d0>
1000455a:	2120      	movs	r1, #32
1000455c:	1ac9      	subs	r1, r1, r3
1000455e:	1c2e      	adds	r6, r5, #0
10004560:	4667      	mov	r7, ip
10004562:	408f      	lsls	r7, r1
10004564:	408d      	lsls	r5, r1
10004566:	40de      	lsrs	r6, r3
10004568:	433e      	orrs	r6, r7
1000456a:	1c29      	adds	r1, r5, #0
1000456c:	4667      	mov	r7, ip
1000456e:	1e4d      	subs	r5, r1, #1
10004570:	41a9      	sbcs	r1, r5
10004572:	40df      	lsrs	r7, r3
10004574:	1c35      	adds	r5, r6, #0
10004576:	430d      	orrs	r5, r1
10004578:	1c3e      	adds	r6, r7, #0
1000457a:	4455      	add	r5, sl
1000457c:	4555      	cmp	r5, sl
1000457e:	419b      	sbcs	r3, r3
10004580:	1830      	adds	r0, r6, r0
10004582:	425e      	negs	r6, r3
10004584:	1983      	adds	r3, r0, r6
10004586:	1c17      	adds	r7, r2, #0
10004588:	e63a      	b.n	10004200 <__aeabi_dsub+0x1d4>
1000458a:	4656      	mov	r6, sl
1000458c:	4306      	orrs	r6, r0
1000458e:	d054      	beq.n	1000463a <__aeabi_dsub+0x60e>
10004590:	4657      	mov	r7, sl
10004592:	1bea      	subs	r2, r5, r7
10004594:	4663      	mov	r3, ip
10004596:	4295      	cmp	r5, r2
10004598:	41b6      	sbcs	r6, r6
1000459a:	1a19      	subs	r1, r3, r0
1000459c:	4273      	negs	r3, r6
1000459e:	1acb      	subs	r3, r1, r3
100045a0:	021e      	lsls	r6, r3, #8
100045a2:	d400      	bmi.n	100045a6 <__aeabi_dsub+0x57a>
100045a4:	e0a2      	b.n	100046ec <__aeabi_dsub+0x6c0>
100045a6:	1b7d      	subs	r5, r7, r5
100045a8:	4664      	mov	r4, ip
100045aa:	45aa      	cmp	sl, r5
100045ac:	41bf      	sbcs	r7, r7
100045ae:	1b00      	subs	r0, r0, r4
100045b0:	427a      	negs	r2, r7
100045b2:	1a83      	subs	r3, r0, r2
100045b4:	464c      	mov	r4, r9
100045b6:	2101      	movs	r1, #1
100045b8:	2700      	movs	r7, #0
100045ba:	e5c9      	b.n	10004150 <__aeabi_dsub+0x124>
100045bc:	4656      	mov	r6, sl
100045be:	4306      	orrs	r6, r0
100045c0:	d03f      	beq.n	10004642 <__aeabi_dsub+0x616>
100045c2:	4662      	mov	r2, ip
100045c4:	2180      	movs	r1, #128	; 0x80
100045c6:	0757      	lsls	r7, r2, #29
100045c8:	08ed      	lsrs	r5, r5, #3
100045ca:	08d3      	lsrs	r3, r2, #3
100045cc:	030a      	lsls	r2, r1, #12
100045ce:	433d      	orrs	r5, r7
100045d0:	4213      	tst	r3, r2
100045d2:	d008      	beq.n	100045e6 <__aeabi_dsub+0x5ba>
100045d4:	08c6      	lsrs	r6, r0, #3
100045d6:	4216      	tst	r6, r2
100045d8:	d105      	bne.n	100045e6 <__aeabi_dsub+0x5ba>
100045da:	4655      	mov	r5, sl
100045dc:	08ec      	lsrs	r4, r5, #3
100045de:	0745      	lsls	r5, r0, #29
100045e0:	4325      	orrs	r5, r4
100045e2:	1c33      	adds	r3, r6, #0
100045e4:	464c      	mov	r4, r9
100045e6:	0f68      	lsrs	r0, r5, #29
100045e8:	00db      	lsls	r3, r3, #3
100045ea:	2680      	movs	r6, #128	; 0x80
100045ec:	4303      	orrs	r3, r0
100045ee:	00ed      	lsls	r5, r5, #3
100045f0:	0131      	lsls	r1, r6, #4
100045f2:	4f3b      	ldr	r7, [pc, #236]	; (100046e0 <__aeabi_dsub+0x6b4>)
100045f4:	e5ac      	b.n	10004150 <__aeabi_dsub+0x124>
100045f6:	493a      	ldr	r1, [pc, #232]	; (100046e0 <__aeabi_dsub+0x6b4>)
100045f8:	428a      	cmp	r2, r1
100045fa:	d000      	beq.n	100045fe <__aeabi_dsub+0x5d2>
100045fc:	e6e4      	b.n	100043c8 <__aeabi_dsub+0x39c>
100045fe:	2680      	movs	r6, #128	; 0x80
10004600:	1c03      	adds	r3, r0, #0
10004602:	4655      	mov	r5, sl
10004604:	464c      	mov	r4, r9
10004606:	0131      	lsls	r1, r6, #4
10004608:	1c17      	adds	r7, r2, #0
1000460a:	e5a1      	b.n	10004150 <__aeabi_dsub+0x124>
1000460c:	2f00      	cmp	r7, #0
1000460e:	d04c      	beq.n	100046aa <__aeabi_dsub+0x67e>
10004610:	4653      	mov	r3, sl
10004612:	4303      	orrs	r3, r0
10004614:	d015      	beq.n	10004642 <__aeabi_dsub+0x616>
10004616:	4662      	mov	r2, ip
10004618:	2680      	movs	r6, #128	; 0x80
1000461a:	08ed      	lsrs	r5, r5, #3
1000461c:	0751      	lsls	r1, r2, #29
1000461e:	08d3      	lsrs	r3, r2, #3
10004620:	0337      	lsls	r7, r6, #12
10004622:	430d      	orrs	r5, r1
10004624:	423b      	tst	r3, r7
10004626:	d0de      	beq.n	100045e6 <__aeabi_dsub+0x5ba>
10004628:	08c2      	lsrs	r2, r0, #3
1000462a:	423a      	tst	r2, r7
1000462c:	d1db      	bne.n	100045e6 <__aeabi_dsub+0x5ba>
1000462e:	4655      	mov	r5, sl
10004630:	08e9      	lsrs	r1, r5, #3
10004632:	0745      	lsls	r5, r0, #29
10004634:	1c13      	adds	r3, r2, #0
10004636:	430d      	orrs	r5, r1
10004638:	e7d5      	b.n	100045e6 <__aeabi_dsub+0x5ba>
1000463a:	4663      	mov	r3, ip
1000463c:	2101      	movs	r1, #1
1000463e:	2700      	movs	r7, #0
10004640:	e586      	b.n	10004150 <__aeabi_dsub+0x124>
10004642:	2780      	movs	r7, #128	; 0x80
10004644:	0139      	lsls	r1, r7, #4
10004646:	4663      	mov	r3, ip
10004648:	4f25      	ldr	r7, [pc, #148]	; (100046e0 <__aeabi_dsub+0x6b4>)
1000464a:	e581      	b.n	10004150 <__aeabi_dsub+0x124>
1000464c:	2200      	movs	r2, #0
1000464e:	e73a      	b.n	100044c6 <__aeabi_dsub+0x49a>
10004650:	1c3c      	adds	r4, r7, #0
10004652:	3c20      	subs	r4, #32
10004654:	4666      	mov	r6, ip
10004656:	40e6      	lsrs	r6, r4
10004658:	1c33      	adds	r3, r6, #0
1000465a:	2f20      	cmp	r7, #32
1000465c:	d05f      	beq.n	1000471e <__aeabi_dsub+0x6f2>
1000465e:	2440      	movs	r4, #64	; 0x40
10004660:	1be7      	subs	r7, r4, r7
10004662:	4666      	mov	r6, ip
10004664:	40be      	lsls	r6, r7
10004666:	1c31      	adds	r1, r6, #0
10004668:	430d      	orrs	r5, r1
1000466a:	1e69      	subs	r1, r5, #1
1000466c:	418d      	sbcs	r5, r1
1000466e:	431d      	orrs	r5, r3
10004670:	2300      	movs	r3, #0
10004672:	e6bc      	b.n	100043ee <__aeabi_dsub+0x3c2>
10004674:	3b01      	subs	r3, #1
10004676:	2b00      	cmp	r3, #0
10004678:	d122      	bne.n	100046c0 <__aeabi_dsub+0x694>
1000467a:	4455      	add	r5, sl
1000467c:	4555      	cmp	r5, sl
1000467e:	41bf      	sbcs	r7, r7
10004680:	427b      	negs	r3, r7
10004682:	4460      	add	r0, ip
10004684:	18c3      	adds	r3, r0, r3
10004686:	1c17      	adds	r7, r2, #0
10004688:	e5ba      	b.n	10004200 <__aeabi_dsub+0x1d4>
1000468a:	2180      	movs	r1, #128	; 0x80
1000468c:	2204      	movs	r2, #4
1000468e:	2400      	movs	r4, #0
10004690:	0109      	lsls	r1, r1, #4
10004692:	4b15      	ldr	r3, [pc, #84]	; (100046e8 <__aeabi_dsub+0x6bc>)
10004694:	4256      	negs	r6, r2
10004696:	4f12      	ldr	r7, [pc, #72]	; (100046e0 <__aeabi_dsub+0x6b4>)
10004698:	e573      	b.n	10004182 <__aeabi_dsub+0x156>
1000469a:	4663      	mov	r3, ip
1000469c:	431d      	orrs	r5, r3
1000469e:	2600      	movs	r6, #0
100046a0:	2d00      	cmp	r5, #0
100046a2:	d100      	bne.n	100046a6 <__aeabi_dsub+0x67a>
100046a4:	e769      	b.n	1000457a <__aeabi_dsub+0x54e>
100046a6:	2501      	movs	r5, #1
100046a8:	e767      	b.n	1000457a <__aeabi_dsub+0x54e>
100046aa:	2280      	movs	r2, #128	; 0x80
100046ac:	1c03      	adds	r3, r0, #0
100046ae:	4655      	mov	r5, sl
100046b0:	0111      	lsls	r1, r2, #4
100046b2:	4f0b      	ldr	r7, [pc, #44]	; (100046e0 <__aeabi_dsub+0x6b4>)
100046b4:	e54c      	b.n	10004150 <__aeabi_dsub+0x124>
100046b6:	1c03      	adds	r3, r0, #0
100046b8:	4655      	mov	r5, sl
100046ba:	2101      	movs	r1, #1
100046bc:	2700      	movs	r7, #0
100046be:	e547      	b.n	10004150 <__aeabi_dsub+0x124>
100046c0:	4907      	ldr	r1, [pc, #28]	; (100046e0 <__aeabi_dsub+0x6b4>)
100046c2:	428a      	cmp	r2, r1
100046c4:	d000      	beq.n	100046c8 <__aeabi_dsub+0x69c>
100046c6:	e742      	b.n	1000454e <__aeabi_dsub+0x522>
100046c8:	2180      	movs	r1, #128	; 0x80
100046ca:	1c03      	adds	r3, r0, #0
100046cc:	4655      	mov	r5, sl
100046ce:	0109      	lsls	r1, r1, #4
100046d0:	1c17      	adds	r7, r2, #0
100046d2:	e53d      	b.n	10004150 <__aeabi_dsub+0x124>
100046d4:	057f      	lsls	r7, r7, #21
100046d6:	0d7f      	lsrs	r7, r7, #21
100046d8:	2600      	movs	r6, #0
100046da:	2200      	movs	r2, #0
100046dc:	e55e      	b.n	1000419c <__aeabi_dsub+0x170>
100046de:	46c0      	nop			; (mov r8, r8)
100046e0:	000007ff 	.word	0x000007ff
100046e4:	ff7fffff 	.word	0xff7fffff
100046e8:	007fffff 	.word	0x007fffff
100046ec:	1c1d      	adds	r5, r3, #0
100046ee:	4315      	orrs	r5, r2
100046f0:	d100      	bne.n	100046f4 <__aeabi_dsub+0x6c8>
100046f2:	e689      	b.n	10004408 <__aeabi_dsub+0x3dc>
100046f4:	1c15      	adds	r5, r2, #0
100046f6:	2101      	movs	r1, #1
100046f8:	2700      	movs	r7, #0
100046fa:	e529      	b.n	10004150 <__aeabi_dsub+0x124>
100046fc:	1c1f      	adds	r7, r3, #0
100046fe:	3f20      	subs	r7, #32
10004700:	4661      	mov	r1, ip
10004702:	40f9      	lsrs	r1, r7
10004704:	2b20      	cmp	r3, #32
10004706:	d010      	beq.n	1000472a <__aeabi_dsub+0x6fe>
10004708:	2640      	movs	r6, #64	; 0x40
1000470a:	1af3      	subs	r3, r6, r3
1000470c:	4667      	mov	r7, ip
1000470e:	409f      	lsls	r7, r3
10004710:	1c3b      	adds	r3, r7, #0
10004712:	431d      	orrs	r5, r3
10004714:	1e6b      	subs	r3, r5, #1
10004716:	419d      	sbcs	r5, r3
10004718:	430d      	orrs	r5, r1
1000471a:	2600      	movs	r6, #0
1000471c:	e72d      	b.n	1000457a <__aeabi_dsub+0x54e>
1000471e:	2100      	movs	r1, #0
10004720:	e7a2      	b.n	10004668 <__aeabi_dsub+0x63c>
10004722:	1c3d      	adds	r5, r7, #0
10004724:	2101      	movs	r1, #1
10004726:	2700      	movs	r7, #0
10004728:	e512      	b.n	10004150 <__aeabi_dsub+0x124>
1000472a:	2300      	movs	r3, #0
1000472c:	e7f1      	b.n	10004712 <__aeabi_dsub+0x6e6>
1000472e:	46c0      	nop			; (mov r8, r8)

10004730 <__aeabi_d2iz>:
10004730:	4a13      	ldr	r2, [pc, #76]	; (10004780 <__aeabi_d2iz+0x50>)
10004732:	030b      	lsls	r3, r1, #12
10004734:	b530      	push	{r4, r5, lr}
10004736:	1c05      	adds	r5, r0, #0
10004738:	0048      	lsls	r0, r1, #1
1000473a:	0b1c      	lsrs	r4, r3, #12
1000473c:	0fc9      	lsrs	r1, r1, #31
1000473e:	0d43      	lsrs	r3, r0, #21
10004740:	2000      	movs	r0, #0
10004742:	4293      	cmp	r3, r2
10004744:	dd11      	ble.n	1000476a <__aeabi_d2iz+0x3a>
10004746:	480f      	ldr	r0, [pc, #60]	; (10004784 <__aeabi_d2iz+0x54>)
10004748:	4283      	cmp	r3, r0
1000474a:	dc0f      	bgt.n	1000476c <__aeabi_d2iz+0x3c>
1000474c:	2280      	movs	r2, #128	; 0x80
1000474e:	0350      	lsls	r0, r2, #13
10004750:	4a0d      	ldr	r2, [pc, #52]	; (10004788 <__aeabi_d2iz+0x58>)
10004752:	4304      	orrs	r4, r0
10004754:	1ad0      	subs	r0, r2, r3
10004756:	281f      	cmp	r0, #31
10004758:	dd0b      	ble.n	10004772 <__aeabi_d2iz+0x42>
1000475a:	4d0c      	ldr	r5, [pc, #48]	; (1000478c <__aeabi_d2iz+0x5c>)
1000475c:	1aeb      	subs	r3, r5, r3
1000475e:	40dc      	lsrs	r4, r3
10004760:	1c22      	adds	r2, r4, #0
10004762:	4250      	negs	r0, r2
10004764:	2900      	cmp	r1, #0
10004766:	d100      	bne.n	1000476a <__aeabi_d2iz+0x3a>
10004768:	1c10      	adds	r0, r2, #0
1000476a:	bd30      	pop	{r4, r5, pc}
1000476c:	4c08      	ldr	r4, [pc, #32]	; (10004790 <__aeabi_d2iz+0x60>)
1000476e:	1908      	adds	r0, r1, r4
10004770:	e7fb      	b.n	1000476a <__aeabi_d2iz+0x3a>
10004772:	40c5      	lsrs	r5, r0
10004774:	4807      	ldr	r0, [pc, #28]	; (10004794 <__aeabi_d2iz+0x64>)
10004776:	1c2a      	adds	r2, r5, #0
10004778:	181d      	adds	r5, r3, r0
1000477a:	40ac      	lsls	r4, r5
1000477c:	4322      	orrs	r2, r4
1000477e:	e7f0      	b.n	10004762 <__aeabi_d2iz+0x32>
10004780:	000003fe 	.word	0x000003fe
10004784:	0000041d 	.word	0x0000041d
10004788:	00000433 	.word	0x00000433
1000478c:	00000413 	.word	0x00000413
10004790:	7fffffff 	.word	0x7fffffff
10004794:	fffffbed 	.word	0xfffffbed

10004798 <__aeabi_ui2d>:
10004798:	b570      	push	{r4, r5, r6, lr}
1000479a:	1e04      	subs	r4, r0, #0
1000479c:	d026      	beq.n	100047ec <__aeabi_ui2d+0x54>
1000479e:	f000 f86b 	bl	10004878 <__clzsi2>
100047a2:	4914      	ldr	r1, [pc, #80]	; (100047f4 <__aeabi_ui2d+0x5c>)
100047a4:	1a0a      	subs	r2, r1, r0
100047a6:	280a      	cmp	r0, #10
100047a8:	dd13      	ble.n	100047d2 <__aeabi_ui2d+0x3a>
100047aa:	380b      	subs	r0, #11
100047ac:	4084      	lsls	r4, r0
100047ae:	0556      	lsls	r6, r2, #21
100047b0:	0324      	lsls	r4, r4, #12
100047b2:	0d72      	lsrs	r2, r6, #21
100047b4:	0b25      	lsrs	r5, r4, #12
100047b6:	2600      	movs	r6, #0
100047b8:	2000      	movs	r0, #0
100047ba:	2100      	movs	r1, #0
100047bc:	1c30      	adds	r0, r6, #0
100047be:	0d0e      	lsrs	r6, r1, #20
100047c0:	0533      	lsls	r3, r6, #20
100047c2:	4c0d      	ldr	r4, [pc, #52]	; (100047f8 <__aeabi_ui2d+0x60>)
100047c4:	432b      	orrs	r3, r5
100047c6:	0511      	lsls	r1, r2, #20
100047c8:	401c      	ands	r4, r3
100047ca:	430c      	orrs	r4, r1
100047cc:	0065      	lsls	r5, r4, #1
100047ce:	0869      	lsrs	r1, r5, #1
100047d0:	bd70      	pop	{r4, r5, r6, pc}
100047d2:	230b      	movs	r3, #11
100047d4:	1c05      	adds	r5, r0, #0
100047d6:	1a18      	subs	r0, r3, r0
100047d8:	3515      	adds	r5, #21
100047da:	1c21      	adds	r1, r4, #0
100047dc:	40c4      	lsrs	r4, r0
100047de:	40a9      	lsls	r1, r5
100047e0:	0552      	lsls	r2, r2, #21
100047e2:	0325      	lsls	r5, r4, #12
100047e4:	1c0e      	adds	r6, r1, #0
100047e6:	0b2d      	lsrs	r5, r5, #12
100047e8:	0d52      	lsrs	r2, r2, #21
100047ea:	e7e5      	b.n	100047b8 <__aeabi_ui2d+0x20>
100047ec:	2200      	movs	r2, #0
100047ee:	2500      	movs	r5, #0
100047f0:	2600      	movs	r6, #0
100047f2:	e7e1      	b.n	100047b8 <__aeabi_ui2d+0x20>
100047f4:	0000041e 	.word	0x0000041e
100047f8:	800fffff 	.word	0x800fffff

100047fc <__aeabi_cdrcmple>:
100047fc:	4684      	mov	ip, r0
100047fe:	1c10      	adds	r0, r2, #0
10004800:	4662      	mov	r2, ip
10004802:	468c      	mov	ip, r1
10004804:	1c19      	adds	r1, r3, #0
10004806:	4663      	mov	r3, ip
10004808:	e000      	b.n	1000480c <__aeabi_cdcmpeq>
1000480a:	46c0      	nop			; (mov r8, r8)

1000480c <__aeabi_cdcmpeq>:
1000480c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000480e:	f000 f903 	bl	10004a18 <__ledf2>
10004812:	2800      	cmp	r0, #0
10004814:	d401      	bmi.n	1000481a <__aeabi_cdcmpeq+0xe>
10004816:	2100      	movs	r1, #0
10004818:	42c8      	cmn	r0, r1
1000481a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000481c <__aeabi_dcmpeq>:
1000481c:	b510      	push	{r4, lr}
1000481e:	f000 f849 	bl	100048b4 <__eqdf2>
10004822:	4240      	negs	r0, r0
10004824:	3001      	adds	r0, #1
10004826:	bd10      	pop	{r4, pc}

10004828 <__aeabi_dcmplt>:
10004828:	b510      	push	{r4, lr}
1000482a:	f000 f8f5 	bl	10004a18 <__ledf2>
1000482e:	2800      	cmp	r0, #0
10004830:	db01      	blt.n	10004836 <__aeabi_dcmplt+0xe>
10004832:	2000      	movs	r0, #0
10004834:	bd10      	pop	{r4, pc}
10004836:	2001      	movs	r0, #1
10004838:	bd10      	pop	{r4, pc}
1000483a:	46c0      	nop			; (mov r8, r8)

1000483c <__aeabi_dcmple>:
1000483c:	b510      	push	{r4, lr}
1000483e:	f000 f8eb 	bl	10004a18 <__ledf2>
10004842:	2800      	cmp	r0, #0
10004844:	dd01      	ble.n	1000484a <__aeabi_dcmple+0xe>
10004846:	2000      	movs	r0, #0
10004848:	bd10      	pop	{r4, pc}
1000484a:	2001      	movs	r0, #1
1000484c:	bd10      	pop	{r4, pc}
1000484e:	46c0      	nop			; (mov r8, r8)

10004850 <__aeabi_dcmpgt>:
10004850:	b510      	push	{r4, lr}
10004852:	f000 f86d 	bl	10004930 <__gedf2>
10004856:	2800      	cmp	r0, #0
10004858:	dc01      	bgt.n	1000485e <__aeabi_dcmpgt+0xe>
1000485a:	2000      	movs	r0, #0
1000485c:	bd10      	pop	{r4, pc}
1000485e:	2001      	movs	r0, #1
10004860:	bd10      	pop	{r4, pc}
10004862:	46c0      	nop			; (mov r8, r8)

10004864 <__aeabi_dcmpge>:
10004864:	b510      	push	{r4, lr}
10004866:	f000 f863 	bl	10004930 <__gedf2>
1000486a:	2800      	cmp	r0, #0
1000486c:	da01      	bge.n	10004872 <__aeabi_dcmpge+0xe>
1000486e:	2000      	movs	r0, #0
10004870:	bd10      	pop	{r4, pc}
10004872:	2001      	movs	r0, #1
10004874:	bd10      	pop	{r4, pc}
10004876:	46c0      	nop			; (mov r8, r8)

10004878 <__clzsi2>:
10004878:	211c      	movs	r1, #28
1000487a:	2301      	movs	r3, #1
1000487c:	041b      	lsls	r3, r3, #16
1000487e:	4298      	cmp	r0, r3
10004880:	d301      	bcc.n	10004886 <__clzsi2+0xe>
10004882:	0c00      	lsrs	r0, r0, #16
10004884:	3910      	subs	r1, #16
10004886:	0a1b      	lsrs	r3, r3, #8
10004888:	4298      	cmp	r0, r3
1000488a:	d301      	bcc.n	10004890 <__clzsi2+0x18>
1000488c:	0a00      	lsrs	r0, r0, #8
1000488e:	3908      	subs	r1, #8
10004890:	091b      	lsrs	r3, r3, #4
10004892:	4298      	cmp	r0, r3
10004894:	d301      	bcc.n	1000489a <__clzsi2+0x22>
10004896:	0900      	lsrs	r0, r0, #4
10004898:	3904      	subs	r1, #4
1000489a:	a202      	add	r2, pc, #8	; (adr r2, 100048a4 <__clzsi2+0x2c>)
1000489c:	5c10      	ldrb	r0, [r2, r0]
1000489e:	1840      	adds	r0, r0, r1
100048a0:	4770      	bx	lr
100048a2:	46c0      	nop			; (mov r8, r8)
100048a4:	02020304 	.word	0x02020304
100048a8:	01010101 	.word	0x01010101
	...

100048b4 <__eqdf2>:
100048b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100048b6:	4694      	mov	ip, r2
100048b8:	4647      	mov	r7, r8
100048ba:	031a      	lsls	r2, r3, #12
100048bc:	1c06      	adds	r6, r0, #0
100048be:	0058      	lsls	r0, r3, #1
100048c0:	b480      	push	{r7}
100048c2:	0b17      	lsrs	r7, r2, #12
100048c4:	0d42      	lsrs	r2, r0, #21
100048c6:	4819      	ldr	r0, [pc, #100]	; (1000492c <__eqdf2+0x78>)
100048c8:	030d      	lsls	r5, r1, #12
100048ca:	004c      	lsls	r4, r1, #1
100048cc:	0fdb      	lsrs	r3, r3, #31
100048ce:	0b2d      	lsrs	r5, r5, #12
100048d0:	0d64      	lsrs	r4, r4, #21
100048d2:	0fc9      	lsrs	r1, r1, #31
100048d4:	4698      	mov	r8, r3
100048d6:	4284      	cmp	r4, r0
100048d8:	d008      	beq.n	100048ec <__eqdf2+0x38>
100048da:	4814      	ldr	r0, [pc, #80]	; (1000492c <__eqdf2+0x78>)
100048dc:	4282      	cmp	r2, r0
100048de:	d00d      	beq.n	100048fc <__eqdf2+0x48>
100048e0:	2001      	movs	r0, #1
100048e2:	4294      	cmp	r4, r2
100048e4:	d012      	beq.n	1000490c <__eqdf2+0x58>
100048e6:	bc04      	pop	{r2}
100048e8:	4690      	mov	r8, r2
100048ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
100048ec:	1c2b      	adds	r3, r5, #0
100048ee:	4333      	orrs	r3, r6
100048f0:	2001      	movs	r0, #1
100048f2:	2b00      	cmp	r3, #0
100048f4:	d1f7      	bne.n	100048e6 <__eqdf2+0x32>
100048f6:	480d      	ldr	r0, [pc, #52]	; (1000492c <__eqdf2+0x78>)
100048f8:	4282      	cmp	r2, r0
100048fa:	d1f1      	bne.n	100048e0 <__eqdf2+0x2c>
100048fc:	4663      	mov	r3, ip
100048fe:	433b      	orrs	r3, r7
10004900:	2001      	movs	r0, #1
10004902:	2b00      	cmp	r3, #0
10004904:	d1ef      	bne.n	100048e6 <__eqdf2+0x32>
10004906:	2001      	movs	r0, #1
10004908:	4294      	cmp	r4, r2
1000490a:	d1ec      	bne.n	100048e6 <__eqdf2+0x32>
1000490c:	42bd      	cmp	r5, r7
1000490e:	d1ea      	bne.n	100048e6 <__eqdf2+0x32>
10004910:	4566      	cmp	r6, ip
10004912:	d1e8      	bne.n	100048e6 <__eqdf2+0x32>
10004914:	4541      	cmp	r1, r8
10004916:	d006      	beq.n	10004926 <__eqdf2+0x72>
10004918:	2c00      	cmp	r4, #0
1000491a:	d1e4      	bne.n	100048e6 <__eqdf2+0x32>
1000491c:	1c28      	adds	r0, r5, #0
1000491e:	4330      	orrs	r0, r6
10004920:	1e45      	subs	r5, r0, #1
10004922:	41a8      	sbcs	r0, r5
10004924:	e7df      	b.n	100048e6 <__eqdf2+0x32>
10004926:	2000      	movs	r0, #0
10004928:	e7dd      	b.n	100048e6 <__eqdf2+0x32>
1000492a:	46c0      	nop			; (mov r8, r8)
1000492c:	000007ff 	.word	0x000007ff

10004930 <__gedf2>:
10004930:	b5f0      	push	{r4, r5, r6, r7, lr}
10004932:	4657      	mov	r7, sl
10004934:	464e      	mov	r6, r9
10004936:	4645      	mov	r5, r8
10004938:	b4e0      	push	{r5, r6, r7}
1000493a:	1c04      	adds	r4, r0, #0
1000493c:	004e      	lsls	r6, r1, #1
1000493e:	0308      	lsls	r0, r1, #12
10004940:	0fc9      	lsrs	r1, r1, #31
10004942:	468a      	mov	sl, r1
10004944:	1c17      	adds	r7, r2, #0
10004946:	0059      	lsls	r1, r3, #1
10004948:	031a      	lsls	r2, r3, #12
1000494a:	0b05      	lsrs	r5, r0, #12
1000494c:	0d70      	lsrs	r0, r6, #21
1000494e:	0b16      	lsrs	r6, r2, #12
10004950:	0d4a      	lsrs	r2, r1, #21
10004952:	4930      	ldr	r1, [pc, #192]	; (10004a14 <__gedf2+0xe4>)
10004954:	0fdb      	lsrs	r3, r3, #31
10004956:	469c      	mov	ip, r3
10004958:	4288      	cmp	r0, r1
1000495a:	d032      	beq.n	100049c2 <__gedf2+0x92>
1000495c:	492d      	ldr	r1, [pc, #180]	; (10004a14 <__gedf2+0xe4>)
1000495e:	428a      	cmp	r2, r1
10004960:	d035      	beq.n	100049ce <__gedf2+0x9e>
10004962:	2800      	cmp	r0, #0
10004964:	d10f      	bne.n	10004986 <__gedf2+0x56>
10004966:	1c29      	adds	r1, r5, #0
10004968:	4321      	orrs	r1, r4
1000496a:	424b      	negs	r3, r1
1000496c:	414b      	adcs	r3, r1
1000496e:	4698      	mov	r8, r3
10004970:	2a00      	cmp	r2, #0
10004972:	d00b      	beq.n	1000498c <__gedf2+0x5c>
10004974:	2b00      	cmp	r3, #0
10004976:	d11a      	bne.n	100049ae <__gedf2+0x7e>
10004978:	45e2      	cmp	sl, ip
1000497a:	d02c      	beq.n	100049d6 <__gedf2+0xa6>
1000497c:	4655      	mov	r5, sl
1000497e:	2d00      	cmp	r5, #0
10004980:	d118      	bne.n	100049b4 <__gedf2+0x84>
10004982:	2001      	movs	r0, #1
10004984:	e018      	b.n	100049b8 <__gedf2+0x88>
10004986:	2a00      	cmp	r2, #0
10004988:	d1f6      	bne.n	10004978 <__gedf2+0x48>
1000498a:	4690      	mov	r8, r2
1000498c:	1c31      	adds	r1, r6, #0
1000498e:	4339      	orrs	r1, r7
10004990:	424b      	negs	r3, r1
10004992:	414b      	adcs	r3, r1
10004994:	4641      	mov	r1, r8
10004996:	2900      	cmp	r1, #0
10004998:	d106      	bne.n	100049a8 <__gedf2+0x78>
1000499a:	2b00      	cmp	r3, #0
1000499c:	d0ec      	beq.n	10004978 <__gedf2+0x48>
1000499e:	4656      	mov	r6, sl
100049a0:	2001      	movs	r0, #1
100049a2:	2e00      	cmp	r6, #0
100049a4:	d008      	beq.n	100049b8 <__gedf2+0x88>
100049a6:	e005      	b.n	100049b4 <__gedf2+0x84>
100049a8:	2000      	movs	r0, #0
100049aa:	2b00      	cmp	r3, #0
100049ac:	d104      	bne.n	100049b8 <__gedf2+0x88>
100049ae:	4667      	mov	r7, ip
100049b0:	2f00      	cmp	r7, #0
100049b2:	d1e6      	bne.n	10004982 <__gedf2+0x52>
100049b4:	2301      	movs	r3, #1
100049b6:	4258      	negs	r0, r3
100049b8:	bc1c      	pop	{r2, r3, r4}
100049ba:	4690      	mov	r8, r2
100049bc:	4699      	mov	r9, r3
100049be:	46a2      	mov	sl, r4
100049c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100049c2:	1c2b      	adds	r3, r5, #0
100049c4:	4323      	orrs	r3, r4
100049c6:	d0c9      	beq.n	1000495c <__gedf2+0x2c>
100049c8:	2102      	movs	r1, #2
100049ca:	4248      	negs	r0, r1
100049cc:	e7f4      	b.n	100049b8 <__gedf2+0x88>
100049ce:	1c33      	adds	r3, r6, #0
100049d0:	433b      	orrs	r3, r7
100049d2:	d0c6      	beq.n	10004962 <__gedf2+0x32>
100049d4:	e7f8      	b.n	100049c8 <__gedf2+0x98>
100049d6:	4290      	cmp	r0, r2
100049d8:	dc05      	bgt.n	100049e6 <__gedf2+0xb6>
100049da:	da09      	bge.n	100049f0 <__gedf2+0xc0>
100049dc:	4652      	mov	r2, sl
100049de:	2a00      	cmp	r2, #0
100049e0:	d0e8      	beq.n	100049b4 <__gedf2+0x84>
100049e2:	2001      	movs	r0, #1
100049e4:	e7e8      	b.n	100049b8 <__gedf2+0x88>
100049e6:	4654      	mov	r4, sl
100049e8:	2c00      	cmp	r4, #0
100049ea:	d1e3      	bne.n	100049b4 <__gedf2+0x84>
100049ec:	2001      	movs	r0, #1
100049ee:	e7e3      	b.n	100049b8 <__gedf2+0x88>
100049f0:	42b5      	cmp	r5, r6
100049f2:	d8c3      	bhi.n	1000497c <__gedf2+0x4c>
100049f4:	d007      	beq.n	10004a06 <__gedf2+0xd6>
100049f6:	2000      	movs	r0, #0
100049f8:	42b5      	cmp	r5, r6
100049fa:	d2dd      	bcs.n	100049b8 <__gedf2+0x88>
100049fc:	4650      	mov	r0, sl
100049fe:	2800      	cmp	r0, #0
10004a00:	d0d8      	beq.n	100049b4 <__gedf2+0x84>
10004a02:	2001      	movs	r0, #1
10004a04:	e7d8      	b.n	100049b8 <__gedf2+0x88>
10004a06:	42bc      	cmp	r4, r7
10004a08:	d8b8      	bhi.n	1000497c <__gedf2+0x4c>
10004a0a:	2000      	movs	r0, #0
10004a0c:	42bc      	cmp	r4, r7
10004a0e:	d3f5      	bcc.n	100049fc <__gedf2+0xcc>
10004a10:	e7d2      	b.n	100049b8 <__gedf2+0x88>
10004a12:	46c0      	nop			; (mov r8, r8)
10004a14:	000007ff 	.word	0x000007ff

10004a18 <__ledf2>:
10004a18:	b5f0      	push	{r4, r5, r6, r7, lr}
10004a1a:	4644      	mov	r4, r8
10004a1c:	465f      	mov	r7, fp
10004a1e:	4656      	mov	r6, sl
10004a20:	464d      	mov	r5, r9
10004a22:	b4f0      	push	{r4, r5, r6, r7}
10004a24:	4694      	mov	ip, r2
10004a26:	1c06      	adds	r6, r0, #0
10004a28:	031a      	lsls	r2, r3, #12
10004a2a:	0058      	lsls	r0, r3, #1
10004a2c:	0b17      	lsrs	r7, r2, #12
10004a2e:	0d42      	lsrs	r2, r0, #21
10004a30:	482e      	ldr	r0, [pc, #184]	; (10004aec <__ledf2+0xd4>)
10004a32:	030d      	lsls	r5, r1, #12
10004a34:	004c      	lsls	r4, r1, #1
10004a36:	0fdb      	lsrs	r3, r3, #31
10004a38:	0b2d      	lsrs	r5, r5, #12
10004a3a:	0d64      	lsrs	r4, r4, #21
10004a3c:	0fc9      	lsrs	r1, r1, #31
10004a3e:	4698      	mov	r8, r3
10004a40:	4284      	cmp	r4, r0
10004a42:	d033      	beq.n	10004aac <__ledf2+0x94>
10004a44:	4829      	ldr	r0, [pc, #164]	; (10004aec <__ledf2+0xd4>)
10004a46:	4282      	cmp	r2, r0
10004a48:	d036      	beq.n	10004ab8 <__ledf2+0xa0>
10004a4a:	2c00      	cmp	r4, #0
10004a4c:	d019      	beq.n	10004a82 <__ledf2+0x6a>
10004a4e:	2a00      	cmp	r2, #0
10004a50:	d120      	bne.n	10004a94 <__ledf2+0x7c>
10004a52:	4693      	mov	fp, r2
10004a54:	4663      	mov	r3, ip
10004a56:	433b      	orrs	r3, r7
10004a58:	4258      	negs	r0, r3
10004a5a:	4158      	adcs	r0, r3
10004a5c:	465b      	mov	r3, fp
10004a5e:	4682      	mov	sl, r0
10004a60:	2b00      	cmp	r3, #0
10004a62:	d01d      	beq.n	10004aa0 <__ledf2+0x88>
10004a64:	4651      	mov	r1, sl
10004a66:	2000      	movs	r0, #0
10004a68:	2900      	cmp	r1, #0
10004a6a:	d104      	bne.n	10004a76 <__ledf2+0x5e>
10004a6c:	4642      	mov	r2, r8
10004a6e:	2a00      	cmp	r2, #0
10004a70:	d114      	bne.n	10004a9c <__ledf2+0x84>
10004a72:	2401      	movs	r4, #1
10004a74:	4260      	negs	r0, r4
10004a76:	bc3c      	pop	{r2, r3, r4, r5}
10004a78:	4690      	mov	r8, r2
10004a7a:	4699      	mov	r9, r3
10004a7c:	46a2      	mov	sl, r4
10004a7e:	46ab      	mov	fp, r5
10004a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004a82:	1c2b      	adds	r3, r5, #0
10004a84:	4333      	orrs	r3, r6
10004a86:	4258      	negs	r0, r3
10004a88:	4143      	adcs	r3, r0
10004a8a:	469b      	mov	fp, r3
10004a8c:	2a00      	cmp	r2, #0
10004a8e:	d0e1      	beq.n	10004a54 <__ledf2+0x3c>
10004a90:	2b00      	cmp	r3, #0
10004a92:	d1eb      	bne.n	10004a6c <__ledf2+0x54>
10004a94:	4541      	cmp	r1, r8
10004a96:	d015      	beq.n	10004ac4 <__ledf2+0xac>
10004a98:	2900      	cmp	r1, #0
10004a9a:	d1ea      	bne.n	10004a72 <__ledf2+0x5a>
10004a9c:	2001      	movs	r0, #1
10004a9e:	e7ea      	b.n	10004a76 <__ledf2+0x5e>
10004aa0:	2800      	cmp	r0, #0
10004aa2:	d0f7      	beq.n	10004a94 <__ledf2+0x7c>
10004aa4:	2001      	movs	r0, #1
10004aa6:	2900      	cmp	r1, #0
10004aa8:	d0e5      	beq.n	10004a76 <__ledf2+0x5e>
10004aaa:	e7e2      	b.n	10004a72 <__ledf2+0x5a>
10004aac:	1c2b      	adds	r3, r5, #0
10004aae:	4333      	orrs	r3, r6
10004ab0:	2002      	movs	r0, #2
10004ab2:	2b00      	cmp	r3, #0
10004ab4:	d1df      	bne.n	10004a76 <__ledf2+0x5e>
10004ab6:	e7c5      	b.n	10004a44 <__ledf2+0x2c>
10004ab8:	4663      	mov	r3, ip
10004aba:	433b      	orrs	r3, r7
10004abc:	2002      	movs	r0, #2
10004abe:	2b00      	cmp	r3, #0
10004ac0:	d1d9      	bne.n	10004a76 <__ledf2+0x5e>
10004ac2:	e7c2      	b.n	10004a4a <__ledf2+0x32>
10004ac4:	4294      	cmp	r4, r2
10004ac6:	dce7      	bgt.n	10004a98 <__ledf2+0x80>
10004ac8:	db05      	blt.n	10004ad6 <__ledf2+0xbe>
10004aca:	42bd      	cmp	r5, r7
10004acc:	d8e4      	bhi.n	10004a98 <__ledf2+0x80>
10004ace:	d006      	beq.n	10004ade <__ledf2+0xc6>
10004ad0:	2000      	movs	r0, #0
10004ad2:	42bd      	cmp	r5, r7
10004ad4:	d2cf      	bcs.n	10004a76 <__ledf2+0x5e>
10004ad6:	2900      	cmp	r1, #0
10004ad8:	d0cb      	beq.n	10004a72 <__ledf2+0x5a>
10004ada:	2001      	movs	r0, #1
10004adc:	e7cb      	b.n	10004a76 <__ledf2+0x5e>
10004ade:	4566      	cmp	r6, ip
10004ae0:	d8da      	bhi.n	10004a98 <__ledf2+0x80>
10004ae2:	2000      	movs	r0, #0
10004ae4:	4566      	cmp	r6, ip
10004ae6:	d3f6      	bcc.n	10004ad6 <__ledf2+0xbe>
10004ae8:	e7c5      	b.n	10004a76 <__ledf2+0x5e>
10004aea:	46c0      	nop			; (mov r8, r8)
10004aec:	000007ff 	.word	0x000007ff

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <CCU40_3_Veneer+0x20>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <CCU40_3_Veneer+0x24>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <CCU40_3_Veneer+0x28>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <CCU40_3_Veneer+0x2c>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <CCU40_3_Veneer+0x30>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <CCU40_3_Veneer+0x34>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <CCU40_3_Veneer+0x38>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <CCU40_3_Veneer+0x3c>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <CCU40_3_Veneer+0x40>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <CCU40_3_Veneer+0x44>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <CCU40_3_Veneer+0x48>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0
	...

20000064 <USIC0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4821      	ldr	r0, [pc, #132]	; (200000ec <CCU40_3_Veneer+0x4c>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4821      	ldr	r0, [pc, #132]	; (200000f0 <CCU40_3_Veneer+0x50>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4821      	ldr	r0, [pc, #132]	; (200000f4 <CCU40_3_Veneer+0x54>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4821      	ldr	r0, [pc, #132]	; (200000f8 <CCU40_3_Veneer+0x58>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4821      	ldr	r0, [pc, #132]	; (200000fc <CCU40_3_Veneer+0x5c>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4821      	ldr	r0, [pc, #132]	; (20000100 <CCU40_3_Veneer+0x60>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4821      	ldr	r0, [pc, #132]	; (20000104 <CCU40_3_Veneer+0x64>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4821      	ldr	r0, [pc, #132]	; (20000108 <CCU40_3_Veneer+0x68>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0
	...

20000094 <CCU40_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	481d      	ldr	r0, [pc, #116]	; (2000010c <CCU40_3_Veneer+0x6c>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	481d      	ldr	r0, [pc, #116]	; (20000110 <CCU40_3_Veneer+0x70>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	481d      	ldr	r0, [pc, #116]	; (20000114 <CCU40_3_Veneer+0x74>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	481d      	ldr	r0, [pc, #116]	; (20000118 <CCU40_3_Veneer+0x78>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0
	...

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	10001497 	.word	0x10001497
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	10001499 	.word	0x10001499
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	1000149b 	.word	0x1000149b
    MOV PC,R0
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	1000272d 	.word	0x1000272d
    MOV PC,R0
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	1000149f 	.word	0x1000149f
    MOV PC,R0
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	100014a1 	.word	0x100014a1
    MOV PC,R0
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	100014a3 	.word	0x100014a3
    MOV PC,R0
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	100014a5 	.word	0x100014a5
    MOV PC,R0
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	100014a7 	.word	0x100014a7
    MOV PC,R0
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	100014a9 	.word	0x100014a9
    MOV PC,R0
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	100014ab 	.word	0x100014ab
    .long 0
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000ec:	100014b9 	.word	0x100014b9
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f0:	100014bb 	.word	0x100014bb
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f4:	100014bd 	.word	0x100014bd
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000f8:	100014bf 	.word	0x100014bf
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
200000fc:	100014c1 	.word	0x100014c1
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000100:	100014c3 	.word	0x100014c3
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000104:	100014ad 	.word	0x100014ad
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000108:	100014af 	.word	0x100014af
    .long 0
    .long 0
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
2000010c:	100014b1 	.word	0x100014b1
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000110:	100014b3 	.word	0x100014b3
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000114:	100014b5 	.word	0x100014b5
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
20000118:	100014b7 	.word	0x100014b7
