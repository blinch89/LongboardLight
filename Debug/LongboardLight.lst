
LongboardLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c10  10001000  10001000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000010  10004c10  10004c10  00004c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata       00000328  10004c20  10004c20  00004c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .VENEER_Code  00000110  2000000c  10004f50  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .GUARD_Band   00000004  2000011c  00000000  0000011c  2**0
                  ALLOC
  5 Stack         00000800  20000120  00000000  00000120  2**0
                  ALLOC
  6 .bss          00000160  20000920  20000920  00010920  2**2
                  ALLOC
  7 .data         00000004  20000a80  10005060  00008a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .debug_aranges 00000388  00000000  00000000  00008a88  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004188  00000000  00000000  00008e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f0f  00000000  00000000  0000cf98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004d31  00000000  00000000  0000dea7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000bc0  00000000  00000000  00012bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00026a59  00000000  00000000  00013798  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000dd8  00000000  00000000  0003a1f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002a0  00000000  00000000  0003afd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 0000059c  00000000  00000000  0003b270  2**0
                  CONTENTS, READONLY
 17 .debug_macro  00007e72  00000000  00000000  0003b80c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10001000 <__Xmc1100_interrupt_vector_cortex_m>:
10001000:	20 09 00 20 19 10 00 10 b1 15 00 10 b3 15 00 10      .. ............
10001010:	00 04 00 00 00 00 00 00                             ........

10001018 <__Xmc1100_reset_cortex_m>:
__Xmc1100_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1100_stack
10001018:	4802      	ldr	r0, [pc, #8]	; (10001024 <__Xmc1100_reset_cortex_m+0xc>)
    MOV SP,R0
1000101a:	4685      	mov	sp, r0
    
    /* Launch custom pre-program loading startup procedure */
    LDR R0,=hardware_init_hook
1000101c:	4802      	ldr	r0, [pc, #8]	; (10001028 <__Xmc1100_reset_cortex_m+0x10>)
    BLX R0
1000101e:	4780      	blx	r0

    /* Branch to the program loader now */
    B       __Xmc1100_Program_Loader 
10001020:	e012      	b.n	10001048 <__Xmc1100_Program_Loader>
10001022:	0000      	.short	0x0000
__Xmc1100_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1100_stack
10001024:	20000920 	.word	0x20000920
    MOV SP,R0
    
    /* Launch custom pre-program loading startup procedure */
    LDR R0,=hardware_init_hook
10001028:	100010d1 	.word	0x100010d1

1000102c <__COPY_FLASH2RAM>:
   to C land is given */
   .section .Xmc1100.postreset,"x",%progbits
 __COPY_FLASH2RAM:
   .fnstart:
   /* Is there anything to be copied? */
   CMP R2,#0
1000102c:	2a00      	cmp	r2, #0
   BEQ SKIPCOPY
1000102e:	d00a      	beq.n	10001046 <SKIPCOPY>
   
   /* For bytecount less than 4, at least 1 word must be copied */
   CMP R2,#4
10001030:	2a04      	cmp	r2, #4
   BCS STARTCOPY
10001032:	d200      	bcs.n	10001036 <STARTCOPY>
   
   /* Byte count < 4 ; so bump it up */
   MOVS R2,#4
10001034:	2204      	movs	r2, #4

10001036 <STARTCOPY>:
STARTCOPY:
   /* 
      R2 contains byte count. Change it to word count. It is ensured in the 
      linker script that the length is always word aligned.
   */
   LSRS R2,R2,#2 /* Divide by 4 to obtain word count */
10001036:	0892      	lsrs	r2, r2, #2

10001038 <COPYLOOP>:

   /* The proverbial loop from the schooldays */
COPYLOOP:
   LDR R3,[R0]
10001038:	6803      	ldr	r3, [r0, #0]
   STR R3,[R1]
1000103a:	600b      	str	r3, [r1, #0]
   SUBS R2,#1
1000103c:	3a01      	subs	r2, #1
   BEQ SKIPCOPY
1000103e:	d002      	beq.n	10001046 <SKIPCOPY>
   ADDS R0,#4
10001040:	3004      	adds	r0, #4
   ADDS R1,#4
10001042:	3104      	adds	r1, #4
   B COPYLOOP
10001044:	e7f8      	b.n	10001038 <COPYLOOP>

10001046 <SKIPCOPY>:
    
SKIPCOPY:
   BX LR
10001046:	4770      	bx	lr

10001048 <__Xmc1100_Program_Loader>:
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001048:	4811      	ldr	r0, [pc, #68]	; (10001090 <SKIPCLEAR+0x14>)
   LDR R1, =__Xmc1100_sData
1000104a:	4912      	ldr	r1, [pc, #72]	; (10001094 <SKIPCLEAR+0x18>)
   LDR R2, =__Xmc1100_Data_Size
1000104c:	4a12      	ldr	r2, [pc, #72]	; (10001098 <SKIPCLEAR+0x1c>)
   BL __COPY_FLASH2RAM
1000104e:	f7ff ffed 	bl	1000102c <__COPY_FLASH2RAM>

   /* RAM_CODE COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =__ram_code_load
10001052:	4812      	ldr	r0, [pc, #72]	; (1000109c <SKIPCLEAR+0x20>)
   LDR R1, =__ram_code_start
10001054:	4912      	ldr	r1, [pc, #72]	; (100010a0 <SKIPCLEAR+0x24>)
   LDR R2, =__ram_code_size
10001056:	4a13      	ldr	r2, [pc, #76]	; (100010a4 <SKIPCLEAR+0x28>)
   BL __COPY_FLASH2RAM
10001058:	f7ff ffe8 	bl	1000102c <__COPY_FLASH2RAM>

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
1000105c:	4812      	ldr	r0, [pc, #72]	; (100010a8 <SKIPCLEAR+0x2c>)
   LDR R1, =VeneerStart
1000105e:	4913      	ldr	r1, [pc, #76]	; (100010ac <SKIPCLEAR+0x30>)
   LDR R2, =VeneerSize
10001060:	4a13      	ldr	r2, [pc, #76]	; (100010b0 <SKIPCLEAR+0x34>)
   BL __COPY_FLASH2RAM
10001062:	f7ff ffe3 	bl	1000102c <__COPY_FLASH2RAM>

   /* BSS CLEAR */
   LDR R0, =__Xmc1100_sBSS     /* Start of BSS */
10001066:	4813      	ldr	r0, [pc, #76]	; (100010b4 <SKIPCLEAR+0x38>)
   LDR R1, =__Xmc1100_BSS_Size /* BSS size in bytes */
10001068:	4913      	ldr	r1, [pc, #76]	; (100010b8 <SKIPCLEAR+0x3c>)

   /* Find out if there are items assigned to BSS */   
   CMP R1,#0 
1000106a:	2900      	cmp	r1, #0
   BEQ SKIPCLEAR
1000106c:	d006      	beq.n	1000107c <SKIPCLEAR>

1000106e <STARTCLEAR>:

STARTCLEAR:
   LSRS R1,R1,#2            /* BSS size in words */
1000106e:	0889      	lsrs	r1, r1, #2
   
   MOVS R2,#0
10001070:	2200      	movs	r2, #0

10001072 <CLEARLOOP>:
CLEARLOOP:
   STR R2,[R0]
10001072:	6002      	str	r2, [r0, #0]
   SUBS R1,#1
10001074:	3901      	subs	r1, #1
   BEQ SKIPCLEAR
10001076:	d001      	beq.n	1000107c <SKIPCLEAR>
   ADDS R0,#4
10001078:	3004      	adds	r0, #4
   B CLEARLOOP
1000107a:	e7fa      	b.n	10001072 <CLEARLOOP>

1000107c <SKIPCLEAR>:
    
SKIPCLEAR:

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1100_stack 
1000107c:	480f      	ldr	r0, [pc, #60]	; (100010bc <SKIPCLEAR+0x40>)
   MOV SP,R0
1000107e:	4685      	mov	sp, r0

   /* Perform System Initialization */   
   LDR R0,=SystemInit
10001080:	480f      	ldr	r0, [pc, #60]	; (100010c0 <SKIPCLEAR+0x44>)
   BLX R0
10001082:	4780      	blx	r0

   /* Launch custom post-program loading startup procedure */
   LDR R0,=software_init_hook
10001084:	480f      	ldr	r0, [pc, #60]	; (100010c4 <SKIPCLEAR+0x48>)
   BLX R0
10001086:	4780      	blx	r0

   MOVS R0,#0
10001088:	2000      	movs	r0, #0
   MOVS R1,#0
1000108a:	2100      	movs	r1, #0
   LDR R2, =main
1000108c:	4a0e      	ldr	r2, [pc, #56]	; (100010c8 <SKIPCLEAR+0x4c>)
   MOV PC,R2
1000108e:	4697      	mov	pc, r2
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001090:	10005060 	.word	0x10005060
   LDR R1, =__Xmc1100_sData
10001094:	20000a80 	.word	0x20000a80
   LDR R2, =__Xmc1100_Data_Size
10001098:	00000004 	.word	0x00000004
   BL __COPY_FLASH2RAM

   /* RAM_CODE COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =__ram_code_load
1000109c:	10005064 	.word	0x10005064
   LDR R1, =__ram_code_start
100010a0:	20000a84 	.word	0x20000a84
   LDR R2, =__ram_code_size
100010a4:	00000000 	.word	0x00000000
   BL __COPY_FLASH2RAM

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
100010a8:	10004f50 	.word	0x10004f50
   LDR R1, =VeneerStart
100010ac:	2000000c 	.word	0x2000000c
   LDR R2, =VeneerSize
100010b0:	00000110 	.word	0x00000110
   BL __COPY_FLASH2RAM

   /* BSS CLEAR */
   LDR R0, =__Xmc1100_sBSS     /* Start of BSS */
100010b4:	20000920 	.word	0x20000920
   LDR R1, =__Xmc1100_BSS_Size /* BSS size in bytes */
100010b8:	00000160 	.word	0x00000160
   B CLEARLOOP
    
SKIPCLEAR:

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1100_stack 
100010bc:	20000920 	.word	0x20000920
   MOV SP,R0

   /* Perform System Initialization */   
   LDR R0,=SystemInit
100010c0:	100015e1 	.word	0x100015e1
   BLX R0

   /* Launch custom post-program loading startup procedure */
   LDR R0,=software_init_hook
100010c4:	100010cd 	.word	0x100010cd
   BLX R0

   MOVS R0,#0
   MOVS R1,#0
   LDR R2, =main
100010c8:	1000115d 	.word	0x1000115d

100010cc <software_init_hook>:
   has not been started.
 */
     .weak software_init_hook
     .type software_init_hook, %function
software_init_hook:
     NOP
100010cc:	46c0      	nop			; (mov r8, r8)
     BX LR
100010ce:	4770      	bx	lr

100010d0 <hardware_init_hook>:
     .size software_init_hook, . - software_init_hook

     .weak hardware_init_hook
     .type hardware_init_hook, %function
hardware_init_hook:
     NOP
100010d0:	46c0      	nop			; (mov r8, r8)
     BX LR
100010d2:	4770      	bx	lr

100010d4 <P0_5_set_mode>:

__STATIC_INLINE void P0_4_disable_pps(void){
    PORT0->PPS &= ~0x00000010UL;
}

__STATIC_INLINE void P0_5_set_mode(uint8_t mode){
100010d4:	b580      	push	{r7, lr}
100010d6:	b082      	sub	sp, #8
100010d8:	af00      	add	r7, sp, #0
100010da:	1c02      	adds	r2, r0, #0
100010dc:	1dfb      	adds	r3, r7, #7
100010de:	701a      	strb	r2, [r3, #0]
    PORT0->IOCR4 &= ~0x0000f800UL;
100010e0:	4b08      	ldr	r3, [pc, #32]	; (10001104 <P0_5_set_mode+0x30>)
100010e2:	4a08      	ldr	r2, [pc, #32]	; (10001104 <P0_5_set_mode+0x30>)
100010e4:	6951      	ldr	r1, [r2, #20]
100010e6:	4a08      	ldr	r2, [pc, #32]	; (10001108 <P0_5_set_mode+0x34>)
100010e8:	400a      	ands	r2, r1
100010ea:	615a      	str	r2, [r3, #20]
    PORT0->IOCR4 |= mode << 8;
100010ec:	4b05      	ldr	r3, [pc, #20]	; (10001104 <P0_5_set_mode+0x30>)
100010ee:	4a05      	ldr	r2, [pc, #20]	; (10001104 <P0_5_set_mode+0x30>)
100010f0:	6951      	ldr	r1, [r2, #20]
100010f2:	1dfa      	adds	r2, r7, #7
100010f4:	7812      	ldrb	r2, [r2, #0]
100010f6:	0212      	lsls	r2, r2, #8
100010f8:	430a      	orrs	r2, r1
100010fa:	615a      	str	r2, [r3, #20]
}
100010fc:	46bd      	mov	sp, r7
100010fe:	b002      	add	sp, #8
10001100:	bd80      	pop	{r7, pc}
10001102:	46c0      	nop			; (mov r8, r8)
10001104:	40040000 	.word	0x40040000
10001108:	ffff07ff 	.word	0xffff07ff

1000110c <P0_6_set_mode>:

__STATIC_INLINE void P0_5_disable_pps(void){
    PORT0->PPS &= ~0x00000020UL;
}

__STATIC_INLINE void P0_6_set_mode(uint8_t mode){
1000110c:	b580      	push	{r7, lr}
1000110e:	b082      	sub	sp, #8
10001110:	af00      	add	r7, sp, #0
10001112:	1c02      	adds	r2, r0, #0
10001114:	1dfb      	adds	r3, r7, #7
10001116:	701a      	strb	r2, [r3, #0]
    PORT0->IOCR4 &= ~0x00f80000UL;
10001118:	4b08      	ldr	r3, [pc, #32]	; (1000113c <P0_6_set_mode+0x30>)
1000111a:	4a08      	ldr	r2, [pc, #32]	; (1000113c <P0_6_set_mode+0x30>)
1000111c:	6951      	ldr	r1, [r2, #20]
1000111e:	4a08      	ldr	r2, [pc, #32]	; (10001140 <P0_6_set_mode+0x34>)
10001120:	400a      	ands	r2, r1
10001122:	615a      	str	r2, [r3, #20]
    PORT0->IOCR4 |= mode << 16;
10001124:	4b05      	ldr	r3, [pc, #20]	; (1000113c <P0_6_set_mode+0x30>)
10001126:	4a05      	ldr	r2, [pc, #20]	; (1000113c <P0_6_set_mode+0x30>)
10001128:	6951      	ldr	r1, [r2, #20]
1000112a:	1dfa      	adds	r2, r7, #7
1000112c:	7812      	ldrb	r2, [r2, #0]
1000112e:	0412      	lsls	r2, r2, #16
10001130:	430a      	orrs	r2, r1
10001132:	615a      	str	r2, [r3, #20]
}
10001134:	46bd      	mov	sp, r7
10001136:	b002      	add	sp, #8
10001138:	bd80      	pop	{r7, pc}
1000113a:	46c0      	nop			; (mov r8, r8)
1000113c:	40040000 	.word	0x40040000
10001140:	ff07ffff 	.word	0xff07ffff

10001144 <P0_6_read>:

__STATIC_INLINE void P0_6_toggle(void){
    PORT0->OMR = 0x00400040UL;
}

__STATIC_INLINE uint32_t P0_6_read(void){
10001144:	b580      	push	{r7, lr}
10001146:	af00      	add	r7, sp, #0
    return(PORT0->IN & 0x00000040UL);
10001148:	4b03      	ldr	r3, [pc, #12]	; (10001158 <P0_6_read+0x14>)
1000114a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1000114c:	2340      	movs	r3, #64	; 0x40
1000114e:	4013      	ands	r3, r2
}
10001150:	1c18      	adds	r0, r3, #0
10001152:	46bd      	mov	sp, r7
10001154:	bd80      	pop	{r7, pc}
10001156:	46c0      	nop			; (mov r8, r8)
10001158:	40040000 	.word	0x40040000

1000115c <main>:
void updateOnboardLEDs();
void buttonRead(void *ptr);
void allowRedDotUpdate(void *flag);

int main(void)
{
1000115c:	b580      	push	{r7, lr}
1000115e:	b094      	sub	sp, #80	; 0x50
10001160:	af00      	add	r7, sp, #0
	DAVE_Init();			// Initialization of DAVE Apps
10001162:	f001 ff01 	bl	10002f68 <DAVE_Init>
	uint8_t stripe[WS2812_QUANTITY*3];
	uint8_t redDotFlag = 0;
10001166:	1dfb      	adds	r3, r7, #7
10001168:	2200      	movs	r2, #0
1000116a:	701a      	strb	r2, [r3, #0]
	enum colorState state = OFF;	//this should be volatile, I think
1000116c:	1dbb      	adds	r3, r7, #6
1000116e:	2200      	movs	r2, #0
10001170:	701a      	strb	r2, [r3, #0]
	handle_t timer;
//	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)


	IO004_SetPin(IO004_Handle0);
10001172:	4b39      	ldr	r3, [pc, #228]	; (10001258 <main+0xfc>)
10001174:	685b      	ldr	r3, [r3, #4]
10001176:	4a38      	ldr	r2, [pc, #224]	; (10001258 <main+0xfc>)
10001178:	7852      	ldrb	r2, [r2, #1]
1000117a:	2101      	movs	r1, #1
1000117c:	1c08      	adds	r0, r1, #0
1000117e:	4090      	lsls	r0, r2
10001180:	1c02      	adds	r2, r0, #0
10001182:	605a      	str	r2, [r3, #4]
	P0_5_set_mode(OUTPUT_PP_GP); 	//WS2812 data pin
10001184:	2080      	movs	r0, #128	; 0x80
10001186:	f7ff ffa5 	bl	100010d4 <P0_5_set_mode>
	P0_6_set_mode(INPUT_PU);     	//button
1000118a:	2010      	movs	r0, #16
1000118c:	f7ff ffbe 	bl	1000110c <P0_6_set_mode>
	timer=SYSTM001_CreateTimer(500,SYSTM001_PERIODIC,updateOnboardLEDs,NULL);
10001190:	23fa      	movs	r3, #250	; 0xfa
10001192:	005a      	lsls	r2, r3, #1
10001194:	4b31      	ldr	r3, [pc, #196]	; (1000125c <main+0x100>)
10001196:	1c10      	adds	r0, r2, #0
10001198:	2101      	movs	r1, #1
1000119a:	1c1a      	adds	r2, r3, #0
1000119c:	2300      	movs	r3, #0
1000119e:	f001 fb99 	bl	100028d4 <SYSTM001_CreateTimer>
100011a2:	1c03      	adds	r3, r0, #0
100011a4:	64bb      	str	r3, [r7, #72]	; 0x48
	SYSTM001_StartTimer(timer);
100011a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
100011a8:	1c18      	adds	r0, r3, #0
100011aa:	f001 fc25 	bl	100029f8 <SYSTM001_StartTimer>
	timer=SYSTM001_CreateTimer(400,SYSTM001_PERIODIC,buttonRead,&state);
100011ae:	23c8      	movs	r3, #200	; 0xc8
100011b0:	0059      	lsls	r1, r3, #1
100011b2:	4a2b      	ldr	r2, [pc, #172]	; (10001260 <main+0x104>)
100011b4:	1dbb      	adds	r3, r7, #6
100011b6:	1c08      	adds	r0, r1, #0
100011b8:	2101      	movs	r1, #1
100011ba:	f001 fb8b 	bl	100028d4 <SYSTM001_CreateTimer>
100011be:	1c03      	adds	r3, r0, #0
100011c0:	64bb      	str	r3, [r7, #72]	; 0x48
	SYSTM001_StartTimer(timer);
100011c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
100011c4:	1c18      	adds	r0, r3, #0
100011c6:	f001 fc17 	bl	100029f8 <SYSTM001_StartTimer>
	timer=SYSTM001_CreateTimer(50,SYSTM001_PERIODIC,allowRedDotUpdate,&redDotFlag);
100011ca:	4a26      	ldr	r2, [pc, #152]	; (10001264 <main+0x108>)
100011cc:	1dfb      	adds	r3, r7, #7
100011ce:	2032      	movs	r0, #50	; 0x32
100011d0:	2101      	movs	r1, #1
100011d2:	f001 fb7f 	bl	100028d4 <SYSTM001_CreateTimer>
100011d6:	1c03      	adds	r3, r0, #0
100011d8:	64bb      	str	r3, [r7, #72]	; 0x48
	SYSTM001_StartTimer(timer);
100011da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
100011dc:	1c18      	adds	r0, r3, #0
100011de:	f001 fc0b 	bl	100029f8 <SYSTM001_StartTimer>


	for(uint8_t i=0 ; i<sizeof(stripe)/3 ; i+=3)
100011e2:	1c3b      	adds	r3, r7, #0
100011e4:	334f      	adds	r3, #79	; 0x4f
100011e6:	2200      	movs	r2, #0
100011e8:	701a      	strb	r2, [r3, #0]
100011ea:	e01d      	b.n	10001228 <main+0xcc>
	{
		stripe[i]   = 0x00;
100011ec:	1c3b      	adds	r3, r7, #0
100011ee:	334f      	adds	r3, #79	; 0x4f
100011f0:	781b      	ldrb	r3, [r3, #0]
100011f2:	1c3a      	adds	r2, r7, #0
100011f4:	3208      	adds	r2, #8
100011f6:	2100      	movs	r1, #0
100011f8:	54d1      	strb	r1, [r2, r3]
		stripe[i+1] = 0x00;
100011fa:	1c3b      	adds	r3, r7, #0
100011fc:	334f      	adds	r3, #79	; 0x4f
100011fe:	781b      	ldrb	r3, [r3, #0]
10001200:	3301      	adds	r3, #1
10001202:	1c3a      	adds	r2, r7, #0
10001204:	3208      	adds	r2, #8
10001206:	2100      	movs	r1, #0
10001208:	54d1      	strb	r1, [r2, r3]
		stripe[i+2] = 0xFF;
1000120a:	1c3b      	adds	r3, r7, #0
1000120c:	334f      	adds	r3, #79	; 0x4f
1000120e:	781b      	ldrb	r3, [r3, #0]
10001210:	3302      	adds	r3, #2
10001212:	1c3a      	adds	r2, r7, #0
10001214:	3208      	adds	r2, #8
10001216:	21ff      	movs	r1, #255	; 0xff
10001218:	54d1      	strb	r1, [r2, r3]
	SYSTM001_StartTimer(timer);
	timer=SYSTM001_CreateTimer(50,SYSTM001_PERIODIC,allowRedDotUpdate,&redDotFlag);
	SYSTM001_StartTimer(timer);


	for(uint8_t i=0 ; i<sizeof(stripe)/3 ; i+=3)
1000121a:	1c3b      	adds	r3, r7, #0
1000121c:	334f      	adds	r3, #79	; 0x4f
1000121e:	1c3a      	adds	r2, r7, #0
10001220:	324f      	adds	r2, #79	; 0x4f
10001222:	7812      	ldrb	r2, [r2, #0]
10001224:	3203      	adds	r2, #3
10001226:	701a      	strb	r2, [r3, #0]
10001228:	1c3b      	adds	r3, r7, #0
1000122a:	334f      	adds	r3, #79	; 0x4f
1000122c:	781b      	ldrb	r3, [r3, #0]
1000122e:	2b14      	cmp	r3, #20
10001230:	d9dc      	bls.n	100011ec <main+0x90>
10001232:	e000      	b.n	10001236 <main+0xda>
		if(state == REDDOT && redDotFlag)
		{
			redDotOnBlueLine(stripe);
			redDotFlag = 0;
		}
	}
10001234:	46c0      	nop			; (mov r8, r8)
		stripe[i+2] = 0xFF;
	}

	while(1)
	{
		if(state == REDDOT && redDotFlag)
10001236:	1dbb      	adds	r3, r7, #6
10001238:	781b      	ldrb	r3, [r3, #0]
1000123a:	2b09      	cmp	r3, #9
1000123c:	d1fa      	bne.n	10001234 <main+0xd8>
1000123e:	1dfb      	adds	r3, r7, #7
10001240:	781b      	ldrb	r3, [r3, #0]
10001242:	2b00      	cmp	r3, #0
10001244:	d0f6      	beq.n	10001234 <main+0xd8>
		{
			redDotOnBlueLine(stripe);
10001246:	1c3b      	adds	r3, r7, #0
10001248:	3308      	adds	r3, #8
1000124a:	1c18      	adds	r0, r3, #0
1000124c:	f000 f910 	bl	10001470 <redDotOnBlueLine>
			redDotFlag = 0;
10001250:	1dfb      	adds	r3, r7, #7
10001252:	2200      	movs	r2, #0
10001254:	701a      	strb	r2, [r3, #0]
		}
	}
10001256:	e7ed      	b.n	10001234 <main+0xd8>
10001258:	10004eb8 	.word	0x10004eb8
1000125c:	10001285 	.word	0x10001285
10001260:	100012bd 	.word	0x100012bd
10001264:	10001269 	.word	0x10001269

10001268 <allowRedDotUpdate>:
}



void allowRedDotUpdate(void *flag)
{
10001268:	b580      	push	{r7, lr}
1000126a:	b082      	sub	sp, #8
1000126c:	af00      	add	r7, sp, #0
1000126e:	6078      	str	r0, [r7, #4]
	if(!(*(uint8_t *)flag)) *(uint8_t *)flag = 1;
10001270:	687b      	ldr	r3, [r7, #4]
10001272:	781b      	ldrb	r3, [r3, #0]
10001274:	2b00      	cmp	r3, #0
10001276:	d102      	bne.n	1000127e <allowRedDotUpdate+0x16>
10001278:	687b      	ldr	r3, [r7, #4]
1000127a:	2201      	movs	r2, #1
1000127c:	701a      	strb	r2, [r3, #0]
}
1000127e:	46bd      	mov	sp, r7
10001280:	b002      	add	sp, #8
10001282:	bd80      	pop	{r7, pc}

10001284 <updateOnboardLEDs>:



void updateOnboardLEDs()
{
10001284:	b580      	push	{r7, lr}
10001286:	af00      	add	r7, sp, #0
	IO004_TogglePin(IO004_Handle0);
10001288:	4b09      	ldr	r3, [pc, #36]	; (100012b0 <updateOnboardLEDs+0x2c>)
1000128a:	685b      	ldr	r3, [r3, #4]
1000128c:	4a08      	ldr	r2, [pc, #32]	; (100012b0 <updateOnboardLEDs+0x2c>)
1000128e:	7852      	ldrb	r2, [r2, #1]
10001290:	4908      	ldr	r1, [pc, #32]	; (100012b4 <updateOnboardLEDs+0x30>)
10001292:	1c08      	adds	r0, r1, #0
10001294:	4090      	lsls	r0, r2
10001296:	1c02      	adds	r2, r0, #0
10001298:	605a      	str	r2, [r3, #4]
	IO004_TogglePin(IO004_Handle1);
1000129a:	4b07      	ldr	r3, [pc, #28]	; (100012b8 <updateOnboardLEDs+0x34>)
1000129c:	685b      	ldr	r3, [r3, #4]
1000129e:	4a06      	ldr	r2, [pc, #24]	; (100012b8 <updateOnboardLEDs+0x34>)
100012a0:	7852      	ldrb	r2, [r2, #1]
100012a2:	4904      	ldr	r1, [pc, #16]	; (100012b4 <updateOnboardLEDs+0x30>)
100012a4:	1c08      	adds	r0, r1, #0
100012a6:	4090      	lsls	r0, r2
100012a8:	1c02      	adds	r2, r0, #0
100012aa:	605a      	str	r2, [r3, #4]
}
100012ac:	46bd      	mov	sp, r7
100012ae:	bd80      	pop	{r7, pc}
100012b0:	10004eb8 	.word	0x10004eb8
100012b4:	00010001 	.word	0x00010001
100012b8:	10004ec0 	.word	0x10004ec0

100012bc <buttonRead>:


void buttonRead(void *ptr)
{
100012bc:	b580      	push	{r7, lr}
100012be:	b084      	sub	sp, #16
100012c0:	af00      	add	r7, sp, #0
100012c2:	6078      	str	r0, [r7, #4]
	if(!P0_6_read()) //button pressed?
100012c4:	f7ff ff3e 	bl	10001144 <P0_6_read>
100012c8:	1c03      	adds	r3, r0, #0
100012ca:	2b00      	cmp	r3, #0
100012cc:	d114      	bne.n	100012f8 <buttonRead+0x3c>
	{
		enum colorState *lightState = ptr;
100012ce:	687b      	ldr	r3, [r7, #4]
100012d0:	60fb      	str	r3, [r7, #12]
		if(*lightState == REDDOT) *lightState = OFF; //REDDOT is last Value of enum
100012d2:	68fb      	ldr	r3, [r7, #12]
100012d4:	781b      	ldrb	r3, [r3, #0]
100012d6:	2b09      	cmp	r3, #9
100012d8:	d103      	bne.n	100012e2 <buttonRead+0x26>
100012da:	68fb      	ldr	r3, [r7, #12]
100012dc:	2200      	movs	r2, #0
100012de:	701a      	strb	r2, [r3, #0]
100012e0:	e005      	b.n	100012ee <buttonRead+0x32>
		else (*lightState)++;
100012e2:	68fb      	ldr	r3, [r7, #12]
100012e4:	781b      	ldrb	r3, [r3, #0]
100012e6:	3301      	adds	r3, #1
100012e8:	b2da      	uxtb	r2, r3
100012ea:	68fb      	ldr	r3, [r7, #12]
100012ec:	701a      	strb	r2, [r3, #0]
		updateWS2812LEDs(*lightState);
100012ee:	68fb      	ldr	r3, [r7, #12]
100012f0:	781b      	ldrb	r3, [r3, #0]
100012f2:	1c18      	adds	r0, r3, #0
100012f4:	f000 f804 	bl	10001300 <updateWS2812LEDs>
	}
}
100012f8:	46bd      	mov	sp, r7
100012fa:	b004      	add	sp, #16
100012fc:	bd80      	pop	{r7, pc}
100012fe:	46c0      	nop			; (mov r8, r8)

10001300 <updateWS2812LEDs>:
						 0xFF,0xFF,0x00};



void updateWS2812LEDs(enum colorState state)
{
10001300:	b580      	push	{r7, lr}
10001302:	b082      	sub	sp, #8
10001304:	af00      	add	r7, sp, #0
10001306:	1c02      	adds	r2, r0, #0
10001308:	1dfb      	adds	r3, r7, #7
1000130a:	701a      	strb	r2, [r3, #0]
	switch(state)
1000130c:	1dfb      	adds	r3, r7, #7
1000130e:	781b      	ldrb	r3, [r3, #0]
10001310:	2b08      	cmp	r3, #8
10001312:	d900      	bls.n	10001316 <updateWS2812LEDs+0x16>
10001314:	e094      	b.n	10001440 <updateWS2812LEDs+0x140>
10001316:	009a      	lsls	r2, r3, #2
10001318:	4b4b      	ldr	r3, [pc, #300]	; (10001448 <updateWS2812LEDs+0x148>)
1000131a:	18d3      	adds	r3, r2, r3
1000131c:	681b      	ldr	r3, [r3, #0]
1000131e:	469f      	mov	pc, r3
	{
	case RGB:
		ws2812_sendarray((uint8_t*)rgb, sizeof(rgb));
10001320:	4b4a      	ldr	r3, [pc, #296]	; (1000144c <updateWS2812LEDs+0x14c>)
10001322:	1c18      	adds	r0, r3, #0
10001324:	213f      	movs	r1, #63	; 0x3f
10001326:	f000 f90d 	bl	10001544 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)rgb, sizeof(rgb));
1000132a:	4b48      	ldr	r3, [pc, #288]	; (1000144c <updateWS2812LEDs+0x14c>)
1000132c:	1c18      	adds	r0, r3, #0
1000132e:	213f      	movs	r1, #63	; 0x3f
10001330:	f000 f908 	bl	10001544 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)rgb, sizeof(rgb));
10001334:	4b45      	ldr	r3, [pc, #276]	; (1000144c <updateWS2812LEDs+0x14c>)
10001336:	1c18      	adds	r0, r3, #0
10001338:	213f      	movs	r1, #63	; 0x3f
1000133a:	f000 f903 	bl	10001544 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)rgb, sizeof(rgb));
1000133e:	4b43      	ldr	r3, [pc, #268]	; (1000144c <updateWS2812LEDs+0x14c>)
10001340:	1c18      	adds	r0, r3, #0
10001342:	213f      	movs	r1, #63	; 0x3f
10001344:	f000 f8fe 	bl	10001544 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)rgb, sizeof(rgb));
10001348:	4b40      	ldr	r3, [pc, #256]	; (1000144c <updateWS2812LEDs+0x14c>)
1000134a:	1c18      	adds	r0, r3, #0
1000134c:	213f      	movs	r1, #63	; 0x3f
1000134e:	f000 f8f9 	bl	10001544 <ws2812_sendarray>
		break;
10001352:	e076      	b.n	10001442 <updateWS2812LEDs+0x142>
	case RED:
		ws2812_sendarray((uint8_t*)red, sizeof(red));
10001354:	4b3e      	ldr	r3, [pc, #248]	; (10001450 <updateWS2812LEDs+0x150>)
10001356:	1c18      	adds	r0, r3, #0
10001358:	213f      	movs	r1, #63	; 0x3f
1000135a:	f000 f8f3 	bl	10001544 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)red, sizeof(red));
1000135e:	4b3c      	ldr	r3, [pc, #240]	; (10001450 <updateWS2812LEDs+0x150>)
10001360:	1c18      	adds	r0, r3, #0
10001362:	213f      	movs	r1, #63	; 0x3f
10001364:	f000 f8ee 	bl	10001544 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)red, sizeof(red));
10001368:	4b39      	ldr	r3, [pc, #228]	; (10001450 <updateWS2812LEDs+0x150>)
1000136a:	1c18      	adds	r0, r3, #0
1000136c:	213f      	movs	r1, #63	; 0x3f
1000136e:	f000 f8e9 	bl	10001544 <ws2812_sendarray>
		break;
10001372:	e066      	b.n	10001442 <updateWS2812LEDs+0x142>
	case GREEN:
		ws2812_sendarray((uint8_t*)green, sizeof(green));
10001374:	4b37      	ldr	r3, [pc, #220]	; (10001454 <updateWS2812LEDs+0x154>)
10001376:	1c18      	adds	r0, r3, #0
10001378:	213f      	movs	r1, #63	; 0x3f
1000137a:	f000 f8e3 	bl	10001544 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)green, sizeof(green));
1000137e:	4b35      	ldr	r3, [pc, #212]	; (10001454 <updateWS2812LEDs+0x154>)
10001380:	1c18      	adds	r0, r3, #0
10001382:	213f      	movs	r1, #63	; 0x3f
10001384:	f000 f8de 	bl	10001544 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)green, sizeof(green));
10001388:	4b32      	ldr	r3, [pc, #200]	; (10001454 <updateWS2812LEDs+0x154>)
1000138a:	1c18      	adds	r0, r3, #0
1000138c:	213f      	movs	r1, #63	; 0x3f
1000138e:	f000 f8d9 	bl	10001544 <ws2812_sendarray>
		break;
10001392:	e056      	b.n	10001442 <updateWS2812LEDs+0x142>
	case BLUE:
		ws2812_sendarray((uint8_t*)blue, sizeof(blue));
10001394:	4b30      	ldr	r3, [pc, #192]	; (10001458 <updateWS2812LEDs+0x158>)
10001396:	1c18      	adds	r0, r3, #0
10001398:	213f      	movs	r1, #63	; 0x3f
1000139a:	f000 f8d3 	bl	10001544 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)blue, sizeof(blue));
1000139e:	4b2e      	ldr	r3, [pc, #184]	; (10001458 <updateWS2812LEDs+0x158>)
100013a0:	1c18      	adds	r0, r3, #0
100013a2:	213f      	movs	r1, #63	; 0x3f
100013a4:	f000 f8ce 	bl	10001544 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)blue, sizeof(blue));
100013a8:	4b2b      	ldr	r3, [pc, #172]	; (10001458 <updateWS2812LEDs+0x158>)
100013aa:	1c18      	adds	r0, r3, #0
100013ac:	213f      	movs	r1, #63	; 0x3f
100013ae:	f000 f8c9 	bl	10001544 <ws2812_sendarray>
		break;
100013b2:	e046      	b.n	10001442 <updateWS2812LEDs+0x142>
	case WHITE:
		ws2812_sendarray((uint8_t*)white, sizeof(white));
100013b4:	4b29      	ldr	r3, [pc, #164]	; (1000145c <updateWS2812LEDs+0x15c>)
100013b6:	1c18      	adds	r0, r3, #0
100013b8:	213f      	movs	r1, #63	; 0x3f
100013ba:	f000 f8c3 	bl	10001544 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)white, sizeof(white));
100013be:	4b27      	ldr	r3, [pc, #156]	; (1000145c <updateWS2812LEDs+0x15c>)
100013c0:	1c18      	adds	r0, r3, #0
100013c2:	213f      	movs	r1, #63	; 0x3f
100013c4:	f000 f8be 	bl	10001544 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)white, sizeof(white));
100013c8:	4b24      	ldr	r3, [pc, #144]	; (1000145c <updateWS2812LEDs+0x15c>)
100013ca:	1c18      	adds	r0, r3, #0
100013cc:	213f      	movs	r1, #63	; 0x3f
100013ce:	f000 f8b9 	bl	10001544 <ws2812_sendarray>
		break;
100013d2:	e036      	b.n	10001442 <updateWS2812LEDs+0x142>
	case YELLOW:
		ws2812_sendarray((uint8_t*)yello, sizeof(yello));
100013d4:	4b22      	ldr	r3, [pc, #136]	; (10001460 <updateWS2812LEDs+0x160>)
100013d6:	1c18      	adds	r0, r3, #0
100013d8:	213f      	movs	r1, #63	; 0x3f
100013da:	f000 f8b3 	bl	10001544 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)yello, sizeof(yello));
100013de:	4b20      	ldr	r3, [pc, #128]	; (10001460 <updateWS2812LEDs+0x160>)
100013e0:	1c18      	adds	r0, r3, #0
100013e2:	213f      	movs	r1, #63	; 0x3f
100013e4:	f000 f8ae 	bl	10001544 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)yello, sizeof(yello));
100013e8:	4b1d      	ldr	r3, [pc, #116]	; (10001460 <updateWS2812LEDs+0x160>)
100013ea:	1c18      	adds	r0, r3, #0
100013ec:	213f      	movs	r1, #63	; 0x3f
100013ee:	f000 f8a9 	bl	10001544 <ws2812_sendarray>
		break;
100013f2:	e026      	b.n	10001442 <updateWS2812LEDs+0x142>
	case PURPLE:
		ws2812_sendarray((uint8_t*)purpl, sizeof(purpl));
100013f4:	4b1b      	ldr	r3, [pc, #108]	; (10001464 <updateWS2812LEDs+0x164>)
100013f6:	1c18      	adds	r0, r3, #0
100013f8:	213f      	movs	r1, #63	; 0x3f
100013fa:	f000 f8a3 	bl	10001544 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)purpl, sizeof(purpl));
100013fe:	4b19      	ldr	r3, [pc, #100]	; (10001464 <updateWS2812LEDs+0x164>)
10001400:	1c18      	adds	r0, r3, #0
10001402:	213f      	movs	r1, #63	; 0x3f
10001404:	f000 f89e 	bl	10001544 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)purpl, sizeof(purpl));
10001408:	4b16      	ldr	r3, [pc, #88]	; (10001464 <updateWS2812LEDs+0x164>)
1000140a:	1c18      	adds	r0, r3, #0
1000140c:	213f      	movs	r1, #63	; 0x3f
1000140e:	f000 f899 	bl	10001544 <ws2812_sendarray>
		break;
10001412:	e016      	b.n	10001442 <updateWS2812LEDs+0x142>
	case CYAN:
		ws2812_sendarray((uint8_t*)cyan, sizeof(cyan));
10001414:	4b14      	ldr	r3, [pc, #80]	; (10001468 <updateWS2812LEDs+0x168>)
10001416:	1c18      	adds	r0, r3, #0
10001418:	213f      	movs	r1, #63	; 0x3f
1000141a:	f000 f893 	bl	10001544 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)cyan, sizeof(cyan));
1000141e:	4b12      	ldr	r3, [pc, #72]	; (10001468 <updateWS2812LEDs+0x168>)
10001420:	1c18      	adds	r0, r3, #0
10001422:	213f      	movs	r1, #63	; 0x3f
10001424:	f000 f88e 	bl	10001544 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)cyan, sizeof(cyan));
10001428:	4b0f      	ldr	r3, [pc, #60]	; (10001468 <updateWS2812LEDs+0x168>)
1000142a:	1c18      	adds	r0, r3, #0
1000142c:	213f      	movs	r1, #63	; 0x3f
1000142e:	f000 f889 	bl	10001544 <ws2812_sendarray>
		break;
10001432:	e006      	b.n	10001442 <updateWS2812LEDs+0x142>
	case OFF:
		ws2812_sendarray((uint8_t*)off, sizeof(off));
10001434:	4b0d      	ldr	r3, [pc, #52]	; (1000146c <updateWS2812LEDs+0x16c>)
10001436:	1c18      	adds	r0, r3, #0
10001438:	213f      	movs	r1, #63	; 0x3f
1000143a:	f000 f883 	bl	10001544 <ws2812_sendarray>
		break;
1000143e:	e000      	b.n	10001442 <updateWS2812LEDs+0x142>
	default:
		break;
10001440:	46c0      	nop			; (mov r8, r8)
	}
}
10001442:	46bd      	mov	sp, r7
10001444:	b002      	add	sp, #8
10001446:	bd80      	pop	{r7, pc}
10001448:	10004e60 	.word	0x10004e60
1000144c:	10004c20 	.word	0x10004c20
10001450:	10004c60 	.word	0x10004c60
10001454:	10004ca0 	.word	0x10004ca0
10001458:	10004ce0 	.word	0x10004ce0
1000145c:	10004d20 	.word	0x10004d20
10001460:	10004e20 	.word	0x10004e20
10001464:	10004da0 	.word	0x10004da0
10001468:	10004de0 	.word	0x10004de0
1000146c:	10004d60 	.word	0x10004d60

10001470 <redDotOnBlueLine>:




void redDotOnBlueLine(uint8_t *leds)
{
10001470:	b580      	push	{r7, lr}
10001472:	b082      	sub	sp, #8
10001474:	af00      	add	r7, sp, #0
10001476:	6078      	str	r0, [r7, #4]
	static uint8_t redPosition = 0;

	//delete actual red dot, turn him blue
	leds[3*redPosition  ] = 0x00;
10001478:	4b31      	ldr	r3, [pc, #196]	; (10001540 <redDotOnBlueLine+0xd0>)
1000147a:	781b      	ldrb	r3, [r3, #0]
1000147c:	1c1a      	adds	r2, r3, #0
1000147e:	1c13      	adds	r3, r2, #0
10001480:	005b      	lsls	r3, r3, #1
10001482:	189b      	adds	r3, r3, r2
10001484:	687a      	ldr	r2, [r7, #4]
10001486:	18d3      	adds	r3, r2, r3
10001488:	2200      	movs	r2, #0
1000148a:	701a      	strb	r2, [r3, #0]
	leds[3*redPosition+1] = 0x00;
1000148c:	4b2c      	ldr	r3, [pc, #176]	; (10001540 <redDotOnBlueLine+0xd0>)
1000148e:	781b      	ldrb	r3, [r3, #0]
10001490:	1c1a      	adds	r2, r3, #0
10001492:	1c13      	adds	r3, r2, #0
10001494:	005b      	lsls	r3, r3, #1
10001496:	189b      	adds	r3, r3, r2
10001498:	3301      	adds	r3, #1
1000149a:	687a      	ldr	r2, [r7, #4]
1000149c:	18d3      	adds	r3, r2, r3
1000149e:	2200      	movs	r2, #0
100014a0:	701a      	strb	r2, [r3, #0]
	leds[3*redPosition+2] = 0xFF;
100014a2:	4b27      	ldr	r3, [pc, #156]	; (10001540 <redDotOnBlueLine+0xd0>)
100014a4:	781b      	ldrb	r3, [r3, #0]
100014a6:	1c1a      	adds	r2, r3, #0
100014a8:	1c13      	adds	r3, r2, #0
100014aa:	005b      	lsls	r3, r3, #1
100014ac:	189b      	adds	r3, r3, r2
100014ae:	3302      	adds	r3, #2
100014b0:	687a      	ldr	r2, [r7, #4]
100014b2:	18d3      	adds	r3, r2, r3
100014b4:	22ff      	movs	r2, #255	; 0xff
100014b6:	701a      	strb	r2, [r3, #0]

	redPosition++;
100014b8:	4b21      	ldr	r3, [pc, #132]	; (10001540 <redDotOnBlueLine+0xd0>)
100014ba:	781b      	ldrb	r3, [r3, #0]
100014bc:	3301      	adds	r3, #1
100014be:	b2da      	uxtb	r2, r3
100014c0:	4b1f      	ldr	r3, [pc, #124]	; (10001540 <redDotOnBlueLine+0xd0>)
100014c2:	701a      	strb	r2, [r3, #0]
	if(redPosition == WS2812_QUANTITY)
100014c4:	4b1e      	ldr	r3, [pc, #120]	; (10001540 <redDotOnBlueLine+0xd0>)
100014c6:	781b      	ldrb	r3, [r3, #0]
100014c8:	2b15      	cmp	r3, #21
100014ca:	d102      	bne.n	100014d2 <redDotOnBlueLine+0x62>
		redPosition = 0;
100014cc:	4b1c      	ldr	r3, [pc, #112]	; (10001540 <redDotOnBlueLine+0xd0>)
100014ce:	2200      	movs	r2, #0
100014d0:	701a      	strb	r2, [r3, #0]

	//make new red dot
	leds[3*redPosition  ] = 0x00;
100014d2:	4b1b      	ldr	r3, [pc, #108]	; (10001540 <redDotOnBlueLine+0xd0>)
100014d4:	781b      	ldrb	r3, [r3, #0]
100014d6:	1c1a      	adds	r2, r3, #0
100014d8:	1c13      	adds	r3, r2, #0
100014da:	005b      	lsls	r3, r3, #1
100014dc:	189b      	adds	r3, r3, r2
100014de:	687a      	ldr	r2, [r7, #4]
100014e0:	18d3      	adds	r3, r2, r3
100014e2:	2200      	movs	r2, #0
100014e4:	701a      	strb	r2, [r3, #0]
	leds[3*redPosition+1] = 0xFF;
100014e6:	4b16      	ldr	r3, [pc, #88]	; (10001540 <redDotOnBlueLine+0xd0>)
100014e8:	781b      	ldrb	r3, [r3, #0]
100014ea:	1c1a      	adds	r2, r3, #0
100014ec:	1c13      	adds	r3, r2, #0
100014ee:	005b      	lsls	r3, r3, #1
100014f0:	189b      	adds	r3, r3, r2
100014f2:	3301      	adds	r3, #1
100014f4:	687a      	ldr	r2, [r7, #4]
100014f6:	18d3      	adds	r3, r2, r3
100014f8:	22ff      	movs	r2, #255	; 0xff
100014fa:	701a      	strb	r2, [r3, #0]
	leds[3*redPosition+2] = 0x00;
100014fc:	4b10      	ldr	r3, [pc, #64]	; (10001540 <redDotOnBlueLine+0xd0>)
100014fe:	781b      	ldrb	r3, [r3, #0]
10001500:	1c1a      	adds	r2, r3, #0
10001502:	1c13      	adds	r3, r2, #0
10001504:	005b      	lsls	r3, r3, #1
10001506:	189b      	adds	r3, r3, r2
10001508:	3302      	adds	r3, #2
1000150a:	687a      	ldr	r2, [r7, #4]
1000150c:	18d3      	adds	r3, r2, r3
1000150e:	2200      	movs	r2, #0
10001510:	701a      	strb	r2, [r3, #0]

	//write new colors to to LEDS:
	ws2812_sendarray(leds, WS2812_QUANTITY*3);
10001512:	687b      	ldr	r3, [r7, #4]
10001514:	1c18      	adds	r0, r3, #0
10001516:	213f      	movs	r1, #63	; 0x3f
10001518:	f000 f814 	bl	10001544 <ws2812_sendarray>
	ws2812_sendarray(leds, WS2812_QUANTITY*3);
1000151c:	687b      	ldr	r3, [r7, #4]
1000151e:	1c18      	adds	r0, r3, #0
10001520:	213f      	movs	r1, #63	; 0x3f
10001522:	f000 f80f 	bl	10001544 <ws2812_sendarray>
	ws2812_sendarray(leds, WS2812_QUANTITY*3);
10001526:	687b      	ldr	r3, [r7, #4]
10001528:	1c18      	adds	r0, r3, #0
1000152a:	213f      	movs	r1, #63	; 0x3f
1000152c:	f000 f80a 	bl	10001544 <ws2812_sendarray>
	ws2812_sendarray(leds, WS2812_QUANTITY*3);
10001530:	687b      	ldr	r3, [r7, #4]
10001532:	1c18      	adds	r0, r3, #0
10001534:	213f      	movs	r1, #63	; 0x3f
10001536:	f000 f805 	bl	10001544 <ws2812_sendarray>
}
1000153a:	46bd      	mov	sp, r7
1000153c:	b002      	add	sp, #8
1000153e:	bd80      	pop	{r7, pc}
10001540:	20000920 	.word	0x20000920

10001544 <ws2812_sendarray>:
#define ws2812_DEL8 ws2812_DEL4 ws2812_DEL4
#define ws2812_DEL16 ws2812_DEL8 ws2812_DEL8


void ws2812_sendarray(uint8_t *data,int datlen)
{
10001544:	b5b0      	push	{r4, r5, r7, lr}
10001546:	b088      	sub	sp, #32
10001548:	af00      	add	r7, sp, #0
1000154a:	6078      	str	r0, [r7, #4]
1000154c:	6039      	str	r1, [r7, #0]
	//__disable_irq();
	uint32_t maskhi = ws2812_mask_set;
1000154e:	2320      	movs	r3, #32
10001550:	61bb      	str	r3, [r7, #24]
	uint32_t masklo = ws2812_mask_clr;
10001552:	2380      	movs	r3, #128	; 0x80
10001554:	039b      	lsls	r3, r3, #14
10001556:	617b      	str	r3, [r7, #20]
	volatile uint32_t *set = ws2812_port_set;
10001558:	4b14      	ldr	r3, [pc, #80]	; (100015ac <end45+0x1c>)
1000155a:	613b      	str	r3, [r7, #16]
	volatile uint32_t *clr = ws2812_port_clr;
1000155c:	4b13      	ldr	r3, [pc, #76]	; (100015ac <end45+0x1c>)
1000155e:	60fb      	str	r3, [r7, #12]
	uint32_t i;
	uint32_t curbyte;

	while (datlen--) {
10001560:	e017      	b.n	10001592 <end45+0x2>
		curbyte=*data++;
10001562:	687b      	ldr	r3, [r7, #4]
10001564:	781b      	ldrb	r3, [r3, #0]
10001566:	60bb      	str	r3, [r7, #8]
10001568:	687b      	ldr	r3, [r7, #4]
1000156a:	3301      	adds	r3, #1
1000156c:	607b      	str	r3, [r7, #4]

	asm volatile(
1000156e:	68bb      	ldr	r3, [r7, #8]
10001570:	693a      	ldr	r2, [r7, #16]
10001572:	68f9      	ldr	r1, [r7, #12]
10001574:	6978      	ldr	r0, [r7, #20]
10001576:	69bd      	ldr	r5, [r7, #24]
10001578:	69fc      	ldr	r4, [r7, #28]
1000157a:	061b      	lsls	r3, r3, #24
1000157c:	2408      	movs	r4, #8

1000157e <ilop45>:
1000157e:	005b      	lsls	r3, r3, #1
10001580:	6015      	str	r5, [r2, #0]
10001582:	46c0      	nop			; (mov r8, r8)
10001584:	d200      	bcs.n	10001588 <one45>
10001586:	6008      	str	r0, [r1, #0]

10001588 <one45>:
10001588:	3c01      	subs	r4, #1
1000158a:	6008      	str	r0, [r1, #0]
1000158c:	d000      	beq.n	10001590 <end45>
1000158e:	e7f6      	b.n	1000157e <ilop45>

10001590 <end45>:
10001590:	61fc      	str	r4, [r7, #28]
	volatile uint32_t *set = ws2812_port_set;
	volatile uint32_t *clr = ws2812_port_clr;
	uint32_t i;
	uint32_t curbyte;

	while (datlen--) {
10001592:	683b      	ldr	r3, [r7, #0]
10001594:	1e5a      	subs	r2, r3, #1
10001596:	4193      	sbcs	r3, r2
10001598:	b2db      	uxtb	r3, r3
1000159a:	683a      	ldr	r2, [r7, #0]
1000159c:	3a01      	subs	r2, #1
1000159e:	603a      	str	r2, [r7, #0]
100015a0:	2b00      	cmp	r3, #0
100015a2:	d1de      	bne.n	10001562 <ws2812_sendarray+0x1e>
			:	[ctr] "+r" (i)
			:	[dat] "r" (curbyte), [set] "r" (set), [clr] "r" (clr), [masklo] "r" (masklo), [maskhi] "r" (maskhi)
			);
	}
	//__enable_irq();
}
100015a4:	46bd      	mov	sp, r7
100015a6:	b008      	add	sp, #32
100015a8:	bdb0      	pop	{r4, r5, r7, pc}
100015aa:	46c0      	nop			; (mov r8, r8)
100015ac:	40040004 	.word	0x40040004

100015b0 <NMI_Handler>:
/* Default exception Handlers - Users may override this default functionality by
   defining handlers of the same name in their C code */
    .thumb 
    .text

    Insert_ExceptionHandler NMI_Handler
100015b0:	e7fe      	b.n	100015b0 <NMI_Handler>

100015b2 <HardFault_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler HardFault_Handler
100015b2:	e7fe      	b.n	100015b2 <HardFault_Handler>

100015b4 <SVC_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler SVC_Handler
100015b4:	e7fe      	b.n	100015b4 <SVC_Handler>

100015b6 <PendSV_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler PendSV_Handler
100015b6:	e7fe      	b.n	100015b6 <PendSV_Handler>
/* ======================================================================== */
    Insert_ExceptionHandler SysTick_Handler
100015b8:	e7fe      	b.n	100015b8 <PendSV_Handler+0x2>

100015ba <SCU_0_IRQHandler>:
/* ============= END OF EXCEPTION HANDLER DEFINITION ======================== */

/* ============= START OF INTERRUPT HANDLER DEFINITION ====================== */

/* IRQ Handlers */
    Insert_ExceptionHandler SCU_0_IRQHandler
100015ba:	e7fe      	b.n	100015ba <SCU_0_IRQHandler>

100015bc <SCU_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_1_IRQHandler
100015bc:	e7fe      	b.n	100015bc <SCU_1_IRQHandler>

100015be <SCU_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_2_IRQHandler
100015be:	e7fe      	b.n	100015be <SCU_2_IRQHandler>

100015c0 <ERU0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_0_IRQHandler
100015c0:	e7fe      	b.n	100015c0 <ERU0_0_IRQHandler>

100015c2 <ERU0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_1_IRQHandler
100015c2:	e7fe      	b.n	100015c2 <ERU0_1_IRQHandler>

100015c4 <ERU0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_2_IRQHandler
100015c4:	e7fe      	b.n	100015c4 <ERU0_2_IRQHandler>

100015c6 <ERU0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_3_IRQHandler
100015c6:	e7fe      	b.n	100015c6 <ERU0_3_IRQHandler>

100015c8 <VADC0_C0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_0_IRQHandler
100015c8:	e7fe      	b.n	100015c8 <VADC0_C0_0_IRQHandler>

100015ca <VADC0_C0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_1_IRQHandler
100015ca:	e7fe      	b.n	100015ca <VADC0_C0_1_IRQHandler>

100015cc <CCU40_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_0_IRQHandler
100015cc:	e7fe      	b.n	100015cc <CCU40_0_IRQHandler>

100015ce <CCU40_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_1_IRQHandler
100015ce:	e7fe      	b.n	100015ce <CCU40_1_IRQHandler>

100015d0 <CCU40_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_2_IRQHandler
100015d0:	e7fe      	b.n	100015d0 <CCU40_2_IRQHandler>

100015d2 <CCU40_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_3_IRQHandler
100015d2:	e7fe      	b.n	100015d2 <CCU40_3_IRQHandler>

100015d4 <USIC0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_0_IRQHandler
100015d4:	e7fe      	b.n	100015d4 <USIC0_0_IRQHandler>

100015d6 <USIC0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_1_IRQHandler
100015d6:	e7fe      	b.n	100015d6 <USIC0_1_IRQHandler>

100015d8 <USIC0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_2_IRQHandler
100015d8:	e7fe      	b.n	100015d8 <USIC0_2_IRQHandler>

100015da <USIC0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_3_IRQHandler
100015da:	e7fe      	b.n	100015da <USIC0_3_IRQHandler>

100015dc <USIC0_4_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_4_IRQHandler
100015dc:	e7fe      	b.n	100015dc <USIC0_4_IRQHandler>

100015de <USIC0_5_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_5_IRQHandler
100015de:	e7fe      	b.n	100015de <USIC0_5_IRQHandler>

100015e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{    
100015e0:	b580      	push	{r7, lr}
100015e2:	af00      	add	r7, sp, #0
   * while((SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk));
   * SCU_GENERAL->PASSWD = 0x000000C3UL; // enable bit protection
   * SystemCoreClockUpdate();
   *
   */
  SystemCoreClockUpdate();
100015e4:	f000 f802 	bl	100015ec <SystemCoreClockUpdate>
}
100015e8:	46bd      	mov	sp, r7
100015ea:	bd80      	pop	{r7, pc}

100015ec <SystemCoreClockUpdate>:
  * @note   -  
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
100015ec:	b580      	push	{r7, lr}
100015ee:	b082      	sub	sp, #8
100015f0:	af00      	add	r7, sp, #0
  uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100015f2:	4b11      	ldr	r3, [pc, #68]	; (10001638 <SystemCoreClockUpdate+0x4c>)
100015f4:	681a      	ldr	r2, [r3, #0]
100015f6:	23ff      	movs	r3, #255	; 0xff
100015f8:	021b      	lsls	r3, r3, #8
100015fa:	4013      	ands	r3, r2
100015fc:	0a1b      	lsrs	r3, r3, #8
100015fe:	607b      	str	r3, [r7, #4]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
10001600:	4b0d      	ldr	r3, [pc, #52]	; (10001638 <SystemCoreClockUpdate+0x4c>)
10001602:	681a      	ldr	r2, [r3, #0]
10001604:	23ff      	movs	r3, #255	; 0xff
10001606:	4013      	ands	r3, r2
10001608:	603b      	str	r3, [r7, #0]
  
  if(IDIV)
1000160a:	687b      	ldr	r3, [r7, #4]
1000160c:	2b00      	cmp	r3, #0
1000160e:	d00c      	beq.n	1000162a <SystemCoreClockUpdate+0x3e>
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((MCLK_MHZ << 7) / ((IDIV << 8) + FDIV)) << 1;
10001610:	687b      	ldr	r3, [r7, #4]
10001612:	021a      	lsls	r2, r3, #8
10001614:	683b      	ldr	r3, [r7, #0]
10001616:	18d3      	adds	r3, r2, r3
10001618:	4808      	ldr	r0, [pc, #32]	; (1000163c <SystemCoreClockUpdate+0x50>)
1000161a:	1c19      	adds	r1, r3, #0
1000161c:	f001 fe58 	bl	100032d0 <__aeabi_uidiv>
10001620:	1c03      	adds	r3, r0, #0
10001622:	005a      	lsls	r2, r3, #1
10001624:	4b06      	ldr	r3, [pc, #24]	; (10001640 <SystemCoreClockUpdate+0x54>)
10001626:	601a      	str	r2, [r3, #0]
10001628:	e002      	b.n	10001630 <SystemCoreClockUpdate+0x44>
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = MCLK_MHZ;
1000162a:	4b05      	ldr	r3, [pc, #20]	; (10001640 <SystemCoreClockUpdate+0x54>)
1000162c:	4a05      	ldr	r2, [pc, #20]	; (10001644 <SystemCoreClockUpdate+0x58>)
1000162e:	601a      	str	r2, [r3, #0]
  }
}
10001630:	46bd      	mov	sp, r7
10001632:	b002      	add	sp, #8
10001634:	bd80      	pop	{r7, pc}
10001636:	46c0      	nop			; (mov r8, r8)
10001638:	40010300 	.word	0x40010300
1000163c:	f4240000 	.word	0xf4240000
10001640:	2000093c 	.word	0x2000093c
10001644:	01e84800 	.word	0x01e84800

10001648 <_open>:
/* ========================================================================= */
/*
 * File open
 */
__attribute__((weak)) int _open(const char *name, int flags, int mode)
{
10001648:	b580      	push	{r7, lr}
1000164a:	b084      	sub	sp, #16
1000164c:	af00      	add	r7, sp, #0
1000164e:	60f8      	str	r0, [r7, #12]
10001650:	60b9      	str	r1, [r7, #8]
10001652:	607a      	str	r2, [r7, #4]
 flags = flags;
 mode = mode;
 return -1;
10001654:	2301      	movs	r3, #1
10001656:	425b      	negs	r3, r3
}
10001658:	1c18      	adds	r0, r3, #0
1000165a:	46bd      	mov	sp, r7
1000165c:	b004      	add	sp, #16
1000165e:	bd80      	pop	{r7, pc}

10001660 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
10001660:	b580      	push	{r7, lr}
10001662:	b084      	sub	sp, #16
10001664:	af00      	add	r7, sp, #0
10001666:	60f8      	str	r0, [r7, #12]
10001668:	60b9      	str	r1, [r7, #8]
1000166a:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
1000166c:	2301      	movs	r3, #1
1000166e:	425b      	negs	r3, r3
}
10001670:	1c18      	adds	r0, r3, #0
10001672:	46bd      	mov	sp, r7
10001674:	b004      	add	sp, #16
10001676:	bd80      	pop	{r7, pc}

10001678 <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
10001678:	b580      	push	{r7, lr}
1000167a:	b084      	sub	sp, #16
1000167c:	af00      	add	r7, sp, #0
1000167e:	60f8      	str	r0, [r7, #12]
10001680:	60b9      	str	r1, [r7, #8]
10001682:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
10001684:	2300      	movs	r3, #0
}
10001686:	1c18      	adds	r0, r3, #0
10001688:	46bd      	mov	sp, r7
1000168a:	b004      	add	sp, #16
1000168c:	bd80      	pop	{r7, pc}
1000168e:	46c0      	nop			; (mov r8, r8)

10001690 <_write>:

/*
 * File write
 */
__attribute__((weak)) int _write(int file, char *buf, int nbytes)
{
10001690:	b580      	push	{r7, lr}
10001692:	b084      	sub	sp, #16
10001694:	af00      	add	r7, sp, #0
10001696:	60f8      	str	r0, [r7, #12]
10001698:	60b9      	str	r1, [r7, #8]
1000169a:	607a      	str	r2, [r7, #4]
 return -1;
1000169c:	2301      	movs	r3, #1
1000169e:	425b      	negs	r3, r3
}
100016a0:	1c18      	adds	r0, r3, #0
100016a2:	46bd      	mov	sp, r7
100016a4:	b004      	add	sp, #16
100016a6:	bd80      	pop	{r7, pc}

100016a8 <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
100016a8:	b580      	push	{r7, lr}
100016aa:	af00      	add	r7, sp, #0
 return -1;
100016ac:	2301      	movs	r3, #1
100016ae:	425b      	negs	r3, r3
}
100016b0:	1c18      	adds	r0, r3, #0
100016b2:	46bd      	mov	sp, r7
100016b4:	bd80      	pop	{r7, pc}
100016b6:	46c0      	nop			; (mov r8, r8)

100016b8 <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
100016b8:	b580      	push	{r7, lr}
100016ba:	b082      	sub	sp, #8
100016bc:	af00      	add	r7, sp, #0
100016be:	6078      	str	r0, [r7, #4]
100016c0:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
100016c2:	683b      	ldr	r3, [r7, #0]
100016c4:	2b00      	cmp	r3, #0
100016c6:	d002      	beq.n	100016ce <_fstat+0x16>
  return -1;
100016c8:	2301      	movs	r3, #1
100016ca:	425b      	negs	r3, r3
100016cc:	e001      	b.n	100016d2 <_fstat+0x1a>
 else
  return -2;
100016ce:	2302      	movs	r3, #2
100016d0:	425b      	negs	r3, r3
}
100016d2:	1c18      	adds	r0, r3, #0
100016d4:	46bd      	mov	sp, r7
100016d6:	b002      	add	sp, #8
100016d8:	bd80      	pop	{r7, pc}
100016da:	46c0      	nop			; (mov r8, r8)

100016dc <_link>:
/*
 * File linking
 */
__attribute__((weak)) int _link (char *old, char *new)
{
100016dc:	b580      	push	{r7, lr}
100016de:	b082      	sub	sp, #8
100016e0:	af00      	add	r7, sp, #0
100016e2:	6078      	str	r0, [r7, #4]
100016e4:	6039      	str	r1, [r7, #0]
 if (old == new)
100016e6:	687a      	ldr	r2, [r7, #4]
100016e8:	683b      	ldr	r3, [r7, #0]
100016ea:	429a      	cmp	r2, r3
100016ec:	d102      	bne.n	100016f4 <_link+0x18>
  return -1;
100016ee:	2301      	movs	r3, #1
100016f0:	425b      	negs	r3, r3
100016f2:	e001      	b.n	100016f8 <_link+0x1c>
 else
  return -2;
100016f4:	2302      	movs	r3, #2
100016f6:	425b      	negs	r3, r3
}
100016f8:	1c18      	adds	r0, r3, #0
100016fa:	46bd      	mov	sp, r7
100016fc:	b002      	add	sp, #8
100016fe:	bd80      	pop	{r7, pc}

10001700 <_unlink>:

/*
 * Unlinking directory entry
 */
__attribute__((weak)) int _unlink(char *name)
{
10001700:	b580      	push	{r7, lr}
10001702:	b082      	sub	sp, #8
10001704:	af00      	add	r7, sp, #0
10001706:	6078      	str	r0, [r7, #4]
 return -1;
10001708:	2301      	movs	r3, #1
1000170a:	425b      	negs	r3, r3
}
1000170c:	1c18      	adds	r0, r3, #0
1000170e:	46bd      	mov	sp, r7
10001710:	b002      	add	sp, #8
10001712:	bd80      	pop	{r7, pc}

10001714 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
10001714:	b580      	push	{r7, lr}
10001716:	b086      	sub	sp, #24
10001718:	af00      	add	r7, sp, #0
1000171a:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
1000171c:	4b14      	ldr	r3, [pc, #80]	; (10001770 <_sbrk+0x5c>)
1000171e:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
10001720:	4b14      	ldr	r3, [pc, #80]	; (10001774 <_sbrk+0x60>)
10001722:	681b      	ldr	r3, [r3, #0]
10001724:	2b00      	cmp	r3, #0
10001726:	d108      	bne.n	1000173a <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
10001728:	4b12      	ldr	r3, [pc, #72]	; (10001774 <_sbrk+0x60>)
1000172a:	4a13      	ldr	r2, [pc, #76]	; (10001778 <_sbrk+0x64>)
1000172c:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
1000172e:	4b11      	ldr	r3, [pc, #68]	; (10001774 <_sbrk+0x60>)
10001730:	681a      	ldr	r2, [r3, #0]
10001732:	697b      	ldr	r3, [r7, #20]
10001734:	18d2      	adds	r2, r2, r3
10001736:	4b11      	ldr	r3, [pc, #68]	; (1000177c <_sbrk+0x68>)
10001738:	601a      	str	r2, [r3, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
1000173a:	4b0e      	ldr	r3, [pc, #56]	; (10001774 <_sbrk+0x60>)
1000173c:	681b      	ldr	r3, [r3, #0]
1000173e:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
10001740:	4b0c      	ldr	r3, [pc, #48]	; (10001774 <_sbrk+0x60>)
10001742:	681b      	ldr	r3, [r3, #0]
10001744:	1c1a      	adds	r2, r3, #0
10001746:	687b      	ldr	r3, [r7, #4]
10001748:	18d3      	adds	r3, r2, r3
1000174a:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
1000174c:	2207      	movs	r2, #7
1000174e:	4393      	bics	r3, r2
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
10001750:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
10001752:	4b0a      	ldr	r3, [pc, #40]	; (1000177c <_sbrk+0x68>)
10001754:	681b      	ldr	r3, [r3, #0]
10001756:	68fa      	ldr	r2, [r7, #12]
10001758:	429a      	cmp	r2, r3
1000175a:	d301      	bcc.n	10001760 <_sbrk+0x4c>
  return ((unsigned char *)NULL);
1000175c:	2300      	movs	r3, #0
1000175e:	e003      	b.n	10001768 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
10001760:	4b04      	ldr	r3, [pc, #16]	; (10001774 <_sbrk+0x60>)
10001762:	68fa      	ldr	r2, [r7, #12]
10001764:	601a      	str	r2, [r3, #0]
  return CurrBreak;
10001766:	693b      	ldr	r3, [r7, #16]
 }
}
10001768:	1c18      	adds	r0, r3, #0
1000176a:	46bd      	mov	sp, r7
1000176c:	b006      	add	sp, #24
1000176e:	bd80      	pop	{r7, pc}
10001770:	00003578 	.word	0x00003578
10001774:	20000928 	.word	0x20000928
10001778:	20000a88 	.word	0x20000a88
1000177c:	2000092c 	.word	0x2000092c

10001780 <_times>:
/* ========================================================================= */
/*
 * Process timing information
 */
__attribute__((weak)) int _times(struct tms *buf)
{
10001780:	b580      	push	{r7, lr}
10001782:	b082      	sub	sp, #8
10001784:	af00      	add	r7, sp, #0
10001786:	6078      	str	r0, [r7, #4]
 return -1;
10001788:	2301      	movs	r3, #1
1000178a:	425b      	negs	r3, r3
}
1000178c:	1c18      	adds	r0, r3, #0
1000178e:	46bd      	mov	sp, r7
10001790:	b002      	add	sp, #8
10001792:	bd80      	pop	{r7, pc}

10001794 <_wait>:
/*
 * Waiting for a child process to complete
 */
__attribute__((weak)) int _wait(int *status)
{
10001794:	b580      	push	{r7, lr}
10001796:	b082      	sub	sp, #8
10001798:	af00      	add	r7, sp, #0
1000179a:	6078      	str	r0, [r7, #4]
 return -1;
1000179c:	2301      	movs	r3, #1
1000179e:	425b      	negs	r3, r3
}
100017a0:	1c18      	adds	r0, r3, #0
100017a2:	46bd      	mov	sp, r7
100017a4:	b002      	add	sp, #8
100017a6:	bd80      	pop	{r7, pc}

100017a8 <_kill>:

/*
 * Kill a process
 */
__attribute__((weak)) int _kill(int pid,int sig)
{
100017a8:	b580      	push	{r7, lr}
100017aa:	b082      	sub	sp, #8
100017ac:	af00      	add	r7, sp, #0
100017ae:	6078      	str	r0, [r7, #4]
100017b0:	6039      	str	r1, [r7, #0]
 pid = pid;
 sig = sig;
 return -1;
100017b2:	2301      	movs	r3, #1
100017b4:	425b      	negs	r3, r3
}
100017b6:	1c18      	adds	r0, r3, #0
100017b8:	46bd      	mov	sp, r7
100017ba:	b002      	add	sp, #8
100017bc:	bd80      	pop	{r7, pc}
100017be:	46c0      	nop			; (mov r8, r8)

100017c0 <_fork>:

/*
 * Forking a child process
 */
__attribute__((weak)) int _fork(void)
{
100017c0:	b580      	push	{r7, lr}
100017c2:	af00      	add	r7, sp, #0
 return -1;
100017c4:	2301      	movs	r3, #1
100017c6:	425b      	negs	r3, r3
}
100017c8:	1c18      	adds	r0, r3, #0
100017ca:	46bd      	mov	sp, r7
100017cc:	bd80      	pop	{r7, pc}
100017ce:	46c0      	nop			; (mov r8, r8)

100017d0 <_getpid>:

/*
 * Process ID
 */
__attribute__((weak)) int _getpid(void)
{
100017d0:	b580      	push	{r7, lr}
100017d2:	af00      	add	r7, sp, #0
 return -1;
100017d4:	2301      	movs	r3, #1
100017d6:	425b      	negs	r3, r3
}
100017d8:	1c18      	adds	r0, r3, #0
100017da:	46bd      	mov	sp, r7
100017dc:	bd80      	pop	{r7, pc}
100017de:	46c0      	nop			; (mov r8, r8)

100017e0 <_exit>:

/*
 * Program/process exit
 */
__attribute__((weak)) void _exit(int rc)
{
100017e0:	b580      	push	{r7, lr}
100017e2:	b082      	sub	sp, #8
100017e4:	af00      	add	r7, sp, #0
100017e6:	6078      	str	r0, [r7, #4]
 rc = rc;
 while(1){}
100017e8:	e7fe      	b.n	100017e8 <_exit+0x8>
100017ea:	46c0      	nop			; (mov r8, r8)

100017ec <_init>:
}

/* Init */
__attribute__((weak)) void _init(void)
{}
100017ec:	b580      	push	{r7, lr}
100017ee:	af00      	add	r7, sp, #0
100017f0:	46bd      	mov	sp, r7
100017f2:	bd80      	pop	{r7, pc}

100017f4 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
100017f4:	b580      	push	{r7, lr}
100017f6:	b082      	sub	sp, #8
100017f8:	af00      	add	r7, sp, #0
100017fa:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
100017fc:	2301      	movs	r3, #1
100017fe:	425b      	negs	r3, r3
}
10001800:	1c18      	adds	r0, r3, #0
10001802:	46bd      	mov	sp, r7
10001804:	b002      	add	sp, #8
10001806:	bd80      	pop	{r7, pc}

10001808 <UART001_lInit>:
 * @return  None <BR>
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/ 
void UART001_lInit (const UART001_HandleType* Handle)
{
10001808:	b580      	push	{r7, lr}
1000180a:	b084      	sub	sp, #16
1000180c:	af00      	add	r7, sp, #0
1000180e:	6078      	str	r0, [r7, #4]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
10001810:	687b      	ldr	r3, [r7, #4]
10001812:	681b      	ldr	r3, [r3, #0]
10001814:	60fb      	str	r3, [r7, #12]
 
  /** UART initialisation  */

  /* Disable UART mode before configuring all USIC registers to avoid 
   * unintended edges */ 
  UartRegs->CCR &= ~( ((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk))); 
10001816:	68fb      	ldr	r3, [r7, #12]
10001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000181a:	2202      	movs	r2, #2
1000181c:	1c19      	adds	r1, r3, #0
1000181e:	4391      	bics	r1, r2
10001820:	1c0a      	adds	r2, r1, #0
10001822:	68fb      	ldr	r3, [r7, #12]
10001824:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable the USIC Channel */
  UartRegs->KSCFG |= ((((uint32_t)MASK_ONE  & USIC_CH_KSCFG_MODEN_Msk)) | \
10001826:	68fb      	ldr	r3, [r7, #12]
10001828:	68db      	ldr	r3, [r3, #12]
1000182a:	2203      	movs	r2, #3
1000182c:	431a      	orrs	r2, r3
1000182e:	68fb      	ldr	r3, [r7, #12]
10001830:	60da      	str	r2, [r3, #12]
                         USIC_CH_KSCFG_BPMODEN_Msk)); 
   
  /* Configuration of USIC Channel Fractional Divider */

  /* Fractional divider mode selected */
  UartRegs->FDR |= (((uint32_t)SHIFT_TWO << USIC_CH_FDR_DM_Pos) \
10001832:	68fb      	ldr	r3, [r7, #12]
10001834:	691b      	ldr	r3, [r3, #16]
10001836:	2280      	movs	r2, #128	; 0x80
10001838:	0212      	lsls	r2, r2, #8
1000183a:	431a      	orrs	r2, r3
1000183c:	68fb      	ldr	r3, [r7, #12]
1000183e:	611a      	str	r2, [r3, #16]
                                                     & USIC_CH_FDR_DM_Msk);
  
  /* Step value */
  UartRegs->FDR |= ((Handle->BGR_STEP) & USIC_CH_FDR_STEP_Msk);
10001840:	68fb      	ldr	r3, [r7, #12]
10001842:	691a      	ldr	r2, [r3, #16]
10001844:	687b      	ldr	r3, [r7, #4]
10001846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
10001848:	059b      	lsls	r3, r3, #22
1000184a:	0d9b      	lsrs	r3, r3, #22
1000184c:	431a      	orrs	r2, r3
1000184e:	68fb      	ldr	r3, [r7, #12]
10001850:	611a      	str	r2, [r3, #16]
          
  /* The PreDivider for CTQ, PCTQ = 0  */
  /* The Denominator for CTQ, DCTQ = 16 */
    
  UartRegs->BRG |= \
10001852:	68fb      	ldr	r3, [r7, #12]
10001854:	695a      	ldr	r2, [r3, #20]
	  ((((uint32_t)(Handle->BGR_PCTQ) << USIC_CH_BRG_PCTQ_Pos) & \
10001856:	6879      	ldr	r1, [r7, #4]
10001858:	2330      	movs	r3, #48	; 0x30
1000185a:	5ccb      	ldrb	r3, [r1, r3]
1000185c:	0219      	lsls	r1, r3, #8
1000185e:	23c0      	movs	r3, #192	; 0xc0
10001860:	009b      	lsls	r3, r3, #2
10001862:	4019      	ands	r1, r3
		  	     USIC_CH_BRG_PCTQ_Msk) | \
      (((uint32_t)(Handle->BGR_DCTQ) << USIC_CH_BRG_DCTQ_Pos) & \
10001864:	687b      	ldr	r3, [r7, #4]
10001866:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
10001868:	0298      	lsls	r0, r3, #10
1000186a:	23f8      	movs	r3, #248	; 0xf8
1000186c:	01db      	lsls	r3, r3, #7
1000186e:	4003      	ands	r3, r0
  /* The PreDivider for CTQ, PCTQ = 0  */
  /* The Denominator for CTQ, DCTQ = 16 */
    
  UartRegs->BRG |= \
	  ((((uint32_t)(Handle->BGR_PCTQ) << USIC_CH_BRG_PCTQ_Pos) & \
		  	     USIC_CH_BRG_PCTQ_Msk) | \
10001870:	4319      	orrs	r1, r3
      (((uint32_t)(Handle->BGR_DCTQ) << USIC_CH_BRG_DCTQ_Pos) & \
	     USIC_CH_BRG_DCTQ_Msk) | \
      (((uint32_t)(Handle->BGR_PDIV) << USIC_CH_BRG_PDIV_Pos) &  \
10001872:	687b      	ldr	r3, [r7, #4]
10001874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
10001876:	0418      	lsls	r0, r3, #16
10001878:	4b4f      	ldr	r3, [pc, #316]	; (100019b8 <UART001_lInit+0x1b0>)
1000187a:	4003      	ands	r3, r0
    
  UartRegs->BRG |= \
	  ((((uint32_t)(Handle->BGR_PCTQ) << USIC_CH_BRG_PCTQ_Pos) & \
		  	     USIC_CH_BRG_PCTQ_Msk) | \
      (((uint32_t)(Handle->BGR_DCTQ) << USIC_CH_BRG_DCTQ_Pos) & \
	     USIC_CH_BRG_DCTQ_Msk) | \
1000187c:	430b      	orrs	r3, r1
  UartRegs->FDR |= ((Handle->BGR_STEP) & USIC_CH_FDR_STEP_Msk);
          
  /* The PreDivider for CTQ, PCTQ = 0  */
  /* The Denominator for CTQ, DCTQ = 16 */
    
  UartRegs->BRG |= \
1000187e:	431a      	orrs	r2, r3
10001880:	68fb      	ldr	r3, [r7, #12]
10001882:	615a      	str	r2, [r3, #20]
  /* Configuration of USIC Shift Control */
  
  /* Transmit/Receive LSB first is selected  */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  UartRegs->SCTR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_SCTR_PDL_Pos) & \
10001884:	68fb      	ldr	r3, [r7, #12]
10001886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001888:	2281      	movs	r2, #129	; 0x81
1000188a:	0052      	lsls	r2, r2, #1
1000188c:	431a      	orrs	r2, r3
1000188e:	68fb      	ldr	r3, [r7, #12]
10001890:	635a      	str	r2, [r3, #52]	; 0x34
    USIC_CH_SCTR_PDL_Msk ) | \
    (((uint32_t)SHIFT_ONE  <<  USIC_CH_SCTR_TRM_Pos ) & USIC_CH_SCTR_TRM_Msk ));
  /* Set Word Length (WLE) & Frame Length (FLE) */
  UartRegs->SCTR |= ((((uint32_t)Handle->DataBits  << USIC_CH_SCTR_FLE_Pos) & \
10001892:	68fb      	ldr	r3, [r7, #12]
10001894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10001896:	687b      	ldr	r3, [r7, #4]
10001898:	8b9b      	ldrh	r3, [r3, #28]
1000189a:	0419      	lsls	r1, r3, #16
1000189c:	23fc      	movs	r3, #252	; 0xfc
1000189e:	039b      	lsls	r3, r3, #14
100018a0:	4019      	ands	r1, r3
                      USIC_CH_SCTR_FLE_Msk ) | \
                     (((uint32_t)Handle->DataBits  << USIC_CH_SCTR_WLE_Pos) & \
100018a2:	687b      	ldr	r3, [r7, #4]
100018a4:	8b9b      	ldrh	r3, [r3, #28]
100018a6:	0618      	lsls	r0, r3, #24
100018a8:	23f0      	movs	r3, #240	; 0xf0
100018aa:	051b      	lsls	r3, r3, #20
100018ac:	4003      	ands	r3, r0
  UartRegs->SCTR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_SCTR_PDL_Pos) & \
    USIC_CH_SCTR_PDL_Msk ) | \
    (((uint32_t)SHIFT_ONE  <<  USIC_CH_SCTR_TRM_Pos ) & USIC_CH_SCTR_TRM_Msk ));
  /* Set Word Length (WLE) & Frame Length (FLE) */
  UartRegs->SCTR |= ((((uint32_t)Handle->DataBits  << USIC_CH_SCTR_FLE_Pos) & \
                      USIC_CH_SCTR_FLE_Msk ) | \
100018ae:	430b      	orrs	r3, r1
  /* Passive Data Level (PDL) = 1 */
  UartRegs->SCTR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_SCTR_PDL_Pos) & \
    USIC_CH_SCTR_PDL_Msk ) | \
    (((uint32_t)SHIFT_ONE  <<  USIC_CH_SCTR_TRM_Pos ) & USIC_CH_SCTR_TRM_Msk ));
  /* Set Word Length (WLE) & Frame Length (FLE) */
  UartRegs->SCTR |= ((((uint32_t)Handle->DataBits  << USIC_CH_SCTR_FLE_Pos) & \
100018b0:	431a      	orrs	r2, r3
100018b2:	68fb      	ldr	r3, [r7, #12]
100018b4:	635a      	str	r2, [r3, #52]	; 0x34
       
  /* Configuration of USIC Transmit Control/Status Register */ 
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
	
  UartRegs->TCSR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_TCSR_TDEN_Pos) & \
100018b6:	68fb      	ldr	r3, [r7, #12]
100018b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100018ba:	22a0      	movs	r2, #160	; 0xa0
100018bc:	00d2      	lsls	r2, r2, #3
100018be:	431a      	orrs	r2, r3
100018c0:	68fb      	ldr	r3, [r7, #12]
100018c2:	639a      	str	r2, [r3, #56]	; 0x38
  /* Sample Mode (SMD) = 1 */
  /* 1 Stop bit is selected */   
  /* Sample Point (SP) as configured */
  /* Pulse Length (PL) = 0 */
  
  UartRegs->PCR_ASCMode |= ((((uint32_t)MASK_ONE & USIC_CH_PCR_ASCMode_SMD_Msk)) |\
100018c4:	68fb      	ldr	r3, [r7, #12]
100018c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    (((uint32_t)Handle->StopBit  << USIC_CH_PCR_ASCMode_STPB_Pos) & \
100018c8:	687b      	ldr	r3, [r7, #4]
100018ca:	7d5b      	ldrb	r3, [r3, #21]
100018cc:	0059      	lsls	r1, r3, #1
100018ce:	2302      	movs	r3, #2
100018d0:	4019      	ands	r1, r3
    USIC_CH_PCR_ASCMode_STPB_Msk) | \
    (((uint32_t)(Handle->BGR_SP) << USIC_CH_PCR_ASCMode_SP_Pos) & \
100018d2:	687b      	ldr	r3, [r7, #4]
100018d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
100018d6:	0218      	lsls	r0, r3, #8
100018d8:	23f8      	movs	r3, #248	; 0xf8
100018da:	015b      	lsls	r3, r3, #5
100018dc:	4003      	ands	r3, r0
  /* Sample Point (SP) as configured */
  /* Pulse Length (PL) = 0 */
  
  UartRegs->PCR_ASCMode |= ((((uint32_t)MASK_ONE & USIC_CH_PCR_ASCMode_SMD_Msk)) |\
    (((uint32_t)Handle->StopBit  << USIC_CH_PCR_ASCMode_STPB_Pos) & \
    USIC_CH_PCR_ASCMode_STPB_Msk) | \
100018de:	430b      	orrs	r3, r1
  /* Sample Mode (SMD) = 1 */
  /* 1 Stop bit is selected */   
  /* Sample Point (SP) as configured */
  /* Pulse Length (PL) = 0 */
  
  UartRegs->PCR_ASCMode |= ((((uint32_t)MASK_ONE & USIC_CH_PCR_ASCMode_SMD_Msk)) |\
100018e0:	4313      	orrs	r3, r2
100018e2:	2201      	movs	r2, #1
100018e4:	431a      	orrs	r2, r3
100018e6:	68fb      	ldr	r3, [r7, #12]
100018e8:	63da      	str	r2, [r3, #60]	; 0x3c
    (((uint32_t)Handle->StopBit  << USIC_CH_PCR_ASCMode_STPB_Pos) & \
    USIC_CH_PCR_ASCMode_STPB_Msk) | \
    (((uint32_t)(Handle->BGR_SP) << USIC_CH_PCR_ASCMode_SP_Pos) & \
    USIC_CH_PCR_ASCMode_SP_Msk));
      
  if(Handle->RecvNoiseEn)
100018ea:	687a      	ldr	r2, [r7, #4]
100018ec:	2324      	movs	r3, #36	; 0x24
100018ee:	5cd3      	ldrb	r3, [r2, r3]
100018f0:	2b00      	cmp	r3, #0
100018f2:	d005      	beq.n	10001900 <UART001_lInit+0xf8>
  {
   	/* Enable Receiver Noise Interrupt*/  
    UartRegs->PCR_ASCMode |=(((uint32_t)SHIFT_ONE  << USIC_CH_PCR_CTR5_Pos) & \
100018f4:	68fb      	ldr	r3, [r7, #12]
100018f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100018f8:	2220      	movs	r2, #32
100018fa:	431a      	orrs	r2, r3
100018fc:	68fb      	ldr	r3, [r7, #12]
100018fe:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  	  	  	  USIC_CH_PCR_CTR5_Msk); 
  }
  
  if(Handle->FormatErrEn)
10001900:	687a      	ldr	r2, [r7, #4]
10001902:	2325      	movs	r3, #37	; 0x25
10001904:	5cd3      	ldrb	r3, [r2, r3]
10001906:	2b00      	cmp	r3, #0
10001908:	d005      	beq.n	10001916 <UART001_lInit+0x10e>
  {
   	/* Enable Format Error Interrupt*/  
    UartRegs->PCR_ASCMode |=(((uint32_t)SHIFT_ONE  << USIC_CH_PCR_CTR6_Pos) & \
1000190a:	68fb      	ldr	r3, [r7, #12]
1000190c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000190e:	2240      	movs	r2, #64	; 0x40
10001910:	431a      	orrs	r2, r3
10001912:	68fb      	ldr	r3, [r7, #12]
10001914:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  	  	  	                             USIC_CH_PCR_CTR6_Msk); 
  }
  
  if(Handle->FrameFinEn)
10001916:	687a      	ldr	r2, [r7, #4]
10001918:	2326      	movs	r3, #38	; 0x26
1000191a:	5cd3      	ldrb	r3, [r2, r3]
1000191c:	2b00      	cmp	r3, #0
1000191e:	d005      	beq.n	1000192c <UART001_lInit+0x124>
  {
   	/* Enable Frame Finished Interrupt*/  
    UartRegs->PCR_ASCMode |=(((uint32_t)SHIFT_ONE  << USIC_CH_PCR_CTR7_Pos) & \
10001920:	68fb      	ldr	r3, [r7, #12]
10001922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001924:	2280      	movs	r2, #128	; 0x80
10001926:	431a      	orrs	r2, r3
10001928:	68fb      	ldr	r3, [r7, #12]
1000192a:	63da      	str	r2, [r3, #60]	; 0x3c
		  	                                   	  	 USIC_CH_PCR_CTR7_Msk); 
  } 
  
  if (Handle->TxFifoEn)
1000192c:	687b      	ldr	r3, [r7, #4]
1000192e:	7f9b      	ldrb	r3, [r3, #30]
10001930:	2b00      	cmp	r3, #0
10001932:	d011      	beq.n	10001958 <UART001_lInit+0x150>
  {	
	  /* Configuration of Transmitter Buffer Control Register */ 
	  UartRegs->TBCTR |= ((((uint32_t)Handle->TxLimit  << \
10001934:	68fa      	ldr	r2, [r7, #12]
10001936:	2384      	movs	r3, #132	; 0x84
10001938:	005b      	lsls	r3, r3, #1
1000193a:	58d2      	ldr	r2, [r2, r3]
1000193c:	6879      	ldr	r1, [r7, #4]
1000193e:	2320      	movs	r3, #32
10001940:	5ccb      	ldrb	r3, [r1, r3]
10001942:	0219      	lsls	r1, r3, #8
						USIC_CH_TBCTR_LIMIT_Pos ) & USIC_CH_TBCTR_LIMIT_Msk));
10001944:	23fc      	movs	r3, #252	; 0xfc
10001946:	019b      	lsls	r3, r3, #6
10001948:	400b      	ands	r3, r1
  } 
  
  if (Handle->TxFifoEn)
  {	
	  /* Configuration of Transmitter Buffer Control Register */ 
	  UartRegs->TBCTR |= ((((uint32_t)Handle->TxLimit  << \
1000194a:	1c11      	adds	r1, r2, #0
1000194c:	4319      	orrs	r1, r3
1000194e:	68fa      	ldr	r2, [r7, #12]
10001950:	2384      	movs	r3, #132	; 0x84
10001952:	005b      	lsls	r3, r3, #1
10001954:	50d1      	str	r1, [r2, r3]
10001956:	e006      	b.n	10001966 <UART001_lInit+0x15e>
						USIC_CH_TBCTR_LIMIT_Pos ) & USIC_CH_TBCTR_LIMIT_Msk));
  }
  else
  {
	  /* TBIF is set to simplify polling*/
	  UartRegs->PSR_ASCMode |= (((uint32_t)SHIFT_ONE  << USIC_CH_PSR_TBIF_Pos) & \
10001958:	68fb      	ldr	r3, [r7, #12]
1000195a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000195c:	2280      	movs	r2, #128	; 0x80
1000195e:	0192      	lsls	r2, r2, #6
10001960:	431a      	orrs	r2, r3
10001962:	68fb      	ldr	r3, [r7, #12]
10001964:	649a      	str	r2, [r3, #72]	; 0x48
	 		  (uint32_t)USIC_CH_PSR_TBIF_Msk);
  }
  
  if (Handle->RxFifoEn)
10001966:	687b      	ldr	r3, [r7, #4]
10001968:	7fdb      	ldrb	r3, [r3, #31]
1000196a:	2b00      	cmp	r3, #0
1000196c:	d013      	beq.n	10001996 <UART001_lInit+0x18e>
  {
	  /* Configuration of Receiver Buffer Control Register */ 
	  UartRegs->RBCTR |= ((((uint32_t)Handle->RxLimit  << \
1000196e:	68fa      	ldr	r2, [r7, #12]
10001970:	2386      	movs	r3, #134	; 0x86
10001972:	005b      	lsls	r3, r3, #1
10001974:	58d2      	ldr	r2, [r2, r3]
10001976:	6879      	ldr	r1, [r7, #4]
10001978:	2321      	movs	r3, #33	; 0x21
1000197a:	5ccb      	ldrb	r3, [r1, r3]
1000197c:	0219      	lsls	r1, r3, #8
						   USIC_CH_RBCTR_LIMIT_Pos) & USIC_CH_RBCTR_LIMIT_Msk) | \
1000197e:	23fc      	movs	r3, #252	; 0xfc
10001980:	019b      	lsls	r3, r3, #6
10001982:	400b      	ands	r3, r1
  }
  
  if (Handle->RxFifoEn)
  {
	  /* Configuration of Receiver Buffer Control Register */ 
	  UartRegs->RBCTR |= ((((uint32_t)Handle->RxLimit  << \
10001984:	4313      	orrs	r3, r2
10001986:	2280      	movs	r2, #128	; 0x80
10001988:	0552      	lsls	r2, r2, #21
1000198a:	1c11      	adds	r1, r2, #0
1000198c:	4319      	orrs	r1, r3
1000198e:	68fa      	ldr	r2, [r7, #12]
10001990:	2386      	movs	r3, #134	; 0x86
10001992:	005b      	lsls	r3, r3, #1
10001994:	50d1      	str	r1, [r2, r3]
							(((uint32_t)SHIFT_ONE << USIC_CH_RBCTR_LOF_Pos) & \
						   USIC_CH_RBCTR_LOF_Msk));
  }else{}
  
  /* Configuration of Channel Control Register */ 
  UartRegs->CCR |= (((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
10001996:	68fb      	ldr	r3, [r7, #12]
10001998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                    (((uint32_t)Handle->Parity  << USIC_CH_CCR_PM_Pos) & \
1000199a:	687b      	ldr	r3, [r7, #4]
1000199c:	7d9b      	ldrb	r3, [r3, #22]
1000199e:	0219      	lsls	r1, r3, #8
100019a0:	23c0      	movs	r3, #192	; 0xc0
100019a2:	009b      	lsls	r3, r3, #2
100019a4:	400b      	ands	r3, r1
							(((uint32_t)SHIFT_ONE << USIC_CH_RBCTR_LOF_Pos) & \
						   USIC_CH_RBCTR_LOF_Msk));
  }else{}
  
  /* Configuration of Channel Control Register */ 
  UartRegs->CCR |= (((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
100019a6:	4313      	orrs	r3, r2
100019a8:	2202      	movs	r2, #2
100019aa:	431a      	orrs	r2, r3
100019ac:	68fb      	ldr	r3, [r7, #12]
100019ae:	641a      	str	r2, [r3, #64]	; 0x40
                    (((uint32_t)Handle->Parity  << USIC_CH_CCR_PM_Pos) & \
                     USIC_CH_CCR_PM_Msk));

}
100019b0:	46bd      	mov	sp, r7
100019b2:	b004      	add	sp, #16
100019b4:	bd80      	pop	{r7, pc}
100019b6:	46c0      	nop			; (mov r8, r8)
100019b8:	03ff0000 	.word	0x03ff0000

100019bc <UART001_lConfigTXPin>:
 * @return  None <BR>
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/ 
void UART001_lConfigTXPin(const UART001_HandleType* Handle)
{
100019bc:	b590      	push	{r4, r7, lr}
100019be:	b085      	sub	sp, #20
100019c0:	af00      	add	r7, sp, #0
100019c2:	6078      	str	r0, [r7, #4]
	uint32_t TempPortPin;

    /* set the TX portpin to '1' */
    Handle->PinHandle.TX_PortBase->OMR |= (uint32_t)SHIFT_ONE << \
100019c4:	687b      	ldr	r3, [r7, #4]
100019c6:	685b      	ldr	r3, [r3, #4]
100019c8:	687a      	ldr	r2, [r7, #4]
100019ca:	6852      	ldr	r2, [r2, #4]
100019cc:	6851      	ldr	r1, [r2, #4]
   		                                (uint32_t)Handle->PinHandle.TX_Pin;
100019ce:	687a      	ldr	r2, [r7, #4]
100019d0:	7a12      	ldrb	r2, [r2, #8]
void UART001_lConfigTXPin(const UART001_HandleType* Handle)
{
	uint32_t TempPortPin;

    /* set the TX portpin to '1' */
    Handle->PinHandle.TX_PortBase->OMR |= (uint32_t)SHIFT_ONE << \
100019d2:	2001      	movs	r0, #1
100019d4:	1c04      	adds	r4, r0, #0
100019d6:	4094      	lsls	r4, r2
100019d8:	1c22      	adds	r2, r4, #0
100019da:	430a      	orrs	r2, r1
100019dc:	605a      	str	r2, [r3, #4]
   		                                (uint32_t)Handle->PinHandle.TX_Pin;
     
	/* Configure TX portpin as Open-drain General-purpose output */
    TempPortPin = (uint32_t)Handle->PinHandle.TX_Pin;
100019de:	687b      	ldr	r3, [r7, #4]
100019e0:	7a1b      	ldrb	r3, [r3, #8]
100019e2:	60fb      	str	r3, [r7, #12]

    if (FIRST_NIBBLE > TempPortPin)
100019e4:	68fb      	ldr	r3, [r7, #12]
100019e6:	2b03      	cmp	r3, #3
100019e8:	d80e      	bhi.n	10001a08 <UART001_lConfigTXPin+0x4c>
    {
   	  Handle->PinHandle.TX_PortBase->IOCR0 |= \
100019ea:	687b      	ldr	r3, [r7, #4]
100019ec:	685b      	ldr	r3, [r3, #4]
100019ee:	687a      	ldr	r2, [r7, #4]
100019f0:	6852      	ldr	r2, [r2, #4]
100019f2:	6911      	ldr	r1, [r2, #16]
   			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
100019f4:	68fa      	ldr	r2, [r7, #12]
100019f6:	00d2      	lsls	r2, r2, #3
    TempPortPin = (uint32_t)Handle->PinHandle.TX_Pin;

    if (FIRST_NIBBLE > TempPortPin)
    {
   	  Handle->PinHandle.TX_PortBase->IOCR0 |= \
   			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
100019f8:	3203      	adds	r2, #3
100019fa:	2018      	movs	r0, #24
100019fc:	1c04      	adds	r4, r0, #0
100019fe:	4094      	lsls	r4, r2
10001a00:	1c22      	adds	r2, r4, #0
	/* Configure TX portpin as Open-drain General-purpose output */
    TempPortPin = (uint32_t)Handle->PinHandle.TX_Pin;

    if (FIRST_NIBBLE > TempPortPin)
    {
   	  Handle->PinHandle.TX_PortBase->IOCR0 |= \
10001a02:	430a      	orrs	r2, r1
10001a04:	611a      	str	r2, [r3, #16]
10001a06:	e046      	b.n	10001a96 <UART001_lConfigTXPin+0xda>
   			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
    }
    else if ((FIRST_NIBBLE <= TempPortPin) && (SECOND_NIBBLE > TempPortPin))
10001a08:	68fb      	ldr	r3, [r7, #12]
10001a0a:	2b03      	cmp	r3, #3
10001a0c:	d914      	bls.n	10001a38 <UART001_lConfigTXPin+0x7c>
10001a0e:	68fb      	ldr	r3, [r7, #12]
10001a10:	2b07      	cmp	r3, #7
10001a12:	d811      	bhi.n	10001a38 <UART001_lConfigTXPin+0x7c>
    {
	  TempPortPin = TempPortPin - FIRST_NIBBLE;
10001a14:	68fb      	ldr	r3, [r7, #12]
10001a16:	3b04      	subs	r3, #4
10001a18:	60fb      	str	r3, [r7, #12]
	  Handle->PinHandle.TX_PortBase->IOCR4 |= \
10001a1a:	687b      	ldr	r3, [r7, #4]
10001a1c:	685b      	ldr	r3, [r3, #4]
10001a1e:	687a      	ldr	r2, [r7, #4]
10001a20:	6852      	ldr	r2, [r2, #4]
10001a22:	6951      	ldr	r1, [r2, #20]
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
10001a24:	68fa      	ldr	r2, [r7, #12]
10001a26:	00d2      	lsls	r2, r2, #3
    }
    else if ((FIRST_NIBBLE <= TempPortPin) && (SECOND_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - FIRST_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR4 |= \
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
10001a28:	3203      	adds	r2, #3
10001a2a:	2018      	movs	r0, #24
10001a2c:	1c04      	adds	r4, r0, #0
10001a2e:	4094      	lsls	r4, r2
10001a30:	1c22      	adds	r2, r4, #0
							(TempPortPin * 8U)));
    }
    else if ((FIRST_NIBBLE <= TempPortPin) && (SECOND_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - FIRST_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR4 |= \
10001a32:	430a      	orrs	r2, r1
10001a34:	615a      	str	r2, [r3, #20]
10001a36:	e02e      	b.n	10001a96 <UART001_lConfigTXPin+0xda>
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
    }
    else if ((SECOND_NIBBLE <= TempPortPin) && (THIRD_NIBBLE > TempPortPin))
10001a38:	68fb      	ldr	r3, [r7, #12]
10001a3a:	2b07      	cmp	r3, #7
10001a3c:	d914      	bls.n	10001a68 <UART001_lConfigTXPin+0xac>
10001a3e:	68fb      	ldr	r3, [r7, #12]
10001a40:	2b0b      	cmp	r3, #11
10001a42:	d811      	bhi.n	10001a68 <UART001_lConfigTXPin+0xac>
    {
 	  TempPortPin = TempPortPin - SECOND_NIBBLE;
10001a44:	68fb      	ldr	r3, [r7, #12]
10001a46:	3b08      	subs	r3, #8
10001a48:	60fb      	str	r3, [r7, #12]
 	  Handle->PinHandle.TX_PortBase->IOCR8 |= \
10001a4a:	687b      	ldr	r3, [r7, #4]
10001a4c:	685b      	ldr	r3, [r3, #4]
10001a4e:	687a      	ldr	r2, [r7, #4]
10001a50:	6852      	ldr	r2, [r2, #4]
10001a52:	6991      	ldr	r1, [r2, #24]
 			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
10001a54:	68fa      	ldr	r2, [r7, #12]
10001a56:	00d2      	lsls	r2, r2, #3
    }
    else if ((SECOND_NIBBLE <= TempPortPin) && (THIRD_NIBBLE > TempPortPin))
    {
 	  TempPortPin = TempPortPin - SECOND_NIBBLE;
 	  Handle->PinHandle.TX_PortBase->IOCR8 |= \
 			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
10001a58:	3203      	adds	r2, #3
10001a5a:	2018      	movs	r0, #24
10001a5c:	1c04      	adds	r4, r0, #0
10001a5e:	4094      	lsls	r4, r2
10001a60:	1c22      	adds	r2, r4, #0
							(TempPortPin * 8U)));
    }
    else if ((SECOND_NIBBLE <= TempPortPin) && (THIRD_NIBBLE > TempPortPin))
    {
 	  TempPortPin = TempPortPin - SECOND_NIBBLE;
 	  Handle->PinHandle.TX_PortBase->IOCR8 |= \
10001a62:	430a      	orrs	r2, r1
10001a64:	619a      	str	r2, [r3, #24]
10001a66:	e016      	b.n	10001a96 <UART001_lConfigTXPin+0xda>
 			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
    }
    else if ((THIRD_NIBBLE <= TempPortPin) && (FOURTH_NIBBLE > TempPortPin))
10001a68:	68fb      	ldr	r3, [r7, #12]
10001a6a:	2b0b      	cmp	r3, #11
10001a6c:	d913      	bls.n	10001a96 <UART001_lConfigTXPin+0xda>
10001a6e:	68fb      	ldr	r3, [r7, #12]
10001a70:	2b0f      	cmp	r3, #15
10001a72:	d810      	bhi.n	10001a96 <UART001_lConfigTXPin+0xda>
    {
	  TempPortPin = TempPortPin - THIRD_NIBBLE;
10001a74:	68fb      	ldr	r3, [r7, #12]
10001a76:	3b0c      	subs	r3, #12
10001a78:	60fb      	str	r3, [r7, #12]
	  Handle->PinHandle.TX_PortBase->IOCR12 |= \
10001a7a:	687b      	ldr	r3, [r7, #4]
10001a7c:	685b      	ldr	r3, [r3, #4]
10001a7e:	687a      	ldr	r2, [r7, #4]
10001a80:	6852      	ldr	r2, [r2, #4]
10001a82:	69d1      	ldr	r1, [r2, #28]
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
10001a84:	68fa      	ldr	r2, [r7, #12]
10001a86:	00d2      	lsls	r2, r2, #3
    }
    else if ((THIRD_NIBBLE <= TempPortPin) && (FOURTH_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - THIRD_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR12 |= \
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
10001a88:	3203      	adds	r2, #3
10001a8a:	2018      	movs	r0, #24
10001a8c:	1c04      	adds	r4, r0, #0
10001a8e:	4094      	lsls	r4, r2
10001a90:	1c22      	adds	r2, r4, #0
							(TempPortPin * 8U)));
    }
    else if ((THIRD_NIBBLE <= TempPortPin) && (FOURTH_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - THIRD_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR12 |= \
10001a92:	430a      	orrs	r2, r1
10001a94:	61da      	str	r2, [r3, #28]
							(TempPortPin * 8U)));
    }
	else
	{}

}
10001a96:	46bd      	mov	sp, r7
10001a98:	b005      	add	sp, #20
10001a9a:	bd90      	pop	{r4, r7, pc}

10001a9c <UART001_labsRealType>:
 * 				 -ve float value if Number is >= 0.0 <BR>
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/
float UART001_labsRealType(float Number)
{
10001a9c:	b580      	push	{r7, lr}
10001a9e:	b084      	sub	sp, #16
10001aa0:	af00      	add	r7, sp, #0
10001aa2:	6078      	str	r0, [r7, #4]
   float return_value;
	if (Number < 0.0F){
10001aa4:	6878      	ldr	r0, [r7, #4]
10001aa6:	2100      	movs	r1, #0
10001aa8:	f001 fc74 	bl	10003394 <__aeabi_fcmplt>
10001aac:	1c03      	adds	r3, r0, #0
10001aae:	2b00      	cmp	r3, #0
10001ab0:	d005      	beq.n	10001abe <UART001_labsRealType+0x22>
		return_value = -Number;
10001ab2:	687b      	ldr	r3, [r7, #4]
10001ab4:	2280      	movs	r2, #128	; 0x80
10001ab6:	0612      	lsls	r2, r2, #24
10001ab8:	4053      	eors	r3, r2
10001aba:	60fb      	str	r3, [r7, #12]
10001abc:	e001      	b.n	10001ac2 <UART001_labsRealType+0x26>
	}
	else{
		return_value = Number;
10001abe:	687b      	ldr	r3, [r7, #4]
10001ac0:	60fb      	str	r3, [r7, #12]
	}
	return return_value;
10001ac2:	68fb      	ldr	r3, [r7, #12]
}
10001ac4:	1c18      	adds	r0, r3, #0
10001ac6:	46bd      	mov	sp, r7
10001ac8:	b004      	add	sp, #16
10001aca:	bd80      	pop	{r7, pc}

10001acc <UART001_lConfigureBaudRate>:
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/
void UART001_lConfigureBaudRate\
                              (uint32_t BaudRate,uint32_t* Pdiv,uint32_t* Step)
{
10001acc:	b5b0      	push	{r4, r5, r7, lr}
10001ace:	b0ae      	sub	sp, #184	; 0xb8
10001ad0:	af00      	add	r7, sp, #0
10001ad2:	60f8      	str	r0, [r7, #12]
10001ad4:	60b9      	str	r1, [r7, #8]
10001ad6:	607a      	str	r2, [r7, #4]
	uint32_t fdr_step = 0x00U;
10001ad8:	2300      	movs	r3, #0
10001ada:	20b4      	movs	r0, #180	; 0xb4
10001adc:	19c0      	adds	r0, r0, r7
10001ade:	6003      	str	r3, [r0, #0]
	uint32_t brg_pdiv = 0x00U;
10001ae0:	2300      	movs	r3, #0
10001ae2:	21b0      	movs	r1, #176	; 0xb0
10001ae4:	19c9      	adds	r1, r1, r7
10001ae6:	600b      	str	r3, [r1, #0]
	uint32_t divisor_in = BaudRate ;
10001ae8:	68fb      	ldr	r3, [r7, #12]
10001aea:	22ac      	movs	r2, #172	; 0xac
10001aec:	19d2      	adds	r2, r2, r7
10001aee:	6013      	str	r3, [r2, #0]
	/* fPB / 1024 * (Brg_dctq + 1) */
	uint32_t dividend_in = 0U;
10001af0:	2300      	movs	r3, #0
10001af2:	20a8      	movs	r0, #168	; 0xa8
10001af4:	19c0      	adds	r0, r0, r7
10001af6:	6003      	str	r3, [r0, #0]
	uint32_t divisor_array[4];
	uint32_t dividend_array[4];
	uint32_t div_array[4];
	uint32_t max, frac,divisor1,divisor2,dividend1,dividend2;
	uint32_t array_count,array_count_1,array_count_2;
	uint32_t do_while_break = 0U;
10001af8:	2300      	movs	r3, #0
10001afa:	2188      	movs	r1, #136	; 0x88
10001afc:	19c9      	adds	r1, r1, r7
10001afe:	600b      	str	r3, [r1, #0]
	uint32_t temp = 0U;
10001b00:	2300      	movs	r3, #0
10001b02:	67fb      	str	r3, [r7, #124]	; 0x7c
	float div_factor;
	uint32_t loop_cnt;
	bool swapped;
	dividend_in = (uint32_t)((uint32_t)(UART001_CLOCK * 1000000)/ \
10001b04:	4be0      	ldr	r3, [pc, #896]	; (10001e88 <UART001_lConfigureBaudRate+0x3bc>)
10001b06:	22a8      	movs	r2, #168	; 0xa8
10001b08:	19d2      	adds	r2, r2, r7
10001b0a:	6013      	str	r3, [r2, #0]
                    	(UART001_MAX_VALUE * UART001_DCTQ_VALUE)); 
	/* swap if divisor_in/dividend_in > max_divisor/max_dividend */
	div_factor = (float) divisor_in/(float) dividend_in;
10001b0c:	23ac      	movs	r3, #172	; 0xac
10001b0e:	19db      	adds	r3, r3, r7
10001b10:	6818      	ldr	r0, [r3, #0]
10001b12:	f002 f855 	bl	10003bc0 <__aeabi_ui2f>
10001b16:	1c04      	adds	r4, r0, #0
10001b18:	21a8      	movs	r1, #168	; 0xa8
10001b1a:	19c9      	adds	r1, r1, r7
10001b1c:	6808      	ldr	r0, [r1, #0]
10001b1e:	f002 f84f 	bl	10003bc0 <__aeabi_ui2f>
10001b22:	1c03      	adds	r3, r0, #0
10001b24:	1c20      	adds	r0, r4, #0
10001b26:	1c19      	adds	r1, r3, #0
10001b28:	f001 fc7e 	bl	10003428 <__aeabi_fdiv>
10001b2c:	1c03      	adds	r3, r0, #0
10001b2e:	67bb      	str	r3, [r7, #120]	; 0x78
	if ( div_factor > 1.0F)
10001b30:	6fb8      	ldr	r0, [r7, #120]	; 0x78
10001b32:	21fe      	movs	r1, #254	; 0xfe
10001b34:	0589      	lsls	r1, r1, #22
10001b36:	f001 fc41 	bl	100033bc <__aeabi_fcmpgt>
10001b3a:	1c03      	adds	r3, r0, #0
10001b3c:	2b00      	cmp	r3, #0
10001b3e:	d017      	beq.n	10001b70 <UART001_lConfigureBaudRate+0xa4>
	{
		max = UART001_MAX_VALUE;
10001b40:	2380      	movs	r3, #128	; 0x80
10001b42:	00db      	lsls	r3, r3, #3
10001b44:	22a4      	movs	r2, #164	; 0xa4
10001b46:	19d2      	adds	r2, r2, r7
10001b48:	6013      	str	r3, [r2, #0]
		swapped = 1U;
10001b4a:	1c3b      	adds	r3, r7, #0
10001b4c:	3383      	adds	r3, #131	; 0x83
10001b4e:	2201      	movs	r2, #1
10001b50:	701a      	strb	r2, [r3, #0]
		temp = divisor_in;
10001b52:	20ac      	movs	r0, #172	; 0xac
10001b54:	19c0      	adds	r0, r0, r7
10001b56:	6803      	ldr	r3, [r0, #0]
10001b58:	67fb      	str	r3, [r7, #124]	; 0x7c
		divisor_in = dividend_in;
10001b5a:	21a8      	movs	r1, #168	; 0xa8
10001b5c:	19c9      	adds	r1, r1, r7
10001b5e:	680b      	ldr	r3, [r1, #0]
10001b60:	22ac      	movs	r2, #172	; 0xac
10001b62:	19d2      	adds	r2, r2, r7
10001b64:	6013      	str	r3, [r2, #0]
		dividend_in = temp;
10001b66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10001b68:	20a8      	movs	r0, #168	; 0xa8
10001b6a:	19c0      	adds	r0, r0, r7
10001b6c:	6003      	str	r3, [r0, #0]
10001b6e:	e008      	b.n	10001b82 <UART001_lConfigureBaudRate+0xb6>
	}
	else
	{
		swapped = 0U;
10001b70:	1c3b      	adds	r3, r7, #0
10001b72:	3383      	adds	r3, #131	; 0x83
10001b74:	2200      	movs	r2, #0
10001b76:	701a      	strb	r2, [r3, #0]
		max = UART001_MAX_VALUE;
10001b78:	2380      	movs	r3, #128	; 0x80
10001b7a:	00db      	lsls	r3, r3, #3
10001b7c:	21a4      	movs	r1, #164	; 0xa4
10001b7e:	19c9      	adds	r1, r1, r7
10001b80:	600b      	str	r3, [r1, #0]
	}
	/*Init parameters*/
	loop_cnt = 0U;
10001b82:	2300      	movs	r3, #0
10001b84:	2284      	movs	r2, #132	; 0x84
10001b86:	19d2      	adds	r2, r2, r7
10001b88:	6013      	str	r3, [r2, #0]
	array_count = 0U;
10001b8a:	2300      	movs	r3, #0
10001b8c:	2090      	movs	r0, #144	; 0x90
10001b8e:	19c0      	adds	r0, r0, r7
10001b90:	6003      	str	r3, [r0, #0]
	array_count_1 = 0U;
10001b92:	2300      	movs	r3, #0
10001b94:	218c      	movs	r1, #140	; 0x8c
10001b96:	19c9      	adds	r1, r1, r7
10001b98:	600b      	str	r3, [r1, #0]
	divisor[0] = divisor_in;
10001b9a:	1c3b      	adds	r3, r7, #0
10001b9c:	3360      	adds	r3, #96	; 0x60
10001b9e:	20ac      	movs	r0, #172	; 0xac
10001ba0:	19c0      	adds	r0, r0, r7
10001ba2:	6802      	ldr	r2, [r0, #0]
10001ba4:	601a      	str	r2, [r3, #0]
	remainder[0] = dividend_in;
10001ba6:	1c3b      	adds	r3, r7, #0
10001ba8:	3340      	adds	r3, #64	; 0x40
10001baa:	21a8      	movs	r1, #168	; 0xa8
10001bac:	19c9      	adds	r1, r1, r7
10001bae:	680a      	ldr	r2, [r1, #0]
10001bb0:	601a      	str	r2, [r3, #0]
	divisor_array[0] = 1U;
10001bb2:	1c3b      	adds	r3, r7, #0
10001bb4:	3330      	adds	r3, #48	; 0x30
10001bb6:	2201      	movs	r2, #1
10001bb8:	601a      	str	r2, [r3, #0]
	dividend_array[0] = 0U;
10001bba:	1c3b      	adds	r3, r7, #0
10001bbc:	3320      	adds	r3, #32
10001bbe:	2200      	movs	r2, #0
10001bc0:	601a      	str	r2, [r3, #0]
	do {
			++loop_cnt;
10001bc2:	2284      	movs	r2, #132	; 0x84
10001bc4:	19d2      	adds	r2, r2, r7
10001bc6:	6813      	ldr	r3, [r2, #0]
10001bc8:	3301      	adds	r3, #1
10001bca:	2084      	movs	r0, #132	; 0x84
10001bcc:	19c0      	adds	r0, r0, r7
10001bce:	6003      	str	r3, [r0, #0]
			array_count_2 = array_count_1; /* on first loop is not used */
10001bd0:	218c      	movs	r1, #140	; 0x8c
10001bd2:	19c9      	adds	r1, r1, r7
10001bd4:	680b      	ldr	r3, [r1, #0]
10001bd6:	677b      	str	r3, [r7, #116]	; 0x74
			array_count_1 = array_count;
10001bd8:	2290      	movs	r2, #144	; 0x90
10001bda:	19d2      	adds	r2, r2, r7
10001bdc:	6813      	ldr	r3, [r2, #0]
10001bde:	208c      	movs	r0, #140	; 0x8c
10001be0:	19c0      	adds	r0, r0, r7
10001be2:	6003      	str	r3, [r0, #0]
			array_count = loop_cnt % 4U;
10001be4:	2184      	movs	r1, #132	; 0x84
10001be6:	19c9      	adds	r1, r1, r7
10001be8:	680a      	ldr	r2, [r1, #0]
10001bea:	2303      	movs	r3, #3
10001bec:	4013      	ands	r3, r2
10001bee:	2290      	movs	r2, #144	; 0x90
10001bf0:	19d2      	adds	r2, r2, r7
10001bf2:	6013      	str	r3, [r2, #0]
			dividend[array_count] = divisor[array_count_1];
10001bf4:	1c3b      	adds	r3, r7, #0
10001bf6:	3360      	adds	r3, #96	; 0x60
10001bf8:	208c      	movs	r0, #140	; 0x8c
10001bfa:	19c0      	adds	r0, r0, r7
10001bfc:	6802      	ldr	r2, [r0, #0]
10001bfe:	0092      	lsls	r2, r2, #2
10001c00:	58d1      	ldr	r1, [r2, r3]
10001c02:	1c3b      	adds	r3, r7, #0
10001c04:	3350      	adds	r3, #80	; 0x50
10001c06:	2090      	movs	r0, #144	; 0x90
10001c08:	19c0      	adds	r0, r0, r7
10001c0a:	6802      	ldr	r2, [r0, #0]
10001c0c:	0092      	lsls	r2, r2, #2
10001c0e:	50d1      	str	r1, [r2, r3]
			
			divisor[array_count] = remainder[array_count_1];
10001c10:	1c3b      	adds	r3, r7, #0
10001c12:	3340      	adds	r3, #64	; 0x40
10001c14:	218c      	movs	r1, #140	; 0x8c
10001c16:	19c9      	adds	r1, r1, r7
10001c18:	680a      	ldr	r2, [r1, #0]
10001c1a:	0092      	lsls	r2, r2, #2
10001c1c:	58d1      	ldr	r1, [r2, r3]
10001c1e:	1c3b      	adds	r3, r7, #0
10001c20:	3360      	adds	r3, #96	; 0x60
10001c22:	2090      	movs	r0, #144	; 0x90
10001c24:	19c0      	adds	r0, r0, r7
10001c26:	6802      	ldr	r2, [r0, #0]
10001c28:	0092      	lsls	r2, r2, #2
10001c2a:	50d1      	str	r1, [r2, r3]
			
			div_array[array_count] = \
			                       dividend[array_count] / divisor[array_count];
10001c2c:	1c3b      	adds	r3, r7, #0
10001c2e:	3350      	adds	r3, #80	; 0x50
10001c30:	2190      	movs	r1, #144	; 0x90
10001c32:	19c9      	adds	r1, r1, r7
10001c34:	680a      	ldr	r2, [r1, #0]
10001c36:	0092      	lsls	r2, r2, #2
10001c38:	58d2      	ldr	r2, [r2, r3]
10001c3a:	1c3b      	adds	r3, r7, #0
10001c3c:	3360      	adds	r3, #96	; 0x60
10001c3e:	2090      	movs	r0, #144	; 0x90
10001c40:	19c0      	adds	r0, r0, r7
10001c42:	6801      	ldr	r1, [r0, #0]
10001c44:	0089      	lsls	r1, r1, #2
10001c46:	58cb      	ldr	r3, [r1, r3]
10001c48:	1c10      	adds	r0, r2, #0
10001c4a:	1c19      	adds	r1, r3, #0
10001c4c:	f001 fb40 	bl	100032d0 <__aeabi_uidiv>
10001c50:	1c03      	adds	r3, r0, #0
10001c52:	1c19      	adds	r1, r3, #0
			array_count = loop_cnt % 4U;
			dividend[array_count] = divisor[array_count_1];
			
			divisor[array_count] = remainder[array_count_1];
			
			div_array[array_count] = \
10001c54:	1c3b      	adds	r3, r7, #0
10001c56:	3310      	adds	r3, #16
10001c58:	2090      	movs	r0, #144	; 0x90
10001c5a:	19c0      	adds	r0, r0, r7
10001c5c:	6802      	ldr	r2, [r0, #0]
10001c5e:	0092      	lsls	r2, r2, #2
10001c60:	50d1      	str	r1, [r2, r3]
			                       dividend[array_count] / divisor[array_count];
			
			remainder[array_count] = \
			                       dividend[array_count] % divisor[array_count];
10001c62:	1c3b      	adds	r3, r7, #0
10001c64:	3350      	adds	r3, #80	; 0x50
10001c66:	2190      	movs	r1, #144	; 0x90
10001c68:	19c9      	adds	r1, r1, r7
10001c6a:	680a      	ldr	r2, [r1, #0]
10001c6c:	0092      	lsls	r2, r2, #2
10001c6e:	58d2      	ldr	r2, [r2, r3]
10001c70:	1c3b      	adds	r3, r7, #0
10001c72:	3360      	adds	r3, #96	; 0x60
10001c74:	2090      	movs	r0, #144	; 0x90
10001c76:	19c0      	adds	r0, r0, r7
10001c78:	6801      	ldr	r1, [r0, #0]
10001c7a:	0089      	lsls	r1, r1, #2
10001c7c:	58cb      	ldr	r3, [r1, r3]
10001c7e:	1c10      	adds	r0, r2, #0
10001c80:	1c19      	adds	r1, r3, #0
10001c82:	f001 fb69 	bl	10003358 <__aeabi_uidivmod>
10001c86:	1c0b      	adds	r3, r1, #0
10001c88:	1c19      	adds	r1, r3, #0
			divisor[array_count] = remainder[array_count_1];
			
			div_array[array_count] = \
			                       dividend[array_count] / divisor[array_count];
			
			remainder[array_count] = \
10001c8a:	1c3b      	adds	r3, r7, #0
10001c8c:	3340      	adds	r3, #64	; 0x40
10001c8e:	2090      	movs	r0, #144	; 0x90
10001c90:	19c0      	adds	r0, r0, r7
10001c92:	6802      	ldr	r2, [r0, #0]
10001c94:	0092      	lsls	r2, r2, #2
10001c96:	50d1      	str	r1, [r2, r3]
			                       dividend[array_count] % divisor[array_count];
			
			/* This executed only on first loop */
			if (loop_cnt == 1U)
10001c98:	2184      	movs	r1, #132	; 0x84
10001c9a:	19c9      	adds	r1, r1, r7
10001c9c:	680b      	ldr	r3, [r1, #0]
10001c9e:	2b01      	cmp	r3, #1
10001ca0:	d10a      	bne.n	10001cb8 <UART001_lConfigureBaudRate+0x1ec>
			{ 
				divisor_array[1] = div_array[1];
10001ca2:	1c3b      	adds	r3, r7, #0
10001ca4:	3310      	adds	r3, #16
10001ca6:	685a      	ldr	r2, [r3, #4]
10001ca8:	1c3b      	adds	r3, r7, #0
10001caa:	3330      	adds	r3, #48	; 0x30
10001cac:	605a      	str	r2, [r3, #4]
				dividend_array[1] = 1U;
10001cae:	1c3b      	adds	r3, r7, #0
10001cb0:	3320      	adds	r3, #32
10001cb2:	2201      	movs	r2, #1
10001cb4:	605a      	str	r2, [r3, #4]
10001cb6:	e037      	b.n	10001d28 <UART001_lConfigureBaudRate+0x25c>
			}
			else
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
10001cb8:	1c3b      	adds	r3, r7, #0
10001cba:	3310      	adds	r3, #16
10001cbc:	2090      	movs	r0, #144	; 0x90
10001cbe:	19c0      	adds	r0, r0, r7
10001cc0:	6802      	ldr	r2, [r0, #0]
10001cc2:	0092      	lsls	r2, r2, #2
10001cc4:	58d3      	ldr	r3, [r2, r3]
10001cc6:	1c3a      	adds	r2, r7, #0
10001cc8:	3230      	adds	r2, #48	; 0x30
10001cca:	208c      	movs	r0, #140	; 0x8c
10001ccc:	19c0      	adds	r0, r0, r7
10001cce:	6801      	ldr	r1, [r0, #0]
10001cd0:	0089      	lsls	r1, r1, #2
10001cd2:	588a      	ldr	r2, [r1, r2]
10001cd4:	435a      	muls	r2, r3
				       divisor_array[array_count_2];
10001cd6:	1c3b      	adds	r3, r7, #0
10001cd8:	3330      	adds	r3, #48	; 0x30
10001cda:	6f79      	ldr	r1, [r7, #116]	; 0x74
10001cdc:	0089      	lsls	r1, r1, #2
10001cde:	58cb      	ldr	r3, [r1, r3]
				dividend_array[1] = 1U;
			}
			else
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
10001ce0:	18d1      	adds	r1, r2, r3
				divisor_array[1] = div_array[1];
				dividend_array[1] = 1U;
			}
			else
			{
				divisor_array[array_count] = \
10001ce2:	1c3b      	adds	r3, r7, #0
10001ce4:	3330      	adds	r3, #48	; 0x30
10001ce6:	2090      	movs	r0, #144	; 0x90
10001ce8:	19c0      	adds	r0, r0, r7
10001cea:	6802      	ldr	r2, [r0, #0]
10001cec:	0092      	lsls	r2, r2, #2
10001cee:	50d1      	str	r1, [r2, r3]
				      (div_array[array_count] * divisor_array[array_count_1]) + \
				       divisor_array[array_count_2];
				dividend_array[array_count] = \
				      (div_array[array_count] * dividend_array[array_count_1]) + \
10001cf0:	1c3b      	adds	r3, r7, #0
10001cf2:	3310      	adds	r3, #16
10001cf4:	2190      	movs	r1, #144	; 0x90
10001cf6:	19c9      	adds	r1, r1, r7
10001cf8:	680a      	ldr	r2, [r1, #0]
10001cfa:	0092      	lsls	r2, r2, #2
10001cfc:	58d3      	ldr	r3, [r2, r3]
10001cfe:	1c3a      	adds	r2, r7, #0
10001d00:	3220      	adds	r2, #32
10001d02:	208c      	movs	r0, #140	; 0x8c
10001d04:	19c0      	adds	r0, r0, r7
10001d06:	6801      	ldr	r1, [r0, #0]
10001d08:	0089      	lsls	r1, r1, #2
10001d0a:	588a      	ldr	r2, [r1, r2]
10001d0c:	435a      	muls	r2, r3
				       dividend_array[array_count_2];
10001d0e:	1c3b      	adds	r3, r7, #0
10001d10:	3320      	adds	r3, #32
10001d12:	6f79      	ldr	r1, [r7, #116]	; 0x74
10001d14:	0089      	lsls	r1, r1, #2
10001d16:	58cb      	ldr	r3, [r1, r3]
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
				       divisor_array[array_count_2];
				dividend_array[array_count] = \
				      (div_array[array_count] * dividend_array[array_count_1]) + \
10001d18:	18d1      	adds	r1, r2, r3
			else
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
				       divisor_array[array_count_2];
				dividend_array[array_count] = \
10001d1a:	1c3b      	adds	r3, r7, #0
10001d1c:	3320      	adds	r3, #32
10001d1e:	2090      	movs	r0, #144	; 0x90
10001d20:	19c0      	adds	r0, r0, r7
10001d22:	6802      	ldr	r2, [r0, #0]
10001d24:	0092      	lsls	r2, r2, #2
10001d26:	50d1      	str	r1, [r2, r3]
				      (div_array[array_count] * dividend_array[array_count_1]) + \
				       dividend_array[array_count_2];
			}
			if (dividend_array[array_count] > max) 
10001d28:	1c3b      	adds	r3, r7, #0
10001d2a:	3320      	adds	r3, #32
10001d2c:	2190      	movs	r1, #144	; 0x90
10001d2e:	19c9      	adds	r1, r1, r7
10001d30:	680a      	ldr	r2, [r1, #0]
10001d32:	0092      	lsls	r2, r2, #2
10001d34:	58d2      	ldr	r2, [r2, r3]
10001d36:	20a4      	movs	r0, #164	; 0xa4
10001d38:	19c0      	adds	r0, r0, r7
10001d3a:	6803      	ldr	r3, [r0, #0]
10001d3c:	429a      	cmp	r2, r3
10001d3e:	d800      	bhi.n	10001d42 <UART001_lConfigureBaudRate+0x276>
10001d40:	e0fd      	b.n	10001f3e <UART001_lConfigureBaudRate+0x472>
			{
				divisor1 = divisor_array[array_count_1];
10001d42:	1c3b      	adds	r3, r7, #0
10001d44:	3330      	adds	r3, #48	; 0x30
10001d46:	218c      	movs	r1, #140	; 0x8c
10001d48:	19c9      	adds	r1, r1, r7
10001d4a:	680a      	ldr	r2, [r1, #0]
10001d4c:	0092      	lsls	r2, r2, #2
10001d4e:	58d3      	ldr	r3, [r2, r3]
10001d50:	22a0      	movs	r2, #160	; 0xa0
10001d52:	19d2      	adds	r2, r2, r7
10001d54:	6013      	str	r3, [r2, #0]
				dividend1 = dividend_array[array_count_1];
10001d56:	1c3b      	adds	r3, r7, #0
10001d58:	3320      	adds	r3, #32
10001d5a:	208c      	movs	r0, #140	; 0x8c
10001d5c:	19c0      	adds	r0, r0, r7
10001d5e:	6802      	ldr	r2, [r0, #0]
10001d60:	0092      	lsls	r2, r2, #2
10001d62:	58d3      	ldr	r3, [r2, r3]
10001d64:	2198      	movs	r1, #152	; 0x98
10001d66:	19c9      	adds	r1, r1, r7
10001d68:	600b      	str	r3, [r1, #0]
				frac = (max - dividend_array[array_count_2]) / \
10001d6a:	1c3b      	adds	r3, r7, #0
10001d6c:	3320      	adds	r3, #32
10001d6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
10001d70:	0092      	lsls	r2, r2, #2
10001d72:	58d3      	ldr	r3, [r2, r3]
10001d74:	20a4      	movs	r0, #164	; 0xa4
10001d76:	19c0      	adds	r0, r0, r7
10001d78:	6802      	ldr	r2, [r0, #0]
10001d7a:	1ad2      	subs	r2, r2, r3
				                               dividend_array[array_count_1];
10001d7c:	1c3b      	adds	r3, r7, #0
10001d7e:	3320      	adds	r3, #32
10001d80:	208c      	movs	r0, #140	; 0x8c
10001d82:	19c0      	adds	r0, r0, r7
10001d84:	6801      	ldr	r1, [r0, #0]
10001d86:	0089      	lsls	r1, r1, #2
10001d88:	58cb      	ldr	r3, [r1, r3]
			}
			if (dividend_array[array_count] > max) 
			{
				divisor1 = divisor_array[array_count_1];
				dividend1 = dividend_array[array_count_1];
				frac = (max - dividend_array[array_count_2]) / \
10001d8a:	1c10      	adds	r0, r2, #0
10001d8c:	1c19      	adds	r1, r3, #0
10001d8e:	f001 fa9f 	bl	100032d0 <__aeabi_uidiv>
10001d92:	1c03      	adds	r3, r0, #0
10001d94:	673b      	str	r3, [r7, #112]	; 0x70
				                               dividend_array[array_count_1];
				divisor2 = (frac * divisor_array[array_count-1U]) + \
10001d96:	2190      	movs	r1, #144	; 0x90
10001d98:	19c9      	adds	r1, r1, r7
10001d9a:	680b      	ldr	r3, [r1, #0]
10001d9c:	1e5a      	subs	r2, r3, #1
10001d9e:	1c3b      	adds	r3, r7, #0
10001da0:	3330      	adds	r3, #48	; 0x30
10001da2:	0092      	lsls	r2, r2, #2
10001da4:	58d3      	ldr	r3, [r2, r3]
10001da6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
10001da8:	435a      	muls	r2, r3
				                                divisor_array[array_count-2U];
10001daa:	2090      	movs	r0, #144	; 0x90
10001dac:	19c0      	adds	r0, r0, r7
10001dae:	6803      	ldr	r3, [r0, #0]
10001db0:	1e99      	subs	r1, r3, #2
10001db2:	1c3b      	adds	r3, r7, #0
10001db4:	3330      	adds	r3, #48	; 0x30
10001db6:	0089      	lsls	r1, r1, #2
10001db8:	58cb      	ldr	r3, [r1, r3]
			{
				divisor1 = divisor_array[array_count_1];
				dividend1 = dividend_array[array_count_1];
				frac = (max - dividend_array[array_count_2]) / \
				                               dividend_array[array_count_1];
				divisor2 = (frac * divisor_array[array_count-1U]) + \
10001dba:	18d3      	adds	r3, r2, r3
10001dbc:	219c      	movs	r1, #156	; 0x9c
10001dbe:	19c9      	adds	r1, r1, r7
10001dc0:	600b      	str	r3, [r1, #0]
				                                divisor_array[array_count-2U];
				dividend2 = (frac * dividend_array[array_count-1U]) + \
10001dc2:	2290      	movs	r2, #144	; 0x90
10001dc4:	19d2      	adds	r2, r2, r7
10001dc6:	6813      	ldr	r3, [r2, #0]
10001dc8:	1e5a      	subs	r2, r3, #1
10001dca:	1c3b      	adds	r3, r7, #0
10001dcc:	3320      	adds	r3, #32
10001dce:	0092      	lsls	r2, r2, #2
10001dd0:	58d3      	ldr	r3, [r2, r3]
10001dd2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
10001dd4:	435a      	muls	r2, r3
				                               dividend_array[array_count_2];
10001dd6:	1c3b      	adds	r3, r7, #0
10001dd8:	3320      	adds	r3, #32
10001dda:	6f79      	ldr	r1, [r7, #116]	; 0x74
10001ddc:	0089      	lsls	r1, r1, #2
10001dde:	58cb      	ldr	r3, [r1, r3]
				dividend1 = dividend_array[array_count_1];
				frac = (max - dividend_array[array_count_2]) / \
				                               dividend_array[array_count_1];
				divisor2 = (frac * divisor_array[array_count-1U]) + \
				                                divisor_array[array_count-2U];
				dividend2 = (frac * dividend_array[array_count-1U]) + \
10001de0:	18d3      	adds	r3, r2, r3
10001de2:	2094      	movs	r0, #148	; 0x94
10001de4:	19c0      	adds	r0, r0, r7
10001de6:	6003      	str	r3, [r0, #0]
				                               dividend_array[array_count_2];
				/* Swap if required */
				if (swapped) {
10001de8:	1c3b      	adds	r3, r7, #0
10001dea:	3383      	adds	r3, #131	; 0x83
10001dec:	781b      	ldrb	r3, [r3, #0]
10001dee:	2b00      	cmp	r3, #0
10001df0:	d01b      	beq.n	10001e2a <UART001_lConfigureBaudRate+0x35e>
						/* Swap divisor1 and dividend1 */
						temp = divisor1;
10001df2:	21a0      	movs	r1, #160	; 0xa0
10001df4:	19c9      	adds	r1, r1, r7
10001df6:	680b      	ldr	r3, [r1, #0]
10001df8:	67fb      	str	r3, [r7, #124]	; 0x7c
						divisor1 = dividend1;
10001dfa:	2298      	movs	r2, #152	; 0x98
10001dfc:	19d2      	adds	r2, r2, r7
10001dfe:	6813      	ldr	r3, [r2, #0]
10001e00:	20a0      	movs	r0, #160	; 0xa0
10001e02:	19c0      	adds	r0, r0, r7
10001e04:	6003      	str	r3, [r0, #0]
						dividend1 = temp;
10001e06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10001e08:	2198      	movs	r1, #152	; 0x98
10001e0a:	19c9      	adds	r1, r1, r7
10001e0c:	600b      	str	r3, [r1, #0]
						/* Swap divisor2 and dividend2 */
						temp = divisor2;
10001e0e:	229c      	movs	r2, #156	; 0x9c
10001e10:	19d2      	adds	r2, r2, r7
10001e12:	6813      	ldr	r3, [r2, #0]
10001e14:	67fb      	str	r3, [r7, #124]	; 0x7c
						divisor2 = dividend2;
10001e16:	2094      	movs	r0, #148	; 0x94
10001e18:	19c0      	adds	r0, r0, r7
10001e1a:	6803      	ldr	r3, [r0, #0]
10001e1c:	219c      	movs	r1, #156	; 0x9c
10001e1e:	19c9      	adds	r1, r1, r7
10001e20:	600b      	str	r3, [r1, #0]
						dividend2 = temp;
10001e22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10001e24:	2294      	movs	r2, #148	; 0x94
10001e26:	19d2      	adds	r2, r2, r7
10001e28:	6013      	str	r3, [r2, #0]
					}
				/* Remove if one of has divisor 0 */
				if ((dividend1 == 0U) || (divisor1 == 0U)) {
10001e2a:	2098      	movs	r0, #152	; 0x98
10001e2c:	19c0      	adds	r0, r0, r7
10001e2e:	6803      	ldr	r3, [r0, #0]
10001e30:	2b00      	cmp	r3, #0
10001e32:	d004      	beq.n	10001e3e <UART001_lConfigureBaudRate+0x372>
10001e34:	21a0      	movs	r1, #160	; 0xa0
10001e36:	19c9      	adds	r1, r1, r7
10001e38:	680b      	ldr	r3, [r1, #0]
10001e3a:	2b00      	cmp	r3, #0
10001e3c:	d10c      	bne.n	10001e58 <UART001_lConfigureBaudRate+0x38c>
					fdr_step = divisor2;
10001e3e:	229c      	movs	r2, #156	; 0x9c
10001e40:	19d2      	adds	r2, r2, r7
10001e42:	6813      	ldr	r3, [r2, #0]
10001e44:	20b4      	movs	r0, #180	; 0xb4
10001e46:	19c0      	adds	r0, r0, r7
10001e48:	6003      	str	r3, [r0, #0]
					brg_pdiv = dividend2;
10001e4a:	2194      	movs	r1, #148	; 0x94
10001e4c:	19c9      	adds	r1, r1, r7
10001e4e:	680b      	ldr	r3, [r1, #0]
10001e50:	22b0      	movs	r2, #176	; 0xb0
10001e52:	19d2      	adds	r2, r2, r7
10001e54:	6013      	str	r3, [r2, #0]
10001e56:	e06d      	b.n	10001f34 <UART001_lConfigureBaudRate+0x468>
				}else if ((dividend2 == 0U) || (divisor2 == 0U)) {
10001e58:	2094      	movs	r0, #148	; 0x94
10001e5a:	19c0      	adds	r0, r0, r7
10001e5c:	6803      	ldr	r3, [r0, #0]
10001e5e:	2b00      	cmp	r3, #0
10001e60:	d004      	beq.n	10001e6c <UART001_lConfigureBaudRate+0x3a0>
10001e62:	219c      	movs	r1, #156	; 0x9c
10001e64:	19c9      	adds	r1, r1, r7
10001e66:	680b      	ldr	r3, [r1, #0]
10001e68:	2b00      	cmp	r3, #0
10001e6a:	d10f      	bne.n	10001e8c <UART001_lConfigureBaudRate+0x3c0>
					fdr_step = divisor1;
10001e6c:	22a0      	movs	r2, #160	; 0xa0
10001e6e:	19d2      	adds	r2, r2, r7
10001e70:	6813      	ldr	r3, [r2, #0]
10001e72:	20b4      	movs	r0, #180	; 0xb4
10001e74:	19c0      	adds	r0, r0, r7
10001e76:	6003      	str	r3, [r0, #0]
					brg_pdiv = dividend1;
10001e78:	2198      	movs	r1, #152	; 0x98
10001e7a:	19c9      	adds	r1, r1, r7
10001e7c:	680b      	ldr	r3, [r1, #0]
10001e7e:	22b0      	movs	r2, #176	; 0xb0
10001e80:	19d2      	adds	r2, r2, r7
10001e82:	6013      	str	r3, [r2, #0]
10001e84:	e056      	b.n	10001f34 <UART001_lConfigureBaudRate+0x468>
10001e86:	46c0      	nop			; (mov r8, r8)
10001e88:	0000030d 	.word	0x0000030d
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
					    ((float) divisor1 / (float) dividend1 )) > \
10001e8c:	23a0      	movs	r3, #160	; 0xa0
10001e8e:	19db      	adds	r3, r3, r7
10001e90:	6818      	ldr	r0, [r3, #0]
10001e92:	f001 fe95 	bl	10003bc0 <__aeabi_ui2f>
10001e96:	1c04      	adds	r4, r0, #0
10001e98:	2198      	movs	r1, #152	; 0x98
10001e9a:	19c9      	adds	r1, r1, r7
10001e9c:	6808      	ldr	r0, [r1, #0]
10001e9e:	f001 fe8f 	bl	10003bc0 <__aeabi_ui2f>
10001ea2:	1c03      	adds	r3, r0, #0
10001ea4:	1c20      	adds	r0, r4, #0
10001ea6:	1c19      	adds	r1, r3, #0
10001ea8:	f001 fabe 	bl	10003428 <__aeabi_fdiv>
10001eac:	1c03      	adds	r3, r0, #0
				}else if ((dividend2 == 0U) || (divisor2 == 0U)) {
					fdr_step = divisor1;
					brg_pdiv = dividend1;
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
10001eae:	6fb8      	ldr	r0, [r7, #120]	; 0x78
10001eb0:	1c19      	adds	r1, r3, #0
10001eb2:	f001 fcab 	bl	1000380c <__aeabi_fsub>
10001eb6:	1c03      	adds	r3, r0, #0
10001eb8:	1c18      	adds	r0, r3, #0
10001eba:	f7ff fdef 	bl	10001a9c <UART001_labsRealType>
10001ebe:	1c04      	adds	r4, r0, #0
					    ((float) divisor1 / (float) dividend1 )) > \
					    UART001_labsRealType(div_factor - \
					    ((float) divisor2 / (float) dividend2 ))) 
10001ec0:	229c      	movs	r2, #156	; 0x9c
10001ec2:	19d2      	adds	r2, r2, r7
10001ec4:	6810      	ldr	r0, [r2, #0]
10001ec6:	f001 fe7b 	bl	10003bc0 <__aeabi_ui2f>
10001eca:	1c05      	adds	r5, r0, #0
10001ecc:	2394      	movs	r3, #148	; 0x94
10001ece:	19db      	adds	r3, r3, r7
10001ed0:	6818      	ldr	r0, [r3, #0]
10001ed2:	f001 fe75 	bl	10003bc0 <__aeabi_ui2f>
10001ed6:	1c03      	adds	r3, r0, #0
10001ed8:	1c28      	adds	r0, r5, #0
10001eda:	1c19      	adds	r1, r3, #0
10001edc:	f001 faa4 	bl	10003428 <__aeabi_fdiv>
10001ee0:	1c03      	adds	r3, r0, #0
					brg_pdiv = dividend1;
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
					    ((float) divisor1 / (float) dividend1 )) > \
					    UART001_labsRealType(div_factor - \
10001ee2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
10001ee4:	1c19      	adds	r1, r3, #0
10001ee6:	f001 fc91 	bl	1000380c <__aeabi_fsub>
10001eea:	1c03      	adds	r3, r0, #0
10001eec:	1c18      	adds	r0, r3, #0
10001eee:	f7ff fdd5 	bl	10001a9c <UART001_labsRealType>
10001ef2:	1c03      	adds	r3, r0, #0
				}else if ((dividend2 == 0U) || (divisor2 == 0U)) {
					fdr_step = divisor1;
					brg_pdiv = dividend1;
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
10001ef4:	1c20      	adds	r0, r4, #0
10001ef6:	1c19      	adds	r1, r3, #0
10001ef8:	f001 fa60 	bl	100033bc <__aeabi_fcmpgt>
10001efc:	1c03      	adds	r3, r0, #0
10001efe:	2b00      	cmp	r3, #0
10001f00:	d00c      	beq.n	10001f1c <UART001_lConfigureBaudRate+0x450>
					    ((float) divisor1 / (float) dividend1 )) > \
					    UART001_labsRealType(div_factor - \
					    ((float) divisor2 / (float) dividend2 ))) 
					{
						fdr_step = divisor2;
10001f02:	209c      	movs	r0, #156	; 0x9c
10001f04:	19c0      	adds	r0, r0, r7
10001f06:	6803      	ldr	r3, [r0, #0]
10001f08:	21b4      	movs	r1, #180	; 0xb4
10001f0a:	19c9      	adds	r1, r1, r7
10001f0c:	600b      	str	r3, [r1, #0]
						brg_pdiv = dividend2;
10001f0e:	2294      	movs	r2, #148	; 0x94
10001f10:	19d2      	adds	r2, r2, r7
10001f12:	6813      	ldr	r3, [r2, #0]
10001f14:	20b0      	movs	r0, #176	; 0xb0
10001f16:	19c0      	adds	r0, r0, r7
10001f18:	6003      	str	r3, [r0, #0]
10001f1a:	e00b      	b.n	10001f34 <UART001_lConfigureBaudRate+0x468>
					}else {
						fdr_step = divisor1;
10001f1c:	21a0      	movs	r1, #160	; 0xa0
10001f1e:	19c9      	adds	r1, r1, r7
10001f20:	680b      	ldr	r3, [r1, #0]
10001f22:	22b4      	movs	r2, #180	; 0xb4
10001f24:	19d2      	adds	r2, r2, r7
10001f26:	6013      	str	r3, [r2, #0]
						brg_pdiv = dividend1;
10001f28:	2098      	movs	r0, #152	; 0x98
10001f2a:	19c0      	adds	r0, r0, r7
10001f2c:	6803      	ldr	r3, [r0, #0]
10001f2e:	21b0      	movs	r1, #176	; 0xb0
10001f30:	19c9      	adds	r1, r1, r7
10001f32:	600b      	str	r3, [r1, #0]
					}
				}
				do_while_break = 0x05U;
10001f34:	2305      	movs	r3, #5
10001f36:	2288      	movs	r2, #136	; 0x88
10001f38:	19d2      	adds	r2, r2, r7
10001f3a:	6013      	str	r3, [r2, #0]
10001f3c:	e033      	b.n	10001fa6 <UART001_lConfigureBaudRate+0x4da>
			}
			else if (remainder[array_count]== 0U) 
10001f3e:	1c3b      	adds	r3, r7, #0
10001f40:	3340      	adds	r3, #64	; 0x40
10001f42:	2090      	movs	r0, #144	; 0x90
10001f44:	19c0      	adds	r0, r0, r7
10001f46:	6802      	ldr	r2, [r0, #0]
10001f48:	0092      	lsls	r2, r2, #2
10001f4a:	58d3      	ldr	r3, [r2, r3]
10001f4c:	2b00      	cmp	r3, #0
10001f4e:	d12a      	bne.n	10001fa6 <UART001_lConfigureBaudRate+0x4da>
			{
				fdr_step = divisor_array[array_count];
10001f50:	1c3b      	adds	r3, r7, #0
10001f52:	3330      	adds	r3, #48	; 0x30
10001f54:	2190      	movs	r1, #144	; 0x90
10001f56:	19c9      	adds	r1, r1, r7
10001f58:	680a      	ldr	r2, [r1, #0]
10001f5a:	0092      	lsls	r2, r2, #2
10001f5c:	58d3      	ldr	r3, [r2, r3]
10001f5e:	22b4      	movs	r2, #180	; 0xb4
10001f60:	19d2      	adds	r2, r2, r7
10001f62:	6013      	str	r3, [r2, #0]
				brg_pdiv = dividend_array[array_count];
10001f64:	1c3b      	adds	r3, r7, #0
10001f66:	3320      	adds	r3, #32
10001f68:	2090      	movs	r0, #144	; 0x90
10001f6a:	19c0      	adds	r0, r0, r7
10001f6c:	6802      	ldr	r2, [r0, #0]
10001f6e:	0092      	lsls	r2, r2, #2
10001f70:	58d3      	ldr	r3, [r2, r3]
10001f72:	21b0      	movs	r1, #176	; 0xb0
10001f74:	19c9      	adds	r1, r1, r7
10001f76:	600b      	str	r3, [r1, #0]
				if (swapped)
10001f78:	1c3b      	adds	r3, r7, #0
10001f7a:	3383      	adds	r3, #131	; 0x83
10001f7c:	781b      	ldrb	r3, [r3, #0]
10001f7e:	2b00      	cmp	r3, #0
10001f80:	d00d      	beq.n	10001f9e <UART001_lConfigureBaudRate+0x4d2>
				{
					/* Swap fdr_step and brg_pdiv */
					temp = fdr_step;
10001f82:	22b4      	movs	r2, #180	; 0xb4
10001f84:	19d2      	adds	r2, r2, r7
10001f86:	6813      	ldr	r3, [r2, #0]
10001f88:	67fb      	str	r3, [r7, #124]	; 0x7c
					fdr_step = brg_pdiv;
10001f8a:	20b0      	movs	r0, #176	; 0xb0
10001f8c:	19c0      	adds	r0, r0, r7
10001f8e:	6803      	ldr	r3, [r0, #0]
10001f90:	21b4      	movs	r1, #180	; 0xb4
10001f92:	19c9      	adds	r1, r1, r7
10001f94:	600b      	str	r3, [r1, #0]
					brg_pdiv = temp;
10001f96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10001f98:	22b0      	movs	r2, #176	; 0xb0
10001f9a:	19d2      	adds	r2, r2, r7
10001f9c:	6013      	str	r3, [r2, #0]
				}
				do_while_break = 0x05U;
10001f9e:	2305      	movs	r3, #5
10001fa0:	2088      	movs	r0, #136	; 0x88
10001fa2:	19c0      	adds	r0, r0, r7
10001fa4:	6003      	str	r3, [r0, #0]
			}
			else {
			  /* Do Nothing */
			}
		} while (do_while_break != 0x05U);
10001fa6:	2188      	movs	r1, #136	; 0x88
10001fa8:	19c9      	adds	r1, r1, r7
10001faa:	680b      	ldr	r3, [r1, #0]
10001fac:	2b05      	cmp	r3, #5
10001fae:	d000      	beq.n	10001fb2 <UART001_lConfigureBaudRate+0x4e6>
10001fb0:	e607      	b.n	10001bc2 <UART001_lConfigureBaudRate+0xf6>

	if(fdr_step >= UART001_MAX_VALUE)
10001fb2:	23b4      	movs	r3, #180	; 0xb4
10001fb4:	19db      	adds	r3, r3, r7
10001fb6:	681a      	ldr	r2, [r3, #0]
10001fb8:	4b0a      	ldr	r3, [pc, #40]	; (10001fe4 <UART001_lConfigureBaudRate+0x518>)
10001fba:	429a      	cmp	r2, r3
10001fbc:	d903      	bls.n	10001fc6 <UART001_lConfigureBaudRate+0x4fa>
	{
	   fdr_step = 1023U;
10001fbe:	4b09      	ldr	r3, [pc, #36]	; (10001fe4 <UART001_lConfigureBaudRate+0x518>)
10001fc0:	20b4      	movs	r0, #180	; 0xb4
10001fc2:	19c0      	adds	r0, r0, r7
10001fc4:	6003      	str	r3, [r0, #0]
	}

	*Step = fdr_step;
10001fc6:	687b      	ldr	r3, [r7, #4]
10001fc8:	21b4      	movs	r1, #180	; 0xb4
10001fca:	19c9      	adds	r1, r1, r7
10001fcc:	680a      	ldr	r2, [r1, #0]
10001fce:	601a      	str	r2, [r3, #0]

	*Pdiv = brg_pdiv - 1U;
10001fd0:	22b0      	movs	r2, #176	; 0xb0
10001fd2:	19d2      	adds	r2, r2, r7
10001fd4:	6813      	ldr	r3, [r2, #0]
10001fd6:	1e5a      	subs	r2, r3, #1
10001fd8:	68bb      	ldr	r3, [r7, #8]
10001fda:	601a      	str	r2, [r3, #0]
}
10001fdc:	46bd      	mov	sp, r7
10001fde:	b02e      	add	sp, #184	; 0xb8
10001fe0:	bdb0      	pop	{r4, r5, r7, pc}
10001fe2:	46c0      	nop			; (mov r8, r8)
10001fe4:	000003ff 	.word	0x000003ff

10001fe8 <UART001_Init>:
 *
 * <b>Reentrant: No </b><BR>
 *
 ******************************************************************************/
void UART001_Init(void)
{
10001fe8:	b580      	push	{r7, lr}
10001fea:	b082      	sub	sp, #8
10001fec:	af00      	add	r7, sp, #0
    #if (__TARGET_DEVICE__ != XMC45)
	#if ((__TARGET_DEVICE__ == XMC13) || \
	     (__TARGET_DEVICE__ == XMC12) || \
	     (__TARGET_DEVICE__ == XMC11))
	  /* Disable the USIC0/USIC1 clock gating for XMC1000 devices */	     
	  SCU_GENERAL->PASSWD = 0x000000C0UL;
10001fee:	4b1d      	ldr	r3, [pc, #116]	; (10002064 <UART001_Init+0x7c>)
10001ff0:	22c0      	movs	r2, #192	; 0xc0
10001ff2:	625a      	str	r2, [r3, #36]	; 0x24
	  WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, \
10001ff4:	4b1c      	ldr	r3, [pc, #112]	; (10002068 <UART001_Init+0x80>)
10001ff6:	4a1c      	ldr	r2, [pc, #112]	; (10002068 <UART001_Init+0x80>)
10001ff8:	6812      	ldr	r2, [r2, #0]
10001ffa:	491c      	ldr	r1, [pc, #112]	; (1000206c <UART001_Init+0x84>)
10001ffc:	430a      	orrs	r2, r1
10001ffe:	601a      	str	r2, [r3, #0]
	                                SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);

	  #if defined(UART001_PER0_USIC0_ENABLED)
	  SET_BIT(SCU_CLK->CGATCLR0, SCU_CLK_CGATCLR0_USIC0_Pos);
10002000:	4b19      	ldr	r3, [pc, #100]	; (10002068 <UART001_Init+0x80>)
10002002:	4a19      	ldr	r2, [pc, #100]	; (10002068 <UART001_Init+0x80>)
10002004:	6912      	ldr	r2, [r2, #16]
10002006:	2108      	movs	r1, #8
10002008:	430a      	orrs	r2, r1
1000200a:	611a      	str	r2, [r3, #16]
      #endif
      #if defined(UART001_PER1_USIC1_ENABLED)
	  SET_BIT(SCU_CLK->CGATCLR1, SCU_CLK_CGATCLR1_USIC1_Pos);
	  #endif
	  while ((SCU_CLK->CLKCR)&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
1000200c:	46c0      	nop			; (mov r8, r8)
1000200e:	4b16      	ldr	r3, [pc, #88]	; (10002068 <UART001_Init+0x80>)
10002010:	681a      	ldr	r2, [r3, #0]
10002012:	2380      	movs	r3, #128	; 0x80
10002014:	05db      	lsls	r3, r3, #23
10002016:	4013      	ands	r3, r2
10002018:	d1f9      	bne.n	1000200e <UART001_Init+0x26>
	  {
	  	;
	  }
	  SCU_GENERAL->PASSWD = 0x000000C3UL;
1000201a:	4b12      	ldr	r3, [pc, #72]	; (10002064 <UART001_Init+0x7c>)
1000201c:	22c3      	movs	r2, #195	; 0xc3
1000201e:	625a      	str	r2, [r3, #36]	; 0x24
   #if defined(UART001_PER1_USIC2_ENABLED)
	  RESET001_DeassertReset(PER1_USIC2); 
   #endif 
   #endif  
	  
   for (LoopIndex = (uint32_t)0; LoopIndex < (uint32_t)UART001_NUM_HANDLES; \
10002020:	2300      	movs	r3, #0
10002022:	607b      	str	r3, [r7, #4]
10002024:	e017      	b.n	10002056 <UART001_Init+0x6e>
	                           LoopIndex++)
   {
	  if (UART001_HandleArray[LoopIndex]->Mode == UART_HALFDUPLEX)
10002026:	4b12      	ldr	r3, [pc, #72]	; (10002070 <UART001_Init+0x88>)
10002028:	687a      	ldr	r2, [r7, #4]
1000202a:	0092      	lsls	r2, r2, #2
1000202c:	58d3      	ldr	r3, [r2, r3]
1000202e:	7d1b      	ldrb	r3, [r3, #20]
10002030:	2b01      	cmp	r3, #1
10002032:	d106      	bne.n	10002042 <UART001_Init+0x5a>
	  {
	   /*Configure TX Pin in Open-drain mode to allow the Wired-AND connection*/
		UART001_lConfigTXPin(UART001_HandleArray[LoopIndex]);
10002034:	4b0e      	ldr	r3, [pc, #56]	; (10002070 <UART001_Init+0x88>)
10002036:	687a      	ldr	r2, [r7, #4]
10002038:	0092      	lsls	r2, r2, #2
1000203a:	58d3      	ldr	r3, [r2, r3]
1000203c:	1c18      	adds	r0, r3, #0
1000203e:	f7ff fcbd 	bl	100019bc <UART001_lConfigTXPin>
	  }
	  
	  UART001_lInit(UART001_HandleArray[LoopIndex]);
10002042:	4b0b      	ldr	r3, [pc, #44]	; (10002070 <UART001_Init+0x88>)
10002044:	687a      	ldr	r2, [r7, #4]
10002046:	0092      	lsls	r2, r2, #2
10002048:	58d3      	ldr	r3, [r2, r3]
1000204a:	1c18      	adds	r0, r3, #0
1000204c:	f7ff fbdc 	bl	10001808 <UART001_lInit>
	  RESET001_DeassertReset(PER1_USIC2); 
   #endif 
   #endif  
	  
   for (LoopIndex = (uint32_t)0; LoopIndex < (uint32_t)UART001_NUM_HANDLES; \
	                           LoopIndex++)
10002050:	687b      	ldr	r3, [r7, #4]
10002052:	3301      	adds	r3, #1
10002054:	607b      	str	r3, [r7, #4]
   #if defined(UART001_PER1_USIC2_ENABLED)
	  RESET001_DeassertReset(PER1_USIC2); 
   #endif 
   #endif  
	  
   for (LoopIndex = (uint32_t)0; LoopIndex < (uint32_t)UART001_NUM_HANDLES; \
10002056:	687b      	ldr	r3, [r7, #4]
10002058:	2b00      	cmp	r3, #0
1000205a:	d0e4      	beq.n	10002026 <UART001_Init+0x3e>
	  }
	  
	  UART001_lInit(UART001_HandleArray[LoopIndex]);
   }
   
}
1000205c:	46bd      	mov	sp, r7
1000205e:	b002      	add	sp, #8
10002060:	bd80      	pop	{r7, pc}
10002062:	46c0      	nop			; (mov r8, r8)
10002064:	40010000 	.word	0x40010000
10002068:	40010300 	.word	0x40010300
1000206c:	3ff00000 	.word	0x3ff00000
10002070:	20000a80 	.word	0x20000a80

10002074 <UART001_DeInit>:
 *
 * <b>Reentrant: No </b><BR>
 *
 ******************************************************************************/
 void  UART001_DeInit (const UART001_HandleType* Handle)
{
10002074:	b580      	push	{r7, lr}
10002076:	b082      	sub	sp, #8
10002078:	af00      	add	r7, sp, #0
1000207a:	6078      	str	r0, [r7, #4]
  /* <<<DD_UART001_API_2>>> */
  /* Place holder function */      
}
1000207c:	46bd      	mov	sp, r7
1000207e:	b002      	add	sp, #8
10002080:	bd80      	pop	{r7, pc}
10002082:	46c0      	nop			; (mov r8, r8)

10002084 <UART001_Configure>:
  const UART001_HandleType* Handle,
  uint32_t BaudRate,
  UART_ParityType Parity,
  UART_StopBitType Stopbit
)
{
10002084:	b580      	push	{r7, lr}
10002086:	b08a      	sub	sp, #40	; 0x28
10002088:	af00      	add	r7, sp, #0
1000208a:	60f8      	str	r0, [r7, #12]
1000208c:	60b9      	str	r1, [r7, #8]
1000208e:	1c11      	adds	r1, r2, #0
10002090:	1c1a      	adds	r2, r3, #0
10002092:	1dfb      	adds	r3, r7, #7
10002094:	7019      	strb	r1, [r3, #0]
10002096:	1dbb      	adds	r3, r7, #6
10002098:	701a      	strb	r2, [r3, #0]
   uint32_t Brg_Pdiv = 0x00U;
1000209a:	2300      	movs	r3, #0
1000209c:	617b      	str	r3, [r7, #20]
   uint32_t Fdr_Step = 0x00U;
1000209e:	2300      	movs	r3, #0
100020a0:	613b      	str	r3, [r7, #16]
   uint32_t TXIDLE_status;
   uint32_t RXIDLE_status;
   USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
100020a2:	68fb      	ldr	r3, [r7, #12]
100020a4:	681b      	ldr	r3, [r3, #0]
100020a6:	623b      	str	r3, [r7, #32]
   status_t Status = (status_t)UART001_ERROR;
100020a8:	2305      	movs	r3, #5
100020aa:	627b      	str	r3, [r7, #36]	; 0x24
   
   /* <<<DD_UART001_API_3>>>*/

   TXIDLE_status = (uint32_t)\
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_TXIDLE_Msk, \
100020ac:	6a3b      	ldr	r3, [r7, #32]
100020ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
   status_t Status = (status_t)UART001_ERROR;
   
   /* <<<DD_UART001_API_3>>>*/

   TXIDLE_status = (uint32_t)\
100020b0:	2301      	movs	r3, #1
100020b2:	4013      	ands	r3, r2
100020b4:	61fb      	str	r3, [r7, #28]
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_TXIDLE_Msk, \
	                       USIC_CH_PSR_ASCMode_TXIDLE_Pos);

   RXIDLE_status = (uint32_t)\
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_RXIDLE_Msk, \
100020b6:	6a3b      	ldr	r3, [r7, #32]
100020b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
100020ba:	2302      	movs	r3, #2
100020bc:	4013      	ands	r3, r2

   TXIDLE_status = (uint32_t)\
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_TXIDLE_Msk, \
	                       USIC_CH_PSR_ASCMode_TXIDLE_Pos);

   RXIDLE_status = (uint32_t)\
100020be:	085b      	lsrs	r3, r3, #1
100020c0:	61bb      	str	r3, [r7, #24]
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_RXIDLE_Msk, \
	                       USIC_CH_PSR_ASCMode_RXIDLE_Pos);
   if(( TXIDLE_status & RXIDLE_status) == 0x01U)
100020c2:	69fb      	ldr	r3, [r7, #28]
100020c4:	69ba      	ldr	r2, [r7, #24]
100020c6:	4013      	ands	r3, r2
100020c8:	2b01      	cmp	r3, #1
100020ca:	d156      	bne.n	1000217a <UART001_Configure+0xf6>
    {
      /* Disable UART mode before configuring all USIC registers to avoid 
       * unintended edges */ 
      UartRegs->CCR &= ~( ((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk)));  
100020cc:	6a3b      	ldr	r3, [r7, #32]
100020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100020d0:	2202      	movs	r2, #2
100020d2:	1c19      	adds	r1, r3, #0
100020d4:	4391      	bics	r1, r2
100020d6:	1c0a      	adds	r2, r1, #0
100020d8:	6a3b      	ldr	r3, [r7, #32]
100020da:	641a      	str	r2, [r3, #64]	; 0x40
	  
      /* Configuration of USIC Channel Fractional Divider */
      UART001_lConfigureBaudRate(BaudRate,&Brg_Pdiv,&Fdr_Step);
100020dc:	68b9      	ldr	r1, [r7, #8]
100020de:	1c3a      	adds	r2, r7, #0
100020e0:	3214      	adds	r2, #20
100020e2:	1c3b      	adds	r3, r7, #0
100020e4:	3310      	adds	r3, #16
100020e6:	1c08      	adds	r0, r1, #0
100020e8:	1c11      	adds	r1, r2, #0
100020ea:	1c1a      	adds	r2, r3, #0
100020ec:	f7ff fcee 	bl	10001acc <UART001_lConfigureBaudRate>

      /* Step value: 0x3FF */
      UartRegs->FDR &= ~(USIC_CH_FDR_STEP_Msk);
100020f0:	6a3b      	ldr	r3, [r7, #32]
100020f2:	691b      	ldr	r3, [r3, #16]
100020f4:	0a9b      	lsrs	r3, r3, #10
100020f6:	029a      	lsls	r2, r3, #10
100020f8:	6a3b      	ldr	r3, [r7, #32]
100020fa:	611a      	str	r2, [r3, #16]
      UartRegs->FDR |= ( Fdr_Step & USIC_CH_FDR_STEP_Msk);
100020fc:	6a3b      	ldr	r3, [r7, #32]
100020fe:	691a      	ldr	r2, [r3, #16]
10002100:	693b      	ldr	r3, [r7, #16]
10002102:	059b      	lsls	r3, r3, #22
10002104:	0d9b      	lsrs	r3, r3, #22
10002106:	431a      	orrs	r2, r3
10002108:	6a3b      	ldr	r3, [r7, #32]
1000210a:	611a      	str	r2, [r3, #16]
              
      /* The PreDivider for CTQ, PCTQ = 0  */
      /* The Denominator for CTQ, DCTQ = 16 */

      UartRegs->BRG &= ~(USIC_CH_BRG_PDIV_Msk);
1000210c:	6a3b      	ldr	r3, [r7, #32]
1000210e:	695a      	ldr	r2, [r3, #20]
10002110:	4b1d      	ldr	r3, [pc, #116]	; (10002188 <UART001_Configure+0x104>)
10002112:	401a      	ands	r2, r3
10002114:	6a3b      	ldr	r3, [r7, #32]
10002116:	615a      	str	r2, [r3, #20]
      UartRegs->BRG |= ((((uint32_t)Brg_Pdiv  << USIC_CH_BRG_PDIV_Pos) \
10002118:	6a3b      	ldr	r3, [r7, #32]
1000211a:	695a      	ldr	r2, [r3, #20]
1000211c:	697b      	ldr	r3, [r7, #20]
1000211e:	0419      	lsls	r1, r3, #16
    		                                          &  USIC_CH_BRG_PDIV_Msk));
10002120:	4b1a      	ldr	r3, [pc, #104]	; (1000218c <UART001_Configure+0x108>)
10002122:	400b      	ands	r3, r1
              
      /* The PreDivider for CTQ, PCTQ = 0  */
      /* The Denominator for CTQ, DCTQ = 16 */

      UartRegs->BRG &= ~(USIC_CH_BRG_PDIV_Msk);
      UartRegs->BRG |= ((((uint32_t)Brg_Pdiv  << USIC_CH_BRG_PDIV_Pos) \
10002124:	431a      	orrs	r2, r3
10002126:	6a3b      	ldr	r3, [r7, #32]
10002128:	615a      	str	r2, [r3, #20]
    		                                          &  USIC_CH_BRG_PDIV_Msk));

      /* Configure StopBit */
      UartRegs->PCR_ASCMode &= ~(USIC_CH_PCR_ASCMode_STPB_Msk);
1000212a:	6a3b      	ldr	r3, [r7, #32]
1000212c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000212e:	2202      	movs	r2, #2
10002130:	1c19      	adds	r1, r3, #0
10002132:	4391      	bics	r1, r2
10002134:	1c0a      	adds	r2, r1, #0
10002136:	6a3b      	ldr	r3, [r7, #32]
10002138:	63da      	str	r2, [r3, #60]	; 0x3c
      UartRegs->PCR_ASCMode |= \
1000213a:	6a3b      	ldr	r3, [r7, #32]
1000213c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                      (((uint32_t)Stopbit << USIC_CH_PCR_ASCMode_STPB_Pos) & \
1000213e:	1dbb      	adds	r3, r7, #6
10002140:	781b      	ldrb	r3, [r3, #0]
10002142:	0059      	lsls	r1, r3, #1
10002144:	2302      	movs	r3, #2
10002146:	400b      	ands	r3, r1
      UartRegs->BRG |= ((((uint32_t)Brg_Pdiv  << USIC_CH_BRG_PDIV_Pos) \
    		                                          &  USIC_CH_BRG_PDIV_Msk));

      /* Configure StopBit */
      UartRegs->PCR_ASCMode &= ~(USIC_CH_PCR_ASCMode_STPB_Msk);
      UartRegs->PCR_ASCMode |= \
10002148:	431a      	orrs	r2, r3
1000214a:	6a3b      	ldr	r3, [r7, #32]
1000214c:	63da      	str	r2, [r3, #60]	; 0x3c
                      (((uint32_t)Stopbit << USIC_CH_PCR_ASCMode_STPB_Pos) & \
                       USIC_CH_PCR_ASCMode_STPB_Msk);
          
      /* Configure Parity*/
      UartRegs->CCR &= ~(USIC_CH_CCR_PM_Msk);
1000214e:	6a3b      	ldr	r3, [r7, #32]
10002150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10002152:	4b0f      	ldr	r3, [pc, #60]	; (10002190 <UART001_Configure+0x10c>)
10002154:	401a      	ands	r2, r3
10002156:	6a3b      	ldr	r3, [r7, #32]
10002158:	641a      	str	r2, [r3, #64]	; 0x40
      UartRegs->CCR |= (((UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
1000215a:	6a3b      	ldr	r3, [r7, #32]
1000215c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                        (((uint32_t)Parity  << USIC_CH_CCR_PM_Pos) & \
1000215e:	1dfb      	adds	r3, r7, #7
10002160:	781b      	ldrb	r3, [r3, #0]
10002162:	0219      	lsls	r1, r3, #8
10002164:	23c0      	movs	r3, #192	; 0xc0
10002166:	009b      	lsls	r3, r3, #2
10002168:	400b      	ands	r3, r1
                      (((uint32_t)Stopbit << USIC_CH_PCR_ASCMode_STPB_Pos) & \
                       USIC_CH_PCR_ASCMode_STPB_Msk);
          
      /* Configure Parity*/
      UartRegs->CCR &= ~(USIC_CH_CCR_PM_Msk);
      UartRegs->CCR |= (((UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
1000216a:	4313      	orrs	r3, r2
1000216c:	2202      	movs	r2, #2
1000216e:	431a      	orrs	r2, r3
10002170:	6a3b      	ldr	r3, [r7, #32]
10002172:	641a      	str	r2, [r3, #64]	; 0x40
                        (((uint32_t)Parity  << USIC_CH_CCR_PM_Pos) & \
                                                       USIC_CH_CCR_PM_Msk));

      Status = (status_t)DAVEApp_SUCCESS;
10002174:	2300      	movs	r3, #0
10002176:	627b      	str	r3, [r7, #36]	; 0x24
10002178:	e001      	b.n	1000217e <UART001_Configure+0xfa>
    }
    else
    {
      Status = (status_t)UART001_BUSY;
1000217a:	2303      	movs	r3, #3
1000217c:	627b      	str	r3, [r7, #36]	; 0x24
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Status), &Status);
    }
  
  return Status;
1000217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
10002180:	1c18      	adds	r0, r3, #0
10002182:	46bd      	mov	sp, r7
10002184:	b00a      	add	sp, #40	; 0x28
10002186:	bd80      	pop	{r7, pc}
10002188:	fc00ffff 	.word	0xfc00ffff
1000218c:	03ff0000 	.word	0x03ff0000
10002190:	fffffcff 	.word	0xfffffcff

10002194 <UART001_ReadDataMultiple>:
(
  const UART001_HandleType* Handle,
  uint16_t* DataPtr,
  uint32_t Count
)
{ 
10002194:	b580      	push	{r7, lr}
10002196:	b086      	sub	sp, #24
10002198:	af00      	add	r7, sp, #0
1000219a:	60f8      	str	r0, [r7, #12]
1000219c:	60b9      	str	r1, [r7, #8]
1000219e:	607a      	str	r2, [r7, #4]
  uint32_t ReadCount = 0x00U;
100021a0:	2300      	movs	r3, #0
100021a2:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
100021a4:	68fb      	ldr	r3, [r7, #12]
100021a6:	681b      	ldr	r3, [r3, #0]
100021a8:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
100021aa:	68fb      	ldr	r3, [r7, #12]
100021ac:	7fdb      	ldrb	r3, [r3, #31]
100021ae:	2b00      	cmp	r3, #0
100021b0:	d01c      	beq.n	100021ec <UART001_ReadDataMultiple+0x58>
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
100021b2:	e00f      	b.n	100021d4 <UART001_ReadDataMultiple+0x40>
	  {
		*DataPtr = (uint16_t)UartRegs->OUTR;
100021b4:	693a      	ldr	r2, [r7, #16]
100021b6:	238e      	movs	r3, #142	; 0x8e
100021b8:	005b      	lsls	r3, r3, #1
100021ba:	58d3      	ldr	r3, [r2, r3]
100021bc:	b29a      	uxth	r2, r3
100021be:	68bb      	ldr	r3, [r7, #8]
100021c0:	801a      	strh	r2, [r3, #0]
		Count--;
100021c2:	687b      	ldr	r3, [r7, #4]
100021c4:	3b01      	subs	r3, #1
100021c6:	607b      	str	r3, [r7, #4]
		ReadCount++;
100021c8:	697b      	ldr	r3, [r7, #20]
100021ca:	3301      	adds	r3, #1
100021cc:	617b      	str	r3, [r7, #20]
		DataPtr++;
100021ce:	68bb      	ldr	r3, [r7, #8]
100021d0:	3302      	adds	r3, #2
100021d2:	60bb      	str	r3, [r7, #8]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
100021d4:	693a      	ldr	r2, [r7, #16]
100021d6:	238a      	movs	r3, #138	; 0x8a
100021d8:	005b      	lsls	r3, r3, #1
100021da:	58d2      	ldr	r2, [r2, r3]
100021dc:	2308      	movs	r3, #8
100021de:	4013      	ands	r3, r2
100021e0:	08db      	lsrs	r3, r3, #3
100021e2:	d10b      	bne.n	100021fc <UART001_ReadDataMultiple+0x68>
100021e4:	687b      	ldr	r3, [r7, #4]
100021e6:	2b00      	cmp	r3, #0
100021e8:	d1e4      	bne.n	100021b4 <UART001_ReadDataMultiple+0x20>
100021ea:	e007      	b.n	100021fc <UART001_ReadDataMultiple+0x68>
	  }
  }
  else
  {
	  /* If FIFO is disabled read data from standard receive buffer */
	  *DataPtr = (uint16_t)UartRegs->RBUF;
100021ec:	693b      	ldr	r3, [r7, #16]
100021ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100021f0:	b29a      	uxth	r2, r3
100021f2:	68bb      	ldr	r3, [r7, #8]
100021f4:	801a      	strh	r2, [r3, #0]
	  ReadCount++;
100021f6:	697b      	ldr	r3, [r7, #20]
100021f8:	3301      	adds	r3, #1
100021fa:	617b      	str	r3, [r7, #20]
  }
  return ReadCount;
100021fc:	697b      	ldr	r3, [r7, #20]
}
100021fe:	1c18      	adds	r0, r3, #0
10002200:	46bd      	mov	sp, r7
10002202:	b006      	add	sp, #24
10002204:	bd80      	pop	{r7, pc}
10002206:	46c0      	nop			; (mov r8, r8)

10002208 <UART001_ReadDataBytes>:
(
  const UART001_HandleType* Handle,
  uint8_t* DataPtr,
  uint32_t Count
)
{ 
10002208:	b580      	push	{r7, lr}
1000220a:	b086      	sub	sp, #24
1000220c:	af00      	add	r7, sp, #0
1000220e:	60f8      	str	r0, [r7, #12]
10002210:	60b9      	str	r1, [r7, #8]
10002212:	607a      	str	r2, [r7, #4]
  uint32_t ReadCount = 0x00U;
10002214:	2300      	movs	r3, #0
10002216:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
10002218:	68fb      	ldr	r3, [r7, #12]
1000221a:	681b      	ldr	r3, [r3, #0]
1000221c:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
1000221e:	68fb      	ldr	r3, [r7, #12]
10002220:	7fdb      	ldrb	r3, [r3, #31]
10002222:	2b00      	cmp	r3, #0
10002224:	d01c      	beq.n	10002260 <UART001_ReadDataBytes+0x58>
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
10002226:	e00f      	b.n	10002248 <UART001_ReadDataBytes+0x40>
	  {
		*DataPtr = (uint8_t)UartRegs->OUTR;
10002228:	693a      	ldr	r2, [r7, #16]
1000222a:	238e      	movs	r3, #142	; 0x8e
1000222c:	005b      	lsls	r3, r3, #1
1000222e:	58d3      	ldr	r3, [r2, r3]
10002230:	b2da      	uxtb	r2, r3
10002232:	68bb      	ldr	r3, [r7, #8]
10002234:	701a      	strb	r2, [r3, #0]
		Count--;
10002236:	687b      	ldr	r3, [r7, #4]
10002238:	3b01      	subs	r3, #1
1000223a:	607b      	str	r3, [r7, #4]
		ReadCount++;
1000223c:	697b      	ldr	r3, [r7, #20]
1000223e:	3301      	adds	r3, #1
10002240:	617b      	str	r3, [r7, #20]
		DataPtr++;
10002242:	68bb      	ldr	r3, [r7, #8]
10002244:	3301      	adds	r3, #1
10002246:	60bb      	str	r3, [r7, #8]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
10002248:	693a      	ldr	r2, [r7, #16]
1000224a:	238a      	movs	r3, #138	; 0x8a
1000224c:	005b      	lsls	r3, r3, #1
1000224e:	58d2      	ldr	r2, [r2, r3]
10002250:	2308      	movs	r3, #8
10002252:	4013      	ands	r3, r2
10002254:	08db      	lsrs	r3, r3, #3
10002256:	d10b      	bne.n	10002270 <UART001_ReadDataBytes+0x68>
10002258:	687b      	ldr	r3, [r7, #4]
1000225a:	2b00      	cmp	r3, #0
1000225c:	d1e4      	bne.n	10002228 <UART001_ReadDataBytes+0x20>
1000225e:	e007      	b.n	10002270 <UART001_ReadDataBytes+0x68>
	  }
  }
  else
  {
	  /* If FIFO is disabled read data from standard receive buffer */
	  *DataPtr = (uint8_t)UartRegs->RBUF;
10002260:	693b      	ldr	r3, [r7, #16]
10002262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10002264:	b2da      	uxtb	r2, r3
10002266:	68bb      	ldr	r3, [r7, #8]
10002268:	701a      	strb	r2, [r3, #0]
	  ReadCount++;
1000226a:	697b      	ldr	r3, [r7, #20]
1000226c:	3301      	adds	r3, #1
1000226e:	617b      	str	r3, [r7, #20]
  }  
  return ReadCount;
10002270:	697b      	ldr	r3, [r7, #20]
}
10002272:	1c18      	adds	r0, r3, #0
10002274:	46bd      	mov	sp, r7
10002276:	b006      	add	sp, #24
10002278:	bd80      	pop	{r7, pc}
1000227a:	46c0      	nop			; (mov r8, r8)

1000227c <UART001_WriteDataMultiple>:
(
  const UART001_HandleType* Handle,
  uint16_t* DataPtr,
  uint32_t Count
)
{
1000227c:	b580      	push	{r7, lr}
1000227e:	b086      	sub	sp, #24
10002280:	af00      	add	r7, sp, #0
10002282:	60f8      	str	r0, [r7, #12]
10002284:	60b9      	str	r1, [r7, #8]
10002286:	607a      	str	r2, [r7, #4]
  uint32_t WriteCount = 0x00U;
10002288:	2300      	movs	r3, #0
1000228a:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs; 
1000228c:	68fb      	ldr	r3, [r7, #12]
1000228e:	681b      	ldr	r3, [r3, #0]
10002290:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_5>>>*/
  /* If FIFO is enabled write data to the transmit FIFO buffer */
  if(Handle->TxFifoEn) 
10002292:	68fb      	ldr	r3, [r7, #12]
10002294:	7f9b      	ldrb	r3, [r3, #30]
10002296:	2b00      	cmp	r3, #0
10002298:	d01d      	beq.n	100022d6 <UART001_WriteDataMultiple+0x5a>
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
1000229a:	e00f      	b.n	100022bc <UART001_WriteDataMultiple+0x40>
	  {
		UartRegs->IN[0] = *DataPtr;
1000229c:	68bb      	ldr	r3, [r7, #8]
1000229e:	881b      	ldrh	r3, [r3, #0]
100022a0:	1c19      	adds	r1, r3, #0
100022a2:	693a      	ldr	r2, [r7, #16]
100022a4:	23c0      	movs	r3, #192	; 0xc0
100022a6:	005b      	lsls	r3, r3, #1
100022a8:	50d1      	str	r1, [r2, r3]
		Count--;
100022aa:	687b      	ldr	r3, [r7, #4]
100022ac:	3b01      	subs	r3, #1
100022ae:	607b      	str	r3, [r7, #4]
		WriteCount++;
100022b0:	697b      	ldr	r3, [r7, #20]
100022b2:	3301      	adds	r3, #1
100022b4:	617b      	str	r3, [r7, #20]
		DataPtr++;
100022b6:	68bb      	ldr	r3, [r7, #8]
100022b8:	3302      	adds	r3, #2
100022ba:	60bb      	str	r3, [r7, #8]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs; 
  /* <<<DD_UART001_API_5>>>*/
  /* If FIFO is enabled write data to the transmit FIFO buffer */
  if(Handle->TxFifoEn) 
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
100022bc:	693a      	ldr	r2, [r7, #16]
100022be:	238a      	movs	r3, #138	; 0x8a
100022c0:	005b      	lsls	r3, r3, #1
100022c2:	58d2      	ldr	r2, [r2, r3]
100022c4:	2380      	movs	r3, #128	; 0x80
100022c6:	015b      	lsls	r3, r3, #5
100022c8:	4013      	ands	r3, r2
100022ca:	0b1b      	lsrs	r3, r3, #12
100022cc:	d111      	bne.n	100022f2 <UART001_WriteDataMultiple+0x76>
100022ce:	687b      	ldr	r3, [r7, #4]
100022d0:	2b00      	cmp	r3, #0
100022d2:	d1e3      	bne.n	1000229c <UART001_WriteDataMultiple+0x20>
100022d4:	e00d      	b.n	100022f2 <UART001_WriteDataMultiple+0x76>
	  }
  }
  else
  {	  
	  /* If FIFO is disabled write data to the standard transmit buffer */
	  if (!(USIC_CH_TCSR_TDV_Msk & UartRegs->TCSR))
100022d6:	693b      	ldr	r3, [r7, #16]
100022d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
100022da:	2380      	movs	r3, #128	; 0x80
100022dc:	4013      	ands	r3, r2
100022de:	d108      	bne.n	100022f2 <UART001_WriteDataMultiple+0x76>
	  {
		UartRegs->TBUF[0] = *DataPtr;	
100022e0:	68bb      	ldr	r3, [r7, #8]
100022e2:	881b      	ldrh	r3, [r3, #0]
100022e4:	1c19      	adds	r1, r3, #0
100022e6:	693a      	ldr	r2, [r7, #16]
100022e8:	2380      	movs	r3, #128	; 0x80
100022ea:	50d1      	str	r1, [r2, r3]
		WriteCount++; 
100022ec:	697b      	ldr	r3, [r7, #20]
100022ee:	3301      	adds	r3, #1
100022f0:	617b      	str	r3, [r7, #20]
	  }
  }
  return WriteCount;
100022f2:	697b      	ldr	r3, [r7, #20]
}
100022f4:	1c18      	adds	r0, r3, #0
100022f6:	46bd      	mov	sp, r7
100022f8:	b006      	add	sp, #24
100022fa:	bd80      	pop	{r7, pc}

100022fc <UART001_WriteDataBytes>:
(
  const UART001_HandleType* Handle,
  const uint8_t* DataPtr,
  uint32_t Count
)
{
100022fc:	b580      	push	{r7, lr}
100022fe:	b086      	sub	sp, #24
10002300:	af00      	add	r7, sp, #0
10002302:	60f8      	str	r0, [r7, #12]
10002304:	60b9      	str	r1, [r7, #8]
10002306:	607a      	str	r2, [r7, #4]
  uint32_t WriteCount = 0x00U;
10002308:	2300      	movs	r3, #0
1000230a:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs; 
1000230c:	68fb      	ldr	r3, [r7, #12]
1000230e:	681b      	ldr	r3, [r3, #0]
10002310:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_6>>> */
  
  /* If FIFO is enabled write data to the transmit FIFO buffer */  
  if(Handle->TxFifoEn) 
10002312:	68fb      	ldr	r3, [r7, #12]
10002314:	7f9b      	ldrb	r3, [r3, #30]
10002316:	2b00      	cmp	r3, #0
10002318:	d01d      	beq.n	10002356 <UART001_WriteDataBytes+0x5a>
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
1000231a:	e00f      	b.n	1000233c <UART001_WriteDataBytes+0x40>
	  {
		UartRegs->IN[0] = *DataPtr;
1000231c:	68bb      	ldr	r3, [r7, #8]
1000231e:	781b      	ldrb	r3, [r3, #0]
10002320:	1c19      	adds	r1, r3, #0
10002322:	693a      	ldr	r2, [r7, #16]
10002324:	23c0      	movs	r3, #192	; 0xc0
10002326:	005b      	lsls	r3, r3, #1
10002328:	50d1      	str	r1, [r2, r3]
		Count--;
1000232a:	687b      	ldr	r3, [r7, #4]
1000232c:	3b01      	subs	r3, #1
1000232e:	607b      	str	r3, [r7, #4]
		WriteCount++;
10002330:	697b      	ldr	r3, [r7, #20]
10002332:	3301      	adds	r3, #1
10002334:	617b      	str	r3, [r7, #20]
		DataPtr++;
10002336:	68bb      	ldr	r3, [r7, #8]
10002338:	3301      	adds	r3, #1
1000233a:	60bb      	str	r3, [r7, #8]
  /* <<<DD_UART001_API_6>>> */
  
  /* If FIFO is enabled write data to the transmit FIFO buffer */  
  if(Handle->TxFifoEn) 
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
1000233c:	693a      	ldr	r2, [r7, #16]
1000233e:	238a      	movs	r3, #138	; 0x8a
10002340:	005b      	lsls	r3, r3, #1
10002342:	58d2      	ldr	r2, [r2, r3]
10002344:	2380      	movs	r3, #128	; 0x80
10002346:	015b      	lsls	r3, r3, #5
10002348:	4013      	ands	r3, r2
1000234a:	0b1b      	lsrs	r3, r3, #12
1000234c:	d111      	bne.n	10002372 <UART001_WriteDataBytes+0x76>
1000234e:	687b      	ldr	r3, [r7, #4]
10002350:	2b00      	cmp	r3, #0
10002352:	d1e3      	bne.n	1000231c <UART001_WriteDataBytes+0x20>
10002354:	e00d      	b.n	10002372 <UART001_WriteDataBytes+0x76>
	  }
  }
  else
  {	  
	  /* If FIFO is disabled write data to the standard transmit buffer */  
	  if (!(USIC_CH_TCSR_TDV_Msk & UartRegs->TCSR))
10002356:	693b      	ldr	r3, [r7, #16]
10002358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1000235a:	2380      	movs	r3, #128	; 0x80
1000235c:	4013      	ands	r3, r2
1000235e:	d108      	bne.n	10002372 <UART001_WriteDataBytes+0x76>
	  {
		UartRegs->TBUF[0] = *DataPtr;	
10002360:	68bb      	ldr	r3, [r7, #8]
10002362:	781b      	ldrb	r3, [r3, #0]
10002364:	1c19      	adds	r1, r3, #0
10002366:	693a      	ldr	r2, [r7, #16]
10002368:	2380      	movs	r3, #128	; 0x80
1000236a:	50d1      	str	r1, [r2, r3]
		WriteCount++; 
1000236c:	697b      	ldr	r3, [r7, #20]
1000236e:	3301      	adds	r3, #1
10002370:	617b      	str	r3, [r7, #20]
	  }
  }
  return WriteCount;
10002372:	697b      	ldr	r3, [r7, #20]
}
10002374:	1c18      	adds	r0, r3, #0
10002376:	46bd      	mov	sp, r7
10002378:	b006      	add	sp, #24
1000237a:	bd80      	pop	{r7, pc}

1000237c <UART001_GetFlagStatus>:
status_t UART001_GetFlagStatus 
(
  const UART001_HandleType* Handle,
  UART001_FlagStatusType Flag
)
{
1000237c:	b580      	push	{r7, lr}
1000237e:	b086      	sub	sp, #24
10002380:	af00      	add	r7, sp, #0
10002382:	6078      	str	r0, [r7, #4]
10002384:	1c0a      	adds	r2, r1, #0
10002386:	1cfb      	adds	r3, r7, #3
10002388:	701a      	strb	r2, [r3, #0]
  status_t Status = (status_t)UART001_RESET;
1000238a:	2301      	movs	r3, #1
1000238c:	617b      	str	r3, [r7, #20]
  uint32_t TempValue = 0x00U;
1000238e:	2300      	movs	r3, #0
10002390:	613b      	str	r3, [r7, #16]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
10002392:	687b      	ldr	r3, [r7, #4]
10002394:	681b      	ldr	r3, [r3, #0]
10002396:	60fb      	str	r3, [r7, #12]
  
  /* <<<DD_UART001_API_7>>>*/
  if(Flag <= UART001_ALT_REC_IND_FLAG)
10002398:	1cfb      	adds	r3, r7, #3
1000239a:	781b      	ldrb	r3, [r3, #0]
1000239c:	2b0f      	cmp	r3, #15
1000239e:	d80a      	bhi.n	100023b6 <UART001_GetFlagStatus+0x3a>
  {
    TempValue = UartRegs->PSR_ASCMode;
100023a0:	68fb      	ldr	r3, [r7, #12]
100023a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100023a4:	613b      	str	r3, [r7, #16]
    TempValue  &= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
100023a6:	1cfb      	adds	r3, r7, #3
100023a8:	781b      	ldrb	r3, [r3, #0]
100023aa:	2201      	movs	r2, #1
100023ac:	409a      	lsls	r2, r3
100023ae:	693b      	ldr	r3, [r7, #16]
100023b0:	4013      	ands	r3, r2
100023b2:	613b      	str	r3, [r7, #16]
100023b4:	e01e      	b.n	100023f4 <UART001_GetFlagStatus+0x78>
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
100023b6:	1cfb      	adds	r3, r7, #3
100023b8:	781b      	ldrb	r3, [r3, #0]
100023ba:	2b12      	cmp	r3, #18
100023bc:	d80d      	bhi.n	100023da <UART001_GetFlagStatus+0x5e>
  {
    TempValue = UartRegs->TRBSR;
100023be:	68fa      	ldr	r2, [r7, #12]
100023c0:	238a      	movs	r3, #138	; 0x8a
100023c2:	005b      	lsls	r3, r3, #1
100023c4:	58d3      	ldr	r3, [r2, r3]
100023c6:	613b      	str	r3, [r7, #16]
    TempValue  &= ((uint32_t)SHIFT_ONE << \
                  ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG));
100023c8:	1cfb      	adds	r3, r7, #3
100023ca:	781b      	ldrb	r3, [r3, #0]
100023cc:	3b10      	subs	r3, #16
    TempValue  &= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
  {
    TempValue = UartRegs->TRBSR;
    TempValue  &= ((uint32_t)SHIFT_ONE << \
100023ce:	2201      	movs	r2, #1
100023d0:	409a      	lsls	r2, r3
100023d2:	693b      	ldr	r3, [r7, #16]
100023d4:	4013      	ands	r3, r2
100023d6:	613b      	str	r3, [r7, #16]
100023d8:	e00c      	b.n	100023f4 <UART001_GetFlagStatus+0x78>
                  ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG));
    
  }
  else
  {
    TempValue = UartRegs->TRBSR;
100023da:	68fa      	ldr	r2, [r7, #12]
100023dc:	238a      	movs	r3, #138	; 0x8a
100023de:	005b      	lsls	r3, r3, #1
100023e0:	58d3      	ldr	r3, [r2, r3]
100023e2:	613b      	str	r3, [r7, #16]
    TempValue  &= ((uint32_t)SHIFT_ONE << \
       (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + 0x05U ));
100023e4:	1cfb      	adds	r3, r7, #3
100023e6:	781b      	ldrb	r3, [r3, #0]
100023e8:	3b0b      	subs	r3, #11
    
  }
  else
  {
    TempValue = UartRegs->TRBSR;
    TempValue  &= ((uint32_t)SHIFT_ONE << \
100023ea:	2201      	movs	r2, #1
100023ec:	409a      	lsls	r2, r3
100023ee:	693b      	ldr	r3, [r7, #16]
100023f0:	4013      	ands	r3, r2
100023f2:	613b      	str	r3, [r7, #16]
       (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + 0x05U ));
  } 

  if(TempValue)
100023f4:	693b      	ldr	r3, [r7, #16]
100023f6:	2b00      	cmp	r3, #0
100023f8:	d001      	beq.n	100023fe <UART001_GetFlagStatus+0x82>
  {
    Status = (status_t)UART001_SET;
100023fa:	2302      	movs	r3, #2
100023fc:	617b      	str	r3, [r7, #20]
  }
  return Status;
100023fe:	697b      	ldr	r3, [r7, #20]
}
10002400:	1c18      	adds	r0, r3, #0
10002402:	46bd      	mov	sp, r7
10002404:	b006      	add	sp, #24
10002406:	bd80      	pop	{r7, pc}

10002408 <UART001_ClearFlag>:
void UART001_ClearFlag
(
  const UART001_HandleType* Handle,
  UART001_FlagStatusType Flag
)
{
10002408:	b580      	push	{r7, lr}
1000240a:	b084      	sub	sp, #16
1000240c:	af00      	add	r7, sp, #0
1000240e:	6078      	str	r0, [r7, #4]
10002410:	1c0a      	adds	r2, r1, #0
10002412:	1cfb      	adds	r3, r7, #3
10002414:	701a      	strb	r2, [r3, #0]

  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
10002416:	687b      	ldr	r3, [r7, #4]
10002418:	681b      	ldr	r3, [r3, #0]
1000241a:	60fb      	str	r3, [r7, #12]
  
  /* <<<DD_UART001_API_8>>>*/
  if(Flag <= UART001_ALT_REC_IND_FLAG)
1000241c:	1cfb      	adds	r3, r7, #3
1000241e:	781b      	ldrb	r3, [r3, #0]
10002420:	2b0f      	cmp	r3, #15
10002422:	d80b      	bhi.n	1000243c <UART001_ClearFlag+0x34>
  {
    UartRegs->PSCR  |= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
10002424:	68fb      	ldr	r3, [r7, #12]
10002426:	6cda      	ldr	r2, [r3, #76]	; 0x4c
10002428:	1cfb      	adds	r3, r7, #3
1000242a:	781b      	ldrb	r3, [r3, #0]
1000242c:	2101      	movs	r1, #1
1000242e:	1c08      	adds	r0, r1, #0
10002430:	4098      	lsls	r0, r3
10002432:	1c03      	adds	r3, r0, #0
10002434:	431a      	orrs	r2, r3
10002436:	68fb      	ldr	r3, [r7, #12]
10002438:	64da      	str	r2, [r3, #76]	; 0x4c
1000243a:	e026      	b.n	1000248a <UART001_ClearFlag+0x82>
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
1000243c:	1cfb      	adds	r3, r7, #3
1000243e:	781b      	ldrb	r3, [r3, #0]
10002440:	2b12      	cmp	r3, #18
10002442:	d811      	bhi.n	10002468 <UART001_ClearFlag+0x60>
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
10002444:	68fa      	ldr	r2, [r7, #12]
10002446:	238c      	movs	r3, #140	; 0x8c
10002448:	005b      	lsls	r3, r3, #1
1000244a:	58d2      	ldr	r2, [r2, r3]
                 ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG)); 
1000244c:	1cfb      	adds	r3, r7, #3
1000244e:	781b      	ldrb	r3, [r3, #0]
10002450:	3b10      	subs	r3, #16
  {
    UartRegs->PSCR  |= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
10002452:	2101      	movs	r1, #1
10002454:	1c08      	adds	r0, r1, #0
10002456:	4098      	lsls	r0, r3
10002458:	1c03      	adds	r3, r0, #0
1000245a:	1c11      	adds	r1, r2, #0
1000245c:	4319      	orrs	r1, r3
1000245e:	68fa      	ldr	r2, [r7, #12]
10002460:	238c      	movs	r3, #140	; 0x8c
10002462:	005b      	lsls	r3, r3, #1
10002464:	50d1      	str	r1, [r2, r3]
10002466:	e010      	b.n	1000248a <UART001_ClearFlag+0x82>
                 ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG)); 
  }
  else
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
10002468:	68fa      	ldr	r2, [r7, #12]
1000246a:	238c      	movs	r3, #140	; 0x8c
1000246c:	005b      	lsls	r3, r3, #1
1000246e:	58d2      	ldr	r2, [r2, r3]
               (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + \
10002470:	1cfb      	adds	r3, r7, #3
10002472:	781b      	ldrb	r3, [r3, #0]
10002474:	3b0b      	subs	r3, #11
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
                 ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG)); 
  }
  else
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
10002476:	2101      	movs	r1, #1
10002478:	1c08      	adds	r0, r1, #0
1000247a:	4098      	lsls	r0, r3
1000247c:	1c03      	adds	r3, r0, #0
1000247e:	1c11      	adds	r1, r2, #0
10002480:	4319      	orrs	r1, r3
10002482:	68fa      	ldr	r2, [r7, #12]
10002484:	238c      	movs	r3, #140	; 0x8c
10002486:	005b      	lsls	r3, r3, #1
10002488:	50d1      	str	r1, [r2, r3]
               (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + \
                                                       UART001_FLAG_OFFSET ));
  }  
  
}
1000248a:	46bd      	mov	sp, r7
1000248c:	b004      	add	sp, #16
1000248e:	bd80      	pop	{r7, pc}

10002490 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002490:	b5b0      	push	{r4, r5, r7, lr}
10002492:	b082      	sub	sp, #8
10002494:	af00      	add	r7, sp, #0
10002496:	1c02      	adds	r2, r0, #0
10002498:	6039      	str	r1, [r7, #0]
1000249a:	1dfb      	adds	r3, r7, #7
1000249c:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
1000249e:	1dfb      	adds	r3, r7, #7
100024a0:	781b      	ldrb	r3, [r3, #0]
100024a2:	2b7f      	cmp	r3, #127	; 0x7f
100024a4:	d932      	bls.n	1000250c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
100024a6:	4930      	ldr	r1, [pc, #192]	; (10002568 <NVIC_SetPriority+0xd8>)
100024a8:	1dfb      	adds	r3, r7, #7
100024aa:	781b      	ldrb	r3, [r3, #0]
100024ac:	1c1a      	adds	r2, r3, #0
100024ae:	230f      	movs	r3, #15
100024b0:	4013      	ands	r3, r2
100024b2:	3b08      	subs	r3, #8
100024b4:	0898      	lsrs	r0, r3, #2
100024b6:	4a2c      	ldr	r2, [pc, #176]	; (10002568 <NVIC_SetPriority+0xd8>)
100024b8:	1dfb      	adds	r3, r7, #7
100024ba:	781b      	ldrb	r3, [r3, #0]
100024bc:	1c1c      	adds	r4, r3, #0
100024be:	230f      	movs	r3, #15
100024c0:	4023      	ands	r3, r4
100024c2:	3b08      	subs	r3, #8
100024c4:	089b      	lsrs	r3, r3, #2
100024c6:	3306      	adds	r3, #6
100024c8:	009b      	lsls	r3, r3, #2
100024ca:	18d3      	adds	r3, r2, r3
100024cc:	685b      	ldr	r3, [r3, #4]
100024ce:	1dfa      	adds	r2, r7, #7
100024d0:	7812      	ldrb	r2, [r2, #0]
100024d2:	1c14      	adds	r4, r2, #0
100024d4:	2203      	movs	r2, #3
100024d6:	4022      	ands	r2, r4
100024d8:	00d2      	lsls	r2, r2, #3
100024da:	24ff      	movs	r4, #255	; 0xff
100024dc:	1c25      	adds	r5, r4, #0
100024de:	4095      	lsls	r5, r2
100024e0:	1c2a      	adds	r2, r5, #0
100024e2:	43d2      	mvns	r2, r2
100024e4:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
100024e6:	683b      	ldr	r3, [r7, #0]
100024e8:	019c      	lsls	r4, r3, #6
100024ea:	23ff      	movs	r3, #255	; 0xff
100024ec:	401c      	ands	r4, r3
100024ee:	1dfb      	adds	r3, r7, #7
100024f0:	781b      	ldrb	r3, [r3, #0]
100024f2:	1c1d      	adds	r5, r3, #0
100024f4:	2303      	movs	r3, #3
100024f6:	402b      	ands	r3, r5
100024f8:	00db      	lsls	r3, r3, #3
100024fa:	1c25      	adds	r5, r4, #0
100024fc:	409d      	lsls	r5, r3
100024fe:	1c2b      	adds	r3, r5, #0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10002500:	431a      	orrs	r2, r3
10002502:	1d83      	adds	r3, r0, #6
10002504:	009b      	lsls	r3, r3, #2
10002506:	18cb      	adds	r3, r1, r3
10002508:	605a      	str	r2, [r3, #4]
1000250a:	e029      	b.n	10002560 <NVIC_SetPriority+0xd0>
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
1000250c:	4b17      	ldr	r3, [pc, #92]	; (1000256c <NVIC_SetPriority+0xdc>)
1000250e:	1dfa      	adds	r2, r7, #7
10002510:	7812      	ldrb	r2, [r2, #0]
10002512:	b252      	sxtb	r2, r2
10002514:	0892      	lsrs	r2, r2, #2
10002516:	4915      	ldr	r1, [pc, #84]	; (1000256c <NVIC_SetPriority+0xdc>)
10002518:	1df8      	adds	r0, r7, #7
1000251a:	7800      	ldrb	r0, [r0, #0]
1000251c:	b240      	sxtb	r0, r0
1000251e:	0880      	lsrs	r0, r0, #2
10002520:	30c0      	adds	r0, #192	; 0xc0
10002522:	0080      	lsls	r0, r0, #2
10002524:	5841      	ldr	r1, [r0, r1]
10002526:	1df8      	adds	r0, r7, #7
10002528:	7800      	ldrb	r0, [r0, #0]
1000252a:	1c04      	adds	r4, r0, #0
1000252c:	2003      	movs	r0, #3
1000252e:	4020      	ands	r0, r4
10002530:	00c0      	lsls	r0, r0, #3
10002532:	24ff      	movs	r4, #255	; 0xff
10002534:	1c25      	adds	r5, r4, #0
10002536:	4085      	lsls	r5, r0
10002538:	1c28      	adds	r0, r5, #0
1000253a:	43c0      	mvns	r0, r0
1000253c:	4008      	ands	r0, r1
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
1000253e:	6839      	ldr	r1, [r7, #0]
10002540:	018c      	lsls	r4, r1, #6
10002542:	21ff      	movs	r1, #255	; 0xff
10002544:	400c      	ands	r4, r1
10002546:	1df9      	adds	r1, r7, #7
10002548:	7809      	ldrb	r1, [r1, #0]
1000254a:	1c0d      	adds	r5, r1, #0
1000254c:	2103      	movs	r1, #3
1000254e:	4029      	ands	r1, r5
10002550:	00c9      	lsls	r1, r1, #3
10002552:	1c25      	adds	r5, r4, #0
10002554:	408d      	lsls	r5, r1
10002556:	1c29      	adds	r1, r5, #0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10002558:	4301      	orrs	r1, r0
1000255a:	32c0      	adds	r2, #192	; 0xc0
1000255c:	0092      	lsls	r2, r2, #2
1000255e:	50d1      	str	r1, [r2, r3]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
10002560:	46bd      	mov	sp, r7
10002562:	b002      	add	sp, #8
10002564:	bdb0      	pop	{r4, r5, r7, pc}
10002566:	46c0      	nop			; (mov r8, r8)
10002568:	e000ed00 	.word	0xe000ed00
1000256c:	e000e100 	.word	0xe000e100

10002570 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10002570:	b580      	push	{r7, lr}
10002572:	b082      	sub	sp, #8
10002574:	af00      	add	r7, sp, #0
10002576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
10002578:	687b      	ldr	r3, [r7, #4]
1000257a:	1e5a      	subs	r2, r3, #1
1000257c:	4b0c      	ldr	r3, [pc, #48]	; (100025b0 <SysTick_Config+0x40>)
1000257e:	429a      	cmp	r2, r3
10002580:	d901      	bls.n	10002586 <SysTick_Config+0x16>
10002582:	2301      	movs	r3, #1
10002584:	e010      	b.n	100025a8 <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
10002586:	4b0b      	ldr	r3, [pc, #44]	; (100025b4 <SysTick_Config+0x44>)
10002588:	687a      	ldr	r2, [r7, #4]
1000258a:	3a01      	subs	r2, #1
1000258c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
1000258e:	2301      	movs	r3, #1
10002590:	425b      	negs	r3, r3
10002592:	1c18      	adds	r0, r3, #0
10002594:	2103      	movs	r1, #3
10002596:	f7ff ff7b 	bl	10002490 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1000259a:	4b06      	ldr	r3, [pc, #24]	; (100025b4 <SysTick_Config+0x44>)
1000259c:	2200      	movs	r2, #0
1000259e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
100025a0:	4b04      	ldr	r3, [pc, #16]	; (100025b4 <SysTick_Config+0x44>)
100025a2:	2207      	movs	r2, #7
100025a4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
100025a6:	2300      	movs	r3, #0
}
100025a8:	1c18      	adds	r0, r3, #0
100025aa:	46bd      	mov	sp, r7
100025ac:	b002      	add	sp, #8
100025ae:	bd80      	pop	{r7, pc}
100025b0:	00ffffff 	.word	0x00ffffff
100025b4:	e000e010 	.word	0xe000e010

100025b8 <SYSTM001_lInsertTimerList>:

/*
 * This function is called to insert a timer into the timer list.
 */
static void  SYSTM001_lInsertTimerList (uint32_t Index)
{
100025b8:	b580      	push	{r7, lr}
100025ba:	b086      	sub	sp, #24
100025bc:	af00      	add	r7, sp, #0
100025be:	6078      	str	r0, [r7, #4]
  SYSTM001_TimerObject* TmrObjPtr;
  int32_t DeltaTicks;
  uint32_t TempTmrCnt;
   /* Get timer time */
  TempTmrCnt = TimerTbl[Index].TimerCount;
100025c0:	4a50      	ldr	r2, [pc, #320]	; (10002704 <SYSTM001_lInsertTimerList+0x14c>)
100025c2:	687b      	ldr	r3, [r7, #4]
100025c4:	015b      	lsls	r3, r3, #5
100025c6:	18d3      	adds	r3, r2, r3
100025c8:	3308      	adds	r3, #8
100025ca:	681b      	ldr	r3, [r3, #0]
100025cc:	60fb      	str	r3, [r7, #12]
  /* Check if timer count is zero */
  /* <<<DD_SYSTM001_PRIV _API_1>>> */

  /* Check if Timer list is NULL */
  if(TimerList == NULL)
100025ce:	4b4e      	ldr	r3, [pc, #312]	; (10002708 <SYSTM001_lInsertTimerList+0x150>)
100025d0:	681b      	ldr	r3, [r3, #0]
100025d2:	2b00      	cmp	r3, #0
100025d4:	d106      	bne.n	100025e4 <SYSTM001_lInsertTimerList+0x2c>
  {
      /* Set this as first Timer */
      TimerList = &TimerTbl[Index];
100025d6:	687b      	ldr	r3, [r7, #4]
100025d8:	015a      	lsls	r2, r3, #5
100025da:	4b4a      	ldr	r3, [pc, #296]	; (10002704 <SYSTM001_lInsertTimerList+0x14c>)
100025dc:	18d2      	adds	r2, r2, r3
100025de:	4b4a      	ldr	r3, [pc, #296]	; (10002708 <SYSTM001_lInsertTimerList+0x150>)
100025e0:	601a      	str	r2, [r3, #0]
100025e2:	e08b      	b.n	100026fc <SYSTM001_lInsertTimerList+0x144>
  }
  /* IF Not, find the correct place ,and insert the specified timer */
  else
  {
    TmrObjPtr = TimerList;
100025e4:	4b48      	ldr	r3, [pc, #288]	; (10002708 <SYSTM001_lInsertTimerList+0x150>)
100025e6:	681b      	ldr	r3, [r3, #0]
100025e8:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    DeltaTicks = (int32_t)TempTmrCnt;
100025ea:	68fb      	ldr	r3, [r7, #12]
100025ec:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while(TmrObjPtr != NULL)
100025ee:	e081      	b.n	100026f4 <SYSTM001_lInsertTimerList+0x13c>
    {
      /* Get timer Count Difference  */
      DeltaTicks -= (int32_t)TmrObjPtr->TimerCount;
100025f0:	697b      	ldr	r3, [r7, #20]
100025f2:	689b      	ldr	r3, [r3, #8]
100025f4:	693a      	ldr	r2, [r7, #16]
100025f6:	1ad3      	subs	r3, r2, r3
100025f8:	613b      	str	r3, [r7, #16]
      /* Is delta ticks<0? */
      if(DeltaTicks < 0)
100025fa:	693b      	ldr	r3, [r7, #16]
100025fc:	2b00      	cmp	r3, #0
100025fe:	da5a      	bge.n	100026b6 <SYSTM001_lInsertTimerList+0xfe>
      {
        /*  Check If head item */
        if(TmrObjPtr->TimerPrev!= NULL)
10002600:	697b      	ldr	r3, [r7, #20]
10002602:	69db      	ldr	r3, [r3, #28]
10002604:	2b00      	cmp	r3, #0
10002606:	d01c      	beq.n	10002642 <SYSTM001_lInsertTimerList+0x8a>
        {
          /* If Insert to list */
          TmrObjPtr->TimerPrev->TimerNext = &TimerTbl[Index];
10002608:	697b      	ldr	r3, [r7, #20]
1000260a:	69db      	ldr	r3, [r3, #28]
1000260c:	687a      	ldr	r2, [r7, #4]
1000260e:	0151      	lsls	r1, r2, #5
10002610:	4a3c      	ldr	r2, [pc, #240]	; (10002704 <SYSTM001_lInsertTimerList+0x14c>)
10002612:	188a      	adds	r2, r1, r2
10002614:	619a      	str	r2, [r3, #24]
          TimerTbl[Index].TimerPrev = TmrObjPtr->TimerPrev;
10002616:	697b      	ldr	r3, [r7, #20]
10002618:	69da      	ldr	r2, [r3, #28]
1000261a:	493a      	ldr	r1, [pc, #232]	; (10002704 <SYSTM001_lInsertTimerList+0x14c>)
1000261c:	687b      	ldr	r3, [r7, #4]
1000261e:	015b      	lsls	r3, r3, #5
10002620:	18cb      	adds	r3, r1, r3
10002622:	331c      	adds	r3, #28
10002624:	601a      	str	r2, [r3, #0]
          TimerTbl[Index].TimerNext = TmrObjPtr;
10002626:	4a37      	ldr	r2, [pc, #220]	; (10002704 <SYSTM001_lInsertTimerList+0x14c>)
10002628:	687b      	ldr	r3, [r7, #4]
1000262a:	015b      	lsls	r3, r3, #5
1000262c:	18d3      	adds	r3, r2, r3
1000262e:	3318      	adds	r3, #24
10002630:	697a      	ldr	r2, [r7, #20]
10002632:	601a      	str	r2, [r3, #0]
          TmrObjPtr->TimerPrev = &TimerTbl[Index];
10002634:	687b      	ldr	r3, [r7, #4]
10002636:	015a      	lsls	r2, r3, #5
10002638:	4b32      	ldr	r3, [pc, #200]	; (10002704 <SYSTM001_lInsertTimerList+0x14c>)
1000263a:	18d2      	adds	r2, r2, r3
1000263c:	697b      	ldr	r3, [r7, #20]
1000263e:	61da      	str	r2, [r3, #28]
10002640:	e014      	b.n	1000266c <SYSTM001_lInsertTimerList+0xb4>
        }
        else
        {
          /* Set Timer as first item */
          TimerTbl[Index].TimerNext = TimerList;
10002642:	4b31      	ldr	r3, [pc, #196]	; (10002708 <SYSTM001_lInsertTimerList+0x150>)
10002644:	681a      	ldr	r2, [r3, #0]
10002646:	492f      	ldr	r1, [pc, #188]	; (10002704 <SYSTM001_lInsertTimerList+0x14c>)
10002648:	687b      	ldr	r3, [r7, #4]
1000264a:	015b      	lsls	r3, r3, #5
1000264c:	18cb      	adds	r3, r1, r3
1000264e:	3318      	adds	r3, #24
10002650:	601a      	str	r2, [r3, #0]
          TimerList->TimerPrev = &TimerTbl[Index];
10002652:	4b2d      	ldr	r3, [pc, #180]	; (10002708 <SYSTM001_lInsertTimerList+0x150>)
10002654:	681b      	ldr	r3, [r3, #0]
10002656:	687a      	ldr	r2, [r7, #4]
10002658:	0151      	lsls	r1, r2, #5
1000265a:	4a2a      	ldr	r2, [pc, #168]	; (10002704 <SYSTM001_lInsertTimerList+0x14c>)
1000265c:	188a      	adds	r2, r1, r2
1000265e:	61da      	str	r2, [r3, #28]
          TimerList = &TimerTbl[Index];
10002660:	687b      	ldr	r3, [r7, #4]
10002662:	015a      	lsls	r2, r3, #5
10002664:	4b27      	ldr	r3, [pc, #156]	; (10002704 <SYSTM001_lInsertTimerList+0x14c>)
10002666:	18d2      	adds	r2, r2, r3
10002668:	4b27      	ldr	r3, [pc, #156]	; (10002708 <SYSTM001_lInsertTimerList+0x150>)
1000266a:	601a      	str	r2, [r3, #0]
        }
        TimerTbl[Index].TimerCount = \
                TimerTbl[Index].TimerNext->TimerCount + (uint32_t)DeltaTicks;
1000266c:	4a25      	ldr	r2, [pc, #148]	; (10002704 <SYSTM001_lInsertTimerList+0x14c>)
1000266e:	687b      	ldr	r3, [r7, #4]
10002670:	015b      	lsls	r3, r3, #5
10002672:	18d3      	adds	r3, r2, r3
10002674:	3318      	adds	r3, #24
10002676:	681b      	ldr	r3, [r3, #0]
10002678:	689a      	ldr	r2, [r3, #8]
1000267a:	693b      	ldr	r3, [r7, #16]
1000267c:	18d2      	adds	r2, r2, r3
          /* Set Timer as first item */
          TimerTbl[Index].TimerNext = TimerList;
          TimerList->TimerPrev = &TimerTbl[Index];
          TimerList = &TimerTbl[Index];
        }
        TimerTbl[Index].TimerCount = \
1000267e:	4921      	ldr	r1, [pc, #132]	; (10002704 <SYSTM001_lInsertTimerList+0x14c>)
10002680:	687b      	ldr	r3, [r7, #4]
10002682:	015b      	lsls	r3, r3, #5
10002684:	18cb      	adds	r3, r1, r3
10002686:	3308      	adds	r3, #8
10002688:	601a      	str	r2, [r3, #0]
                TimerTbl[Index].TimerNext->TimerCount + (uint32_t)DeltaTicks;
        TimerTbl[Index].TimerNext->TimerCount  -= TimerTbl[Index].TimerCount;
1000268a:	4a1e      	ldr	r2, [pc, #120]	; (10002704 <SYSTM001_lInsertTimerList+0x14c>)
1000268c:	687b      	ldr	r3, [r7, #4]
1000268e:	015b      	lsls	r3, r3, #5
10002690:	18d3      	adds	r3, r2, r3
10002692:	3318      	adds	r3, #24
10002694:	681b      	ldr	r3, [r3, #0]
10002696:	491b      	ldr	r1, [pc, #108]	; (10002704 <SYSTM001_lInsertTimerList+0x14c>)
10002698:	687a      	ldr	r2, [r7, #4]
1000269a:	0152      	lsls	r2, r2, #5
1000269c:	188a      	adds	r2, r1, r2
1000269e:	3218      	adds	r2, #24
100026a0:	6812      	ldr	r2, [r2, #0]
100026a2:	6891      	ldr	r1, [r2, #8]
100026a4:	4817      	ldr	r0, [pc, #92]	; (10002704 <SYSTM001_lInsertTimerList+0x14c>)
100026a6:	687a      	ldr	r2, [r7, #4]
100026a8:	0152      	lsls	r2, r2, #5
100026aa:	1882      	adds	r2, r0, r2
100026ac:	3208      	adds	r2, #8
100026ae:	6812      	ldr	r2, [r2, #0]
100026b0:	1a8a      	subs	r2, r1, r2
100026b2:	609a      	str	r2, [r3, #8]
        break;
100026b4:	e022      	b.n	100026fc <SYSTM001_lInsertTimerList+0x144>
      }
      /* Is last item in list? */
      else
      {
        if((DeltaTicks >= 0) && (TmrObjPtr->TimerNext == NULL))
100026b6:	693b      	ldr	r3, [r7, #16]
100026b8:	2b00      	cmp	r3, #0
100026ba:	db18      	blt.n	100026ee <SYSTM001_lInsertTimerList+0x136>
100026bc:	697b      	ldr	r3, [r7, #20]
100026be:	699b      	ldr	r3, [r3, #24]
100026c0:	2b00      	cmp	r3, #0
100026c2:	d114      	bne.n	100026ee <SYSTM001_lInsertTimerList+0x136>
        {
          /* Yes,insert into */
          TimerTbl[Index].TimerPrev = TmrObjPtr;
100026c4:	4a0f      	ldr	r2, [pc, #60]	; (10002704 <SYSTM001_lInsertTimerList+0x14c>)
100026c6:	687b      	ldr	r3, [r7, #4]
100026c8:	015b      	lsls	r3, r3, #5
100026ca:	18d3      	adds	r3, r2, r3
100026cc:	331c      	adds	r3, #28
100026ce:	697a      	ldr	r2, [r7, #20]
100026d0:	601a      	str	r2, [r3, #0]
          TmrObjPtr->TimerNext = &TimerTbl[Index];
100026d2:	687b      	ldr	r3, [r7, #4]
100026d4:	015a      	lsls	r2, r3, #5
100026d6:	4b0b      	ldr	r3, [pc, #44]	; (10002704 <SYSTM001_lInsertTimerList+0x14c>)
100026d8:	18d2      	adds	r2, r2, r3
100026da:	697b      	ldr	r3, [r7, #20]
100026dc:	619a      	str	r2, [r3, #24]
          TimerTbl[Index].TimerCount = (uint32_t)DeltaTicks;
100026de:	693a      	ldr	r2, [r7, #16]
100026e0:	4908      	ldr	r1, [pc, #32]	; (10002704 <SYSTM001_lInsertTimerList+0x14c>)
100026e2:	687b      	ldr	r3, [r7, #4]
100026e4:	015b      	lsls	r3, r3, #5
100026e6:	18cb      	adds	r3, r1, r3
100026e8:	3308      	adds	r3, #8
100026ea:	601a      	str	r2, [r3, #0]
          break;
100026ec:	e006      	b.n	100026fc <SYSTM001_lInsertTimerList+0x144>
        }
      }
      /* Get the next item in timer list    */
      TmrObjPtr = TmrObjPtr->TimerNext;
100026ee:	697b      	ldr	r3, [r7, #20]
100026f0:	699b      	ldr	r3, [r3, #24]
100026f2:	617b      	str	r3, [r7, #20]
  {
    TmrObjPtr = TimerList;
    /* Get timer tick */
    DeltaTicks = (int32_t)TempTmrCnt;
    /* Find correct place for inserting the timer */
    while(TmrObjPtr != NULL)
100026f4:	697b      	ldr	r3, [r7, #20]
100026f6:	2b00      	cmp	r3, #0
100026f8:	d000      	beq.n	100026fc <SYSTM001_lInsertTimerList+0x144>
100026fa:	e779      	b.n	100025f0 <SYSTM001_lInsertTimerList+0x38>
      }
      /* Get the next item in timer list    */
      TmrObjPtr = TmrObjPtr->TimerNext;
    }
  }
}
100026fc:	46bd      	mov	sp, r7
100026fe:	b006      	add	sp, #24
10002700:	bd80      	pop	{r7, pc}
10002702:	46c0      	nop			; (mov r8, r8)
10002704:	20000940 	.word	0x20000940
10002708:	20000930 	.word	0x20000930

1000270c <SYSTM001_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void  SYSTM001_lRemoveTimerList(uint32_t Index)
{
1000270c:	b580      	push	{r7, lr}
1000270e:	b084      	sub	sp, #16
10002710:	af00      	add	r7, sp, #0
10002712:	6078      	str	r0, [r7, #4]
  SYSTM001_TimerObject* TmrObjPtr;
  TmrObjPtr = &TimerTbl[Index];
10002714:	687b      	ldr	r3, [r7, #4]
10002716:	015a      	lsls	r2, r3, #5
10002718:	4b27      	ldr	r3, [pc, #156]	; (100027b8 <SYSTM001_lRemoveTimerList+0xac>)
1000271a:	18d3      	adds	r3, r2, r3
1000271c:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  /* <<<DD_SYSTM001_PRIV _API_2>>> */
  if((TmrObjPtr->TimerPrev == NULL) && (TmrObjPtr->TimerNext == NULL))
1000271e:	68fb      	ldr	r3, [r7, #12]
10002720:	69db      	ldr	r3, [r3, #28]
10002722:	2b00      	cmp	r3, #0
10002724:	d107      	bne.n	10002736 <SYSTM001_lRemoveTimerList+0x2a>
10002726:	68fb      	ldr	r3, [r7, #12]
10002728:	699b      	ldr	r3, [r3, #24]
1000272a:	2b00      	cmp	r3, #0
1000272c:	d103      	bne.n	10002736 <SYSTM001_lRemoveTimerList+0x2a>
  {
    /* set timer list as NULL */ 
    TimerList = NULL;                 	
1000272e:	4b23      	ldr	r3, [pc, #140]	; (100027bc <SYSTM001_lRemoveTimerList+0xb0>)
10002730:	2200      	movs	r2, #0
10002732:	601a      	str	r2, [r3, #0]
10002734:	e03d      	b.n	100027b2 <SYSTM001_lRemoveTimerList+0xa6>
  }
   /* Check if the first item in timer list   */
  else if(TmrObjPtr->TimerPrev == NULL)     
10002736:	68fb      	ldr	r3, [r7, #12]
10002738:	69db      	ldr	r3, [r3, #28]
1000273a:	2b00      	cmp	r3, #0
1000273c:	d114      	bne.n	10002768 <SYSTM001_lRemoveTimerList+0x5c>
  {   
    /* Remove timer from list,and reset timer list */
    TimerList  = TmrObjPtr->TimerNext;
1000273e:	68fb      	ldr	r3, [r7, #12]
10002740:	699a      	ldr	r2, [r3, #24]
10002742:	4b1e      	ldr	r3, [pc, #120]	; (100027bc <SYSTM001_lRemoveTimerList+0xb0>)
10002744:	601a      	str	r2, [r3, #0]
    TimerList->TimerPrev = NULL;
10002746:	4b1d      	ldr	r3, [pc, #116]	; (100027bc <SYSTM001_lRemoveTimerList+0xb0>)
10002748:	681b      	ldr	r3, [r3, #0]
1000274a:	2200      	movs	r2, #0
1000274c:	61da      	str	r2, [r3, #28]
    TmrObjPtr->TimerNext->TimerCount += TmrObjPtr->TimerCount;
1000274e:	68fb      	ldr	r3, [r7, #12]
10002750:	699b      	ldr	r3, [r3, #24]
10002752:	68fa      	ldr	r2, [r7, #12]
10002754:	6992      	ldr	r2, [r2, #24]
10002756:	6891      	ldr	r1, [r2, #8]
10002758:	68fa      	ldr	r2, [r7, #12]
1000275a:	6892      	ldr	r2, [r2, #8]
1000275c:	188a      	adds	r2, r1, r2
1000275e:	609a      	str	r2, [r3, #8]
    TmrObjPtr->TimerNext    = NULL;  
10002760:	68fb      	ldr	r3, [r7, #12]
10002762:	2200      	movs	r2, #0
10002764:	619a      	str	r2, [r3, #24]
10002766:	e024      	b.n	100027b2 <SYSTM001_lRemoveTimerList+0xa6>
  }
  /* Check if the last item in timer list   */
  else if(TmrObjPtr->TimerNext == NULL)      
10002768:	68fb      	ldr	r3, [r7, #12]
1000276a:	699b      	ldr	r3, [r3, #24]
1000276c:	2b00      	cmp	r3, #0
1000276e:	d107      	bne.n	10002780 <SYSTM001_lRemoveTimerList+0x74>
  {
    /* Remove timer from list */
    TmrObjPtr->TimerPrev->TimerNext = NULL;	
10002770:	68fb      	ldr	r3, [r7, #12]
10002772:	69db      	ldr	r3, [r3, #28]
10002774:	2200      	movs	r2, #0
10002776:	619a      	str	r2, [r3, #24]
    TmrObjPtr->TimerPrev = NULL;
10002778:	68fb      	ldr	r3, [r7, #12]
1000277a:	2200      	movs	r2, #0
1000277c:	61da      	str	r2, [r3, #28]
1000277e:	e018      	b.n	100027b2 <SYSTM001_lRemoveTimerList+0xa6>
  }
  else                                /*  remove timer from list         */
  {
    /*  Remove timer from list */
    TmrObjPtr->TimerPrev->TimerNext  =  TmrObjPtr->TimerNext;
10002780:	68fb      	ldr	r3, [r7, #12]
10002782:	69db      	ldr	r3, [r3, #28]
10002784:	68fa      	ldr	r2, [r7, #12]
10002786:	6992      	ldr	r2, [r2, #24]
10002788:	619a      	str	r2, [r3, #24]
    TmrObjPtr->TimerNext->TimerPrev  =  TmrObjPtr->TimerPrev;
1000278a:	68fb      	ldr	r3, [r7, #12]
1000278c:	699b      	ldr	r3, [r3, #24]
1000278e:	68fa      	ldr	r2, [r7, #12]
10002790:	69d2      	ldr	r2, [r2, #28]
10002792:	61da      	str	r2, [r3, #28]
    TmrObjPtr->TimerNext->TimerCount  += TmrObjPtr->TimerCount;
10002794:	68fb      	ldr	r3, [r7, #12]
10002796:	699b      	ldr	r3, [r3, #24]
10002798:	68fa      	ldr	r2, [r7, #12]
1000279a:	6992      	ldr	r2, [r2, #24]
1000279c:	6891      	ldr	r1, [r2, #8]
1000279e:	68fa      	ldr	r2, [r7, #12]
100027a0:	6892      	ldr	r2, [r2, #8]
100027a2:	188a      	adds	r2, r1, r2
100027a4:	609a      	str	r2, [r3, #8]
    TmrObjPtr->TimerNext = NULL;
100027a6:	68fb      	ldr	r3, [r7, #12]
100027a8:	2200      	movs	r2, #0
100027aa:	619a      	str	r2, [r3, #24]
    TmrObjPtr->TimerPrev = NULL;
100027ac:	68fb      	ldr	r3, [r7, #12]
100027ae:	2200      	movs	r2, #0
100027b0:	61da      	str	r2, [r3, #28]
  }
}
100027b2:	46bd      	mov	sp, r7
100027b4:	b004      	add	sp, #16
100027b6:	bd80      	pop	{r7, pc}
100027b8:	20000940 	.word	0x20000940
100027bc:	20000930 	.word	0x20000930

100027c0 <SYSTM001_lTimerHandler>:

/*
 * Handler function  called from Systick event handler. 
 */
static void  SYSTM001_lTimerHandler (void)
{
100027c0:	b580      	push	{r7, lr}
100027c2:	b082      	sub	sp, #8
100027c4:	af00      	add	r7, sp, #0
  SYSTM001_TimerObject* TmrObjPtr;
   /* Get first item of timer list       */
  TmrObjPtr = TimerList;         
100027c6:	4b1f      	ldr	r3, [pc, #124]	; (10002844 <SYSTM001_lTimerHandler+0x84>)
100027c8:	681b      	ldr	r3, [r3, #0]
100027ca:	607b      	str	r3, [r7, #4]
  /* <<<DD_SYSTM001_PRIV _API_3>>> */  
  while((TmrObjPtr != NULL) && (TmrObjPtr->TimerCount == 0UL) )
100027cc:	e02d      	b.n	1000282a <SYSTM001_lTimerHandler+0x6a>
  {	
    /* Check whether timer is a one shot timer */
    if(TmrObjPtr->TimerType == SYSTM001_ONE_SHOT)
100027ce:	687b      	ldr	r3, [r7, #4]
100027d0:	791b      	ldrb	r3, [r3, #4]
100027d2:	2b00      	cmp	r3, #0
100027d4:	d10e      	bne.n	100027f4 <SYSTM001_lTimerHandler+0x34>
    {
      /* Yes,remove this timer from timer list */
      SYSTM001_lRemoveTimerList(TmrObjPtr->TimerID);
100027d6:	687b      	ldr	r3, [r7, #4]
100027d8:	681b      	ldr	r3, [r3, #0]
100027da:	1c18      	adds	r0, r3, #0
100027dc:	f7ff ff96 	bl	1000270c <SYSTM001_lRemoveTimerList>
      /* Set timer status as SYSTM001_STATE_STOPPED */
      TmrObjPtr->TimerState = SYSTM001_STATE_STOPPED;
100027e0:	687b      	ldr	r3, [r7, #4]
100027e2:	2201      	movs	r2, #1
100027e4:	715a      	strb	r2, [r3, #5]
      /* Call timer callback function */
      (TmrObjPtr->TimerCallBack)(TmrObjPtr->ParamToCallBack);
100027e6:	687b      	ldr	r3, [r7, #4]
100027e8:	691a      	ldr	r2, [r3, #16]
100027ea:	687b      	ldr	r3, [r7, #4]
100027ec:	695b      	ldr	r3, [r3, #20]
100027ee:	1c18      	adds	r0, r3, #0
100027f0:	4790      	blx	r2
100027f2:	e017      	b.n	10002824 <SYSTM001_lTimerHandler+0x64>
    }
    /* Check whether timer is SYSTM001_PERIODIC */
    else if(TmrObjPtr->TimerType == SYSTM001_PERIODIC)
100027f4:	687b      	ldr	r3, [r7, #4]
100027f6:	791b      	ldrb	r3, [r3, #4]
100027f8:	2b01      	cmp	r3, #1
100027fa:	d11e      	bne.n	1000283a <SYSTM001_lTimerHandler+0x7a>
    {
      /* Yes,remove this timer from timer list */
      SYSTM001_lRemoveTimerList(TmrObjPtr->TimerID);
100027fc:	687b      	ldr	r3, [r7, #4]
100027fe:	681b      	ldr	r3, [r3, #0]
10002800:	1c18      	adds	r0, r3, #0
10002802:	f7ff ff83 	bl	1000270c <SYSTM001_lRemoveTimerList>
      /* Reset timer tick             */
      TmrObjPtr->TimerCount = TmrObjPtr->TimerReload;
10002806:	687b      	ldr	r3, [r7, #4]
10002808:	68da      	ldr	r2, [r3, #12]
1000280a:	687b      	ldr	r3, [r7, #4]
1000280c:	609a      	str	r2, [r3, #8]
        /* Insert timer into timer list */
      SYSTM001_lInsertTimerList(TmrObjPtr->TimerID);
1000280e:	687b      	ldr	r3, [r7, #4]
10002810:	681b      	ldr	r3, [r3, #0]
10002812:	1c18      	adds	r0, r3, #0
10002814:	f7ff fed0 	bl	100025b8 <SYSTM001_lInsertTimerList>
      /* Call timer callback function */
      (TmrObjPtr->TimerCallBack)(TmrObjPtr->ParamToCallBack);
10002818:	687b      	ldr	r3, [r7, #4]
1000281a:	691a      	ldr	r2, [r3, #16]
1000281c:	687b      	ldr	r3, [r7, #4]
1000281e:	695b      	ldr	r3, [r3, #20]
10002820:	1c18      	adds	r0, r3, #0
10002822:	4790      	blx	r2
    else
    {
      break;
    }
    /* Get first item of timer list */
    TmrObjPtr = TimerList;
10002824:	4b07      	ldr	r3, [pc, #28]	; (10002844 <SYSTM001_lTimerHandler+0x84>)
10002826:	681b      	ldr	r3, [r3, #0]
10002828:	607b      	str	r3, [r7, #4]
{
  SYSTM001_TimerObject* TmrObjPtr;
   /* Get first item of timer list       */
  TmrObjPtr = TimerList;         
  /* <<<DD_SYSTM001_PRIV _API_3>>> */  
  while((TmrObjPtr != NULL) && (TmrObjPtr->TimerCount == 0UL) )
1000282a:	687b      	ldr	r3, [r7, #4]
1000282c:	2b00      	cmp	r3, #0
1000282e:	d005      	beq.n	1000283c <SYSTM001_lTimerHandler+0x7c>
10002830:	687b      	ldr	r3, [r7, #4]
10002832:	689b      	ldr	r3, [r3, #8]
10002834:	2b00      	cmp	r3, #0
10002836:	d0ca      	beq.n	100027ce <SYSTM001_lTimerHandler+0xe>
10002838:	e000      	b.n	1000283c <SYSTM001_lTimerHandler+0x7c>
      /* Call timer callback function */
      (TmrObjPtr->TimerCallBack)(TmrObjPtr->ParamToCallBack);
    }
    else
    {
      break;
1000283a:	46c0      	nop			; (mov r8, r8)
    }
    /* Get first item of timer list */
    TmrObjPtr = TimerList;
  }
}
1000283c:	46bd      	mov	sp, r7
1000283e:	b002      	add	sp, #8
10002840:	bd80      	pop	{r7, pc}
10002842:	46c0      	nop			; (mov r8, r8)
10002844:	20000930 	.word	0x20000930

10002848 <SysTick_Handler>:

/*
 *  SysTick Event Handler 
 */
void  SysTick_Handler(void)
{ 
10002848:	b580      	push	{r7, lr}
1000284a:	b082      	sub	sp, #8
1000284c:	af00      	add	r7, sp, #0
  SYSTM001_TimerObject* TmrObjPtr;
  TmrObjPtr = TimerList;
1000284e:	4b0e      	ldr	r3, [pc, #56]	; (10002888 <SysTick_Handler+0x40>)
10002850:	681b      	ldr	r3, [r3, #0]
10002852:	607b      	str	r3, [r7, #4]
  /* <<<DD_SYSTM001_PRIV _API_4>>> */
  SysTickCount++;
10002854:	4b0d      	ldr	r3, [pc, #52]	; (1000288c <SysTick_Handler+0x44>)
10002856:	681b      	ldr	r3, [r3, #0]
10002858:	1c5a      	adds	r2, r3, #1
1000285a:	4b0c      	ldr	r3, [pc, #48]	; (1000288c <SysTick_Handler+0x44>)
1000285c:	601a      	str	r2, [r3, #0]
  if(TmrObjPtr == NULL)
1000285e:	687b      	ldr	r3, [r7, #4]
10002860:	2b00      	cmp	r3, #0
10002862:	d00e      	beq.n	10002882 <SysTick_Handler+0x3a>
    /* Not supposed to be here */
   ;  
  }
  else
  {
    if(TmrObjPtr->TimerCount > 1UL)
10002864:	687b      	ldr	r3, [r7, #4]
10002866:	689b      	ldr	r3, [r3, #8]
10002868:	2b01      	cmp	r3, #1
1000286a:	d905      	bls.n	10002878 <SysTick_Handler+0x30>
    {
      TmrObjPtr->TimerCount--;
1000286c:	687b      	ldr	r3, [r7, #4]
1000286e:	689b      	ldr	r3, [r3, #8]
10002870:	1e5a      	subs	r2, r3, #1
10002872:	687b      	ldr	r3, [r7, #4]
10002874:	609a      	str	r2, [r3, #8]
10002876:	e004      	b.n	10002882 <SysTick_Handler+0x3a>
    }
    else
    { 
      TmrObjPtr->TimerCount = 0;
10002878:	687b      	ldr	r3, [r7, #4]
1000287a:	2200      	movs	r2, #0
1000287c:	609a      	str	r2, [r3, #8]
      SYSTM001_lTimerHandler();
1000287e:	f7ff ff9f 	bl	100027c0 <SYSTM001_lTimerHandler>
    }
  }
}
10002882:	46bd      	mov	sp, r7
10002884:	b002      	add	sp, #8
10002886:	bd80      	pop	{r7, pc}
10002888:	20000930 	.word	0x20000930
1000288c:	20000938 	.word	0x20000938

10002890 <SYSTM001_Init>:
/*
 *  Initialization function which initializes the App internal data
 *  structures to default values. 
 */
void  SYSTM001_Init( void)
{
10002890:	b580      	push	{r7, lr}
10002892:	b082      	sub	sp, #8
10002894:	af00      	add	r7, sp, #0
    uint32_t Status = 0UL;
10002896:	2300      	movs	r3, #0
10002898:	607b      	str	r3, [r7, #4]

  /** Initialize the header of the list */
  TimerList = NULL;
1000289a:	4b0c      	ldr	r3, [pc, #48]	; (100028cc <SYSTM001_Init+0x3c>)
1000289c:	2200      	movs	r2, #0
1000289e:	601a      	str	r2, [r3, #0]
  /* Clock Initialization */
  CLK002_Init();
100028a0:	f000 fc02 	bl	100030a8 <CLK002_Init>
  /**   Initialize timer tracker  */
  Status = SysTick_Config((uint32_t)(SYSTM001_SYSTICK_INTERVAL * SYSTM001_SYS_CORE_CLOCK * 1000U));
100028a4:	23fa      	movs	r3, #250	; 0xfa
100028a6:	015b      	lsls	r3, r3, #5
100028a8:	1c18      	adds	r0, r3, #0
100028aa:	f7ff fe61 	bl	10002570 <SysTick_Config>
100028ae:	1c03      	adds	r3, r0, #0
100028b0:	607b      	str	r3, [r7, #4]
  if(Status == 1U)
  {
        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Status), &Status);
  }
    NVIC_SetPriority(SysTick_IRQn, 1);
100028b2:	2301      	movs	r3, #1
100028b4:	425b      	negs	r3, r3
100028b6:	1c18      	adds	r0, r3, #0
100028b8:	2101      	movs	r1, #1
100028ba:	f7ff fde9 	bl	10002490 <NVIC_SetPriority>
  TimerTracker = 0UL;
100028be:	4b04      	ldr	r3, [pc, #16]	; (100028d0 <SYSTM001_Init+0x40>)
100028c0:	2200      	movs	r2, #0
100028c2:	601a      	str	r2, [r3, #0]

}
100028c4:	46bd      	mov	sp, r7
100028c6:	b002      	add	sp, #8
100028c8:	bd80      	pop	{r7, pc}
100028ca:	46c0      	nop			; (mov r8, r8)
100028cc:	20000930 	.word	0x20000930
100028d0:	20000934 	.word	0x20000934

100028d4 <SYSTM001_CreateTimer>:
  uint32_t Period,
  SYSTM001_TimerType TimerType, 
  SYSTM001_TimerCallBackPtr TimerCallBack, 
  void  * pCallBackArgPtr
)
{
100028d4:	b580      	push	{r7, lr}
100028d6:	b088      	sub	sp, #32
100028d8:	af00      	add	r7, sp, #0
100028da:	60f8      	str	r0, [r7, #12]
100028dc:	607a      	str	r2, [r7, #4]
100028de:	603b      	str	r3, [r7, #0]
100028e0:	1c3b      	adds	r3, r7, #0
100028e2:	330b      	adds	r3, #11
100028e4:	1c0a      	adds	r2, r1, #0
100028e6:	701a      	strb	r2, [r3, #0]
  uint32_t TimerID = 0UL;
100028e8:	2300      	movs	r3, #0
100028ea:	61fb      	str	r3, [r7, #28]
  uint32_t Count = 0UL;
100028ec:	2300      	movs	r3, #0
100028ee:	61bb      	str	r3, [r7, #24]
  uint32_t Error = 0UL;  
100028f0:	2300      	movs	r3, #0
100028f2:	617b      	str	r3, [r7, #20]

  /* Check for input parameter */
    if((TimerType != SYSTM001_ONE_SHOT) && (TimerType != SYSTM001_PERIODIC))
100028f4:	1c3b      	adds	r3, r7, #0
100028f6:	330b      	adds	r3, #11
100028f8:	781b      	ldrb	r3, [r3, #0]
100028fa:	2b00      	cmp	r3, #0
100028fc:	d006      	beq.n	1000290c <SYSTM001_CreateTimer+0x38>
100028fe:	1c3b      	adds	r3, r7, #0
10002900:	330b      	adds	r3, #11
10002902:	781b      	ldrb	r3, [r3, #0]
10002904:	2b01      	cmp	r3, #1
10002906:	d001      	beq.n	1000290c <SYSTM001_CreateTimer+0x38>
    {
      Error=(uint32_t)1UL;
10002908:	2301      	movs	r3, #1
1000290a:	617b      	str	r3, [r7, #20]
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
      
    }
    if(Period < (uint32_t)SYSTM001_SYSTICK_INTERVAL)
1000290c:	68fb      	ldr	r3, [r7, #12]
1000290e:	2b00      	cmp	r3, #0
10002910:	d101      	bne.n	10002916 <SYSTM001_CreateTimer+0x42>
    {
      Error=(uint32_t)1UL;
10002912:	2301      	movs	r3, #1
10002914:	617b      	str	r3, [r7, #20]
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
    }
    if(Period == 0)          /* Timer with '0' time is not allowed. */
10002916:	68fb      	ldr	r3, [r7, #12]
10002918:	2b00      	cmp	r3, #0
1000291a:	d101      	bne.n	10002920 <SYSTM001_CreateTimer+0x4c>
    {
      Error=(uint32_t)1UL;
1000291c:	2301      	movs	r3, #1
1000291e:	617b      	str	r3, [r7, #20]
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
    }

    if(TimerCallBack == NULL)
10002920:	687b      	ldr	r3, [r7, #4]
10002922:	2b00      	cmp	r3, #0
10002924:	d101      	bne.n	1000292a <SYSTM001_CreateTimer+0x56>
    {
      Error=(uint32_t)1UL;
10002926:	2301      	movs	r3, #1
10002928:	617b      	str	r3, [r7, #20]
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
    }
    if (!Error)	
1000292a:	697b      	ldr	r3, [r7, #20]
1000292c:	2b00      	cmp	r3, #0
1000292e:	d159      	bne.n	100029e4 <SYSTM001_CreateTimer+0x110>
    {
       for(Count = 0UL; Count < SYSTM001_CFG_MAX_TMR; Count++)
10002930:	2300      	movs	r3, #0
10002932:	61bb      	str	r3, [r7, #24]
10002934:	e053      	b.n	100029de <SYSTM001_CreateTimer+0x10a>
       {
           /* Check for free timer ID */
           if((TimerTracker & ((uint32_t)1U << Count)) == 0U)
10002936:	4b2e      	ldr	r3, [pc, #184]	; (100029f0 <SYSTM001_CreateTimer+0x11c>)
10002938:	681a      	ldr	r2, [r3, #0]
1000293a:	69bb      	ldr	r3, [r7, #24]
1000293c:	40da      	lsrs	r2, r3
1000293e:	2301      	movs	r3, #1
10002940:	4013      	ands	r3, r2
10002942:	d149      	bne.n	100029d8 <SYSTM001_CreateTimer+0x104>
           {
               /* If yes,assign ID to this timer      */
               TimerTracker |= ((uint32_t)1U << Count);
10002944:	69bb      	ldr	r3, [r7, #24]
10002946:	2201      	movs	r2, #1
10002948:	409a      	lsls	r2, r3
1000294a:	4b29      	ldr	r3, [pc, #164]	; (100029f0 <SYSTM001_CreateTimer+0x11c>)
1000294c:	681b      	ldr	r3, [r3, #0]
1000294e:	431a      	orrs	r2, r3
10002950:	4b27      	ldr	r3, [pc, #156]	; (100029f0 <SYSTM001_CreateTimer+0x11c>)
10002952:	601a      	str	r2, [r3, #0]
               /* Initialize timer as per input values */
               TimerTbl[Count].TimerID     = Count;
10002954:	4b27      	ldr	r3, [pc, #156]	; (100029f4 <SYSTM001_CreateTimer+0x120>)
10002956:	69ba      	ldr	r2, [r7, #24]
10002958:	0152      	lsls	r2, r2, #5
1000295a:	69b9      	ldr	r1, [r7, #24]
1000295c:	50d1      	str	r1, [r2, r3]
               TimerTbl[Count].TimerType   = TimerType;
1000295e:	4925      	ldr	r1, [pc, #148]	; (100029f4 <SYSTM001_CreateTimer+0x120>)
10002960:	69bb      	ldr	r3, [r7, #24]
10002962:	015b      	lsls	r3, r3, #5
10002964:	1c3a      	adds	r2, r7, #0
10002966:	320b      	adds	r2, #11
10002968:	18cb      	adds	r3, r1, r3
1000296a:	7812      	ldrb	r2, [r2, #0]
1000296c:	711a      	strb	r2, [r3, #4]
               TimerTbl[Count].TimerState  = SYSTM001_STATE_STOPPED;
1000296e:	4a21      	ldr	r2, [pc, #132]	; (100029f4 <SYSTM001_CreateTimer+0x120>)
10002970:	69bb      	ldr	r3, [r7, #24]
10002972:	015b      	lsls	r3, r3, #5
10002974:	18d3      	adds	r3, r2, r3
10002976:	2201      	movs	r2, #1
10002978:	715a      	strb	r2, [r3, #5]
             TimerTbl[Count].TimerCount  = ((Period / SYSTM001_SYSTICK_INTERVAL)\
                                                    +HW_TIMER_ADDITIONAL_CNT);
1000297a:	68fb      	ldr	r3, [r7, #12]
1000297c:	1c5a      	adds	r2, r3, #1
               TimerTracker |= ((uint32_t)1U << Count);
               /* Initialize timer as per input values */
               TimerTbl[Count].TimerID     = Count;
               TimerTbl[Count].TimerType   = TimerType;
               TimerTbl[Count].TimerState  = SYSTM001_STATE_STOPPED;
             TimerTbl[Count].TimerCount  = ((Period / SYSTM001_SYSTICK_INTERVAL)\
1000297e:	491d      	ldr	r1, [pc, #116]	; (100029f4 <SYSTM001_CreateTimer+0x120>)
10002980:	69bb      	ldr	r3, [r7, #24]
10002982:	015b      	lsls	r3, r3, #5
10002984:	18cb      	adds	r3, r1, r3
10002986:	3308      	adds	r3, #8
10002988:	601a      	str	r2, [r3, #0]
                                                    +HW_TIMER_ADDITIONAL_CNT);
               TimerTbl[Count].TimerReload	= (Period / SYSTM001_SYSTICK_INTERVAL);
1000298a:	4a1a      	ldr	r2, [pc, #104]	; (100029f4 <SYSTM001_CreateTimer+0x120>)
1000298c:	69bb      	ldr	r3, [r7, #24]
1000298e:	015b      	lsls	r3, r3, #5
10002990:	18d3      	adds	r3, r2, r3
10002992:	330c      	adds	r3, #12
10002994:	68fa      	ldr	r2, [r7, #12]
10002996:	601a      	str	r2, [r3, #0]
               TimerTbl[Count].TimerCallBack = TimerCallBack;
10002998:	4a16      	ldr	r2, [pc, #88]	; (100029f4 <SYSTM001_CreateTimer+0x120>)
1000299a:	69bb      	ldr	r3, [r7, #24]
1000299c:	015b      	lsls	r3, r3, #5
1000299e:	18d3      	adds	r3, r2, r3
100029a0:	3310      	adds	r3, #16
100029a2:	687a      	ldr	r2, [r7, #4]
100029a4:	601a      	str	r2, [r3, #0]
               TimerTbl[Count].ParamToCallBack = pCallBackArgPtr;
100029a6:	4a13      	ldr	r2, [pc, #76]	; (100029f4 <SYSTM001_CreateTimer+0x120>)
100029a8:	69bb      	ldr	r3, [r7, #24]
100029aa:	015b      	lsls	r3, r3, #5
100029ac:	18d3      	adds	r3, r2, r3
100029ae:	3314      	adds	r3, #20
100029b0:	683a      	ldr	r2, [r7, #0]
100029b2:	601a      	str	r2, [r3, #0]
               TimerTbl[Count].TimerPrev   = NULL;
100029b4:	4a0f      	ldr	r2, [pc, #60]	; (100029f4 <SYSTM001_CreateTimer+0x120>)
100029b6:	69bb      	ldr	r3, [r7, #24]
100029b8:	015b      	lsls	r3, r3, #5
100029ba:	18d3      	adds	r3, r2, r3
100029bc:	331c      	adds	r3, #28
100029be:	2200      	movs	r2, #0
100029c0:	601a      	str	r2, [r3, #0]
               TimerTbl[Count].TimerNext   = NULL;
100029c2:	4a0c      	ldr	r2, [pc, #48]	; (100029f4 <SYSTM001_CreateTimer+0x120>)
100029c4:	69bb      	ldr	r3, [r7, #24]
100029c6:	015b      	lsls	r3, r3, #5
100029c8:	18d3      	adds	r3, r2, r3
100029ca:	3318      	adds	r3, #24
100029cc:	2200      	movs	r2, #0
100029ce:	601a      	str	r2, [r3, #0]
               TimerID = Count + 1U;
100029d0:	69bb      	ldr	r3, [r7, #24]
100029d2:	3301      	adds	r3, #1
100029d4:	61fb      	str	r3, [r7, #28]
               break;
100029d6:	e005      	b.n	100029e4 <SYSTM001_CreateTimer+0x110>
      Error=(uint32_t)1UL;
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
    }
    if (!Error)	
    {
       for(Count = 0UL; Count < SYSTM001_CFG_MAX_TMR; Count++)
100029d8:	69bb      	ldr	r3, [r7, #24]
100029da:	3301      	adds	r3, #1
100029dc:	61bb      	str	r3, [r7, #24]
100029de:	69bb      	ldr	r3, [r7, #24]
100029e0:	2b09      	cmp	r3, #9
100029e2:	d9a8      	bls.n	10002936 <SYSTM001_CreateTimer+0x62>
               break;
            }
        }
    }

  return (handle_t)TimerID;
100029e4:	69fb      	ldr	r3, [r7, #28]
}  
100029e6:	1c18      	adds	r0, r3, #0
100029e8:	46bd      	mov	sp, r7
100029ea:	b008      	add	sp, #32
100029ec:	bd80      	pop	{r7, pc}
100029ee:	46c0      	nop			; (mov r8, r8)
100029f0:	20000934 	.word	0x20000934
100029f4:	20000940 	.word	0x20000940

100029f8 <SYSTM001_StartTimer>:

/*
 *  Interface to start the software timer .
 */
status_t SYSTM001_StartTimer(handle_t  Handle) 
{
100029f8:	b580      	push	{r7, lr}
100029fa:	b084      	sub	sp, #16
100029fc:	af00      	add	r7, sp, #0
100029fe:	6078      	str	r0, [r7, #4]
  status_t Error = (status_t )DAVEApp_SUCCESS;
10002a00:	2300      	movs	r3, #0
10002a02:	60fb      	str	r3, [r7, #12]


  /* Check validity of parameter */
  if(Handle > SYSTM001_CFG_MAX_TMR)
10002a04:	687b      	ldr	r3, [r7, #4]
10002a06:	2b0a      	cmp	r3, #10
10002a08:	d901      	bls.n	10002a0e <SYSTM001_StartTimer+0x16>
  {
    Error = (status_t)SYSTM001_INVALID_HANDLE_ERROR;
10002a0a:	2301      	movs	r3, #1
10002a0c:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  if( (TimerTracker & (1UL << (uint32_t)(Handle - 1U))) == 0UL)
10002a0e:	4b18      	ldr	r3, [pc, #96]	; (10002a70 <SYSTM001_StartTimer+0x78>)
10002a10:	681a      	ldr	r2, [r3, #0]
10002a12:	687b      	ldr	r3, [r7, #4]
10002a14:	3b01      	subs	r3, #1
10002a16:	40da      	lsrs	r2, r3
10002a18:	2301      	movs	r3, #1
10002a1a:	4013      	ands	r3, r2
10002a1c:	d101      	bne.n	10002a22 <SYSTM001_StartTimer+0x2a>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10002a1e:	2301      	movs	r3, #1
10002a20:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  /* Any timer with time '0', can't start again. */
  if(TimerTbl[Handle - 1U].TimerCount == 0UL)
10002a22:	687b      	ldr	r3, [r7, #4]
10002a24:	3b01      	subs	r3, #1
10002a26:	4a13      	ldr	r2, [pc, #76]	; (10002a74 <SYSTM001_StartTimer+0x7c>)
10002a28:	015b      	lsls	r3, r3, #5
10002a2a:	18d3      	adds	r3, r2, r3
10002a2c:	3308      	adds	r3, #8
10002a2e:	681b      	ldr	r3, [r3, #0]
10002a30:	2b00      	cmp	r3, #0
10002a32:	d101      	bne.n	10002a38 <SYSTM001_StartTimer+0x40>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10002a34:	2301      	movs	r3, #1
10002a36:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  
  
  if(Error == (status_t)DAVEApp_SUCCESS)
10002a38:	68fb      	ldr	r3, [r7, #12]
10002a3a:	2b00      	cmp	r3, #0
10002a3c:	d113      	bne.n	10002a66 <SYSTM001_StartTimer+0x6e>
  {
    /* Check if timer is running */
    if(TimerTbl[(Handle - 1U)].TimerState != SYSTM001_STATE_RUNNING)
10002a3e:	687b      	ldr	r3, [r7, #4]
10002a40:	3b01      	subs	r3, #1
10002a42:	4a0c      	ldr	r2, [pc, #48]	; (10002a74 <SYSTM001_StartTimer+0x7c>)
10002a44:	015b      	lsls	r3, r3, #5
10002a46:	18d3      	adds	r3, r2, r3
10002a48:	795b      	ldrb	r3, [r3, #5]
10002a4a:	2b00      	cmp	r3, #0
10002a4c:	d00b      	beq.n	10002a66 <SYSTM001_StartTimer+0x6e>
    {
      /* set timer status as SYSTM001_STATE_RUNNING */
      TimerTbl[(Handle - 1U)].TimerState = SYSTM001_STATE_RUNNING;
10002a4e:	687b      	ldr	r3, [r7, #4]
10002a50:	3b01      	subs	r3, #1
10002a52:	4a08      	ldr	r2, [pc, #32]	; (10002a74 <SYSTM001_StartTimer+0x7c>)
10002a54:	015b      	lsls	r3, r3, #5
10002a56:	18d3      	adds	r3, r2, r3
10002a58:	2200      	movs	r2, #0
10002a5a:	715a      	strb	r2, [r3, #5]
      /* Insert this timer into timer list  */
      SYSTM001_lInsertTimerList((Handle - 1U));
10002a5c:	687b      	ldr	r3, [r7, #4]
10002a5e:	3b01      	subs	r3, #1
10002a60:	1c18      	adds	r0, r3, #0
10002a62:	f7ff fda9 	bl	100025b8 <SYSTM001_lInsertTimerList>
    }
  }

  return Error;
10002a66:	68fb      	ldr	r3, [r7, #12]
}
10002a68:	1c18      	adds	r0, r3, #0
10002a6a:	46bd      	mov	sp, r7
10002a6c:	b004      	add	sp, #16
10002a6e:	bd80      	pop	{r7, pc}
10002a70:	20000934 	.word	0x20000934
10002a74:	20000940 	.word	0x20000940

10002a78 <SYSTM001_StopTimer>:

/*
 *  Interface to stop the software timer.
 */
status_t SYSTM001_StopTimer(handle_t Handle) 
{
10002a78:	b580      	push	{r7, lr}
10002a7a:	b084      	sub	sp, #16
10002a7c:	af00      	add	r7, sp, #0
10002a7e:	6078      	str	r0, [r7, #4]
  status_t Error = (status_t )DAVEApp_SUCCESS;
10002a80:	2300      	movs	r3, #0
10002a82:	60fb      	str	r3, [r7, #12]


  /* Check validity of parameter        */
  if(Handle > SYSTM001_CFG_MAX_TMR)
10002a84:	687b      	ldr	r3, [r7, #4]
10002a86:	2b0a      	cmp	r3, #10
10002a88:	d901      	bls.n	10002a8e <SYSTM001_StopTimer+0x16>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10002a8a:	2301      	movs	r3, #1
10002a8c:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  if( (TimerTracker & (1UL << (uint32_t)(Handle - 1U))) == 0UL)
10002a8e:	4b13      	ldr	r3, [pc, #76]	; (10002adc <SYSTM001_StopTimer+0x64>)
10002a90:	681a      	ldr	r2, [r3, #0]
10002a92:	687b      	ldr	r3, [r7, #4]
10002a94:	3b01      	subs	r3, #1
10002a96:	40da      	lsrs	r2, r3
10002a98:	2301      	movs	r3, #1
10002a9a:	4013      	ands	r3, r2
10002a9c:	d101      	bne.n	10002aa2 <SYSTM001_StopTimer+0x2a>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10002a9e:	2301      	movs	r3, #1
10002aa0:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }

  if(Error == (status_t)DAVEApp_SUCCESS)
10002aa2:	68fb      	ldr	r3, [r7, #12]
10002aa4:	2b00      	cmp	r3, #0
10002aa6:	d113      	bne.n	10002ad0 <SYSTM001_StopTimer+0x58>
  {
    /* Check whether Timer is in Stop state */
    if(TimerTbl[(Handle - 1U)].TimerState != SYSTM001_STATE_STOPPED)
10002aa8:	687b      	ldr	r3, [r7, #4]
10002aaa:	3b01      	subs	r3, #1
10002aac:	4a0c      	ldr	r2, [pc, #48]	; (10002ae0 <SYSTM001_StopTimer+0x68>)
10002aae:	015b      	lsls	r3, r3, #5
10002ab0:	18d3      	adds	r3, r2, r3
10002ab2:	795b      	ldrb	r3, [r3, #5]
10002ab4:	2b01      	cmp	r3, #1
10002ab6:	d00b      	beq.n	10002ad0 <SYSTM001_StopTimer+0x58>
    {
      /* remove Timer from node list */
      SYSTM001_lRemoveTimerList((Handle - 1U));
10002ab8:	687b      	ldr	r3, [r7, #4]
10002aba:	3b01      	subs	r3, #1
10002abc:	1c18      	adds	r0, r3, #0
10002abe:	f7ff fe25 	bl	1000270c <SYSTM001_lRemoveTimerList>

      /* Set timer status as SYSTM001_STATE_STOPPED  */
      TimerTbl[(Handle - 1U)].TimerState = SYSTM001_STATE_STOPPED;
10002ac2:	687b      	ldr	r3, [r7, #4]
10002ac4:	3b01      	subs	r3, #1
10002ac6:	4a06      	ldr	r2, [pc, #24]	; (10002ae0 <SYSTM001_StopTimer+0x68>)
10002ac8:	015b      	lsls	r3, r3, #5
10002aca:	18d3      	adds	r3, r2, r3
10002acc:	2201      	movs	r2, #1
10002ace:	715a      	strb	r2, [r3, #5]
    }
  }

  return Error;
10002ad0:	68fb      	ldr	r3, [r7, #12]
}
10002ad2:	1c18      	adds	r0, r3, #0
10002ad4:	46bd      	mov	sp, r7
10002ad6:	b004      	add	sp, #16
10002ad8:	bd80      	pop	{r7, pc}
10002ada:	46c0      	nop			; (mov r8, r8)
10002adc:	20000934 	.word	0x20000934
10002ae0:	20000940 	.word	0x20000940

10002ae4 <SYSTM001_DeleteTimer>:

/*
 *  Function to delete the Timer instance.
 */
status_t SYSTM001_DeleteTimer(handle_t Handle) 
{
10002ae4:	b580      	push	{r7, lr}
10002ae6:	b084      	sub	sp, #16
10002ae8:	af00      	add	r7, sp, #0
10002aea:	6078      	str	r0, [r7, #4]
  status_t Error = (status_t )DAVEApp_SUCCESS;
10002aec:	2300      	movs	r3, #0
10002aee:	60fb      	str	r3, [r7, #12]

  /* Check validity of parameter        */
  if(Handle > SYSTM001_CFG_MAX_TMR)
10002af0:	687b      	ldr	r3, [r7, #4]
10002af2:	2b0a      	cmp	r3, #10
10002af4:	d901      	bls.n	10002afa <SYSTM001_DeleteTimer+0x16>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10002af6:	2301      	movs	r3, #1
10002af8:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  if( (TimerTracker & (1UL << (uint32_t)(Handle - 1U))) == 0UL)
10002afa:	4b15      	ldr	r3, [pc, #84]	; (10002b50 <SYSTM001_DeleteTimer+0x6c>)
10002afc:	681a      	ldr	r2, [r3, #0]
10002afe:	687b      	ldr	r3, [r7, #4]
10002b00:	3b01      	subs	r3, #1
10002b02:	40da      	lsrs	r2, r3
10002b04:	2301      	movs	r3, #1
10002b06:	4013      	ands	r3, r2
10002b08:	d101      	bne.n	10002b0e <SYSTM001_DeleteTimer+0x2a>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10002b0a:	2301      	movs	r3, #1
10002b0c:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }

  if(Error == (status_t)DAVEApp_SUCCESS)
10002b0e:	68fb      	ldr	r3, [r7, #12]
10002b10:	2b00      	cmp	r3, #0
10002b12:	d118      	bne.n	10002b46 <SYSTM001_DeleteTimer+0x62>
  {
    /* Check if timer is running */
    if(TimerTbl[(Handle - 1U)].TimerState == SYSTM001_STATE_RUNNING)
10002b14:	687b      	ldr	r3, [r7, #4]
10002b16:	3b01      	subs	r3, #1
10002b18:	4a0e      	ldr	r2, [pc, #56]	; (10002b54 <SYSTM001_DeleteTimer+0x70>)
10002b1a:	015b      	lsls	r3, r3, #5
10002b1c:	18d3      	adds	r3, r2, r3
10002b1e:	795b      	ldrb	r3, [r3, #5]
10002b20:	2b00      	cmp	r3, #0
10002b22:	d104      	bne.n	10002b2e <SYSTM001_DeleteTimer+0x4a>
    {
      /* Yes,remove this timer from timer list*/
      SYSTM001_lRemoveTimerList((Handle - 1U));
10002b24:	687b      	ldr	r3, [r7, #4]
10002b26:	3b01      	subs	r3, #1
10002b28:	1c18      	adds	r0, r3, #0
10002b2a:	f7ff fdef 	bl	1000270c <SYSTM001_lRemoveTimerList>
    }

    /* Release resource that this timer hold*/
    TimerTracker &=~((uint32_t)1U << (Handle - 1U));
10002b2e:	687b      	ldr	r3, [r7, #4]
10002b30:	3b01      	subs	r3, #1
10002b32:	2201      	movs	r2, #1
10002b34:	1c11      	adds	r1, r2, #0
10002b36:	4099      	lsls	r1, r3
10002b38:	1c0b      	adds	r3, r1, #0
10002b3a:	43da      	mvns	r2, r3
10002b3c:	4b04      	ldr	r3, [pc, #16]	; (10002b50 <SYSTM001_DeleteTimer+0x6c>)
10002b3e:	681b      	ldr	r3, [r3, #0]
10002b40:	401a      	ands	r2, r3
10002b42:	4b03      	ldr	r3, [pc, #12]	; (10002b50 <SYSTM001_DeleteTimer+0x6c>)
10002b44:	601a      	str	r2, [r3, #0]
  }

  return Error;
10002b46:	68fb      	ldr	r3, [r7, #12]

}
10002b48:	1c18      	adds	r0, r3, #0
10002b4a:	46bd      	mov	sp, r7
10002b4c:	b004      	add	sp, #16
10002b4e:	bd80      	pop	{r7, pc}
10002b50:	20000934 	.word	0x20000934
10002b54:	20000940 	.word	0x20000940

10002b58 <SYSTM001_GetTime>:

/*
 *  Interface to get the current system time.
 */
uint32_t  SYSTM001_GetTime(void)
{
10002b58:	b580      	push	{r7, lr}
10002b5a:	af00      	add	r7, sp, #0
  /* <<<DD_SYSTM001 _API_6>>> */
  return CONVERT_SYSTICK_COUNT_TO_MSEC(SysTickCount);
10002b5c:	4b02      	ldr	r3, [pc, #8]	; (10002b68 <SYSTM001_GetTime+0x10>)
10002b5e:	681b      	ldr	r3, [r3, #0]
}
10002b60:	1c18      	adds	r0, r3, #0
10002b62:	46bd      	mov	sp, r7
10002b64:	bd80      	pop	{r7, pc}
10002b66:	46c0      	nop			; (mov r8, r8)
10002b68:	20000938 	.word	0x20000938
10002b6c:	00000000 	.word	0x00000000

10002b70 <SYSTM001_GetSysTickCount>:
/*
 *  Utility function to get the no of system ticks for the 
 *  specified period.
 */
uint32_t  SYSTM001_GetSysTickCount(uint32_t Period ) 
{
10002b70:	b590      	push	{r4, r7, lr}
10002b72:	b085      	sub	sp, #20
10002b74:	af00      	add	r7, sp, #0
10002b76:	6078      	str	r0, [r7, #4]
  /* <<<DD_SYSTM001 _API_7>>> */
  uint32_t	Count  = CONVERT_MSEC_TO_SYSICK_COUNT(Period);
10002b78:	6878      	ldr	r0, [r7, #4]
10002b7a:	f001 fe9d 	bl	100048b8 <__aeabi_ui2d>
10002b7e:	1c03      	adds	r3, r0, #0
10002b80:	1c0c      	adds	r4, r1, #0
10002b82:	1c18      	adds	r0, r3, #0
10002b84:	1c21      	adds	r1, r4, #0
10002b86:	4b0d      	ldr	r3, [pc, #52]	; (10002bbc <SYSTM001_GetSysTickCount+0x4c>)
10002b88:	4a0b      	ldr	r2, [pc, #44]	; (10002bb8 <SYSTM001_GetSysTickCount+0x48>)
10002b8a:	f001 f86d 	bl	10003c68 <__aeabi_dmul>
10002b8e:	1c03      	adds	r3, r0, #0
10002b90:	1c0c      	adds	r4, r1, #0
10002b92:	1c18      	adds	r0, r3, #0
10002b94:	1c21      	adds	r1, r4, #0
10002b96:	4a0a      	ldr	r2, [pc, #40]	; (10002bc0 <SYSTM001_GetSysTickCount+0x50>)
10002b98:	4b0a      	ldr	r3, [pc, #40]	; (10002bc4 <SYSTM001_GetSysTickCount+0x54>)
10002b9a:	f001 f865 	bl	10003c68 <__aeabi_dmul>
10002b9e:	1c03      	adds	r3, r0, #0
10002ba0:	1c0c      	adds	r4, r1, #0
10002ba2:	1c18      	adds	r0, r3, #0
10002ba4:	1c21      	adds	r1, r4, #0
10002ba6:	f000 fc1f 	bl	100033e8 <__aeabi_d2uiz>
10002baa:	1c03      	adds	r3, r0, #0
10002bac:	60fb      	str	r3, [r7, #12]
  return Count;
10002bae:	68fb      	ldr	r3, [r7, #12]
}
10002bb0:	1c18      	adds	r0, r3, #0
10002bb2:	46bd      	mov	sp, r7
10002bb4:	b005      	add	sp, #20
10002bb6:	bd90      	pop	{r4, r7, pc}
10002bb8:	00000000 	.word	0x00000000
10002bbc:	40200000 	.word	0x40200000
10002bc0:	00000000 	.word	0x00000000
10002bc4:	408f4000 	.word	0x408f4000

10002bc8 <IO004_Init>:
/** @ingroup IO004_Func
 * @{
 */

void IO004_Init(void)
{
10002bc8:	b580      	push	{r7, lr}
10002bca:	af00      	add	r7, sp, #0
   /* <<<DD_IO004_API_1>>> */

	   

  /* Configuration of 1 Port 0 based on User configuration */
  IO004_Handle0.PortRegs->OMR = 0U<< 0;
10002bcc:	4b0a      	ldr	r3, [pc, #40]	; (10002bf8 <IO004_Init+0x30>)
10002bce:	685b      	ldr	r3, [r3, #4]
10002bd0:	2200      	movs	r2, #0
10002bd2:	605a      	str	r2, [r3, #4]
  
  IO004_Handle0.PortRegs->IOCR0 |= (0U << 3);   
10002bd4:	4b08      	ldr	r3, [pc, #32]	; (10002bf8 <IO004_Init+0x30>)
10002bd6:	685b      	ldr	r3, [r3, #4]
10002bd8:	4a07      	ldr	r2, [pc, #28]	; (10002bf8 <IO004_Init+0x30>)
10002bda:	6852      	ldr	r2, [r2, #4]
10002bdc:	6912      	ldr	r2, [r2, #16]
10002bde:	611a      	str	r2, [r3, #16]

  /* Configuration of 1 Port 1 based on User configuration */
  IO004_Handle1.PortRegs->OMR = 0U<< 1;
10002be0:	4b06      	ldr	r3, [pc, #24]	; (10002bfc <IO004_Init+0x34>)
10002be2:	685b      	ldr	r3, [r3, #4]
10002be4:	2200      	movs	r2, #0
10002be6:	605a      	str	r2, [r3, #4]
  
  IO004_Handle1.PortRegs->IOCR0 |= (0U << 11);
10002be8:	4b04      	ldr	r3, [pc, #16]	; (10002bfc <IO004_Init+0x34>)
10002bea:	685b      	ldr	r3, [r3, #4]
10002bec:	4a03      	ldr	r2, [pc, #12]	; (10002bfc <IO004_Init+0x34>)
10002bee:	6852      	ldr	r2, [r2, #4]
10002bf0:	6912      	ldr	r2, [r2, #16]
10002bf2:	611a      	str	r2, [r3, #16]
}
10002bf4:	46bd      	mov	sp, r7
10002bf6:	bd80      	pop	{r7, pc}
10002bf8:	10004eb8 	.word	0x10004eb8
10002bfc:	10004ec0 	.word	0x10004ec0

10002c00 <IO004_DisableOutputDriver>:

void IO004_DisableOutputDriver(const IO004_HandleType* Handle,IO004_InputModeType Mode)
{
10002c00:	b590      	push	{r4, r7, lr}
10002c02:	b085      	sub	sp, #20
10002c04:	af00      	add	r7, sp, #0
10002c06:	6078      	str	r0, [r7, #4]
10002c08:	1c0a      	adds	r2, r1, #0
10002c0a:	1cfb      	adds	r3, r7, #3
10002c0c:	701a      	strb	r2, [r3, #0]
  uint8_t Pin = Handle->PortPin;
10002c0e:	1c3b      	adds	r3, r7, #0
10002c10:	330f      	adds	r3, #15
10002c12:	687a      	ldr	r2, [r7, #4]
10002c14:	7852      	ldrb	r2, [r2, #1]
10002c16:	701a      	strb	r2, [r3, #0]
  /* <<<DD_IO004_API_2>>> */
  if(Pin < 4U)
10002c18:	1c3b      	adds	r3, r7, #0
10002c1a:	330f      	adds	r3, #15
10002c1c:	781b      	ldrb	r3, [r3, #0]
10002c1e:	2b03      	cmp	r3, #3
10002c20:	d824      	bhi.n	10002c6c <IO004_DisableOutputDriver+0x6c>
  {
    Handle->PortRegs->IOCR0  =  (uint32_t)(Handle->PortRegs->IOCR0 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002c22:	687b      	ldr	r3, [r7, #4]
10002c24:	685b      	ldr	r3, [r3, #4]
10002c26:	687a      	ldr	r2, [r7, #4]
10002c28:	6852      	ldr	r2, [r2, #4]
10002c2a:	6912      	ldr	r2, [r2, #16]
10002c2c:	1c39      	adds	r1, r7, #0
10002c2e:	310f      	adds	r1, #15
10002c30:	7809      	ldrb	r1, [r1, #0]
10002c32:	00c9      	lsls	r1, r1, #3
10002c34:	3103      	adds	r1, #3
10002c36:	201f      	movs	r0, #31
10002c38:	1c04      	adds	r4, r0, #0
10002c3a:	408c      	lsls	r4, r1
10002c3c:	1c21      	adds	r1, r4, #0
10002c3e:	43c9      	mvns	r1, r1
10002c40:	400a      	ands	r2, r1
10002c42:	611a      	str	r2, [r3, #16]
    Handle->PortRegs->IOCR0 |= (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002c44:	687b      	ldr	r3, [r7, #4]
10002c46:	685b      	ldr	r3, [r3, #4]
10002c48:	687a      	ldr	r2, [r7, #4]
10002c4a:	6852      	ldr	r2, [r2, #4]
10002c4c:	6911      	ldr	r1, [r2, #16]
10002c4e:	1cfa      	adds	r2, r7, #3
10002c50:	7810      	ldrb	r0, [r2, #0]
10002c52:	221f      	movs	r2, #31
10002c54:	4010      	ands	r0, r2
10002c56:	1c3a      	adds	r2, r7, #0
10002c58:	320f      	adds	r2, #15
10002c5a:	7812      	ldrb	r2, [r2, #0]
10002c5c:	00d2      	lsls	r2, r2, #3
10002c5e:	3203      	adds	r2, #3
10002c60:	1c04      	adds	r4, r0, #0
10002c62:	4094      	lsls	r4, r2
10002c64:	1c22      	adds	r2, r4, #0
10002c66:	430a      	orrs	r2, r1
10002c68:	611a      	str	r2, [r3, #16]
10002c6a:	e0a0      	b.n	10002dae <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 4U) && (Pin <= 7U))
10002c6c:	1c3b      	adds	r3, r7, #0
10002c6e:	330f      	adds	r3, #15
10002c70:	781b      	ldrb	r3, [r3, #0]
10002c72:	2b03      	cmp	r3, #3
10002c74:	d930      	bls.n	10002cd8 <IO004_DisableOutputDriver+0xd8>
10002c76:	1c3b      	adds	r3, r7, #0
10002c78:	330f      	adds	r3, #15
10002c7a:	781b      	ldrb	r3, [r3, #0]
10002c7c:	2b07      	cmp	r3, #7
10002c7e:	d82b      	bhi.n	10002cd8 <IO004_DisableOutputDriver+0xd8>
  {
    Pin = Pin - 4U;
10002c80:	1c3b      	adds	r3, r7, #0
10002c82:	330f      	adds	r3, #15
10002c84:	1c3a      	adds	r2, r7, #0
10002c86:	320f      	adds	r2, #15
10002c88:	7812      	ldrb	r2, [r2, #0]
10002c8a:	3a04      	subs	r2, #4
10002c8c:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR4  =  (uint32_t)(Handle->PortRegs->IOCR4 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002c8e:	687b      	ldr	r3, [r7, #4]
10002c90:	685b      	ldr	r3, [r3, #4]
10002c92:	687a      	ldr	r2, [r7, #4]
10002c94:	6852      	ldr	r2, [r2, #4]
10002c96:	6952      	ldr	r2, [r2, #20]
10002c98:	1c39      	adds	r1, r7, #0
10002c9a:	310f      	adds	r1, #15
10002c9c:	7809      	ldrb	r1, [r1, #0]
10002c9e:	00c9      	lsls	r1, r1, #3
10002ca0:	3103      	adds	r1, #3
10002ca2:	201f      	movs	r0, #31
10002ca4:	1c04      	adds	r4, r0, #0
10002ca6:	408c      	lsls	r4, r1
10002ca8:	1c21      	adds	r1, r4, #0
10002caa:	43c9      	mvns	r1, r1
10002cac:	400a      	ands	r2, r1
10002cae:	615a      	str	r2, [r3, #20]
    Handle->PortRegs->IOCR4 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002cb0:	687b      	ldr	r3, [r7, #4]
10002cb2:	685b      	ldr	r3, [r3, #4]
10002cb4:	687a      	ldr	r2, [r7, #4]
10002cb6:	6852      	ldr	r2, [r2, #4]
10002cb8:	6951      	ldr	r1, [r2, #20]
10002cba:	1cfa      	adds	r2, r7, #3
10002cbc:	7810      	ldrb	r0, [r2, #0]
10002cbe:	221f      	movs	r2, #31
10002cc0:	4010      	ands	r0, r2
10002cc2:	1c3a      	adds	r2, r7, #0
10002cc4:	320f      	adds	r2, #15
10002cc6:	7812      	ldrb	r2, [r2, #0]
10002cc8:	00d2      	lsls	r2, r2, #3
10002cca:	3203      	adds	r2, #3
10002ccc:	1c04      	adds	r4, r0, #0
10002cce:	4094      	lsls	r4, r2
10002cd0:	1c22      	adds	r2, r4, #0
10002cd2:	430a      	orrs	r2, r1
10002cd4:	615a      	str	r2, [r3, #20]
10002cd6:	e06a      	b.n	10002dae <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 8U) && (Pin <= 11U))
10002cd8:	1c3b      	adds	r3, r7, #0
10002cda:	330f      	adds	r3, #15
10002cdc:	781b      	ldrb	r3, [r3, #0]
10002cde:	2b07      	cmp	r3, #7
10002ce0:	d930      	bls.n	10002d44 <IO004_DisableOutputDriver+0x144>
10002ce2:	1c3b      	adds	r3, r7, #0
10002ce4:	330f      	adds	r3, #15
10002ce6:	781b      	ldrb	r3, [r3, #0]
10002ce8:	2b0b      	cmp	r3, #11
10002cea:	d82b      	bhi.n	10002d44 <IO004_DisableOutputDriver+0x144>
  {
    Pin = Pin - 8U;
10002cec:	1c3b      	adds	r3, r7, #0
10002cee:	330f      	adds	r3, #15
10002cf0:	1c3a      	adds	r2, r7, #0
10002cf2:	320f      	adds	r2, #15
10002cf4:	7812      	ldrb	r2, [r2, #0]
10002cf6:	3a08      	subs	r2, #8
10002cf8:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR8  =  (uint32_t)(Handle->PortRegs->IOCR8 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002cfa:	687b      	ldr	r3, [r7, #4]
10002cfc:	685b      	ldr	r3, [r3, #4]
10002cfe:	687a      	ldr	r2, [r7, #4]
10002d00:	6852      	ldr	r2, [r2, #4]
10002d02:	6992      	ldr	r2, [r2, #24]
10002d04:	1c39      	adds	r1, r7, #0
10002d06:	310f      	adds	r1, #15
10002d08:	7809      	ldrb	r1, [r1, #0]
10002d0a:	00c9      	lsls	r1, r1, #3
10002d0c:	3103      	adds	r1, #3
10002d0e:	201f      	movs	r0, #31
10002d10:	1c04      	adds	r4, r0, #0
10002d12:	408c      	lsls	r4, r1
10002d14:	1c21      	adds	r1, r4, #0
10002d16:	43c9      	mvns	r1, r1
10002d18:	400a      	ands	r2, r1
10002d1a:	619a      	str	r2, [r3, #24]
    Handle->PortRegs->IOCR8 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002d1c:	687b      	ldr	r3, [r7, #4]
10002d1e:	685b      	ldr	r3, [r3, #4]
10002d20:	687a      	ldr	r2, [r7, #4]
10002d22:	6852      	ldr	r2, [r2, #4]
10002d24:	6991      	ldr	r1, [r2, #24]
10002d26:	1cfa      	adds	r2, r7, #3
10002d28:	7810      	ldrb	r0, [r2, #0]
10002d2a:	221f      	movs	r2, #31
10002d2c:	4010      	ands	r0, r2
10002d2e:	1c3a      	adds	r2, r7, #0
10002d30:	320f      	adds	r2, #15
10002d32:	7812      	ldrb	r2, [r2, #0]
10002d34:	00d2      	lsls	r2, r2, #3
10002d36:	3203      	adds	r2, #3
10002d38:	1c04      	adds	r4, r0, #0
10002d3a:	4094      	lsls	r4, r2
10002d3c:	1c22      	adds	r2, r4, #0
10002d3e:	430a      	orrs	r2, r1
10002d40:	619a      	str	r2, [r3, #24]
10002d42:	e034      	b.n	10002dae <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 12U) && (Pin <= 15U))
10002d44:	1c3b      	adds	r3, r7, #0
10002d46:	330f      	adds	r3, #15
10002d48:	781b      	ldrb	r3, [r3, #0]
10002d4a:	2b0b      	cmp	r3, #11
10002d4c:	d92f      	bls.n	10002dae <IO004_DisableOutputDriver+0x1ae>
10002d4e:	1c3b      	adds	r3, r7, #0
10002d50:	330f      	adds	r3, #15
10002d52:	781b      	ldrb	r3, [r3, #0]
10002d54:	2b0f      	cmp	r3, #15
10002d56:	d82a      	bhi.n	10002dae <IO004_DisableOutputDriver+0x1ae>
  {
    Pin = Pin - 12U;
10002d58:	1c3b      	adds	r3, r7, #0
10002d5a:	330f      	adds	r3, #15
10002d5c:	1c3a      	adds	r2, r7, #0
10002d5e:	320f      	adds	r2, #15
10002d60:	7812      	ldrb	r2, [r2, #0]
10002d62:	3a0c      	subs	r2, #12
10002d64:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR12  =  (uint32_t)(Handle->PortRegs->IOCR12 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002d66:	687b      	ldr	r3, [r7, #4]
10002d68:	685b      	ldr	r3, [r3, #4]
10002d6a:	687a      	ldr	r2, [r7, #4]
10002d6c:	6852      	ldr	r2, [r2, #4]
10002d6e:	69d2      	ldr	r2, [r2, #28]
10002d70:	1c39      	adds	r1, r7, #0
10002d72:	310f      	adds	r1, #15
10002d74:	7809      	ldrb	r1, [r1, #0]
10002d76:	00c9      	lsls	r1, r1, #3
10002d78:	3103      	adds	r1, #3
10002d7a:	201f      	movs	r0, #31
10002d7c:	1c04      	adds	r4, r0, #0
10002d7e:	408c      	lsls	r4, r1
10002d80:	1c21      	adds	r1, r4, #0
10002d82:	43c9      	mvns	r1, r1
10002d84:	400a      	ands	r2, r1
10002d86:	61da      	str	r2, [r3, #28]
    Handle->PortRegs->IOCR12 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002d88:	687b      	ldr	r3, [r7, #4]
10002d8a:	685b      	ldr	r3, [r3, #4]
10002d8c:	687a      	ldr	r2, [r7, #4]
10002d8e:	6852      	ldr	r2, [r2, #4]
10002d90:	69d1      	ldr	r1, [r2, #28]
10002d92:	1cfa      	adds	r2, r7, #3
10002d94:	7810      	ldrb	r0, [r2, #0]
10002d96:	221f      	movs	r2, #31
10002d98:	4010      	ands	r0, r2
10002d9a:	1c3a      	adds	r2, r7, #0
10002d9c:	320f      	adds	r2, #15
10002d9e:	7812      	ldrb	r2, [r2, #0]
10002da0:	00d2      	lsls	r2, r2, #3
10002da2:	3203      	adds	r2, #3
10002da4:	1c04      	adds	r4, r0, #0
10002da6:	4094      	lsls	r4, r2
10002da8:	1c22      	adds	r2, r4, #0
10002daa:	430a      	orrs	r2, r1
10002dac:	61da      	str	r2, [r3, #28]
  else
  {
	  /*Not supposed to be here */
  }

}
10002dae:	46bd      	mov	sp, r7
10002db0:	b005      	add	sp, #20
10002db2:	bd90      	pop	{r4, r7, pc}

10002db4 <IO004_EnableOutputDriver>:

void IO004_EnableOutputDriver(const IO004_HandleType* Handle,IO004_OutputModeType Mode)
{
10002db4:	b590      	push	{r4, r7, lr}
10002db6:	b085      	sub	sp, #20
10002db8:	af00      	add	r7, sp, #0
10002dba:	6078      	str	r0, [r7, #4]
10002dbc:	1c0a      	adds	r2, r1, #0
10002dbe:	1cfb      	adds	r3, r7, #3
10002dc0:	701a      	strb	r2, [r3, #0]

  uint8_t Pin = Handle->PortPin;
10002dc2:	1c3b      	adds	r3, r7, #0
10002dc4:	330f      	adds	r3, #15
10002dc6:	687a      	ldr	r2, [r7, #4]
10002dc8:	7852      	ldrb	r2, [r2, #1]
10002dca:	701a      	strb	r2, [r3, #0]
  /* <<<DD_IO004_API_2>>> */
  if(Pin < 4U)
10002dcc:	1c3b      	adds	r3, r7, #0
10002dce:	330f      	adds	r3, #15
10002dd0:	781b      	ldrb	r3, [r3, #0]
10002dd2:	2b03      	cmp	r3, #3
10002dd4:	d824      	bhi.n	10002e20 <IO004_EnableOutputDriver+0x6c>
  {
    Handle->PortRegs->IOCR0  =  (uint32_t)(Handle->PortRegs->IOCR0 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002dd6:	687b      	ldr	r3, [r7, #4]
10002dd8:	685b      	ldr	r3, [r3, #4]
10002dda:	687a      	ldr	r2, [r7, #4]
10002ddc:	6852      	ldr	r2, [r2, #4]
10002dde:	6912      	ldr	r2, [r2, #16]
10002de0:	1c39      	adds	r1, r7, #0
10002de2:	310f      	adds	r1, #15
10002de4:	7809      	ldrb	r1, [r1, #0]
10002de6:	00c9      	lsls	r1, r1, #3
10002de8:	3103      	adds	r1, #3
10002dea:	201f      	movs	r0, #31
10002dec:	1c04      	adds	r4, r0, #0
10002dee:	408c      	lsls	r4, r1
10002df0:	1c21      	adds	r1, r4, #0
10002df2:	43c9      	mvns	r1, r1
10002df4:	400a      	ands	r2, r1
10002df6:	611a      	str	r2, [r3, #16]
    Handle->PortRegs->IOCR0 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002df8:	687b      	ldr	r3, [r7, #4]
10002dfa:	685b      	ldr	r3, [r3, #4]
10002dfc:	687a      	ldr	r2, [r7, #4]
10002dfe:	6852      	ldr	r2, [r2, #4]
10002e00:	6911      	ldr	r1, [r2, #16]
10002e02:	1cfa      	adds	r2, r7, #3
10002e04:	7810      	ldrb	r0, [r2, #0]
10002e06:	221f      	movs	r2, #31
10002e08:	4010      	ands	r0, r2
10002e0a:	1c3a      	adds	r2, r7, #0
10002e0c:	320f      	adds	r2, #15
10002e0e:	7812      	ldrb	r2, [r2, #0]
10002e10:	00d2      	lsls	r2, r2, #3
10002e12:	3203      	adds	r2, #3
10002e14:	1c04      	adds	r4, r0, #0
10002e16:	4094      	lsls	r4, r2
10002e18:	1c22      	adds	r2, r4, #0
10002e1a:	430a      	orrs	r2, r1
10002e1c:	611a      	str	r2, [r3, #16]
10002e1e:	e0a0      	b.n	10002f62 <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 4U) && (Pin <= 7U))
10002e20:	1c3b      	adds	r3, r7, #0
10002e22:	330f      	adds	r3, #15
10002e24:	781b      	ldrb	r3, [r3, #0]
10002e26:	2b03      	cmp	r3, #3
10002e28:	d930      	bls.n	10002e8c <IO004_EnableOutputDriver+0xd8>
10002e2a:	1c3b      	adds	r3, r7, #0
10002e2c:	330f      	adds	r3, #15
10002e2e:	781b      	ldrb	r3, [r3, #0]
10002e30:	2b07      	cmp	r3, #7
10002e32:	d82b      	bhi.n	10002e8c <IO004_EnableOutputDriver+0xd8>
  {
    Pin = Pin - 4U;
10002e34:	1c3b      	adds	r3, r7, #0
10002e36:	330f      	adds	r3, #15
10002e38:	1c3a      	adds	r2, r7, #0
10002e3a:	320f      	adds	r2, #15
10002e3c:	7812      	ldrb	r2, [r2, #0]
10002e3e:	3a04      	subs	r2, #4
10002e40:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR4  =  (uint32_t)(Handle->PortRegs->IOCR4 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002e42:	687b      	ldr	r3, [r7, #4]
10002e44:	685b      	ldr	r3, [r3, #4]
10002e46:	687a      	ldr	r2, [r7, #4]
10002e48:	6852      	ldr	r2, [r2, #4]
10002e4a:	6952      	ldr	r2, [r2, #20]
10002e4c:	1c39      	adds	r1, r7, #0
10002e4e:	310f      	adds	r1, #15
10002e50:	7809      	ldrb	r1, [r1, #0]
10002e52:	00c9      	lsls	r1, r1, #3
10002e54:	3103      	adds	r1, #3
10002e56:	201f      	movs	r0, #31
10002e58:	1c04      	adds	r4, r0, #0
10002e5a:	408c      	lsls	r4, r1
10002e5c:	1c21      	adds	r1, r4, #0
10002e5e:	43c9      	mvns	r1, r1
10002e60:	400a      	ands	r2, r1
10002e62:	615a      	str	r2, [r3, #20]
    Handle->PortRegs->IOCR4 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002e64:	687b      	ldr	r3, [r7, #4]
10002e66:	685b      	ldr	r3, [r3, #4]
10002e68:	687a      	ldr	r2, [r7, #4]
10002e6a:	6852      	ldr	r2, [r2, #4]
10002e6c:	6951      	ldr	r1, [r2, #20]
10002e6e:	1cfa      	adds	r2, r7, #3
10002e70:	7810      	ldrb	r0, [r2, #0]
10002e72:	221f      	movs	r2, #31
10002e74:	4010      	ands	r0, r2
10002e76:	1c3a      	adds	r2, r7, #0
10002e78:	320f      	adds	r2, #15
10002e7a:	7812      	ldrb	r2, [r2, #0]
10002e7c:	00d2      	lsls	r2, r2, #3
10002e7e:	3203      	adds	r2, #3
10002e80:	1c04      	adds	r4, r0, #0
10002e82:	4094      	lsls	r4, r2
10002e84:	1c22      	adds	r2, r4, #0
10002e86:	430a      	orrs	r2, r1
10002e88:	615a      	str	r2, [r3, #20]
10002e8a:	e06a      	b.n	10002f62 <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 8U) && (Pin <= 11U))
10002e8c:	1c3b      	adds	r3, r7, #0
10002e8e:	330f      	adds	r3, #15
10002e90:	781b      	ldrb	r3, [r3, #0]
10002e92:	2b07      	cmp	r3, #7
10002e94:	d930      	bls.n	10002ef8 <IO004_EnableOutputDriver+0x144>
10002e96:	1c3b      	adds	r3, r7, #0
10002e98:	330f      	adds	r3, #15
10002e9a:	781b      	ldrb	r3, [r3, #0]
10002e9c:	2b0b      	cmp	r3, #11
10002e9e:	d82b      	bhi.n	10002ef8 <IO004_EnableOutputDriver+0x144>
  {
    Pin = Pin - 8U;
10002ea0:	1c3b      	adds	r3, r7, #0
10002ea2:	330f      	adds	r3, #15
10002ea4:	1c3a      	adds	r2, r7, #0
10002ea6:	320f      	adds	r2, #15
10002ea8:	7812      	ldrb	r2, [r2, #0]
10002eaa:	3a08      	subs	r2, #8
10002eac:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR8  =  (uint32_t)(Handle->PortRegs->IOCR8 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002eae:	687b      	ldr	r3, [r7, #4]
10002eb0:	685b      	ldr	r3, [r3, #4]
10002eb2:	687a      	ldr	r2, [r7, #4]
10002eb4:	6852      	ldr	r2, [r2, #4]
10002eb6:	6992      	ldr	r2, [r2, #24]
10002eb8:	1c39      	adds	r1, r7, #0
10002eba:	310f      	adds	r1, #15
10002ebc:	7809      	ldrb	r1, [r1, #0]
10002ebe:	00c9      	lsls	r1, r1, #3
10002ec0:	3103      	adds	r1, #3
10002ec2:	201f      	movs	r0, #31
10002ec4:	1c04      	adds	r4, r0, #0
10002ec6:	408c      	lsls	r4, r1
10002ec8:	1c21      	adds	r1, r4, #0
10002eca:	43c9      	mvns	r1, r1
10002ecc:	400a      	ands	r2, r1
10002ece:	619a      	str	r2, [r3, #24]
    Handle->PortRegs->IOCR8 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002ed0:	687b      	ldr	r3, [r7, #4]
10002ed2:	685b      	ldr	r3, [r3, #4]
10002ed4:	687a      	ldr	r2, [r7, #4]
10002ed6:	6852      	ldr	r2, [r2, #4]
10002ed8:	6991      	ldr	r1, [r2, #24]
10002eda:	1cfa      	adds	r2, r7, #3
10002edc:	7810      	ldrb	r0, [r2, #0]
10002ede:	221f      	movs	r2, #31
10002ee0:	4010      	ands	r0, r2
10002ee2:	1c3a      	adds	r2, r7, #0
10002ee4:	320f      	adds	r2, #15
10002ee6:	7812      	ldrb	r2, [r2, #0]
10002ee8:	00d2      	lsls	r2, r2, #3
10002eea:	3203      	adds	r2, #3
10002eec:	1c04      	adds	r4, r0, #0
10002eee:	4094      	lsls	r4, r2
10002ef0:	1c22      	adds	r2, r4, #0
10002ef2:	430a      	orrs	r2, r1
10002ef4:	619a      	str	r2, [r3, #24]
10002ef6:	e034      	b.n	10002f62 <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 12U) && (Pin <= 15U))
10002ef8:	1c3b      	adds	r3, r7, #0
10002efa:	330f      	adds	r3, #15
10002efc:	781b      	ldrb	r3, [r3, #0]
10002efe:	2b0b      	cmp	r3, #11
10002f00:	d92f      	bls.n	10002f62 <IO004_EnableOutputDriver+0x1ae>
10002f02:	1c3b      	adds	r3, r7, #0
10002f04:	330f      	adds	r3, #15
10002f06:	781b      	ldrb	r3, [r3, #0]
10002f08:	2b0f      	cmp	r3, #15
10002f0a:	d82a      	bhi.n	10002f62 <IO004_EnableOutputDriver+0x1ae>
  {
    Pin = Pin - 12U;
10002f0c:	1c3b      	adds	r3, r7, #0
10002f0e:	330f      	adds	r3, #15
10002f10:	1c3a      	adds	r2, r7, #0
10002f12:	320f      	adds	r2, #15
10002f14:	7812      	ldrb	r2, [r2, #0]
10002f16:	3a0c      	subs	r2, #12
10002f18:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR12  =  (uint32_t)(Handle->PortRegs->IOCR12 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002f1a:	687b      	ldr	r3, [r7, #4]
10002f1c:	685b      	ldr	r3, [r3, #4]
10002f1e:	687a      	ldr	r2, [r7, #4]
10002f20:	6852      	ldr	r2, [r2, #4]
10002f22:	69d2      	ldr	r2, [r2, #28]
10002f24:	1c39      	adds	r1, r7, #0
10002f26:	310f      	adds	r1, #15
10002f28:	7809      	ldrb	r1, [r1, #0]
10002f2a:	00c9      	lsls	r1, r1, #3
10002f2c:	3103      	adds	r1, #3
10002f2e:	201f      	movs	r0, #31
10002f30:	1c04      	adds	r4, r0, #0
10002f32:	408c      	lsls	r4, r1
10002f34:	1c21      	adds	r1, r4, #0
10002f36:	43c9      	mvns	r1, r1
10002f38:	400a      	ands	r2, r1
10002f3a:	61da      	str	r2, [r3, #28]
    Handle->PortRegs->IOCR12 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002f3c:	687b      	ldr	r3, [r7, #4]
10002f3e:	685b      	ldr	r3, [r3, #4]
10002f40:	687a      	ldr	r2, [r7, #4]
10002f42:	6852      	ldr	r2, [r2, #4]
10002f44:	69d1      	ldr	r1, [r2, #28]
10002f46:	1cfa      	adds	r2, r7, #3
10002f48:	7810      	ldrb	r0, [r2, #0]
10002f4a:	221f      	movs	r2, #31
10002f4c:	4010      	ands	r0, r2
10002f4e:	1c3a      	adds	r2, r7, #0
10002f50:	320f      	adds	r2, #15
10002f52:	7812      	ldrb	r2, [r2, #0]
10002f54:	00d2      	lsls	r2, r2, #3
10002f56:	3203      	adds	r2, #3
10002f58:	1c04      	adds	r4, r0, #0
10002f5a:	4094      	lsls	r4, r2
10002f5c:	1c22      	adds	r2, r4, #0
10002f5e:	430a      	orrs	r2, r1
10002f60:	61da      	str	r2, [r3, #28]
  }
  else
  {
	  /*Not supposed to be here */
  }
}
10002f62:	46bd      	mov	sp, r7
10002f64:	b005      	add	sp, #20
10002f66:	bd90      	pop	{r4, r7, pc}

10002f68 <DAVE_Init>:
// @Parameters    None
//
//****************************************************************************

void DAVE_Init(void)
{
10002f68:	b580      	push	{r7, lr}
10002f6a:	af00      	add	r7, sp, #0

//****************************************************************************
// @Initialization of APPs Init Functions
//****************************************************************************
	//  MUX configurations
	DAVE_MUX_PreInit(); 
10002f6c:	f000 f88e 	bl	1000308c <DAVE_MUX_PreInit>
	//  Initialization of app 'CLK002'		     
	CLK002_Init();
10002f70:	f000 f89a 	bl	100030a8 <CLK002_Init>
	 
	//  Initialization of app 'UART001'		     
	UART001_Init();
10002f74:	f7ff f838 	bl	10001fe8 <UART001_Init>
	 
	//  Initialization of app 'IO004'		     
	IO004_Init();
10002f78:	f7ff fe26 	bl	10002bc8 <IO004_Init>
	 
	//  Initialization of app 'SYSTM001'		     
	SYSTM001_Init();
10002f7c:	f7ff fc88 	bl	10002890 <SYSTM001_Init>
	
      
	//  MUX configurations
	DAVE_MUX_Init();	
10002f80:	f000 f802 	bl	10002f88 <DAVE_MUX_Init>
} //  End of function DAVE_Init
10002f84:	46bd      	mov	sp, r7
10002f86:	bd80      	pop	{r7, pc}

10002f88 <DAVE_MUX_Init>:
** Description      : This is the Mux configuration                           **
**                                                                            **
*******************************************************************************/
           
void DAVE_MUX_Init(void)
{  
10002f88:	b580      	push	{r7, lr}
10002f8a:	b086      	sub	sp, #24
10002f8c:	af00      	add	r7, sp, #0
//********* MODULE USIC CONFIGURATIONS *************************	        
        
           
   /* Disable mode before configuring all USIC registers to avoid unintended edges */   
      /* Variable to store the CCR_MODE values for various USIC channels */ 
      uint32_t UsicCcrMode[6] = {0};
10002f8e:	1c3b      	adds	r3, r7, #0
10002f90:	2200      	movs	r2, #0
10002f92:	601a      	str	r2, [r3, #0]
10002f94:	3304      	adds	r3, #4
10002f96:	2200      	movs	r2, #0
10002f98:	601a      	str	r2, [r3, #0]
10002f9a:	3304      	adds	r3, #4
10002f9c:	2200      	movs	r2, #0
10002f9e:	601a      	str	r2, [r3, #0]
10002fa0:	3304      	adds	r3, #4
10002fa2:	2200      	movs	r2, #0
10002fa4:	601a      	str	r2, [r3, #0]
10002fa6:	3304      	adds	r3, #4
10002fa8:	2200      	movs	r2, #0
10002faa:	601a      	str	r2, [r3, #0]
10002fac:	3304      	adds	r3, #4
10002fae:	2200      	movs	r2, #0
10002fb0:	601a      	str	r2, [r3, #0]
10002fb2:	3304      	adds	r3, #4
                
    UsicCcrMode[1] |= (uint32_t) RD_REG(USIC0_CH1->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos); 
10002fb4:	1c3b      	adds	r3, r7, #0
10002fb6:	685a      	ldr	r2, [r3, #4]
10002fb8:	4b2e      	ldr	r3, [pc, #184]	; (10003074 <DAVE_MUX_Init+0xec>)
10002fba:	6c19      	ldr	r1, [r3, #64]	; 0x40
10002fbc:	230f      	movs	r3, #15
10002fbe:	400b      	ands	r3, r1
10002fc0:	431a      	orrs	r2, r3
10002fc2:	1c3b      	adds	r3, r7, #0
10002fc4:	605a      	str	r2, [r3, #4]
    WR_REG(USIC0_CH1->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos,0);   
10002fc6:	4b2b      	ldr	r3, [pc, #172]	; (10003074 <DAVE_MUX_Init+0xec>)
10002fc8:	4a2a      	ldr	r2, [pc, #168]	; (10003074 <DAVE_MUX_Init+0xec>)
10002fca:	6c12      	ldr	r2, [r2, #64]	; 0x40
10002fcc:	210f      	movs	r1, #15
10002fce:	438a      	bics	r2, r1
10002fd0:	641a      	str	r2, [r3, #64]	; 0x40
      
    						
   /*USIC 0 Channel 0 Mux Related SFR/Bitfields Configurations*/ 									  					 				 				 		       				              				  					    					 					   				  					 				 				       				  										 									 					 					  									      					              					  						    					      
       						
   /*USIC 0 Channel 1 Mux Related SFR/Bitfields Configurations*/ 						         
 WR_REG(USIC0_CH1->DX0CR, USIC_CH_DX0CR_DSEL_Msk, USIC_CH_DX0CR_DSEL_Pos,6); 
10002fd2:	4b28      	ldr	r3, [pc, #160]	; (10003074 <DAVE_MUX_Init+0xec>)
10002fd4:	4a27      	ldr	r2, [pc, #156]	; (10003074 <DAVE_MUX_Init+0xec>)
10002fd6:	69d2      	ldr	r2, [r2, #28]
10002fd8:	2107      	movs	r1, #7
10002fda:	438a      	bics	r2, r1
10002fdc:	2106      	movs	r1, #6
10002fde:	430a      	orrs	r2, r1
10002fe0:	61da      	str	r2, [r3, #28]
  			  					 				   
 WR_REG(USIC0_CH1->DX3CR, USIC_CH_DX3CR_DSEL_Msk, USIC_CH_DX3CR_DSEL_Pos,1);
10002fe2:	4b24      	ldr	r3, [pc, #144]	; (10003074 <DAVE_MUX_Init+0xec>)
10002fe4:	4a23      	ldr	r2, [pc, #140]	; (10003074 <DAVE_MUX_Init+0xec>)
10002fe6:	6a92      	ldr	r2, [r2, #40]	; 0x28
10002fe8:	2107      	movs	r1, #7
10002fea:	438a      	bics	r2, r1
10002fec:	2101      	movs	r1, #1
10002fee:	430a      	orrs	r2, r1
10002ff0:	629a      	str	r2, [r3, #40]	; 0x28
    				 		       				              				  					    					 					   				  					 				 				       				  										 									 					 					  									      					              					  						    					      
                 
   // Data Pointer & Buffer Size for Transmitter Buffer Control  
 WR_REG(USIC0_CH1->TBCTR, USIC_CH_TBCTR_DPTRSIZE_Msk, USIC_CH_TBCTR_DPTRSIZE_Pos,0x01000002);		/*    DPTR = 2,  SIZE = 1 */ 
10002ff2:	4a20      	ldr	r2, [pc, #128]	; (10003074 <DAVE_MUX_Init+0xec>)
10002ff4:	491f      	ldr	r1, [pc, #124]	; (10003074 <DAVE_MUX_Init+0xec>)
10002ff6:	2384      	movs	r3, #132	; 0x84
10002ff8:	005b      	lsls	r3, r3, #1
10002ffa:	58c9      	ldr	r1, [r1, r3]
10002ffc:	4b1e      	ldr	r3, [pc, #120]	; (10003078 <DAVE_MUX_Init+0xf0>)
10002ffe:	400b      	ands	r3, r1
10003000:	491e      	ldr	r1, [pc, #120]	; (1000307c <DAVE_MUX_Init+0xf4>)
10003002:	4319      	orrs	r1, r3
10003004:	2384      	movs	r3, #132	; 0x84
10003006:	005b      	lsls	r3, r3, #1
10003008:	50d1      	str	r1, [r2, r3]
         
  // Data Pointer & Buffer Size for Receiver Buffer Control  
 WR_REG(USIC0_CH1->RBCTR, USIC_CH_RBCTR_DPTRSIZE_Msk, USIC_CH_RBCTR_DPTRSIZE_Pos,0x01000000);		/*    DPTR = 0,  SIZE = 1 */ 
1000300a:	4a1a      	ldr	r2, [pc, #104]	; (10003074 <DAVE_MUX_Init+0xec>)
1000300c:	4919      	ldr	r1, [pc, #100]	; (10003074 <DAVE_MUX_Init+0xec>)
1000300e:	2386      	movs	r3, #134	; 0x86
10003010:	005b      	lsls	r3, r3, #1
10003012:	58c9      	ldr	r1, [r1, r3]
10003014:	4b18      	ldr	r3, [pc, #96]	; (10003078 <DAVE_MUX_Init+0xf0>)
10003016:	400b      	ands	r3, r1
10003018:	2180      	movs	r1, #128	; 0x80
1000301a:	0449      	lsls	r1, r1, #17
1000301c:	4319      	orrs	r1, r3
1000301e:	2386      	movs	r3, #134	; 0x86
10003020:	005b      	lsls	r3, r3, #1
10003022:	50d1      	str	r1, [r2, r3]
   /*USIC 2 Channel 1 Mux Related SFR/Bitfields Configurations*/ 									  					 				 				 		       				              				  					    					 					   				  					 				 				       				  										 									 					 					  									      					              					  						    					      
         
  
  /* Enable mode after configuring all USIC registers to avoid unintended edges */  
             
   WR_REG(USIC0_CH1->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos,UsicCcrMode[1]);   
10003024:	4b13      	ldr	r3, [pc, #76]	; (10003074 <DAVE_MUX_Init+0xec>)
10003026:	1c3a      	adds	r2, r7, #0
10003028:	6851      	ldr	r1, [r2, #4]
1000302a:	220f      	movs	r2, #15
1000302c:	4011      	ands	r1, r2
1000302e:	4a11      	ldr	r2, [pc, #68]	; (10003074 <DAVE_MUX_Init+0xec>)
10003030:	6c12      	ldr	r2, [r2, #64]	; 0x40
10003032:	200f      	movs	r0, #15
10003034:	4382      	bics	r2, r0
10003036:	430a      	orrs	r2, r1
10003038:	641a      	str	r2, [r3, #64]	; 0x40
   	 
            	         
                                                 

/*        PORT Macro definitions for IOCR_OE, IOCR_PCR & HWSEL_HW     */                                      
  WR_REG(PORT1->IOCR0, PORT_IOCR_PC0_OE_Msk, PORT_IOCR_PC0_OE_Pos, PORT_IOCR_OE1);                /*    P1.0 : PORT1_IOCR0_PC0_OE */					   
1000303a:	4b11      	ldr	r3, [pc, #68]	; (10003080 <DAVE_MUX_Init+0xf8>)
1000303c:	4a10      	ldr	r2, [pc, #64]	; (10003080 <DAVE_MUX_Init+0xf8>)
1000303e:	6912      	ldr	r2, [r2, #16]
10003040:	2180      	movs	r1, #128	; 0x80
10003042:	430a      	orrs	r2, r1
10003044:	611a      	str	r2, [r3, #16]
					                         
  WR_REG(PORT1->IOCR0, PORT_IOCR_PC1_OE_Msk, PORT_IOCR_PC1_OE_Pos, PORT_IOCR_OE1);                /*    P1.1 : PORT1_IOCR0_PC1_OE */					   
10003046:	4b0e      	ldr	r3, [pc, #56]	; (10003080 <DAVE_MUX_Init+0xf8>)
10003048:	4a0d      	ldr	r2, [pc, #52]	; (10003080 <DAVE_MUX_Init+0xf8>)
1000304a:	6912      	ldr	r2, [r2, #16]
1000304c:	2180      	movs	r1, #128	; 0x80
1000304e:	0209      	lsls	r1, r1, #8
10003050:	430a      	orrs	r2, r1
10003052:	611a      	str	r2, [r3, #16]
					  
           
  WR_REG(PORT2->PDISC, PORT2_PDISC_PDIS10_Msk, PORT2_PDISC_PDIS10_Pos, PORT_PDISC_PDIS0);            /*    P2.10 : PORT2_PDISC_PDIS10 */                       
10003054:	4b0b      	ldr	r3, [pc, #44]	; (10003084 <DAVE_MUX_Init+0xfc>)
10003056:	4a0b      	ldr	r2, [pc, #44]	; (10003084 <DAVE_MUX_Init+0xfc>)
10003058:	6e11      	ldr	r1, [r2, #96]	; 0x60
1000305a:	4a0b      	ldr	r2, [pc, #44]	; (10003088 <DAVE_MUX_Init+0x100>)
1000305c:	400a      	ands	r2, r1
1000305e:	661a      	str	r2, [r3, #96]	; 0x60
  WR_REG(PORT2->IOCR8, 0xb80000U, PORT_IOCR_PC2_PCR_Pos, 0x17U);                /*P2.10 : PORT2_IOCR8_PC10_PCR and PORT2_IOCR8_PC10_OE */					   
10003060:	4b08      	ldr	r3, [pc, #32]	; (10003084 <DAVE_MUX_Init+0xfc>)
10003062:	4a08      	ldr	r2, [pc, #32]	; (10003084 <DAVE_MUX_Init+0xfc>)
10003064:	6992      	ldr	r2, [r2, #24]
10003066:	21b8      	movs	r1, #184	; 0xb8
10003068:	0409      	lsls	r1, r1, #16
1000306a:	430a      	orrs	r2, r1
1000306c:	619a      	str	r2, [r3, #24]
					      
}
1000306e:	46bd      	mov	sp, r7
10003070:	b006      	add	sp, #24
10003072:	bd80      	pop	{r7, pc}
10003074:	48000200 	.word	0x48000200
10003078:	f8ffffc0 	.word	0xf8ffffc0
1000307c:	01000002 	.word	0x01000002
10003080:	40040100 	.word	0x40040100
10003084:	40040200 	.word	0x40040200
10003088:	fffffbff 	.word	0xfffffbff

1000308c <DAVE_MUX_PreInit>:
** Description      : This is the Mux configuration                           **
**                                                                            **
*******************************************************************************/
 
void DAVE_MUX_PreInit(void)
{            
1000308c:	b580      	push	{r7, lr}
1000308e:	af00      	add	r7, sp, #0

/*        PORT Macro definitions for IOCR_OE, IOCR_PCR & HWSEL_HW     */               
           
  WR_REG(PORT2->PDISC, PORT2_PDISC_PDIS9_Msk, PORT2_PDISC_PDIS9_Pos, PORT_PDISC_PDIS0);            /*    P2.9 : PORT2_PDISC_PDIS9 */    
10003090:	4b03      	ldr	r3, [pc, #12]	; (100030a0 <DAVE_MUX_PreInit+0x14>)
10003092:	4a03      	ldr	r2, [pc, #12]	; (100030a0 <DAVE_MUX_PreInit+0x14>)
10003094:	6e11      	ldr	r1, [r2, #96]	; 0x60
10003096:	4a03      	ldr	r2, [pc, #12]	; (100030a4 <DAVE_MUX_PreInit+0x18>)
10003098:	400a      	ands	r2, r1
1000309a:	661a      	str	r2, [r3, #96]	; 0x60
}
1000309c:	46bd      	mov	sp, r7
1000309e:	bd80      	pop	{r7, pc}
100030a0:	40040200 	.word	0x40040200
100030a4:	fffffdff 	.word	0xfffffdff

100030a8 <CLK002_Init>:
  * @note   -
  * @param  None
  * @retval None
  */
void CLK002_Init(void)
{
100030a8:	b580      	push	{r7, lr}
100030aa:	af00      	add	r7, sp, #0
    /* Open the lock that protects privileged bits. */
    SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_ALLOW;
100030ac:	4b0a      	ldr	r3, [pc, #40]	; (100030d8 <CLK002_Init+0x30>)
100030ae:	22c0      	movs	r2, #192	; 0xc0
100030b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Loop until protection is removed. */
    while(((SCU_GENERAL->PASSWD)&SCU_GENERAL_PASSWD_PROTS_Msk))
100030b2:	46c0      	nop			; (mov r8, r8)
100030b4:	4b08      	ldr	r3, [pc, #32]	; (100030d8 <CLK002_Init+0x30>)
100030b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
100030b8:	2304      	movs	r3, #4
100030ba:	4013      	ands	r3, r2
100030bc:	d1fa      	bne.n	100030b4 <CLK002_Init+0xc>
    {
	    ;
    }

    /* Update PCLK selection mux. */
    SCU_CLK->CLKCR|=(((uint32_t)CLK002_CLKCR_PCLKSEL<<\
100030be:	4b07      	ldr	r3, [pc, #28]	; (100030dc <CLK002_Init+0x34>)
100030c0:	4a06      	ldr	r2, [pc, #24]	; (100030dc <CLK002_Init+0x34>)
100030c2:	6812      	ldr	r2, [r2, #0]
100030c4:	601a      	str	r2, [r3, #0]
	             (uint32_t)SCU_CLK_CLKCR_PCLKSEL_Pos)&SCU_CLK_CLKCR_PCLKSEL_Msk);

    CLK002_lDivUpdate();
100030c6:	f000 f811 	bl	100030ec <CLK002_lDivUpdate>

    /*Close the lock opened above. */
    SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_DISALLOW;
100030ca:	4b03      	ldr	r3, [pc, #12]	; (100030d8 <CLK002_Init+0x30>)
100030cc:	22c3      	movs	r2, #195	; 0xc3
100030ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update the clock variable */
    SystemCoreClockUpdate();
100030d0:	f7fe fa8c 	bl	100015ec <SystemCoreClockUpdate>
}
100030d4:	46bd      	mov	sp, r7
100030d6:	bd80      	pop	{r7, pc}
100030d8:	40010000 	.word	0x40010000
100030dc:	40010300 	.word	0x40010300

100030e0 <AllowClkInitByStartup>:
*         proceeds with program  loading. Return 0 to disallow CStart from
*         performing clock tree setup.
*/

uint32_t AllowClkInitByStartup(void)
{
100030e0:	b580      	push	{r7, lr}
100030e2:	af00      	add	r7, sp, #0
    /* Return FALSE - Do not allow any initialisation by startup code. */
    return ((uint32_t)0);
100030e4:	2300      	movs	r3, #0
}
100030e6:	1c18      	adds	r0, r3, #0
100030e8:	46bd      	mov	sp, r7
100030ea:	bd80      	pop	{r7, pc}

100030ec <CLK002_lDivUpdate>:
  * @note   -
  * @param  None
  * @retval None
  */
static void CLK002_lDivUpdate(void)
{
100030ec:	b580      	push	{r7, lr}
100030ee:	b084      	sub	sp, #16
100030f0:	af00      	add	r7, sp, #0
 /*  Find out current and target value of idiv */
 uint32_t lCurrIdiv= (uint32_t) 0;      /* Current idiv. */
100030f2:	2300      	movs	r3, #0
100030f4:	60fb      	str	r3, [r7, #12]
 uint32_t lTargetidiv= (uint32_t) 0;    /* Target idiv. */
100030f6:	2300      	movs	r3, #0
100030f8:	60bb      	str	r3, [r7, #8]
 uint32_t lCLKCR;
 lCurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
100030fa:	4b18      	ldr	r3, [pc, #96]	; (1000315c <CLK002_lDivUpdate+0x70>)
100030fc:	681a      	ldr	r2, [r3, #0]
100030fe:	23ff      	movs	r3, #255	; 0xff
10003100:	021b      	lsls	r3, r3, #8
10003102:	4013      	ands	r3, r2
10003104:	0a1b      	lsrs	r3, r3, #8
10003106:	60fb      	str	r3, [r7, #12]
 lTargetidiv = CLK002_CLKCR_IDIV;
10003108:	2304      	movs	r3, #4
1000310a:	60bb      	str	r3, [r7, #8]

 /* Update FDIV here, unconditionally. */

  lCLKCR = SCU_CLK->CLKCR;
1000310c:	4b13      	ldr	r3, [pc, #76]	; (1000315c <CLK002_lDivUpdate+0x70>)
1000310e:	681b      	ldr	r3, [r3, #0]
10003110:	607b      	str	r3, [r7, #4]
  WR_REG(lCLKCR, SCU_CLK_CLKCR_FDIV_Msk, SCU_CLK_CLKCR_FDIV_Pos,CLK002_CLKCR_FDIV);
10003112:	687b      	ldr	r3, [r7, #4]
10003114:	22ff      	movs	r2, #255	; 0xff
10003116:	4393      	bics	r3, r2
10003118:	607b      	str	r3, [r7, #4]
  SCU_CLK->CLKCR = lCLKCR;
1000311a:	4b10      	ldr	r3, [pc, #64]	; (1000315c <CLK002_lDivUpdate+0x70>)
1000311c:	687a      	ldr	r2, [r7, #4]
1000311e:	601a      	str	r2, [r3, #0]

     /* Delay, till frequency stable, appox. 15us. */


  WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10003120:	4b0e      	ldr	r3, [pc, #56]	; (1000315c <CLK002_lDivUpdate+0x70>)
10003122:	4a0e      	ldr	r2, [pc, #56]	; (1000315c <CLK002_lDivUpdate+0x70>)
10003124:	6812      	ldr	r2, [r2, #0]
10003126:	490e      	ldr	r1, [pc, #56]	; (10003160 <CLK002_lDivUpdate+0x74>)
10003128:	430a      	orrs	r2, r1
1000312a:	601a      	str	r2, [r3, #0]
  while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
1000312c:	46c0      	nop			; (mov r8, r8)
1000312e:	4b0b      	ldr	r3, [pc, #44]	; (1000315c <CLK002_lDivUpdate+0x70>)
10003130:	681a      	ldr	r2, [r3, #0]
10003132:	2380      	movs	r3, #128	; 0x80
10003134:	05db      	lsls	r3, r3, #23
10003136:	4013      	ands	r3, r2
10003138:	d1f9      	bne.n	1000312e <CLK002_lDivUpdate+0x42>
    ;
  }


    /* Find out current value of direction in which idiv has to update. */
 if (lCurrIdiv==lTargetidiv)
1000313a:	68fa      	ldr	r2, [r7, #12]
1000313c:	68bb      	ldr	r3, [r7, #8]
1000313e:	429a      	cmp	r2, r3
10003140:	d008      	beq.n	10003154 <CLK002_lDivUpdate+0x68>
  {
   /*No change in IDIV. */
  }
 else if(lCurrIdiv < lTargetidiv)
10003142:	68fa      	ldr	r2, [r7, #12]
10003144:	68bb      	ldr	r3, [r7, #8]
10003146:	429a      	cmp	r2, r3
10003148:	d202      	bcs.n	10003150 <CLK002_lDivUpdate+0x64>
  {
    CLK002_lFrequencyDownScaling();
1000314a:	f000 f869 	bl	10003220 <CLK002_lFrequencyDownScaling>
1000314e:	e001      	b.n	10003154 <CLK002_lDivUpdate+0x68>
  }
  else
   {
     CLK002_lFrequencyUpScaling();
10003150:	f000 f808 	bl	10003164 <CLK002_lFrequencyUpScaling>
   }

}
10003154:	46bd      	mov	sp, r7
10003156:	b004      	add	sp, #16
10003158:	bd80      	pop	{r7, pc}
1000315a:	46c0      	nop			; (mov r8, r8)
1000315c:	40010300 	.word	0x40010300
10003160:	3ff00000 	.word	0x3ff00000

10003164 <CLK002_lFrequencyUpScaling>:
  * @note   -
  * @param  None
  * @retval None
  */
static void     CLK002_lFrequencyUpScaling()
{
10003164:	b580      	push	{r7, lr}
10003166:	b084      	sub	sp, #16
10003168:	af00      	add	r7, sp, #0
  uint32_t CurrIdiv;
  uint32_t TargetIdiv;
  uint32_t lCLKCR;
  CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
1000316a:	4b2a      	ldr	r3, [pc, #168]	; (10003214 <CLK002_lFrequencyUpScaling+0xb0>)
1000316c:	681a      	ldr	r2, [r3, #0]
1000316e:	23ff      	movs	r3, #255	; 0xff
10003170:	021b      	lsls	r3, r3, #8
10003172:	4013      	ands	r3, r2
10003174:	0a1b      	lsrs	r3, r3, #8
10003176:	60fb      	str	r3, [r7, #12]
  TargetIdiv = CLK002_CLKCR_IDIV;
10003178:	2304      	movs	r3, #4
1000317a:	60bb      	str	r3, [r7, #8]
  while(1)
  {
    if(CurrIdiv > (TargetIdiv * 4UL))
1000317c:	68bb      	ldr	r3, [r7, #8]
1000317e:	009a      	lsls	r2, r3, #2
10003180:	68fb      	ldr	r3, [r7, #12]
10003182:	429a      	cmp	r2, r3
10003184:	d224      	bcs.n	100031d0 <CLK002_lFrequencyUpScaling+0x6c>
    {
        CurrIdiv = (CurrIdiv & 0xFFFFFFFCU) + 4U;
10003186:	68fb      	ldr	r3, [r7, #12]
10003188:	2203      	movs	r2, #3
1000318a:	4393      	bics	r3, r2
1000318c:	3304      	adds	r3, #4
1000318e:	60fb      	str	r3, [r7, #12]
        CurrIdiv  = CurrIdiv >> 2;   /* Divide by 4. */
10003190:	68fb      	ldr	r3, [r7, #12]
10003192:	089b      	lsrs	r3, r3, #2
10003194:	60fb      	str	r3, [r7, #12]
        /* Program interim value of IDIV. */

        lCLKCR = SCU_CLK->CLKCR;
10003196:	4b1f      	ldr	r3, [pc, #124]	; (10003214 <CLK002_lFrequencyUpScaling+0xb0>)
10003198:	681b      	ldr	r3, [r3, #0]
1000319a:	607b      	str	r3, [r7, #4]
        WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
1000319c:	68fb      	ldr	r3, [r7, #12]
1000319e:	021b      	lsls	r3, r3, #8
100031a0:	041b      	lsls	r3, r3, #16
100031a2:	0c1a      	lsrs	r2, r3, #16
100031a4:	6879      	ldr	r1, [r7, #4]
100031a6:	4b1c      	ldr	r3, [pc, #112]	; (10003218 <CLK002_lFrequencyUpScaling+0xb4>)
100031a8:	400b      	ands	r3, r1
100031aa:	4313      	orrs	r3, r2
100031ac:	607b      	str	r3, [r7, #4]
        SCU_CLK->CLKCR = lCLKCR;
100031ae:	4b19      	ldr	r3, [pc, #100]	; (10003214 <CLK002_lFrequencyUpScaling+0xb0>)
100031b0:	687a      	ldr	r2, [r7, #4]
100031b2:	601a      	str	r2, [r3, #0]

        /* Wait till frequency stable. */
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
100031b4:	4b17      	ldr	r3, [pc, #92]	; (10003214 <CLK002_lFrequencyUpScaling+0xb0>)
100031b6:	4a17      	ldr	r2, [pc, #92]	; (10003214 <CLK002_lFrequencyUpScaling+0xb0>)
100031b8:	6812      	ldr	r2, [r2, #0]
100031ba:	4918      	ldr	r1, [pc, #96]	; (1000321c <CLK002_lFrequencyUpScaling+0xb8>)
100031bc:	430a      	orrs	r2, r1
100031be:	601a      	str	r2, [r3, #0]
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
100031c0:	46c0      	nop			; (mov r8, r8)
100031c2:	4b14      	ldr	r3, [pc, #80]	; (10003214 <CLK002_lFrequencyUpScaling+0xb0>)
100031c4:	681a      	ldr	r2, [r3, #0]
100031c6:	2380      	movs	r3, #128	; 0x80
100031c8:	05db      	lsls	r3, r3, #23
100031ca:	4013      	ands	r3, r2
100031cc:	d1f9      	bne.n	100031c2 <CLK002_lFrequencyUpScaling+0x5e>
100031ce:	e01c      	b.n	1000320a <CLK002_lFrequencyUpScaling+0xa6>
        }
    }
    else
    {
        /* Program TargetIDiv into IDIV bitfield of CLKCR. */
        lCLKCR = SCU_CLK->CLKCR;
100031d0:	4b10      	ldr	r3, [pc, #64]	; (10003214 <CLK002_lFrequencyUpScaling+0xb0>)
100031d2:	681b      	ldr	r3, [r3, #0]
100031d4:	607b      	str	r3, [r7, #4]
        WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
100031d6:	68bb      	ldr	r3, [r7, #8]
100031d8:	021b      	lsls	r3, r3, #8
100031da:	041b      	lsls	r3, r3, #16
100031dc:	0c1a      	lsrs	r2, r3, #16
100031de:	6879      	ldr	r1, [r7, #4]
100031e0:	4b0d      	ldr	r3, [pc, #52]	; (10003218 <CLK002_lFrequencyUpScaling+0xb4>)
100031e2:	400b      	ands	r3, r1
100031e4:	4313      	orrs	r3, r2
100031e6:	607b      	str	r3, [r7, #4]
        SCU_CLK->CLKCR = lCLKCR;
100031e8:	4b0a      	ldr	r3, [pc, #40]	; (10003214 <CLK002_lFrequencyUpScaling+0xb0>)
100031ea:	687a      	ldr	r2, [r7, #4]
100031ec:	601a      	str	r2, [r3, #0]
        /* Wait till frequency stable. */
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
100031ee:	4b09      	ldr	r3, [pc, #36]	; (10003214 <CLK002_lFrequencyUpScaling+0xb0>)
100031f0:	4a08      	ldr	r2, [pc, #32]	; (10003214 <CLK002_lFrequencyUpScaling+0xb0>)
100031f2:	6812      	ldr	r2, [r2, #0]
100031f4:	4909      	ldr	r1, [pc, #36]	; (1000321c <CLK002_lFrequencyUpScaling+0xb8>)
100031f6:	430a      	orrs	r2, r1
100031f8:	601a      	str	r2, [r3, #0]
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
100031fa:	46c0      	nop			; (mov r8, r8)
100031fc:	4b05      	ldr	r3, [pc, #20]	; (10003214 <CLK002_lFrequencyUpScaling+0xb0>)
100031fe:	681a      	ldr	r2, [r3, #0]
10003200:	2380      	movs	r3, #128	; 0x80
10003202:	05db      	lsls	r3, r3, #23
10003204:	4013      	ands	r3, r2
10003206:	d1f9      	bne.n	100031fc <CLK002_lFrequencyUpScaling+0x98>
        {
            ;
        }
        break;
10003208:	e000      	b.n	1000320c <CLK002_lFrequencyUpScaling+0xa8>
    }

  }
1000320a:	e7b7      	b.n	1000317c <CLK002_lFrequencyUpScaling+0x18>

}
1000320c:	46bd      	mov	sp, r7
1000320e:	b004      	add	sp, #16
10003210:	bd80      	pop	{r7, pc}
10003212:	46c0      	nop			; (mov r8, r8)
10003214:	40010300 	.word	0x40010300
10003218:	ffff00ff 	.word	0xffff00ff
1000321c:	3ff00000 	.word	0x3ff00000

10003220 <CLK002_lFrequencyDownScaling>:
  * @note   -
  * @param  None
  * @retval None
  */
static void     CLK002_lFrequencyDownScaling()
{
10003220:	b580      	push	{r7, lr}
10003222:	b084      	sub	sp, #16
10003224:	af00      	add	r7, sp, #0
    uint32_t CurrIdiv;
    uint32_t TargetIdiv;
    uint32_t lCLKCR;
    CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
10003226:	4b27      	ldr	r3, [pc, #156]	; (100032c4 <CLK002_lFrequencyDownScaling+0xa4>)
10003228:	681a      	ldr	r2, [r3, #0]
1000322a:	23ff      	movs	r3, #255	; 0xff
1000322c:	021b      	lsls	r3, r3, #8
1000322e:	4013      	ands	r3, r2
10003230:	0a1b      	lsrs	r3, r3, #8
10003232:	60fb      	str	r3, [r7, #12]
    TargetIdiv = CLK002_CLKCR_IDIV;
10003234:	2304      	movs	r3, #4
10003236:	60bb      	str	r3, [r7, #8]
    while(1)
    {
        if((CurrIdiv * 4UL) < TargetIdiv )
10003238:	68fb      	ldr	r3, [r7, #12]
1000323a:	009a      	lsls	r2, r3, #2
1000323c:	68bb      	ldr	r3, [r7, #8]
1000323e:	429a      	cmp	r2, r3
10003240:	d21f      	bcs.n	10003282 <CLK002_lFrequencyDownScaling+0x62>
        {
            CurrIdiv  = CurrIdiv << 2;   /* Multiply by 4. */
10003242:	68fb      	ldr	r3, [r7, #12]
10003244:	009b      	lsls	r3, r3, #2
10003246:	60fb      	str	r3, [r7, #12]
            /* Program interim value of IDIV */
            lCLKCR = SCU_CLK->CLKCR;
10003248:	4b1e      	ldr	r3, [pc, #120]	; (100032c4 <CLK002_lFrequencyDownScaling+0xa4>)
1000324a:	681b      	ldr	r3, [r3, #0]
1000324c:	607b      	str	r3, [r7, #4]
            WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
1000324e:	68fb      	ldr	r3, [r7, #12]
10003250:	021b      	lsls	r3, r3, #8
10003252:	041b      	lsls	r3, r3, #16
10003254:	0c1a      	lsrs	r2, r3, #16
10003256:	6879      	ldr	r1, [r7, #4]
10003258:	4b1b      	ldr	r3, [pc, #108]	; (100032c8 <CLK002_lFrequencyDownScaling+0xa8>)
1000325a:	400b      	ands	r3, r1
1000325c:	4313      	orrs	r3, r2
1000325e:	607b      	str	r3, [r7, #4]
            SCU_CLK->CLKCR = lCLKCR;
10003260:	4b18      	ldr	r3, [pc, #96]	; (100032c4 <CLK002_lFrequencyDownScaling+0xa4>)
10003262:	687a      	ldr	r2, [r7, #4]
10003264:	601a      	str	r2, [r3, #0]
            /* Wait till frequency stable. */
            WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10003266:	4b17      	ldr	r3, [pc, #92]	; (100032c4 <CLK002_lFrequencyDownScaling+0xa4>)
10003268:	4a16      	ldr	r2, [pc, #88]	; (100032c4 <CLK002_lFrequencyDownScaling+0xa4>)
1000326a:	6812      	ldr	r2, [r2, #0]
1000326c:	4917      	ldr	r1, [pc, #92]	; (100032cc <CLK002_lFrequencyDownScaling+0xac>)
1000326e:	430a      	orrs	r2, r1
10003270:	601a      	str	r2, [r3, #0]
            while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10003272:	46c0      	nop			; (mov r8, r8)
10003274:	4b13      	ldr	r3, [pc, #76]	; (100032c4 <CLK002_lFrequencyDownScaling+0xa4>)
10003276:	681a      	ldr	r2, [r3, #0]
10003278:	2380      	movs	r3, #128	; 0x80
1000327a:	05db      	lsls	r3, r3, #23
1000327c:	4013      	ands	r3, r2
1000327e:	d1f9      	bne.n	10003274 <CLK002_lFrequencyDownScaling+0x54>
10003280:	e01c      	b.n	100032bc <CLK002_lFrequencyDownScaling+0x9c>
            }
        }
        else
        {
            /* Program TargetIDiv into IDIV bitfield of CLKCR */
            lCLKCR = SCU_CLK->CLKCR;
10003282:	4b10      	ldr	r3, [pc, #64]	; (100032c4 <CLK002_lFrequencyDownScaling+0xa4>)
10003284:	681b      	ldr	r3, [r3, #0]
10003286:	607b      	str	r3, [r7, #4]
            WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
10003288:	68bb      	ldr	r3, [r7, #8]
1000328a:	021b      	lsls	r3, r3, #8
1000328c:	041b      	lsls	r3, r3, #16
1000328e:	0c1a      	lsrs	r2, r3, #16
10003290:	6879      	ldr	r1, [r7, #4]
10003292:	4b0d      	ldr	r3, [pc, #52]	; (100032c8 <CLK002_lFrequencyDownScaling+0xa8>)
10003294:	400b      	ands	r3, r1
10003296:	4313      	orrs	r3, r2
10003298:	607b      	str	r3, [r7, #4]
            SCU_CLK->CLKCR = lCLKCR;
1000329a:	4b0a      	ldr	r3, [pc, #40]	; (100032c4 <CLK002_lFrequencyDownScaling+0xa4>)
1000329c:	687a      	ldr	r2, [r7, #4]
1000329e:	601a      	str	r2, [r3, #0]
            /* Wait till frequency stable. */
           
            WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
100032a0:	4b08      	ldr	r3, [pc, #32]	; (100032c4 <CLK002_lFrequencyDownScaling+0xa4>)
100032a2:	4a08      	ldr	r2, [pc, #32]	; (100032c4 <CLK002_lFrequencyDownScaling+0xa4>)
100032a4:	6812      	ldr	r2, [r2, #0]
100032a6:	4909      	ldr	r1, [pc, #36]	; (100032cc <CLK002_lFrequencyDownScaling+0xac>)
100032a8:	430a      	orrs	r2, r1
100032aa:	601a      	str	r2, [r3, #0]
            while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
100032ac:	46c0      	nop			; (mov r8, r8)
100032ae:	4b05      	ldr	r3, [pc, #20]	; (100032c4 <CLK002_lFrequencyDownScaling+0xa4>)
100032b0:	681a      	ldr	r2, [r3, #0]
100032b2:	2380      	movs	r3, #128	; 0x80
100032b4:	05db      	lsls	r3, r3, #23
100032b6:	4013      	ands	r3, r2
100032b8:	d1f9      	bne.n	100032ae <CLK002_lFrequencyDownScaling+0x8e>
            {
                ;
            }
             break;
100032ba:	e000      	b.n	100032be <CLK002_lFrequencyDownScaling+0x9e>
        }

	  }
100032bc:	e7bc      	b.n	10003238 <CLK002_lFrequencyDownScaling+0x18>
}
100032be:	46bd      	mov	sp, r7
100032c0:	b004      	add	sp, #16
100032c2:	bd80      	pop	{r7, pc}
100032c4:	40010300 	.word	0x40010300
100032c8:	ffff00ff 	.word	0xffff00ff
100032cc:	3ff00000 	.word	0x3ff00000

100032d0 <__aeabi_uidiv>:
100032d0:	2900      	cmp	r1, #0
100032d2:	d034      	beq.n	1000333e <.udivsi3_skip_div0_test+0x6a>

100032d4 <.udivsi3_skip_div0_test>:
100032d4:	2301      	movs	r3, #1
100032d6:	2200      	movs	r2, #0
100032d8:	b410      	push	{r4}
100032da:	4288      	cmp	r0, r1
100032dc:	d32c      	bcc.n	10003338 <.udivsi3_skip_div0_test+0x64>
100032de:	2401      	movs	r4, #1
100032e0:	0724      	lsls	r4, r4, #28
100032e2:	42a1      	cmp	r1, r4
100032e4:	d204      	bcs.n	100032f0 <.udivsi3_skip_div0_test+0x1c>
100032e6:	4281      	cmp	r1, r0
100032e8:	d202      	bcs.n	100032f0 <.udivsi3_skip_div0_test+0x1c>
100032ea:	0109      	lsls	r1, r1, #4
100032ec:	011b      	lsls	r3, r3, #4
100032ee:	e7f8      	b.n	100032e2 <.udivsi3_skip_div0_test+0xe>
100032f0:	00e4      	lsls	r4, r4, #3
100032f2:	42a1      	cmp	r1, r4
100032f4:	d204      	bcs.n	10003300 <.udivsi3_skip_div0_test+0x2c>
100032f6:	4281      	cmp	r1, r0
100032f8:	d202      	bcs.n	10003300 <.udivsi3_skip_div0_test+0x2c>
100032fa:	0049      	lsls	r1, r1, #1
100032fc:	005b      	lsls	r3, r3, #1
100032fe:	e7f8      	b.n	100032f2 <.udivsi3_skip_div0_test+0x1e>
10003300:	4288      	cmp	r0, r1
10003302:	d301      	bcc.n	10003308 <.udivsi3_skip_div0_test+0x34>
10003304:	1a40      	subs	r0, r0, r1
10003306:	431a      	orrs	r2, r3
10003308:	084c      	lsrs	r4, r1, #1
1000330a:	42a0      	cmp	r0, r4
1000330c:	d302      	bcc.n	10003314 <.udivsi3_skip_div0_test+0x40>
1000330e:	1b00      	subs	r0, r0, r4
10003310:	085c      	lsrs	r4, r3, #1
10003312:	4322      	orrs	r2, r4
10003314:	088c      	lsrs	r4, r1, #2
10003316:	42a0      	cmp	r0, r4
10003318:	d302      	bcc.n	10003320 <.udivsi3_skip_div0_test+0x4c>
1000331a:	1b00      	subs	r0, r0, r4
1000331c:	089c      	lsrs	r4, r3, #2
1000331e:	4322      	orrs	r2, r4
10003320:	08cc      	lsrs	r4, r1, #3
10003322:	42a0      	cmp	r0, r4
10003324:	d302      	bcc.n	1000332c <.udivsi3_skip_div0_test+0x58>
10003326:	1b00      	subs	r0, r0, r4
10003328:	08dc      	lsrs	r4, r3, #3
1000332a:	4322      	orrs	r2, r4
1000332c:	2800      	cmp	r0, #0
1000332e:	d003      	beq.n	10003338 <.udivsi3_skip_div0_test+0x64>
10003330:	091b      	lsrs	r3, r3, #4
10003332:	d001      	beq.n	10003338 <.udivsi3_skip_div0_test+0x64>
10003334:	0909      	lsrs	r1, r1, #4
10003336:	e7e3      	b.n	10003300 <.udivsi3_skip_div0_test+0x2c>
10003338:	1c10      	adds	r0, r2, #0
1000333a:	bc10      	pop	{r4}
1000333c:	4770      	bx	lr
1000333e:	2800      	cmp	r0, #0
10003340:	d001      	beq.n	10003346 <.udivsi3_skip_div0_test+0x72>
10003342:	2000      	movs	r0, #0
10003344:	43c0      	mvns	r0, r0
10003346:	b407      	push	{r0, r1, r2}
10003348:	4802      	ldr	r0, [pc, #8]	; (10003354 <.udivsi3_skip_div0_test+0x80>)
1000334a:	a102      	add	r1, pc, #8	; (adr r1, 10003354 <.udivsi3_skip_div0_test+0x80>)
1000334c:	1840      	adds	r0, r0, r1
1000334e:	9002      	str	r0, [sp, #8]
10003350:	bd03      	pop	{r0, r1, pc}
10003352:	46c0      	nop			; (mov r8, r8)
10003354:	00000019 	.word	0x00000019

10003358 <__aeabi_uidivmod>:
10003358:	2900      	cmp	r1, #0
1000335a:	d0f0      	beq.n	1000333e <.udivsi3_skip_div0_test+0x6a>
1000335c:	b503      	push	{r0, r1, lr}
1000335e:	f7ff ffb9 	bl	100032d4 <.udivsi3_skip_div0_test>
10003362:	bc0e      	pop	{r1, r2, r3}
10003364:	4342      	muls	r2, r0
10003366:	1a89      	subs	r1, r1, r2
10003368:	4718      	bx	r3
1000336a:	46c0      	nop			; (mov r8, r8)

1000336c <__aeabi_idiv0>:
1000336c:	4770      	bx	lr
1000336e:	46c0      	nop			; (mov r8, r8)

10003370 <__aeabi_cfrcmple>:
10003370:	4684      	mov	ip, r0
10003372:	1c08      	adds	r0, r1, #0
10003374:	4661      	mov	r1, ip
10003376:	e7ff      	b.n	10003378 <__aeabi_cfcmpeq>

10003378 <__aeabi_cfcmpeq>:
10003378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000337a:	f000 f9ff 	bl	1000377c <__lesf2>
1000337e:	2800      	cmp	r0, #0
10003380:	d401      	bmi.n	10003386 <__aeabi_cfcmpeq+0xe>
10003382:	2100      	movs	r1, #0
10003384:	42c8      	cmn	r0, r1
10003386:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10003388 <__aeabi_fcmpeq>:
10003388:	b510      	push	{r4, lr}
1000338a:	f000 f987 	bl	1000369c <__eqsf2>
1000338e:	4240      	negs	r0, r0
10003390:	3001      	adds	r0, #1
10003392:	bd10      	pop	{r4, pc}

10003394 <__aeabi_fcmplt>:
10003394:	b510      	push	{r4, lr}
10003396:	f000 f9f1 	bl	1000377c <__lesf2>
1000339a:	2800      	cmp	r0, #0
1000339c:	db01      	blt.n	100033a2 <__aeabi_fcmplt+0xe>
1000339e:	2000      	movs	r0, #0
100033a0:	bd10      	pop	{r4, pc}
100033a2:	2001      	movs	r0, #1
100033a4:	bd10      	pop	{r4, pc}
100033a6:	46c0      	nop			; (mov r8, r8)

100033a8 <__aeabi_fcmple>:
100033a8:	b510      	push	{r4, lr}
100033aa:	f000 f9e7 	bl	1000377c <__lesf2>
100033ae:	2800      	cmp	r0, #0
100033b0:	dd01      	ble.n	100033b6 <__aeabi_fcmple+0xe>
100033b2:	2000      	movs	r0, #0
100033b4:	bd10      	pop	{r4, pc}
100033b6:	2001      	movs	r0, #1
100033b8:	bd10      	pop	{r4, pc}
100033ba:	46c0      	nop			; (mov r8, r8)

100033bc <__aeabi_fcmpgt>:
100033bc:	b510      	push	{r4, lr}
100033be:	f000 f995 	bl	100036ec <__gesf2>
100033c2:	2800      	cmp	r0, #0
100033c4:	dc01      	bgt.n	100033ca <__aeabi_fcmpgt+0xe>
100033c6:	2000      	movs	r0, #0
100033c8:	bd10      	pop	{r4, pc}
100033ca:	2001      	movs	r0, #1
100033cc:	bd10      	pop	{r4, pc}
100033ce:	46c0      	nop			; (mov r8, r8)

100033d0 <__aeabi_fcmpge>:
100033d0:	b510      	push	{r4, lr}
100033d2:	f000 f98b 	bl	100036ec <__gesf2>
100033d6:	2800      	cmp	r0, #0
100033d8:	da01      	bge.n	100033de <__aeabi_fcmpge+0xe>
100033da:	2000      	movs	r0, #0
100033dc:	bd10      	pop	{r4, pc}
100033de:	2001      	movs	r0, #1
100033e0:	bd10      	pop	{r4, pc}
100033e2:	46c0      	nop			; (mov r8, r8)
100033e4:	0000      	movs	r0, r0
	...

100033e8 <__aeabi_d2uiz>:
100033e8:	b538      	push	{r3, r4, r5, lr}
100033ea:	4b0e      	ldr	r3, [pc, #56]	; (10003424 <__aeabi_d2uiz+0x3c>)
100033ec:	4a0c      	ldr	r2, [pc, #48]	; (10003420 <__aeabi_d2uiz+0x38>)
100033ee:	1c04      	adds	r4, r0, #0
100033f0:	1c0d      	adds	r5, r1, #0
100033f2:	f001 fac7 	bl	10004984 <__aeabi_dcmpge>
100033f6:	2800      	cmp	r0, #0
100033f8:	d104      	bne.n	10003404 <__aeabi_d2uiz+0x1c>
100033fa:	1c20      	adds	r0, r4, #0
100033fc:	1c29      	adds	r1, r5, #0
100033fe:	f001 fa27 	bl	10004850 <__aeabi_d2iz>
10003402:	bd38      	pop	{r3, r4, r5, pc}
10003404:	4b07      	ldr	r3, [pc, #28]	; (10003424 <__aeabi_d2uiz+0x3c>)
10003406:	4a06      	ldr	r2, [pc, #24]	; (10003420 <__aeabi_d2uiz+0x38>)
10003408:	1c20      	adds	r0, r4, #0
1000340a:	1c29      	adds	r1, r5, #0
1000340c:	f000 fe9e 	bl	1000414c <__aeabi_dsub>
10003410:	f001 fa1e 	bl	10004850 <__aeabi_d2iz>
10003414:	2380      	movs	r3, #128	; 0x80
10003416:	0619      	lsls	r1, r3, #24
10003418:	1840      	adds	r0, r0, r1
1000341a:	e7f2      	b.n	10003402 <__aeabi_d2uiz+0x1a>
1000341c:	46c0      	nop			; (mov r8, r8)
1000341e:	46c0      	nop			; (mov r8, r8)
10003420:	00000000 	.word	0x00000000
10003424:	41e00000 	.word	0x41e00000

10003428 <__aeabi_fdiv>:
10003428:	b5f0      	push	{r4, r5, r6, r7, lr}
1000342a:	465f      	mov	r7, fp
1000342c:	4656      	mov	r6, sl
1000342e:	464d      	mov	r5, r9
10003430:	4644      	mov	r4, r8
10003432:	b4f0      	push	{r4, r5, r6, r7}
10003434:	0245      	lsls	r5, r0, #9
10003436:	0044      	lsls	r4, r0, #1
10003438:	b083      	sub	sp, #12
1000343a:	1c0e      	adds	r6, r1, #0
1000343c:	0a6d      	lsrs	r5, r5, #9
1000343e:	0e24      	lsrs	r4, r4, #24
10003440:	0fc7      	lsrs	r7, r0, #31
10003442:	2c00      	cmp	r4, #0
10003444:	d107      	bne.n	10003456 <__aeabi_fdiv+0x2e>
10003446:	2d00      	cmp	r5, #0
10003448:	d000      	beq.n	1000344c <__aeabi_fdiv+0x24>
1000344a:	e091      	b.n	10003570 <__aeabi_fdiv+0x148>
1000344c:	2104      	movs	r1, #4
1000344e:	2201      	movs	r2, #1
10003450:	4688      	mov	r8, r1
10003452:	4692      	mov	sl, r2
10003454:	e009      	b.n	1000346a <__aeabi_fdiv+0x42>
10003456:	2cff      	cmp	r4, #255	; 0xff
10003458:	d055      	beq.n	10003506 <__aeabi_fdiv+0xde>
1000345a:	2380      	movs	r3, #128	; 0x80
1000345c:	0418      	lsls	r0, r3, #16
1000345e:	2100      	movs	r1, #0
10003460:	4305      	orrs	r5, r0
10003462:	00ed      	lsls	r5, r5, #3
10003464:	3c7f      	subs	r4, #127	; 0x7f
10003466:	4688      	mov	r8, r1
10003468:	468a      	mov	sl, r1
1000346a:	1c33      	adds	r3, r6, #0
1000346c:	0058      	lsls	r0, r3, #1
1000346e:	0276      	lsls	r6, r6, #9
10003470:	0fd9      	lsrs	r1, r3, #31
10003472:	0a76      	lsrs	r6, r6, #9
10003474:	0e00      	lsrs	r0, r0, #24
10003476:	468b      	mov	fp, r1
10003478:	d14c      	bne.n	10003514 <__aeabi_fdiv+0xec>
1000347a:	2201      	movs	r2, #1
1000347c:	4694      	mov	ip, r2
1000347e:	2e00      	cmp	r6, #0
10003480:	d000      	beq.n	10003484 <__aeabi_fdiv+0x5c>
10003482:	e081      	b.n	10003588 <__aeabi_fdiv+0x160>
10003484:	465b      	mov	r3, fp
10003486:	407b      	eors	r3, r7
10003488:	4662      	mov	r2, ip
1000348a:	4641      	mov	r1, r8
1000348c:	9301      	str	r3, [sp, #4]
1000348e:	430a      	orrs	r2, r1
10003490:	2a0f      	cmp	r2, #15
10003492:	d950      	bls.n	10003536 <__aeabi_fdiv+0x10e>
10003494:	1a20      	subs	r0, r4, r0
10003496:	0169      	lsls	r1, r5, #5
10003498:	4681      	mov	r9, r0
1000349a:	0175      	lsls	r5, r6, #5
1000349c:	42a9      	cmp	r1, r5
1000349e:	d300      	bcc.n	100034a2 <__aeabi_fdiv+0x7a>
100034a0:	e0b3      	b.n	1000360a <__aeabi_fdiv+0x1e2>
100034a2:	2201      	movs	r2, #1
100034a4:	4253      	negs	r3, r2
100034a6:	4499      	add	r9, r3
100034a8:	241b      	movs	r4, #27
100034aa:	2600      	movs	r6, #0
100034ac:	2701      	movs	r7, #1
100034ae:	1e62      	subs	r2, r4, #1
100034b0:	1c38      	adds	r0, r7, #0
100034b2:	4010      	ands	r0, r2
100034b4:	004b      	lsls	r3, r1, #1
100034b6:	0076      	lsls	r6, r6, #1
100034b8:	2900      	cmp	r1, #0
100034ba:	da00      	bge.n	100034be <__aeabi_fdiv+0x96>
100034bc:	e0a9      	b.n	10003612 <__aeabi_fdiv+0x1ea>
100034be:	429d      	cmp	r5, r3
100034c0:	d800      	bhi.n	100034c4 <__aeabi_fdiv+0x9c>
100034c2:	e0a6      	b.n	10003612 <__aeabi_fdiv+0x1ea>
100034c4:	3c01      	subs	r4, #1
100034c6:	2c00      	cmp	r4, #0
100034c8:	dc00      	bgt.n	100034cc <__aeabi_fdiv+0xa4>
100034ca:	e0ab      	b.n	10003624 <__aeabi_fdiv+0x1fc>
100034cc:	2800      	cmp	r0, #0
100034ce:	d00c      	beq.n	100034ea <__aeabi_fdiv+0xc2>
100034d0:	1c19      	adds	r1, r3, #0
100034d2:	0076      	lsls	r6, r6, #1
100034d4:	005b      	lsls	r3, r3, #1
100034d6:	2900      	cmp	r1, #0
100034d8:	db01      	blt.n	100034de <__aeabi_fdiv+0xb6>
100034da:	429d      	cmp	r5, r3
100034dc:	d801      	bhi.n	100034e2 <__aeabi_fdiv+0xba>
100034de:	1b5b      	subs	r3, r3, r5
100034e0:	433e      	orrs	r6, r7
100034e2:	3c01      	subs	r4, #1
100034e4:	2c00      	cmp	r4, #0
100034e6:	dc00      	bgt.n	100034ea <__aeabi_fdiv+0xc2>
100034e8:	e09c      	b.n	10003624 <__aeabi_fdiv+0x1fc>
100034ea:	0059      	lsls	r1, r3, #1
100034ec:	0072      	lsls	r2, r6, #1
100034ee:	2b00      	cmp	r3, #0
100034f0:	db01      	blt.n	100034f6 <__aeabi_fdiv+0xce>
100034f2:	428d      	cmp	r5, r1
100034f4:	d801      	bhi.n	100034fa <__aeabi_fdiv+0xd2>
100034f6:	1b49      	subs	r1, r1, r5
100034f8:	433a      	orrs	r2, r7
100034fa:	3c01      	subs	r4, #1
100034fc:	004b      	lsls	r3, r1, #1
100034fe:	0056      	lsls	r6, r2, #1
10003500:	2900      	cmp	r1, #0
10003502:	daea      	bge.n	100034da <__aeabi_fdiv+0xb2>
10003504:	e7eb      	b.n	100034de <__aeabi_fdiv+0xb6>
10003506:	2d00      	cmp	r5, #0
10003508:	d12d      	bne.n	10003566 <__aeabi_fdiv+0x13e>
1000350a:	2008      	movs	r0, #8
1000350c:	2102      	movs	r1, #2
1000350e:	4680      	mov	r8, r0
10003510:	468a      	mov	sl, r1
10003512:	e7aa      	b.n	1000346a <__aeabi_fdiv+0x42>
10003514:	28ff      	cmp	r0, #255	; 0xff
10003516:	d020      	beq.n	1000355a <__aeabi_fdiv+0x132>
10003518:	2280      	movs	r2, #128	; 0x80
1000351a:	0413      	lsls	r3, r2, #16
1000351c:	2100      	movs	r1, #0
1000351e:	431e      	orrs	r6, r3
10003520:	468c      	mov	ip, r1
10003522:	465b      	mov	r3, fp
10003524:	407b      	eors	r3, r7
10003526:	4662      	mov	r2, ip
10003528:	4641      	mov	r1, r8
1000352a:	00f6      	lsls	r6, r6, #3
1000352c:	387f      	subs	r0, #127	; 0x7f
1000352e:	9301      	str	r3, [sp, #4]
10003530:	430a      	orrs	r2, r1
10003532:	2a0f      	cmp	r2, #15
10003534:	d8ae      	bhi.n	10003494 <__aeabi_fdiv+0x6c>
10003536:	4956      	ldr	r1, [pc, #344]	; (10003690 <__aeabi_fdiv+0x268>)
10003538:	0092      	lsls	r2, r2, #2
1000353a:	588a      	ldr	r2, [r1, r2]
1000353c:	4697      	mov	pc, r2
1000353e:	9b01      	ldr	r3, [sp, #4]
10003540:	26ff      	movs	r6, #255	; 0xff
10003542:	2500      	movs	r5, #0
10003544:	05f0      	lsls	r0, r6, #23
10003546:	4328      	orrs	r0, r5
10003548:	07de      	lsls	r6, r3, #31
1000354a:	4330      	orrs	r0, r6
1000354c:	b003      	add	sp, #12
1000354e:	bc3c      	pop	{r2, r3, r4, r5}
10003550:	4690      	mov	r8, r2
10003552:	4699      	mov	r9, r3
10003554:	46a2      	mov	sl, r4
10003556:	46ab      	mov	fp, r5
10003558:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000355a:	1c33      	adds	r3, r6, #0
1000355c:	1e5a      	subs	r2, r3, #1
1000355e:	4193      	sbcs	r3, r2
10003560:	3302      	adds	r3, #2
10003562:	469c      	mov	ip, r3
10003564:	e78e      	b.n	10003484 <__aeabi_fdiv+0x5c>
10003566:	220c      	movs	r2, #12
10003568:	2303      	movs	r3, #3
1000356a:	4690      	mov	r8, r2
1000356c:	469a      	mov	sl, r3
1000356e:	e77c      	b.n	1000346a <__aeabi_fdiv+0x42>
10003570:	1c28      	adds	r0, r5, #0
10003572:	f001 fa11 	bl	10004998 <__clzsi2>
10003576:	2276      	movs	r2, #118	; 0x76
10003578:	1f44      	subs	r4, r0, #5
1000357a:	4253      	negs	r3, r2
1000357c:	40a5      	lsls	r5, r4
1000357e:	1a1c      	subs	r4, r3, r0
10003580:	2000      	movs	r0, #0
10003582:	4680      	mov	r8, r0
10003584:	4682      	mov	sl, r0
10003586:	e770      	b.n	1000346a <__aeabi_fdiv+0x42>
10003588:	1c30      	adds	r0, r6, #0
1000358a:	f001 fa05 	bl	10004998 <__clzsi2>
1000358e:	2376      	movs	r3, #118	; 0x76
10003590:	1f41      	subs	r1, r0, #5
10003592:	408e      	lsls	r6, r1
10003594:	425a      	negs	r2, r3
10003596:	2100      	movs	r1, #0
10003598:	1a10      	subs	r0, r2, r0
1000359a:	468c      	mov	ip, r1
1000359c:	e772      	b.n	10003484 <__aeabi_fdiv+0x5c>
1000359e:	2300      	movs	r3, #0
100035a0:	4d3c      	ldr	r5, [pc, #240]	; (10003694 <__aeabi_fdiv+0x26c>)
100035a2:	26ff      	movs	r6, #255	; 0xff
100035a4:	e7ce      	b.n	10003544 <__aeabi_fdiv+0x11c>
100035a6:	465f      	mov	r7, fp
100035a8:	1c35      	adds	r5, r6, #0
100035aa:	9701      	str	r7, [sp, #4]
100035ac:	4663      	mov	r3, ip
100035ae:	2b02      	cmp	r3, #2
100035b0:	d0c5      	beq.n	1000353e <__aeabi_fdiv+0x116>
100035b2:	2b03      	cmp	r3, #3
100035b4:	d063      	beq.n	1000367e <__aeabi_fdiv+0x256>
100035b6:	2b01      	cmp	r3, #1
100035b8:	d043      	beq.n	10003642 <__aeabi_fdiv+0x21a>
100035ba:	4649      	mov	r1, r9
100035bc:	317f      	adds	r1, #127	; 0x7f
100035be:	2900      	cmp	r1, #0
100035c0:	dd35      	ble.n	1000362e <__aeabi_fdiv+0x206>
100035c2:	270f      	movs	r7, #15
100035c4:	402f      	ands	r7, r5
100035c6:	2f04      	cmp	r7, #4
100035c8:	d000      	beq.n	100035cc <__aeabi_fdiv+0x1a4>
100035ca:	3504      	adds	r5, #4
100035cc:	012b      	lsls	r3, r5, #4
100035ce:	d503      	bpl.n	100035d8 <__aeabi_fdiv+0x1b0>
100035d0:	4a31      	ldr	r2, [pc, #196]	; (10003698 <__aeabi_fdiv+0x270>)
100035d2:	4649      	mov	r1, r9
100035d4:	4015      	ands	r5, r2
100035d6:	3180      	adds	r1, #128	; 0x80
100035d8:	29fe      	cmp	r1, #254	; 0xfe
100035da:	dcb0      	bgt.n	1000353e <__aeabi_fdiv+0x116>
100035dc:	01a8      	lsls	r0, r5, #6
100035de:	0a45      	lsrs	r5, r0, #9
100035e0:	b2ce      	uxtb	r6, r1
100035e2:	9b01      	ldr	r3, [sp, #4]
100035e4:	e7ae      	b.n	10003544 <__aeabi_fdiv+0x11c>
100035e6:	2600      	movs	r6, #0
100035e8:	2500      	movs	r5, #0
100035ea:	e7ab      	b.n	10003544 <__aeabi_fdiv+0x11c>
100035ec:	2080      	movs	r0, #128	; 0x80
100035ee:	03c1      	lsls	r1, r0, #15
100035f0:	420d      	tst	r5, r1
100035f2:	d011      	beq.n	10003618 <__aeabi_fdiv+0x1f0>
100035f4:	420e      	tst	r6, r1
100035f6:	d10f      	bne.n	10003618 <__aeabi_fdiv+0x1f0>
100035f8:	430e      	orrs	r6, r1
100035fa:	0273      	lsls	r3, r6, #9
100035fc:	0a5d      	lsrs	r5, r3, #9
100035fe:	26ff      	movs	r6, #255	; 0xff
10003600:	465b      	mov	r3, fp
10003602:	e79f      	b.n	10003544 <__aeabi_fdiv+0x11c>
10003604:	9701      	str	r7, [sp, #4]
10003606:	4653      	mov	r3, sl
10003608:	e7d1      	b.n	100035ae <__aeabi_fdiv+0x186>
1000360a:	1b49      	subs	r1, r1, r5
1000360c:	241a      	movs	r4, #26
1000360e:	2601      	movs	r6, #1
10003610:	e74c      	b.n	100034ac <__aeabi_fdiv+0x84>
10003612:	1b5b      	subs	r3, r3, r5
10003614:	433e      	orrs	r6, r7
10003616:	e755      	b.n	100034c4 <__aeabi_fdiv+0x9c>
10003618:	430d      	orrs	r5, r1
1000361a:	026a      	lsls	r2, r5, #9
1000361c:	0a55      	lsrs	r5, r2, #9
1000361e:	1c3b      	adds	r3, r7, #0
10003620:	26ff      	movs	r6, #255	; 0xff
10003622:	e78f      	b.n	10003544 <__aeabi_fdiv+0x11c>
10003624:	1c1d      	adds	r5, r3, #0
10003626:	1e6b      	subs	r3, r5, #1
10003628:	419d      	sbcs	r5, r3
1000362a:	4335      	orrs	r5, r6
1000362c:	e7c5      	b.n	100035ba <__aeabi_fdiv+0x192>
1000362e:	247e      	movs	r4, #126	; 0x7e
10003630:	4267      	negs	r7, r4
10003632:	464a      	mov	r2, r9
10003634:	1ab9      	subs	r1, r7, r2
10003636:	291b      	cmp	r1, #27
10003638:	dd08      	ble.n	1000364c <__aeabi_fdiv+0x224>
1000363a:	9b01      	ldr	r3, [sp, #4]
1000363c:	2600      	movs	r6, #0
1000363e:	2500      	movs	r5, #0
10003640:	e780      	b.n	10003544 <__aeabi_fdiv+0x11c>
10003642:	9d01      	ldr	r5, [sp, #4]
10003644:	2600      	movs	r6, #0
10003646:	402b      	ands	r3, r5
10003648:	2500      	movs	r5, #0
1000364a:	e77b      	b.n	10003544 <__aeabi_fdiv+0x11c>
1000364c:	464e      	mov	r6, r9
1000364e:	369e      	adds	r6, #158	; 0x9e
10003650:	1c28      	adds	r0, r5, #0
10003652:	40b5      	lsls	r5, r6
10003654:	1c2b      	adds	r3, r5, #0
10003656:	1e5d      	subs	r5, r3, #1
10003658:	41ab      	sbcs	r3, r5
1000365a:	40c8      	lsrs	r0, r1
1000365c:	4303      	orrs	r3, r0
1000365e:	250f      	movs	r5, #15
10003660:	401d      	ands	r5, r3
10003662:	2d04      	cmp	r5, #4
10003664:	d000      	beq.n	10003668 <__aeabi_fdiv+0x240>
10003666:	3304      	adds	r3, #4
10003668:	015a      	lsls	r2, r3, #5
1000366a:	d503      	bpl.n	10003674 <__aeabi_fdiv+0x24c>
1000366c:	9b01      	ldr	r3, [sp, #4]
1000366e:	2601      	movs	r6, #1
10003670:	2500      	movs	r5, #0
10003672:	e767      	b.n	10003544 <__aeabi_fdiv+0x11c>
10003674:	019c      	lsls	r4, r3, #6
10003676:	0a65      	lsrs	r5, r4, #9
10003678:	9b01      	ldr	r3, [sp, #4]
1000367a:	2600      	movs	r6, #0
1000367c:	e762      	b.n	10003544 <__aeabi_fdiv+0x11c>
1000367e:	2780      	movs	r7, #128	; 0x80
10003680:	03fc      	lsls	r4, r7, #15
10003682:	4325      	orrs	r5, r4
10003684:	026e      	lsls	r6, r5, #9
10003686:	0a75      	lsrs	r5, r6, #9
10003688:	9b01      	ldr	r3, [sp, #4]
1000368a:	26ff      	movs	r6, #255	; 0xff
1000368c:	e75a      	b.n	10003544 <__aeabi_fdiv+0x11c>
1000368e:	46c0      	nop			; (mov r8, r8)
10003690:	10004ec8 	.word	0x10004ec8
10003694:	007fffff 	.word	0x007fffff
10003698:	f7ffffff 	.word	0xf7ffffff

1000369c <__eqsf2>:
1000369c:	0243      	lsls	r3, r0, #9
1000369e:	0042      	lsls	r2, r0, #1
100036a0:	b570      	push	{r4, r5, r6, lr}
100036a2:	0a5c      	lsrs	r4, r3, #9
100036a4:	0fc6      	lsrs	r6, r0, #31
100036a6:	0e13      	lsrs	r3, r2, #24
100036a8:	0248      	lsls	r0, r1, #9
100036aa:	004a      	lsls	r2, r1, #1
100036ac:	0a45      	lsrs	r5, r0, #9
100036ae:	0e12      	lsrs	r2, r2, #24
100036b0:	0fc9      	lsrs	r1, r1, #31
100036b2:	2bff      	cmp	r3, #255	; 0xff
100036b4:	d005      	beq.n	100036c2 <__eqsf2+0x26>
100036b6:	2aff      	cmp	r2, #255	; 0xff
100036b8:	d008      	beq.n	100036cc <__eqsf2+0x30>
100036ba:	2001      	movs	r0, #1
100036bc:	4293      	cmp	r3, r2
100036be:	d00b      	beq.n	100036d8 <__eqsf2+0x3c>
100036c0:	bd70      	pop	{r4, r5, r6, pc}
100036c2:	2001      	movs	r0, #1
100036c4:	2c00      	cmp	r4, #0
100036c6:	d1fb      	bne.n	100036c0 <__eqsf2+0x24>
100036c8:	2aff      	cmp	r2, #255	; 0xff
100036ca:	d1f6      	bne.n	100036ba <__eqsf2+0x1e>
100036cc:	2001      	movs	r0, #1
100036ce:	2d00      	cmp	r5, #0
100036d0:	d1f6      	bne.n	100036c0 <__eqsf2+0x24>
100036d2:	2001      	movs	r0, #1
100036d4:	4293      	cmp	r3, r2
100036d6:	d1f3      	bne.n	100036c0 <__eqsf2+0x24>
100036d8:	42ac      	cmp	r4, r5
100036da:	d1f1      	bne.n	100036c0 <__eqsf2+0x24>
100036dc:	428e      	cmp	r6, r1
100036de:	d003      	beq.n	100036e8 <__eqsf2+0x4c>
100036e0:	2b00      	cmp	r3, #0
100036e2:	d1ed      	bne.n	100036c0 <__eqsf2+0x24>
100036e4:	2c00      	cmp	r4, #0
100036e6:	d1eb      	bne.n	100036c0 <__eqsf2+0x24>
100036e8:	2000      	movs	r0, #0
100036ea:	e7e9      	b.n	100036c0 <__eqsf2+0x24>

100036ec <__gesf2>:
100036ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100036ee:	0243      	lsls	r3, r0, #9
100036f0:	0042      	lsls	r2, r0, #1
100036f2:	004f      	lsls	r7, r1, #1
100036f4:	0fc6      	lsrs	r6, r0, #31
100036f6:	0248      	lsls	r0, r1, #9
100036f8:	0a5c      	lsrs	r4, r3, #9
100036fa:	0a45      	lsrs	r5, r0, #9
100036fc:	0e13      	lsrs	r3, r2, #24
100036fe:	0fc9      	lsrs	r1, r1, #31
10003700:	0e3a      	lsrs	r2, r7, #24
10003702:	2bff      	cmp	r3, #255	; 0xff
10003704:	d026      	beq.n	10003754 <__gesf2+0x68>
10003706:	2aff      	cmp	r2, #255	; 0xff
10003708:	d029      	beq.n	1000375e <__gesf2+0x72>
1000370a:	2b00      	cmp	r3, #0
1000370c:	d10c      	bne.n	10003728 <__gesf2+0x3c>
1000370e:	4260      	negs	r0, r4
10003710:	4160      	adcs	r0, r4
10003712:	4684      	mov	ip, r0
10003714:	2a00      	cmp	r2, #0
10003716:	d00a      	beq.n	1000372e <__gesf2+0x42>
10003718:	2800      	cmp	r0, #0
1000371a:	d116      	bne.n	1000374a <__gesf2+0x5e>
1000371c:	428e      	cmp	r6, r1
1000371e:	d021      	beq.n	10003764 <__gesf2+0x78>
10003720:	2e00      	cmp	r6, #0
10003722:	d114      	bne.n	1000374e <__gesf2+0x62>
10003724:	2001      	movs	r0, #1
10003726:	e014      	b.n	10003752 <__gesf2+0x66>
10003728:	2a00      	cmp	r2, #0
1000372a:	d1f7      	bne.n	1000371c <__gesf2+0x30>
1000372c:	4694      	mov	ip, r2
1000372e:	426f      	negs	r7, r5
10003730:	416f      	adcs	r7, r5
10003732:	4660      	mov	r0, ip
10003734:	2800      	cmp	r0, #0
10003736:	d105      	bne.n	10003744 <__gesf2+0x58>
10003738:	2f00      	cmp	r7, #0
1000373a:	d0ef      	beq.n	1000371c <__gesf2+0x30>
1000373c:	2001      	movs	r0, #1
1000373e:	2e00      	cmp	r6, #0
10003740:	d007      	beq.n	10003752 <__gesf2+0x66>
10003742:	e004      	b.n	1000374e <__gesf2+0x62>
10003744:	2000      	movs	r0, #0
10003746:	2f00      	cmp	r7, #0
10003748:	d103      	bne.n	10003752 <__gesf2+0x66>
1000374a:	2900      	cmp	r1, #0
1000374c:	d1ea      	bne.n	10003724 <__gesf2+0x38>
1000374e:	2101      	movs	r1, #1
10003750:	4248      	negs	r0, r1
10003752:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003754:	2c00      	cmp	r4, #0
10003756:	d0d6      	beq.n	10003706 <__gesf2+0x1a>
10003758:	2202      	movs	r2, #2
1000375a:	4250      	negs	r0, r2
1000375c:	e7f9      	b.n	10003752 <__gesf2+0x66>
1000375e:	2d00      	cmp	r5, #0
10003760:	d0d3      	beq.n	1000370a <__gesf2+0x1e>
10003762:	e7f9      	b.n	10003758 <__gesf2+0x6c>
10003764:	4293      	cmp	r3, r2
10003766:	dcdb      	bgt.n	10003720 <__gesf2+0x34>
10003768:	db04      	blt.n	10003774 <__gesf2+0x88>
1000376a:	42ac      	cmp	r4, r5
1000376c:	d8d8      	bhi.n	10003720 <__gesf2+0x34>
1000376e:	2000      	movs	r0, #0
10003770:	42ac      	cmp	r4, r5
10003772:	d2ee      	bcs.n	10003752 <__gesf2+0x66>
10003774:	2e00      	cmp	r6, #0
10003776:	d0ea      	beq.n	1000374e <__gesf2+0x62>
10003778:	2001      	movs	r0, #1
1000377a:	e7ea      	b.n	10003752 <__gesf2+0x66>

1000377c <__lesf2>:
1000377c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000377e:	0243      	lsls	r3, r0, #9
10003780:	0042      	lsls	r2, r0, #1
10003782:	004f      	lsls	r7, r1, #1
10003784:	0fc6      	lsrs	r6, r0, #31
10003786:	0248      	lsls	r0, r1, #9
10003788:	0a5c      	lsrs	r4, r3, #9
1000378a:	0a45      	lsrs	r5, r0, #9
1000378c:	0e13      	lsrs	r3, r2, #24
1000378e:	0fc9      	lsrs	r1, r1, #31
10003790:	0e3a      	lsrs	r2, r7, #24
10003792:	2bff      	cmp	r3, #255	; 0xff
10003794:	d026      	beq.n	100037e4 <__lesf2+0x68>
10003796:	2aff      	cmp	r2, #255	; 0xff
10003798:	d028      	beq.n	100037ec <__lesf2+0x70>
1000379a:	2b00      	cmp	r3, #0
1000379c:	d00f      	beq.n	100037be <__lesf2+0x42>
1000379e:	2a00      	cmp	r2, #0
100037a0:	d114      	bne.n	100037cc <__lesf2+0x50>
100037a2:	4694      	mov	ip, r2
100037a4:	426f      	negs	r7, r5
100037a6:	416f      	adcs	r7, r5
100037a8:	4660      	mov	r0, ip
100037aa:	2800      	cmp	r0, #0
100037ac:	d014      	beq.n	100037d8 <__lesf2+0x5c>
100037ae:	2000      	movs	r0, #0
100037b0:	2f00      	cmp	r7, #0
100037b2:	d103      	bne.n	100037bc <__lesf2+0x40>
100037b4:	2900      	cmp	r1, #0
100037b6:	d10d      	bne.n	100037d4 <__lesf2+0x58>
100037b8:	2101      	movs	r1, #1
100037ba:	4248      	negs	r0, r1
100037bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100037be:	4260      	negs	r0, r4
100037c0:	4160      	adcs	r0, r4
100037c2:	4684      	mov	ip, r0
100037c4:	2a00      	cmp	r2, #0
100037c6:	d0ed      	beq.n	100037a4 <__lesf2+0x28>
100037c8:	2800      	cmp	r0, #0
100037ca:	d1f3      	bne.n	100037b4 <__lesf2+0x38>
100037cc:	428e      	cmp	r6, r1
100037ce:	d011      	beq.n	100037f4 <__lesf2+0x78>
100037d0:	2e00      	cmp	r6, #0
100037d2:	d1f1      	bne.n	100037b8 <__lesf2+0x3c>
100037d4:	2001      	movs	r0, #1
100037d6:	e7f1      	b.n	100037bc <__lesf2+0x40>
100037d8:	2f00      	cmp	r7, #0
100037da:	d0f7      	beq.n	100037cc <__lesf2+0x50>
100037dc:	2001      	movs	r0, #1
100037de:	2e00      	cmp	r6, #0
100037e0:	d0ec      	beq.n	100037bc <__lesf2+0x40>
100037e2:	e7e9      	b.n	100037b8 <__lesf2+0x3c>
100037e4:	2002      	movs	r0, #2
100037e6:	2c00      	cmp	r4, #0
100037e8:	d1e8      	bne.n	100037bc <__lesf2+0x40>
100037ea:	e7d4      	b.n	10003796 <__lesf2+0x1a>
100037ec:	2002      	movs	r0, #2
100037ee:	2d00      	cmp	r5, #0
100037f0:	d1e4      	bne.n	100037bc <__lesf2+0x40>
100037f2:	e7d2      	b.n	1000379a <__lesf2+0x1e>
100037f4:	4293      	cmp	r3, r2
100037f6:	dceb      	bgt.n	100037d0 <__lesf2+0x54>
100037f8:	db04      	blt.n	10003804 <__lesf2+0x88>
100037fa:	42ac      	cmp	r4, r5
100037fc:	d8e8      	bhi.n	100037d0 <__lesf2+0x54>
100037fe:	2000      	movs	r0, #0
10003800:	42ac      	cmp	r4, r5
10003802:	d2db      	bcs.n	100037bc <__lesf2+0x40>
10003804:	2e00      	cmp	r6, #0
10003806:	d0d7      	beq.n	100037b8 <__lesf2+0x3c>
10003808:	2001      	movs	r0, #1
1000380a:	e7d7      	b.n	100037bc <__lesf2+0x40>

1000380c <__aeabi_fsub>:
1000380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000380e:	0243      	lsls	r3, r0, #9
10003810:	0045      	lsls	r5, r0, #1
10003812:	024f      	lsls	r7, r1, #9
10003814:	004c      	lsls	r4, r1, #1
10003816:	0fc2      	lsrs	r2, r0, #31
10003818:	0998      	lsrs	r0, r3, #6
1000381a:	4684      	mov	ip, r0
1000381c:	0e2d      	lsrs	r5, r5, #24
1000381e:	0e20      	lsrs	r0, r4, #24
10003820:	0fc9      	lsrs	r1, r1, #31
10003822:	09bf      	lsrs	r7, r7, #6
10003824:	28ff      	cmp	r0, #255	; 0xff
10003826:	d054      	beq.n	100038d2 <__aeabi_fsub+0xc6>
10003828:	2601      	movs	r6, #1
1000382a:	4071      	eors	r1, r6
1000382c:	428a      	cmp	r2, r1
1000382e:	d03b      	beq.n	100038a8 <__aeabi_fsub+0x9c>
10003830:	1a2c      	subs	r4, r5, r0
10003832:	2c00      	cmp	r4, #0
10003834:	dc00      	bgt.n	10003838 <__aeabi_fsub+0x2c>
10003836:	e089      	b.n	1000394c <__aeabi_fsub+0x140>
10003838:	2800      	cmp	r0, #0
1000383a:	d125      	bne.n	10003888 <__aeabi_fsub+0x7c>
1000383c:	2f00      	cmp	r7, #0
1000383e:	d14b      	bne.n	100038d8 <__aeabi_fsub+0xcc>
10003840:	1c6e      	adds	r6, r5, #1
10003842:	1c2c      	adds	r4, r5, #0
10003844:	4663      	mov	r3, ip
10003846:	1c15      	adds	r5, r2, #0
10003848:	220f      	movs	r2, #15
1000384a:	401a      	ands	r2, r3
1000384c:	2a04      	cmp	r2, #4
1000384e:	d000      	beq.n	10003852 <__aeabi_fsub+0x46>
10003850:	3304      	adds	r3, #4
10003852:	2780      	movs	r7, #128	; 0x80
10003854:	04f9      	lsls	r1, r7, #19
10003856:	2201      	movs	r2, #1
10003858:	4019      	ands	r1, r3
1000385a:	402a      	ands	r2, r5
1000385c:	2900      	cmp	r1, #0
1000385e:	d006      	beq.n	1000386e <__aeabi_fsub+0x62>
10003860:	2eff      	cmp	r6, #255	; 0xff
10003862:	d100      	bne.n	10003866 <__aeabi_fsub+0x5a>
10003864:	e081      	b.n	1000396a <__aeabi_fsub+0x15e>
10003866:	4db1      	ldr	r5, [pc, #708]	; (10003b2c <__aeabi_fsub+0x320>)
10003868:	1c34      	adds	r4, r6, #0
1000386a:	402b      	ands	r3, r5
1000386c:	3601      	adds	r6, #1
1000386e:	b2f6      	uxtb	r6, r6
10003870:	08dd      	lsrs	r5, r3, #3
10003872:	2e01      	cmp	r6, #1
10003874:	dd62      	ble.n	1000393c <__aeabi_fsub+0x130>
10003876:	026b      	lsls	r3, r5, #9
10003878:	0a5d      	lsrs	r5, r3, #9
1000387a:	b2e4      	uxtb	r4, r4
1000387c:	05e4      	lsls	r4, r4, #23
1000387e:	4325      	orrs	r5, r4
10003880:	1c28      	adds	r0, r5, #0
10003882:	07d2      	lsls	r2, r2, #31
10003884:	4310      	orrs	r0, r2
10003886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10003888:	2dff      	cmp	r5, #255	; 0xff
1000388a:	d051      	beq.n	10003930 <__aeabi_fsub+0x124>
1000388c:	2180      	movs	r1, #128	; 0x80
1000388e:	04cb      	lsls	r3, r1, #19
10003890:	431f      	orrs	r7, r3
10003892:	2601      	movs	r6, #1
10003894:	2c1b      	cmp	r4, #27
10003896:	dd70      	ble.n	1000397a <__aeabi_fsub+0x16e>
10003898:	4667      	mov	r7, ip
1000389a:	1c2c      	adds	r4, r5, #0
1000389c:	1bbb      	subs	r3, r7, r6
1000389e:	1c15      	adds	r5, r2, #0
100038a0:	0158      	lsls	r0, r3, #5
100038a2:	d422      	bmi.n	100038ea <__aeabi_fsub+0xde>
100038a4:	1c66      	adds	r6, r4, #1
100038a6:	e7cf      	b.n	10003848 <__aeabi_fsub+0x3c>
100038a8:	1a2e      	subs	r6, r5, r0
100038aa:	2e00      	cmp	r6, #0
100038ac:	dd76      	ble.n	1000399c <__aeabi_fsub+0x190>
100038ae:	2800      	cmp	r0, #0
100038b0:	d032      	beq.n	10003918 <__aeabi_fsub+0x10c>
100038b2:	2dff      	cmp	r5, #255	; 0xff
100038b4:	d03c      	beq.n	10003930 <__aeabi_fsub+0x124>
100038b6:	2480      	movs	r4, #128	; 0x80
100038b8:	04e1      	lsls	r1, r4, #19
100038ba:	430f      	orrs	r7, r1
100038bc:	2301      	movs	r3, #1
100038be:	2e1b      	cmp	r6, #27
100038c0:	dc00      	bgt.n	100038c4 <__aeabi_fsub+0xb8>
100038c2:	e0d1      	b.n	10003a68 <__aeabi_fsub+0x25c>
100038c4:	4463      	add	r3, ip
100038c6:	1c2c      	adds	r4, r5, #0
100038c8:	0158      	lsls	r0, r3, #5
100038ca:	d47a      	bmi.n	100039c2 <__aeabi_fsub+0x1b6>
100038cc:	1c66      	adds	r6, r4, #1
100038ce:	1c15      	adds	r5, r2, #0
100038d0:	e7ba      	b.n	10003848 <__aeabi_fsub+0x3c>
100038d2:	2f00      	cmp	r7, #0
100038d4:	d1aa      	bne.n	1000382c <__aeabi_fsub+0x20>
100038d6:	e7a7      	b.n	10003828 <__aeabi_fsub+0x1c>
100038d8:	3c01      	subs	r4, #1
100038da:	2c00      	cmp	r4, #0
100038dc:	d16d      	bne.n	100039ba <__aeabi_fsub+0x1ae>
100038de:	4663      	mov	r3, ip
100038e0:	1c2c      	adds	r4, r5, #0
100038e2:	1bdb      	subs	r3, r3, r7
100038e4:	1c15      	adds	r5, r2, #0
100038e6:	0158      	lsls	r0, r3, #5
100038e8:	d5dc      	bpl.n	100038a4 <__aeabi_fsub+0x98>
100038ea:	019a      	lsls	r2, r3, #6
100038ec:	0996      	lsrs	r6, r2, #6
100038ee:	1c30      	adds	r0, r6, #0
100038f0:	f001 f852 	bl	10004998 <__clzsi2>
100038f4:	3805      	subs	r0, #5
100038f6:	4086      	lsls	r6, r0
100038f8:	4284      	cmp	r4, r0
100038fa:	dc39      	bgt.n	10003970 <__aeabi_fsub+0x164>
100038fc:	1b00      	subs	r0, r0, r4
100038fe:	231f      	movs	r3, #31
10003900:	1a1a      	subs	r2, r3, r0
10003902:	1c33      	adds	r3, r6, #0
10003904:	1c31      	adds	r1, r6, #0
10003906:	1c44      	adds	r4, r0, #1
10003908:	4093      	lsls	r3, r2
1000390a:	40e1      	lsrs	r1, r4
1000390c:	1e5e      	subs	r6, r3, #1
1000390e:	41b3      	sbcs	r3, r6
10003910:	430b      	orrs	r3, r1
10003912:	2601      	movs	r6, #1
10003914:	2400      	movs	r4, #0
10003916:	e797      	b.n	10003848 <__aeabi_fsub+0x3c>
10003918:	2f00      	cmp	r7, #0
1000391a:	d100      	bne.n	1000391e <__aeabi_fsub+0x112>
1000391c:	e790      	b.n	10003840 <__aeabi_fsub+0x34>
1000391e:	3e01      	subs	r6, #1
10003920:	2e00      	cmp	r6, #0
10003922:	d103      	bne.n	1000392c <__aeabi_fsub+0x120>
10003924:	4664      	mov	r4, ip
10003926:	193b      	adds	r3, r7, r4
10003928:	1c2c      	adds	r4, r5, #0
1000392a:	e7cd      	b.n	100038c8 <__aeabi_fsub+0xbc>
1000392c:	2dff      	cmp	r5, #255	; 0xff
1000392e:	d1c5      	bne.n	100038bc <__aeabi_fsub+0xb0>
10003930:	1c15      	adds	r5, r2, #0
10003932:	2280      	movs	r2, #128	; 0x80
10003934:	4663      	mov	r3, ip
10003936:	0056      	lsls	r6, r2, #1
10003938:	24ff      	movs	r4, #255	; 0xff
1000393a:	e785      	b.n	10003848 <__aeabi_fsub+0x3c>
1000393c:	2d00      	cmp	r5, #0
1000393e:	d09c      	beq.n	1000387a <__aeabi_fsub+0x6e>
10003940:	2c00      	cmp	r4, #0
10003942:	d028      	beq.n	10003996 <__aeabi_fsub+0x18a>
10003944:	2080      	movs	r0, #128	; 0x80
10003946:	03c7      	lsls	r7, r0, #15
10003948:	433d      	orrs	r5, r7
1000394a:	e794      	b.n	10003876 <__aeabi_fsub+0x6a>
1000394c:	2c00      	cmp	r4, #0
1000394e:	d145      	bne.n	100039dc <__aeabi_fsub+0x1d0>
10003950:	1c6b      	adds	r3, r5, #1
10003952:	b2d8      	uxtb	r0, r3
10003954:	2801      	cmp	r0, #1
10003956:	dc00      	bgt.n	1000395a <__aeabi_fsub+0x14e>
10003958:	e090      	b.n	10003a7c <__aeabi_fsub+0x270>
1000395a:	4664      	mov	r4, ip
1000395c:	1be6      	subs	r6, r4, r7
1000395e:	0173      	lsls	r3, r6, #5
10003960:	d557      	bpl.n	10003a12 <__aeabi_fsub+0x206>
10003962:	1b3e      	subs	r6, r7, r4
10003964:	1c2c      	adds	r4, r5, #0
10003966:	1c0d      	adds	r5, r1, #0
10003968:	e7c1      	b.n	100038ee <__aeabi_fsub+0xe2>
1000396a:	24ff      	movs	r4, #255	; 0xff
1000396c:	2500      	movs	r5, #0
1000396e:	e785      	b.n	1000387c <__aeabi_fsub+0x70>
10003970:	4b6e      	ldr	r3, [pc, #440]	; (10003b2c <__aeabi_fsub+0x320>)
10003972:	1a24      	subs	r4, r4, r0
10003974:	4033      	ands	r3, r6
10003976:	1c66      	adds	r6, r4, #1
10003978:	e766      	b.n	10003848 <__aeabi_fsub+0x3c>
1000397a:	1c38      	adds	r0, r7, #0
1000397c:	2120      	movs	r1, #32
1000397e:	40e0      	lsrs	r0, r4
10003980:	1b0c      	subs	r4, r1, r4
10003982:	40a7      	lsls	r7, r4
10003984:	1c3e      	adds	r6, r7, #0
10003986:	1e77      	subs	r7, r6, #1
10003988:	41be      	sbcs	r6, r7
1000398a:	4306      	orrs	r6, r0
1000398c:	4667      	mov	r7, ip
1000398e:	1c2c      	adds	r4, r5, #0
10003990:	1bbb      	subs	r3, r7, r6
10003992:	1c15      	adds	r5, r2, #0
10003994:	e784      	b.n	100038a0 <__aeabi_fsub+0x94>
10003996:	0269      	lsls	r1, r5, #9
10003998:	0a4d      	lsrs	r5, r1, #9
1000399a:	e76f      	b.n	1000387c <__aeabi_fsub+0x70>
1000399c:	2e00      	cmp	r6, #0
1000399e:	d179      	bne.n	10003a94 <__aeabi_fsub+0x288>
100039a0:	1c6c      	adds	r4, r5, #1
100039a2:	b2e0      	uxtb	r0, r4
100039a4:	2801      	cmp	r0, #1
100039a6:	dd4b      	ble.n	10003a40 <__aeabi_fsub+0x234>
100039a8:	2cff      	cmp	r4, #255	; 0xff
100039aa:	d100      	bne.n	100039ae <__aeabi_fsub+0x1a2>
100039ac:	e098      	b.n	10003ae0 <__aeabi_fsub+0x2d4>
100039ae:	4661      	mov	r1, ip
100039b0:	187f      	adds	r7, r7, r1
100039b2:	1cae      	adds	r6, r5, #2
100039b4:	087b      	lsrs	r3, r7, #1
100039b6:	1c15      	adds	r5, r2, #0
100039b8:	e746      	b.n	10003848 <__aeabi_fsub+0x3c>
100039ba:	2dff      	cmp	r5, #255	; 0xff
100039bc:	d000      	beq.n	100039c0 <__aeabi_fsub+0x1b4>
100039be:	e768      	b.n	10003892 <__aeabi_fsub+0x86>
100039c0:	e7b6      	b.n	10003930 <__aeabi_fsub+0x124>
100039c2:	1c67      	adds	r7, r4, #1
100039c4:	2fff      	cmp	r7, #255	; 0xff
100039c6:	d036      	beq.n	10003a36 <__aeabi_fsub+0x22a>
100039c8:	4858      	ldr	r0, [pc, #352]	; (10003b2c <__aeabi_fsub+0x320>)
100039ca:	2101      	movs	r1, #1
100039cc:	4019      	ands	r1, r3
100039ce:	4003      	ands	r3, r0
100039d0:	085b      	lsrs	r3, r3, #1
100039d2:	1ca6      	adds	r6, r4, #2
100039d4:	430b      	orrs	r3, r1
100039d6:	1c3c      	adds	r4, r7, #0
100039d8:	1c15      	adds	r5, r2, #0
100039da:	e735      	b.n	10003848 <__aeabi_fsub+0x3c>
100039dc:	4266      	negs	r6, r4
100039de:	2d00      	cmp	r5, #0
100039e0:	d01e      	beq.n	10003a20 <__aeabi_fsub+0x214>
100039e2:	28ff      	cmp	r0, #255	; 0xff
100039e4:	d06f      	beq.n	10003ac6 <__aeabi_fsub+0x2ba>
100039e6:	2580      	movs	r5, #128	; 0x80
100039e8:	4662      	mov	r2, ip
100039ea:	04eb      	lsls	r3, r5, #19
100039ec:	431a      	orrs	r2, r3
100039ee:	4694      	mov	ip, r2
100039f0:	2501      	movs	r5, #1
100039f2:	2e1b      	cmp	r6, #27
100039f4:	dc09      	bgt.n	10003a0a <__aeabi_fsub+0x1fe>
100039f6:	4662      	mov	r2, ip
100039f8:	2320      	movs	r3, #32
100039fa:	40f2      	lsrs	r2, r6
100039fc:	4664      	mov	r4, ip
100039fe:	1b9e      	subs	r6, r3, r6
10003a00:	40b4      	lsls	r4, r6
10003a02:	1c25      	adds	r5, r4, #0
10003a04:	1e6c      	subs	r4, r5, #1
10003a06:	41a5      	sbcs	r5, r4
10003a08:	4315      	orrs	r5, r2
10003a0a:	1b7b      	subs	r3, r7, r5
10003a0c:	1c04      	adds	r4, r0, #0
10003a0e:	1c0d      	adds	r5, r1, #0
10003a10:	e769      	b.n	100038e6 <__aeabi_fsub+0xda>
10003a12:	2e00      	cmp	r6, #0
10003a14:	d10c      	bne.n	10003a30 <__aeabi_fsub+0x224>
10003a16:	2200      	movs	r2, #0
10003a18:	2601      	movs	r6, #1
10003a1a:	2304      	movs	r3, #4
10003a1c:	2400      	movs	r4, #0
10003a1e:	e726      	b.n	1000386e <__aeabi_fsub+0x62>
10003a20:	4664      	mov	r4, ip
10003a22:	2c00      	cmp	r4, #0
10003a24:	d155      	bne.n	10003ad2 <__aeabi_fsub+0x2c6>
10003a26:	1c46      	adds	r6, r0, #1
10003a28:	1c3b      	adds	r3, r7, #0
10003a2a:	1c04      	adds	r4, r0, #0
10003a2c:	1c0d      	adds	r5, r1, #0
10003a2e:	e70b      	b.n	10003848 <__aeabi_fsub+0x3c>
10003a30:	1c2c      	adds	r4, r5, #0
10003a32:	1c15      	adds	r5, r2, #0
10003a34:	e75b      	b.n	100038ee <__aeabi_fsub+0xe2>
10003a36:	2380      	movs	r3, #128	; 0x80
10003a38:	005e      	lsls	r6, r3, #1
10003a3a:	24ff      	movs	r4, #255	; 0xff
10003a3c:	2304      	movs	r3, #4
10003a3e:	e716      	b.n	1000386e <__aeabi_fsub+0x62>
10003a40:	2d00      	cmp	r5, #0
10003a42:	d000      	beq.n	10003a46 <__aeabi_fsub+0x23a>
10003a44:	e08d      	b.n	10003b62 <__aeabi_fsub+0x356>
10003a46:	4665      	mov	r5, ip
10003a48:	2d00      	cmp	r5, #0
10003a4a:	d100      	bne.n	10003a4e <__aeabi_fsub+0x242>
10003a4c:	e0ad      	b.n	10003baa <__aeabi_fsub+0x39e>
10003a4e:	2f00      	cmp	r7, #0
10003a50:	d100      	bne.n	10003a54 <__aeabi_fsub+0x248>
10003a52:	e081      	b.n	10003b58 <__aeabi_fsub+0x34c>
10003a54:	197b      	adds	r3, r7, r5
10003a56:	015c      	lsls	r4, r3, #5
10003a58:	d400      	bmi.n	10003a5c <__aeabi_fsub+0x250>
10003a5a:	e07e      	b.n	10003b5a <__aeabi_fsub+0x34e>
10003a5c:	4f33      	ldr	r7, [pc, #204]	; (10003b2c <__aeabi_fsub+0x320>)
10003a5e:	1c15      	adds	r5, r2, #0
10003a60:	403b      	ands	r3, r7
10003a62:	2602      	movs	r6, #2
10003a64:	2401      	movs	r4, #1
10003a66:	e6ef      	b.n	10003848 <__aeabi_fsub+0x3c>
10003a68:	1c38      	adds	r0, r7, #0
10003a6a:	2320      	movs	r3, #32
10003a6c:	40f0      	lsrs	r0, r6
10003a6e:	1b9e      	subs	r6, r3, r6
10003a70:	40b7      	lsls	r7, r6
10003a72:	1c3b      	adds	r3, r7, #0
10003a74:	1e5f      	subs	r7, r3, #1
10003a76:	41bb      	sbcs	r3, r7
10003a78:	4303      	orrs	r3, r0
10003a7a:	e723      	b.n	100038c4 <__aeabi_fsub+0xb8>
10003a7c:	2d00      	cmp	r5, #0
10003a7e:	d115      	bne.n	10003aac <__aeabi_fsub+0x2a0>
10003a80:	4665      	mov	r5, ip
10003a82:	2d00      	cmp	r5, #0
10003a84:	d147      	bne.n	10003b16 <__aeabi_fsub+0x30a>
10003a86:	2f00      	cmp	r7, #0
10003a88:	d0c5      	beq.n	10003a16 <__aeabi_fsub+0x20a>
10003a8a:	1c3b      	adds	r3, r7, #0
10003a8c:	1c0d      	adds	r5, r1, #0
10003a8e:	2601      	movs	r6, #1
10003a90:	2400      	movs	r4, #0
10003a92:	e6d9      	b.n	10003848 <__aeabi_fsub+0x3c>
10003a94:	4276      	negs	r6, r6
10003a96:	2d00      	cmp	r5, #0
10003a98:	d126      	bne.n	10003ae8 <__aeabi_fsub+0x2dc>
10003a9a:	4665      	mov	r5, ip
10003a9c:	2d00      	cmp	r5, #0
10003a9e:	d000      	beq.n	10003aa2 <__aeabi_fsub+0x296>
10003aa0:	e07d      	b.n	10003b9e <__aeabi_fsub+0x392>
10003aa2:	1c46      	adds	r6, r0, #1
10003aa4:	1c3b      	adds	r3, r7, #0
10003aa6:	1c04      	adds	r4, r0, #0
10003aa8:	1c15      	adds	r5, r2, #0
10003aaa:	e6cd      	b.n	10003848 <__aeabi_fsub+0x3c>
10003aac:	4665      	mov	r5, ip
10003aae:	2d00      	cmp	r5, #0
10003ab0:	d140      	bne.n	10003b34 <__aeabi_fsub+0x328>
10003ab2:	2f00      	cmp	r7, #0
10003ab4:	d107      	bne.n	10003ac6 <__aeabi_fsub+0x2ba>
10003ab6:	2180      	movs	r1, #128	; 0x80
10003ab8:	2200      	movs	r2, #0
10003aba:	004e      	lsls	r6, r1, #1
10003abc:	4b1c      	ldr	r3, [pc, #112]	; (10003b30 <__aeabi_fsub+0x324>)
10003abe:	24ff      	movs	r4, #255	; 0xff
10003ac0:	e6d5      	b.n	1000386e <__aeabi_fsub+0x62>
10003ac2:	28ff      	cmp	r0, #255	; 0xff
10003ac4:	d194      	bne.n	100039f0 <__aeabi_fsub+0x1e4>
10003ac6:	2080      	movs	r0, #128	; 0x80
10003ac8:	1c3b      	adds	r3, r7, #0
10003aca:	1c0d      	adds	r5, r1, #0
10003acc:	0046      	lsls	r6, r0, #1
10003ace:	24ff      	movs	r4, #255	; 0xff
10003ad0:	e6ba      	b.n	10003848 <__aeabi_fsub+0x3c>
10003ad2:	3e01      	subs	r6, #1
10003ad4:	2e00      	cmp	r6, #0
10003ad6:	d1f4      	bne.n	10003ac2 <__aeabi_fsub+0x2b6>
10003ad8:	1b3b      	subs	r3, r7, r4
10003ada:	1c0d      	adds	r5, r1, #0
10003adc:	1c04      	adds	r4, r0, #0
10003ade:	e702      	b.n	100038e6 <__aeabi_fsub+0xda>
10003ae0:	2580      	movs	r5, #128	; 0x80
10003ae2:	006e      	lsls	r6, r5, #1
10003ae4:	2304      	movs	r3, #4
10003ae6:	e6c2      	b.n	1000386e <__aeabi_fsub+0x62>
10003ae8:	28ff      	cmp	r0, #255	; 0xff
10003aea:	d052      	beq.n	10003b92 <__aeabi_fsub+0x386>
10003aec:	2480      	movs	r4, #128	; 0x80
10003aee:	4661      	mov	r1, ip
10003af0:	04e3      	lsls	r3, r4, #19
10003af2:	4319      	orrs	r1, r3
10003af4:	468c      	mov	ip, r1
10003af6:	2301      	movs	r3, #1
10003af8:	2e1b      	cmp	r6, #27
10003afa:	dc09      	bgt.n	10003b10 <__aeabi_fsub+0x304>
10003afc:	2120      	movs	r1, #32
10003afe:	4664      	mov	r4, ip
10003b00:	40f4      	lsrs	r4, r6
10003b02:	4665      	mov	r5, ip
10003b04:	1b8e      	subs	r6, r1, r6
10003b06:	40b5      	lsls	r5, r6
10003b08:	1c2b      	adds	r3, r5, #0
10003b0a:	1e59      	subs	r1, r3, #1
10003b0c:	418b      	sbcs	r3, r1
10003b0e:	4323      	orrs	r3, r4
10003b10:	19db      	adds	r3, r3, r7
10003b12:	1c04      	adds	r4, r0, #0
10003b14:	e6d8      	b.n	100038c8 <__aeabi_fsub+0xbc>
10003b16:	2f00      	cmp	r7, #0
10003b18:	d01e      	beq.n	10003b58 <__aeabi_fsub+0x34c>
10003b1a:	1beb      	subs	r3, r5, r7
10003b1c:	0158      	lsls	r0, r3, #5
10003b1e:	d54b      	bpl.n	10003bb8 <__aeabi_fsub+0x3ac>
10003b20:	1b7b      	subs	r3, r7, r5
10003b22:	2601      	movs	r6, #1
10003b24:	1c0d      	adds	r5, r1, #0
10003b26:	2400      	movs	r4, #0
10003b28:	e68e      	b.n	10003848 <__aeabi_fsub+0x3c>
10003b2a:	46c0      	nop			; (mov r8, r8)
10003b2c:	fbffffff 	.word	0xfbffffff
10003b30:	03fffffc 	.word	0x03fffffc
10003b34:	2f00      	cmp	r7, #0
10003b36:	d100      	bne.n	10003b3a <__aeabi_fsub+0x32e>
10003b38:	e6fa      	b.n	10003930 <__aeabi_fsub+0x124>
10003b3a:	2080      	movs	r0, #128	; 0x80
10003b3c:	08eb      	lsrs	r3, r5, #3
10003b3e:	03c4      	lsls	r4, r0, #15
10003b40:	4223      	tst	r3, r4
10003b42:	d037      	beq.n	10003bb4 <__aeabi_fsub+0x3a8>
10003b44:	08ff      	lsrs	r7, r7, #3
10003b46:	4227      	tst	r7, r4
10003b48:	d134      	bne.n	10003bb4 <__aeabi_fsub+0x3a8>
10003b4a:	1c3b      	adds	r3, r7, #0
10003b4c:	1c0d      	adds	r5, r1, #0
10003b4e:	2280      	movs	r2, #128	; 0x80
10003b50:	00db      	lsls	r3, r3, #3
10003b52:	0056      	lsls	r6, r2, #1
10003b54:	24ff      	movs	r4, #255	; 0xff
10003b56:	e677      	b.n	10003848 <__aeabi_fsub+0x3c>
10003b58:	4663      	mov	r3, ip
10003b5a:	1c15      	adds	r5, r2, #0
10003b5c:	2601      	movs	r6, #1
10003b5e:	2400      	movs	r4, #0
10003b60:	e672      	b.n	10003848 <__aeabi_fsub+0x3c>
10003b62:	4664      	mov	r4, ip
10003b64:	2c00      	cmp	r4, #0
10003b66:	d014      	beq.n	10003b92 <__aeabi_fsub+0x386>
10003b68:	2f00      	cmp	r7, #0
10003b6a:	d100      	bne.n	10003b6e <__aeabi_fsub+0x362>
10003b6c:	e6e0      	b.n	10003930 <__aeabi_fsub+0x124>
10003b6e:	2380      	movs	r3, #128	; 0x80
10003b70:	08e6      	lsrs	r6, r4, #3
10003b72:	03d8      	lsls	r0, r3, #15
10003b74:	1c31      	adds	r1, r6, #0
10003b76:	4206      	tst	r6, r0
10003b78:	d003      	beq.n	10003b82 <__aeabi_fsub+0x376>
10003b7a:	08f9      	lsrs	r1, r7, #3
10003b7c:	4201      	tst	r1, r0
10003b7e:	d000      	beq.n	10003b82 <__aeabi_fsub+0x376>
10003b80:	1c31      	adds	r1, r6, #0
10003b82:	1c15      	adds	r5, r2, #0
10003b84:	2280      	movs	r2, #128	; 0x80
10003b86:	00cb      	lsls	r3, r1, #3
10003b88:	0056      	lsls	r6, r2, #1
10003b8a:	24ff      	movs	r4, #255	; 0xff
10003b8c:	e65c      	b.n	10003848 <__aeabi_fsub+0x3c>
10003b8e:	28ff      	cmp	r0, #255	; 0xff
10003b90:	d1b1      	bne.n	10003af6 <__aeabi_fsub+0x2ea>
10003b92:	2080      	movs	r0, #128	; 0x80
10003b94:	1c3b      	adds	r3, r7, #0
10003b96:	1c15      	adds	r5, r2, #0
10003b98:	0046      	lsls	r6, r0, #1
10003b9a:	24ff      	movs	r4, #255	; 0xff
10003b9c:	e654      	b.n	10003848 <__aeabi_fsub+0x3c>
10003b9e:	3e01      	subs	r6, #1
10003ba0:	2e00      	cmp	r6, #0
10003ba2:	d1f4      	bne.n	10003b8e <__aeabi_fsub+0x382>
10003ba4:	197b      	adds	r3, r7, r5
10003ba6:	1c04      	adds	r4, r0, #0
10003ba8:	e68e      	b.n	100038c8 <__aeabi_fsub+0xbc>
10003baa:	1c3b      	adds	r3, r7, #0
10003bac:	1c15      	adds	r5, r2, #0
10003bae:	2601      	movs	r6, #1
10003bb0:	2400      	movs	r4, #0
10003bb2:	e649      	b.n	10003848 <__aeabi_fsub+0x3c>
10003bb4:	1c15      	adds	r5, r2, #0
10003bb6:	e7ca      	b.n	10003b4e <__aeabi_fsub+0x342>
10003bb8:	2b00      	cmp	r3, #0
10003bba:	d100      	bne.n	10003bbe <__aeabi_fsub+0x3b2>
10003bbc:	e72b      	b.n	10003a16 <__aeabi_fsub+0x20a>
10003bbe:	e7cc      	b.n	10003b5a <__aeabi_fsub+0x34e>

10003bc0 <__aeabi_ui2f>:
10003bc0:	b510      	push	{r4, lr}
10003bc2:	1e04      	subs	r4, r0, #0
10003bc4:	d034      	beq.n	10003c30 <__aeabi_ui2f+0x70>
10003bc6:	f000 fee7 	bl	10004998 <__clzsi2>
10003bca:	239e      	movs	r3, #158	; 0x9e
10003bcc:	1a1b      	subs	r3, r3, r0
10003bce:	2b96      	cmp	r3, #150	; 0x96
10003bd0:	dc07      	bgt.n	10003be2 <__aeabi_ui2f+0x22>
10003bd2:	3808      	subs	r0, #8
10003bd4:	4084      	lsls	r4, r0
10003bd6:	0264      	lsls	r4, r4, #9
10003bd8:	0a61      	lsrs	r1, r4, #9
10003bda:	b2db      	uxtb	r3, r3
10003bdc:	05d8      	lsls	r0, r3, #23
10003bde:	4308      	orrs	r0, r1
10003be0:	bd10      	pop	{r4, pc}
10003be2:	2b99      	cmp	r3, #153	; 0x99
10003be4:	dd0a      	ble.n	10003bfc <__aeabi_ui2f+0x3c>
10003be6:	1c02      	adds	r2, r0, #0
10003be8:	321b      	adds	r2, #27
10003bea:	1c21      	adds	r1, r4, #0
10003bec:	4091      	lsls	r1, r2
10003bee:	1c0a      	adds	r2, r1, #0
10003bf0:	1e51      	subs	r1, r2, #1
10003bf2:	418a      	sbcs	r2, r1
10003bf4:	2105      	movs	r1, #5
10003bf6:	1a09      	subs	r1, r1, r0
10003bf8:	40cc      	lsrs	r4, r1
10003bfa:	4314      	orrs	r4, r2
10003bfc:	2805      	cmp	r0, #5
10003bfe:	dc1a      	bgt.n	10003c36 <__aeabi_ui2f+0x76>
10003c00:	4a18      	ldr	r2, [pc, #96]	; (10003c64 <__aeabi_ui2f+0xa4>)
10003c02:	210f      	movs	r1, #15
10003c04:	4022      	ands	r2, r4
10003c06:	400c      	ands	r4, r1
10003c08:	2c04      	cmp	r4, #4
10003c0a:	d000      	beq.n	10003c0e <__aeabi_ui2f+0x4e>
10003c0c:	3204      	adds	r2, #4
10003c0e:	0151      	lsls	r1, r2, #5
10003c10:	d505      	bpl.n	10003c1e <__aeabi_ui2f+0x5e>
10003c12:	249f      	movs	r4, #159	; 0x9f
10003c14:	1a23      	subs	r3, r4, r0
10003c16:	2bff      	cmp	r3, #255	; 0xff
10003c18:	d021      	beq.n	10003c5e <__aeabi_ui2f+0x9e>
10003c1a:	4812      	ldr	r0, [pc, #72]	; (10003c64 <__aeabi_ui2f+0xa4>)
10003c1c:	4002      	ands	r2, r0
10003c1e:	1c59      	adds	r1, r3, #1
10003c20:	b2cc      	uxtb	r4, r1
10003c22:	08d2      	lsrs	r2, r2, #3
10003c24:	2c01      	cmp	r4, #1
10003c26:	dd09      	ble.n	10003c3c <__aeabi_ui2f+0x7c>
10003c28:	0250      	lsls	r0, r2, #9
10003c2a:	0a41      	lsrs	r1, r0, #9
10003c2c:	b2db      	uxtb	r3, r3
10003c2e:	e7d5      	b.n	10003bdc <__aeabi_ui2f+0x1c>
10003c30:	2300      	movs	r3, #0
10003c32:	2100      	movs	r1, #0
10003c34:	e7d2      	b.n	10003bdc <__aeabi_ui2f+0x1c>
10003c36:	1f42      	subs	r2, r0, #5
10003c38:	4094      	lsls	r4, r2
10003c3a:	e7e1      	b.n	10003c00 <__aeabi_ui2f+0x40>
10003c3c:	2a00      	cmp	r2, #0
10003c3e:	d00b      	beq.n	10003c58 <__aeabi_ui2f+0x98>
10003c40:	2b00      	cmp	r3, #0
10003c42:	d006      	beq.n	10003c52 <__aeabi_ui2f+0x92>
10003c44:	2180      	movs	r1, #128	; 0x80
10003c46:	03cc      	lsls	r4, r1, #15
10003c48:	4322      	orrs	r2, r4
10003c4a:	0252      	lsls	r2, r2, #9
10003c4c:	0a51      	lsrs	r1, r2, #9
10003c4e:	b2db      	uxtb	r3, r3
10003c50:	e7c4      	b.n	10003bdc <__aeabi_ui2f+0x1c>
10003c52:	0250      	lsls	r0, r2, #9
10003c54:	0a41      	lsrs	r1, r0, #9
10003c56:	e7c1      	b.n	10003bdc <__aeabi_ui2f+0x1c>
10003c58:	b2db      	uxtb	r3, r3
10003c5a:	2100      	movs	r1, #0
10003c5c:	e7be      	b.n	10003bdc <__aeabi_ui2f+0x1c>
10003c5e:	23ff      	movs	r3, #255	; 0xff
10003c60:	2100      	movs	r1, #0
10003c62:	e7bb      	b.n	10003bdc <__aeabi_ui2f+0x1c>
10003c64:	fbffffff 	.word	0xfbffffff

10003c68 <__aeabi_dmul>:
10003c68:	b5f0      	push	{r4, r5, r6, r7, lr}
10003c6a:	4656      	mov	r6, sl
10003c6c:	4644      	mov	r4, r8
10003c6e:	465f      	mov	r7, fp
10003c70:	464d      	mov	r5, r9
10003c72:	b4f0      	push	{r4, r5, r6, r7}
10003c74:	004f      	lsls	r7, r1, #1
10003c76:	1c1d      	adds	r5, r3, #0
10003c78:	030b      	lsls	r3, r1, #12
10003c7a:	1c14      	adds	r4, r2, #0
10003c7c:	0b1a      	lsrs	r2, r3, #12
10003c7e:	0d7b      	lsrs	r3, r7, #21
10003c80:	b087      	sub	sp, #28
10003c82:	1c06      	adds	r6, r0, #0
10003c84:	4692      	mov	sl, r2
10003c86:	4698      	mov	r8, r3
10003c88:	0fcf      	lsrs	r7, r1, #31
10003c8a:	2b00      	cmp	r3, #0
10003c8c:	d121      	bne.n	10003cd2 <__aeabi_dmul+0x6a>
10003c8e:	4302      	orrs	r2, r0
10003c90:	d100      	bne.n	10003c94 <__aeabi_dmul+0x2c>
10003c92:	e149      	b.n	10003f28 <__aeabi_dmul+0x2c0>
10003c94:	4653      	mov	r3, sl
10003c96:	2b00      	cmp	r3, #0
10003c98:	d100      	bne.n	10003c9c <__aeabi_dmul+0x34>
10003c9a:	e1e4      	b.n	10004066 <__aeabi_dmul+0x3fe>
10003c9c:	4650      	mov	r0, sl
10003c9e:	f000 fe7b 	bl	10004998 <__clzsi2>
10003ca2:	1e03      	subs	r3, r0, #0
10003ca4:	2b27      	cmp	r3, #39	; 0x27
10003ca6:	dd00      	ble.n	10003caa <__aeabi_dmul+0x42>
10003ca8:	e1d8      	b.n	1000405c <__aeabi_dmul+0x3f4>
10003caa:	3b08      	subs	r3, #8
10003cac:	4651      	mov	r1, sl
10003cae:	4099      	lsls	r1, r3
10003cb0:	2228      	movs	r2, #40	; 0x28
10003cb2:	4688      	mov	r8, r1
10003cb4:	1a11      	subs	r1, r2, r0
10003cb6:	1c32      	adds	r2, r6, #0
10003cb8:	40ca      	lsrs	r2, r1
10003cba:	4641      	mov	r1, r8
10003cbc:	430a      	orrs	r2, r1
10003cbe:	4692      	mov	sl, r2
10003cc0:	409e      	lsls	r6, r3
10003cc2:	4bd8      	ldr	r3, [pc, #864]	; (10004024 <__aeabi_dmul+0x3bc>)
10003cc4:	2200      	movs	r2, #0
10003cc6:	1a18      	subs	r0, r3, r0
10003cc8:	2100      	movs	r1, #0
10003cca:	4680      	mov	r8, r0
10003ccc:	4691      	mov	r9, r2
10003cce:	9103      	str	r1, [sp, #12]
10003cd0:	e011      	b.n	10003cf6 <__aeabi_dmul+0x8e>
10003cd2:	48d5      	ldr	r0, [pc, #852]	; (10004028 <__aeabi_dmul+0x3c0>)
10003cd4:	4283      	cmp	r3, r0
10003cd6:	d03e      	beq.n	10003d56 <__aeabi_dmul+0xee>
10003cd8:	2180      	movs	r1, #128	; 0x80
10003cda:	4653      	mov	r3, sl
10003cdc:	034a      	lsls	r2, r1, #13
10003cde:	431a      	orrs	r2, r3
10003ce0:	00d0      	lsls	r0, r2, #3
10003ce2:	0f71      	lsrs	r1, r6, #29
10003ce4:	4308      	orrs	r0, r1
10003ce6:	4ad1      	ldr	r2, [pc, #836]	; (1000402c <__aeabi_dmul+0x3c4>)
10003ce8:	4682      	mov	sl, r0
10003cea:	2300      	movs	r3, #0
10003cec:	2000      	movs	r0, #0
10003cee:	00f6      	lsls	r6, r6, #3
10003cf0:	4490      	add	r8, r2
10003cf2:	4699      	mov	r9, r3
10003cf4:	9003      	str	r0, [sp, #12]
10003cf6:	1c29      	adds	r1, r5, #0
10003cf8:	1c20      	adds	r0, r4, #0
10003cfa:	1c25      	adds	r5, r4, #0
10003cfc:	004a      	lsls	r2, r1, #1
10003cfe:	030c      	lsls	r4, r1, #12
10003d00:	0fcb      	lsrs	r3, r1, #31
10003d02:	0b24      	lsrs	r4, r4, #12
10003d04:	0d52      	lsrs	r2, r2, #21
10003d06:	469b      	mov	fp, r3
10003d08:	d131      	bne.n	10003d6e <__aeabi_dmul+0x106>
10003d0a:	1c21      	adds	r1, r4, #0
10003d0c:	4301      	orrs	r1, r0
10003d0e:	d100      	bne.n	10003d12 <__aeabi_dmul+0xaa>
10003d10:	e112      	b.n	10003f38 <__aeabi_dmul+0x2d0>
10003d12:	2c00      	cmp	r4, #0
10003d14:	d100      	bne.n	10003d18 <__aeabi_dmul+0xb0>
10003d16:	e19d      	b.n	10004054 <__aeabi_dmul+0x3ec>
10003d18:	1c20      	adds	r0, r4, #0
10003d1a:	f000 fe3d 	bl	10004998 <__clzsi2>
10003d1e:	2827      	cmp	r0, #39	; 0x27
10003d20:	dd00      	ble.n	10003d24 <__aeabi_dmul+0xbc>
10003d22:	e191      	b.n	10004048 <__aeabi_dmul+0x3e0>
10003d24:	1c03      	adds	r3, r0, #0
10003d26:	2228      	movs	r2, #40	; 0x28
10003d28:	3b08      	subs	r3, #8
10003d2a:	1c29      	adds	r1, r5, #0
10003d2c:	1a12      	subs	r2, r2, r0
10003d2e:	409c      	lsls	r4, r3
10003d30:	40d1      	lsrs	r1, r2
10003d32:	430c      	orrs	r4, r1
10003d34:	409d      	lsls	r5, r3
10003d36:	4bbb      	ldr	r3, [pc, #748]	; (10004024 <__aeabi_dmul+0x3bc>)
10003d38:	4659      	mov	r1, fp
10003d3a:	1a1a      	subs	r2, r3, r0
10003d3c:	4079      	eors	r1, r7
10003d3e:	2000      	movs	r0, #0
10003d40:	464b      	mov	r3, r9
10003d42:	9101      	str	r1, [sp, #4]
10003d44:	4303      	orrs	r3, r0
10003d46:	2b0f      	cmp	r3, #15
10003d48:	d826      	bhi.n	10003d98 <__aeabi_dmul+0x130>
10003d4a:	0099      	lsls	r1, r3, #2
10003d4c:	4bb8      	ldr	r3, [pc, #736]	; (10004030 <__aeabi_dmul+0x3c8>)
10003d4e:	468c      	mov	ip, r1
10003d50:	4463      	add	r3, ip
10003d52:	6819      	ldr	r1, [r3, #0]
10003d54:	468f      	mov	pc, r1
10003d56:	1c11      	adds	r1, r2, #0
10003d58:	4331      	orrs	r1, r6
10003d5a:	d000      	beq.n	10003d5e <__aeabi_dmul+0xf6>
10003d5c:	e0df      	b.n	10003f1e <__aeabi_dmul+0x2b6>
10003d5e:	2608      	movs	r6, #8
10003d60:	2000      	movs	r0, #0
10003d62:	2102      	movs	r1, #2
10003d64:	46b1      	mov	r9, r6
10003d66:	4682      	mov	sl, r0
10003d68:	2600      	movs	r6, #0
10003d6a:	9103      	str	r1, [sp, #12]
10003d6c:	e7c3      	b.n	10003cf6 <__aeabi_dmul+0x8e>
10003d6e:	48ae      	ldr	r0, [pc, #696]	; (10004028 <__aeabi_dmul+0x3c0>)
10003d70:	4282      	cmp	r2, r0
10003d72:	d100      	bne.n	10003d76 <__aeabi_dmul+0x10e>
10003d74:	e0c9      	b.n	10003f0a <__aeabi_dmul+0x2a2>
10003d76:	2180      	movs	r1, #128	; 0x80
10003d78:	034b      	lsls	r3, r1, #13
10003d7a:	431c      	orrs	r4, r3
10003d7c:	49ab      	ldr	r1, [pc, #684]	; (1000402c <__aeabi_dmul+0x3c4>)
10003d7e:	0f68      	lsrs	r0, r5, #29
10003d80:	00e4      	lsls	r4, r4, #3
10003d82:	4304      	orrs	r4, r0
10003d84:	00ed      	lsls	r5, r5, #3
10003d86:	1852      	adds	r2, r2, r1
10003d88:	2000      	movs	r0, #0
10003d8a:	4659      	mov	r1, fp
10003d8c:	4079      	eors	r1, r7
10003d8e:	464b      	mov	r3, r9
10003d90:	9101      	str	r1, [sp, #4]
10003d92:	4303      	orrs	r3, r0
10003d94:	2b0f      	cmp	r3, #15
10003d96:	d9d8      	bls.n	10003d4a <__aeabi_dmul+0xe2>
10003d98:	4442      	add	r2, r8
10003d9a:	0433      	lsls	r3, r6, #16
10003d9c:	0429      	lsls	r1, r5, #16
10003d9e:	9204      	str	r2, [sp, #16]
10003da0:	0c1a      	lsrs	r2, r3, #16
10003da2:	0c0f      	lsrs	r7, r1, #16
10003da4:	1c10      	adds	r0, r2, #0
10003da6:	4378      	muls	r0, r7
10003da8:	0c36      	lsrs	r6, r6, #16
10003daa:	1c33      	adds	r3, r6, #0
10003dac:	4680      	mov	r8, r0
10003dae:	0c2d      	lsrs	r5, r5, #16
10003db0:	437b      	muls	r3, r7
10003db2:	1c30      	adds	r0, r6, #0
10003db4:	4368      	muls	r0, r5
10003db6:	1c11      	adds	r1, r2, #0
10003db8:	4369      	muls	r1, r5
10003dba:	469c      	mov	ip, r3
10003dbc:	4643      	mov	r3, r8
10003dbe:	4683      	mov	fp, r0
10003dc0:	0c18      	lsrs	r0, r3, #16
10003dc2:	1808      	adds	r0, r1, r0
10003dc4:	4460      	add	r0, ip
10003dc6:	4584      	cmp	ip, r0
10003dc8:	d900      	bls.n	10003dcc <__aeabi_dmul+0x164>
10003dca:	e11f      	b.n	1000400c <__aeabi_dmul+0x3a4>
10003dcc:	0c01      	lsrs	r1, r0, #16
10003dce:	4643      	mov	r3, r8
10003dd0:	9103      	str	r1, [sp, #12]
10003dd2:	0419      	lsls	r1, r3, #16
10003dd4:	0c0b      	lsrs	r3, r1, #16
10003dd6:	0400      	lsls	r0, r0, #16
10003dd8:	18c0      	adds	r0, r0, r3
10003dda:	0421      	lsls	r1, r4, #16
10003ddc:	0c24      	lsrs	r4, r4, #16
10003dde:	9005      	str	r0, [sp, #20]
10003de0:	1c10      	adds	r0, r2, #0
10003de2:	4362      	muls	r2, r4
10003de4:	0c09      	lsrs	r1, r1, #16
10003de6:	9202      	str	r2, [sp, #8]
10003de8:	4348      	muls	r0, r1
10003dea:	1c32      	adds	r2, r6, #0
10003dec:	4366      	muls	r6, r4
10003dee:	434a      	muls	r2, r1
10003df0:	9b02      	ldr	r3, [sp, #8]
10003df2:	46b1      	mov	r9, r6
10003df4:	0c06      	lsrs	r6, r0, #16
10003df6:	4690      	mov	r8, r2
10003df8:	46b4      	mov	ip, r6
10003dfa:	1c1a      	adds	r2, r3, #0
10003dfc:	4462      	add	r2, ip
10003dfe:	4442      	add	r2, r8
10003e00:	4590      	cmp	r8, r2
10003e02:	d902      	bls.n	10003e0a <__aeabi_dmul+0x1a2>
10003e04:	2680      	movs	r6, #128	; 0x80
10003e06:	0273      	lsls	r3, r6, #9
10003e08:	4499      	add	r9, r3
10003e0a:	0c16      	lsrs	r6, r2, #16
10003e0c:	46b0      	mov	r8, r6
10003e0e:	44c1      	add	r9, r8
10003e10:	0400      	lsls	r0, r0, #16
10003e12:	464b      	mov	r3, r9
10003e14:	0c06      	lsrs	r6, r0, #16
10003e16:	0412      	lsls	r2, r2, #16
10003e18:	9302      	str	r3, [sp, #8]
10003e1a:	1993      	adds	r3, r2, r6
10003e1c:	4656      	mov	r6, sl
10003e1e:	0432      	lsls	r2, r6, #16
10003e20:	0c10      	lsrs	r0, r2, #16
10003e22:	1c02      	adds	r2, r0, #0
10003e24:	436a      	muls	r2, r5
10003e26:	469c      	mov	ip, r3
10003e28:	1c03      	adds	r3, r0, #0
10003e2a:	437b      	muls	r3, r7
10003e2c:	4691      	mov	r9, r2
10003e2e:	0c32      	lsrs	r2, r6, #16
10003e30:	4357      	muls	r7, r2
10003e32:	4698      	mov	r8, r3
10003e34:	0c1b      	lsrs	r3, r3, #16
10003e36:	469a      	mov	sl, r3
10003e38:	44d1      	add	r9, sl
10003e3a:	44b9      	add	r9, r7
10003e3c:	4355      	muls	r5, r2
10003e3e:	454f      	cmp	r7, r9
10003e40:	d902      	bls.n	10003e48 <__aeabi_dmul+0x1e0>
10003e42:	2780      	movs	r7, #128	; 0x80
10003e44:	027e      	lsls	r6, r7, #9
10003e46:	19ad      	adds	r5, r5, r6
10003e48:	464b      	mov	r3, r9
10003e4a:	0c1f      	lsrs	r7, r3, #16
10003e4c:	4646      	mov	r6, r8
10003e4e:	19ed      	adds	r5, r5, r7
10003e50:	041f      	lsls	r7, r3, #16
10003e52:	0433      	lsls	r3, r6, #16
10003e54:	0c1e      	lsrs	r6, r3, #16
10003e56:	1c03      	adds	r3, r0, #0
10003e58:	434b      	muls	r3, r1
10003e5a:	4360      	muls	r0, r4
10003e5c:	4351      	muls	r1, r2
10003e5e:	4354      	muls	r4, r2
10003e60:	0c1a      	lsrs	r2, r3, #16
10003e62:	1880      	adds	r0, r0, r2
10003e64:	46b0      	mov	r8, r6
10003e66:	1840      	adds	r0, r0, r1
10003e68:	4447      	add	r7, r8
10003e6a:	469a      	mov	sl, r3
10003e6c:	4281      	cmp	r1, r0
10003e6e:	d902      	bls.n	10003e76 <__aeabi_dmul+0x20e>
10003e70:	2180      	movs	r1, #128	; 0x80
10003e72:	024e      	lsls	r6, r1, #9
10003e74:	19a4      	adds	r4, r4, r6
10003e76:	9b03      	ldr	r3, [sp, #12]
10003e78:	1c1a      	adds	r2, r3, #0
10003e7a:	4462      	add	r2, ip
10003e7c:	445a      	add	r2, fp
10003e7e:	4562      	cmp	r2, ip
10003e80:	4189      	sbcs	r1, r1
10003e82:	424e      	negs	r6, r1
10003e84:	4651      	mov	r1, sl
10003e86:	46b3      	mov	fp, r6
10003e88:	0403      	lsls	r3, r0, #16
10003e8a:	040e      	lsls	r6, r1, #16
10003e8c:	469c      	mov	ip, r3
10003e8e:	9902      	ldr	r1, [sp, #8]
10003e90:	0c33      	lsrs	r3, r6, #16
10003e92:	4463      	add	r3, ip
10003e94:	18ce      	adds	r6, r1, r3
10003e96:	46b0      	mov	r8, r6
10003e98:	46c2      	mov	sl, r8
10003e9a:	44da      	add	sl, fp
10003e9c:	19d2      	adds	r2, r2, r7
10003e9e:	42ba      	cmp	r2, r7
10003ea0:	41bf      	sbcs	r7, r7
10003ea2:	4651      	mov	r1, sl
10003ea4:	427b      	negs	r3, r7
10003ea6:	186f      	adds	r7, r5, r1
10003ea8:	18f9      	adds	r1, r7, r3
10003eaa:	4699      	mov	r9, r3
10003eac:	45da      	cmp	sl, fp
10003eae:	419b      	sbcs	r3, r3
10003eb0:	425e      	negs	r6, r3
10003eb2:	9b02      	ldr	r3, [sp, #8]
10003eb4:	46b3      	mov	fp, r6
10003eb6:	4598      	cmp	r8, r3
10003eb8:	41b6      	sbcs	r6, r6
10003eba:	4276      	negs	r6, r6
10003ebc:	465b      	mov	r3, fp
10003ebe:	431e      	orrs	r6, r3
10003ec0:	0c00      	lsrs	r0, r0, #16
10003ec2:	4549      	cmp	r1, r9
10003ec4:	419b      	sbcs	r3, r3
10003ec6:	42af      	cmp	r7, r5
10003ec8:	41ad      	sbcs	r5, r5
10003eca:	1836      	adds	r6, r6, r0
10003ecc:	426f      	negs	r7, r5
10003ece:	4258      	negs	r0, r3
10003ed0:	4338      	orrs	r0, r7
10003ed2:	1836      	adds	r6, r6, r0
10003ed4:	9805      	ldr	r0, [sp, #20]
10003ed6:	1934      	adds	r4, r6, r4
10003ed8:	0256      	lsls	r6, r2, #9
10003eda:	4306      	orrs	r6, r0
10003edc:	0dcb      	lsrs	r3, r1, #23
10003ede:	0264      	lsls	r4, r4, #9
10003ee0:	1e70      	subs	r0, r6, #1
10003ee2:	4186      	sbcs	r6, r0
10003ee4:	0dd2      	lsrs	r2, r2, #23
10003ee6:	4316      	orrs	r6, r2
10003ee8:	0249      	lsls	r1, r1, #9
10003eea:	431c      	orrs	r4, r3
10003eec:	430e      	orrs	r6, r1
10003eee:	01e0      	lsls	r0, r4, #7
10003ef0:	d52f      	bpl.n	10003f52 <__aeabi_dmul+0x2ea>
10003ef2:	2701      	movs	r7, #1
10003ef4:	9d04      	ldr	r5, [sp, #16]
10003ef6:	4037      	ands	r7, r6
10003ef8:	0873      	lsrs	r3, r6, #1
10003efa:	1c3e      	adds	r6, r7, #0
10003efc:	07e0      	lsls	r0, r4, #31
10003efe:	3501      	adds	r5, #1
10003f00:	431e      	orrs	r6, r3
10003f02:	9504      	str	r5, [sp, #16]
10003f04:	4306      	orrs	r6, r0
10003f06:	0864      	lsrs	r4, r4, #1
10003f08:	e023      	b.n	10003f52 <__aeabi_dmul+0x2ea>
10003f0a:	1c23      	adds	r3, r4, #0
10003f0c:	432b      	orrs	r3, r5
10003f0e:	2003      	movs	r0, #3
10003f10:	2b00      	cmp	r3, #0
10003f12:	d000      	beq.n	10003f16 <__aeabi_dmul+0x2ae>
10003f14:	e739      	b.n	10003d8a <__aeabi_dmul+0x122>
10003f16:	2400      	movs	r4, #0
10003f18:	2500      	movs	r5, #0
10003f1a:	2002      	movs	r0, #2
10003f1c:	e735      	b.n	10003d8a <__aeabi_dmul+0x122>
10003f1e:	220c      	movs	r2, #12
10003f20:	2303      	movs	r3, #3
10003f22:	4691      	mov	r9, r2
10003f24:	9303      	str	r3, [sp, #12]
10003f26:	e6e6      	b.n	10003cf6 <__aeabi_dmul+0x8e>
10003f28:	2604      	movs	r6, #4
10003f2a:	2300      	movs	r3, #0
10003f2c:	2001      	movs	r0, #1
10003f2e:	46b1      	mov	r9, r6
10003f30:	469a      	mov	sl, r3
10003f32:	2600      	movs	r6, #0
10003f34:	9003      	str	r0, [sp, #12]
10003f36:	e6de      	b.n	10003cf6 <__aeabi_dmul+0x8e>
10003f38:	2400      	movs	r4, #0
10003f3a:	2500      	movs	r5, #0
10003f3c:	2001      	movs	r0, #1
10003f3e:	e724      	b.n	10003d8a <__aeabi_dmul+0x122>
10003f40:	9803      	ldr	r0, [sp, #12]
10003f42:	4654      	mov	r4, sl
10003f44:	2802      	cmp	r0, #2
10003f46:	d044      	beq.n	10003fd2 <__aeabi_dmul+0x36a>
10003f48:	2803      	cmp	r0, #3
10003f4a:	d100      	bne.n	10003f4e <__aeabi_dmul+0x2e6>
10003f4c:	e0ea      	b.n	10004124 <__aeabi_dmul+0x4bc>
10003f4e:	2801      	cmp	r0, #1
10003f50:	d060      	beq.n	10004014 <__aeabi_dmul+0x3ac>
10003f52:	9a04      	ldr	r2, [sp, #16]
10003f54:	4937      	ldr	r1, [pc, #220]	; (10004034 <__aeabi_dmul+0x3cc>)
10003f56:	1850      	adds	r0, r2, r1
10003f58:	2800      	cmp	r0, #0
10003f5a:	dc00      	bgt.n	10003f5e <__aeabi_dmul+0x2f6>
10003f5c:	e095      	b.n	1000408a <__aeabi_dmul+0x422>
10003f5e:	270f      	movs	r7, #15
10003f60:	4037      	ands	r7, r6
10003f62:	2f04      	cmp	r7, #4
10003f64:	d005      	beq.n	10003f72 <__aeabi_dmul+0x30a>
10003f66:	1d31      	adds	r1, r6, #4
10003f68:	42b1      	cmp	r1, r6
10003f6a:	41b6      	sbcs	r6, r6
10003f6c:	4275      	negs	r5, r6
10003f6e:	1964      	adds	r4, r4, r5
10003f70:	1c0e      	adds	r6, r1, #0
10003f72:	01e1      	lsls	r1, r4, #7
10003f74:	d505      	bpl.n	10003f82 <__aeabi_dmul+0x31a>
10003f76:	4830      	ldr	r0, [pc, #192]	; (10004038 <__aeabi_dmul+0x3d0>)
10003f78:	9a04      	ldr	r2, [sp, #16]
10003f7a:	2380      	movs	r3, #128	; 0x80
10003f7c:	00df      	lsls	r7, r3, #3
10003f7e:	4004      	ands	r4, r0
10003f80:	19d0      	adds	r0, r2, r7
10003f82:	492e      	ldr	r1, [pc, #184]	; (1000403c <__aeabi_dmul+0x3d4>)
10003f84:	4288      	cmp	r0, r1
10003f86:	dc24      	bgt.n	10003fd2 <__aeabi_dmul+0x36a>
10003f88:	9b01      	ldr	r3, [sp, #4]
10003f8a:	0765      	lsls	r5, r4, #29
10003f8c:	08f6      	lsrs	r6, r6, #3
10003f8e:	0264      	lsls	r4, r4, #9
10003f90:	0542      	lsls	r2, r0, #21
10003f92:	2701      	movs	r7, #1
10003f94:	432e      	orrs	r6, r5
10003f96:	0b24      	lsrs	r4, r4, #12
10003f98:	0d52      	lsrs	r2, r2, #21
10003f9a:	401f      	ands	r7, r3
10003f9c:	2000      	movs	r0, #0
10003f9e:	2100      	movs	r1, #0
10003fa0:	0d09      	lsrs	r1, r1, #20
10003fa2:	050d      	lsls	r5, r1, #20
10003fa4:	4325      	orrs	r5, r4
10003fa6:	4c26      	ldr	r4, [pc, #152]	; (10004040 <__aeabi_dmul+0x3d8>)
10003fa8:	0512      	lsls	r2, r2, #20
10003faa:	402c      	ands	r4, r5
10003fac:	4314      	orrs	r4, r2
10003fae:	0063      	lsls	r3, r4, #1
10003fb0:	1c30      	adds	r0, r6, #0
10003fb2:	085e      	lsrs	r6, r3, #1
10003fb4:	07ff      	lsls	r7, r7, #31
10003fb6:	1c31      	adds	r1, r6, #0
10003fb8:	4339      	orrs	r1, r7
10003fba:	b007      	add	sp, #28
10003fbc:	bc3c      	pop	{r2, r3, r4, r5}
10003fbe:	4690      	mov	r8, r2
10003fc0:	4699      	mov	r9, r3
10003fc2:	46a2      	mov	sl, r4
10003fc4:	46ab      	mov	fp, r5
10003fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003fc8:	465a      	mov	r2, fp
10003fca:	1c2e      	adds	r6, r5, #0
10003fcc:	9201      	str	r2, [sp, #4]
10003fce:	2802      	cmp	r0, #2
10003fd0:	d1ba      	bne.n	10003f48 <__aeabi_dmul+0x2e0>
10003fd2:	9e01      	ldr	r6, [sp, #4]
10003fd4:	2701      	movs	r7, #1
10003fd6:	4037      	ands	r7, r6
10003fd8:	4a13      	ldr	r2, [pc, #76]	; (10004028 <__aeabi_dmul+0x3c0>)
10003fda:	2400      	movs	r4, #0
10003fdc:	2600      	movs	r6, #0
10003fde:	e7dd      	b.n	10003f9c <__aeabi_dmul+0x334>
10003fe0:	4654      	mov	r4, sl
10003fe2:	9701      	str	r7, [sp, #4]
10003fe4:	9803      	ldr	r0, [sp, #12]
10003fe6:	e7ad      	b.n	10003f44 <__aeabi_dmul+0x2dc>
10003fe8:	2601      	movs	r6, #1
10003fea:	2700      	movs	r7, #0
10003fec:	4c15      	ldr	r4, [pc, #84]	; (10004044 <__aeabi_dmul+0x3dc>)
10003fee:	4276      	negs	r6, r6
10003ff0:	4a0d      	ldr	r2, [pc, #52]	; (10004028 <__aeabi_dmul+0x3c0>)
10003ff2:	e7d3      	b.n	10003f9c <__aeabi_dmul+0x334>
10003ff4:	1c2e      	adds	r6, r5, #0
10003ff6:	e7a5      	b.n	10003f44 <__aeabi_dmul+0x2dc>
10003ff8:	2280      	movs	r2, #128	; 0x80
10003ffa:	0313      	lsls	r3, r2, #12
10003ffc:	4651      	mov	r1, sl
10003ffe:	4219      	tst	r1, r3
10004000:	d135      	bne.n	1000406e <__aeabi_dmul+0x406>
10004002:	430b      	orrs	r3, r1
10004004:	031d      	lsls	r5, r3, #12
10004006:	0b2c      	lsrs	r4, r5, #12
10004008:	4a07      	ldr	r2, [pc, #28]	; (10004028 <__aeabi_dmul+0x3c0>)
1000400a:	e7c7      	b.n	10003f9c <__aeabi_dmul+0x334>
1000400c:	2180      	movs	r1, #128	; 0x80
1000400e:	024b      	lsls	r3, r1, #9
10004010:	449b      	add	fp, r3
10004012:	e6db      	b.n	10003dcc <__aeabi_dmul+0x164>
10004014:	9b01      	ldr	r3, [sp, #4]
10004016:	2200      	movs	r2, #0
10004018:	4018      	ands	r0, r3
1000401a:	b2c7      	uxtb	r7, r0
1000401c:	2400      	movs	r4, #0
1000401e:	2600      	movs	r6, #0
10004020:	e7bc      	b.n	10003f9c <__aeabi_dmul+0x334>
10004022:	46c0      	nop			; (mov r8, r8)
10004024:	fffffc0d 	.word	0xfffffc0d
10004028:	000007ff 	.word	0x000007ff
1000402c:	fffffc01 	.word	0xfffffc01
10004030:	10004f08 	.word	0x10004f08
10004034:	000003ff 	.word	0x000003ff
10004038:	feffffff 	.word	0xfeffffff
1000403c:	000007fe 	.word	0x000007fe
10004040:	800fffff 	.word	0x800fffff
10004044:	000fffff 	.word	0x000fffff
10004048:	1c04      	adds	r4, r0, #0
1000404a:	3c28      	subs	r4, #40	; 0x28
1000404c:	40a5      	lsls	r5, r4
1000404e:	1c2c      	adds	r4, r5, #0
10004050:	2500      	movs	r5, #0
10004052:	e670      	b.n	10003d36 <__aeabi_dmul+0xce>
10004054:	f000 fca0 	bl	10004998 <__clzsi2>
10004058:	3020      	adds	r0, #32
1000405a:	e660      	b.n	10003d1e <__aeabi_dmul+0xb6>
1000405c:	3b28      	subs	r3, #40	; 0x28
1000405e:	409e      	lsls	r6, r3
10004060:	46b2      	mov	sl, r6
10004062:	2600      	movs	r6, #0
10004064:	e62d      	b.n	10003cc2 <__aeabi_dmul+0x5a>
10004066:	f000 fc97 	bl	10004998 <__clzsi2>
1000406a:	3020      	adds	r0, #32
1000406c:	e619      	b.n	10003ca2 <__aeabi_dmul+0x3a>
1000406e:	421c      	tst	r4, r3
10004070:	d106      	bne.n	10004080 <__aeabi_dmul+0x418>
10004072:	431c      	orrs	r4, r3
10004074:	0326      	lsls	r6, r4, #12
10004076:	0b34      	lsrs	r4, r6, #12
10004078:	465f      	mov	r7, fp
1000407a:	1c2e      	adds	r6, r5, #0
1000407c:	4a2e      	ldr	r2, [pc, #184]	; (10004138 <__aeabi_dmul+0x4d0>)
1000407e:	e78d      	b.n	10003f9c <__aeabi_dmul+0x334>
10004080:	430b      	orrs	r3, r1
10004082:	0318      	lsls	r0, r3, #12
10004084:	0b04      	lsrs	r4, r0, #12
10004086:	4a2c      	ldr	r2, [pc, #176]	; (10004138 <__aeabi_dmul+0x4d0>)
10004088:	e788      	b.n	10003f9c <__aeabi_dmul+0x334>
1000408a:	4f2c      	ldr	r7, [pc, #176]	; (1000413c <__aeabi_dmul+0x4d4>)
1000408c:	9d04      	ldr	r5, [sp, #16]
1000408e:	1b7b      	subs	r3, r7, r5
10004090:	2b38      	cmp	r3, #56	; 0x38
10004092:	dd06      	ble.n	100040a2 <__aeabi_dmul+0x43a>
10004094:	9e01      	ldr	r6, [sp, #4]
10004096:	2701      	movs	r7, #1
10004098:	4037      	ands	r7, r6
1000409a:	2200      	movs	r2, #0
1000409c:	2400      	movs	r4, #0
1000409e:	2600      	movs	r6, #0
100040a0:	e77c      	b.n	10003f9c <__aeabi_dmul+0x334>
100040a2:	2b1f      	cmp	r3, #31
100040a4:	dc21      	bgt.n	100040ea <__aeabi_dmul+0x482>
100040a6:	9a04      	ldr	r2, [sp, #16]
100040a8:	4f25      	ldr	r7, [pc, #148]	; (10004140 <__aeabi_dmul+0x4d8>)
100040aa:	1c35      	adds	r5, r6, #0
100040ac:	19d1      	adds	r1, r2, r7
100040ae:	1c20      	adds	r0, r4, #0
100040b0:	408e      	lsls	r6, r1
100040b2:	40dd      	lsrs	r5, r3
100040b4:	4088      	lsls	r0, r1
100040b6:	1c32      	adds	r2, r6, #0
100040b8:	4328      	orrs	r0, r5
100040ba:	1e56      	subs	r6, r2, #1
100040bc:	41b2      	sbcs	r2, r6
100040be:	1c06      	adds	r6, r0, #0
100040c0:	4316      	orrs	r6, r2
100040c2:	40dc      	lsrs	r4, r3
100040c4:	230f      	movs	r3, #15
100040c6:	4033      	ands	r3, r6
100040c8:	2b04      	cmp	r3, #4
100040ca:	d005      	beq.n	100040d8 <__aeabi_dmul+0x470>
100040cc:	1d37      	adds	r7, r6, #4
100040ce:	42b7      	cmp	r7, r6
100040d0:	41b6      	sbcs	r6, r6
100040d2:	4271      	negs	r1, r6
100040d4:	1864      	adds	r4, r4, r1
100040d6:	1c3e      	adds	r6, r7, #0
100040d8:	0225      	lsls	r5, r4, #8
100040da:	d517      	bpl.n	1000410c <__aeabi_dmul+0x4a4>
100040dc:	9b01      	ldr	r3, [sp, #4]
100040de:	2701      	movs	r7, #1
100040e0:	401f      	ands	r7, r3
100040e2:	2201      	movs	r2, #1
100040e4:	2400      	movs	r4, #0
100040e6:	2600      	movs	r6, #0
100040e8:	e758      	b.n	10003f9c <__aeabi_dmul+0x334>
100040ea:	4816      	ldr	r0, [pc, #88]	; (10004144 <__aeabi_dmul+0x4dc>)
100040ec:	9a04      	ldr	r2, [sp, #16]
100040ee:	1c21      	adds	r1, r4, #0
100040f0:	1a87      	subs	r7, r0, r2
100040f2:	40f9      	lsrs	r1, r7
100040f4:	1c0d      	adds	r5, r1, #0
100040f6:	2b20      	cmp	r3, #32
100040f8:	d012      	beq.n	10004120 <__aeabi_dmul+0x4b8>
100040fa:	4b13      	ldr	r3, [pc, #76]	; (10004148 <__aeabi_dmul+0x4e0>)
100040fc:	18d0      	adds	r0, r2, r3
100040fe:	4084      	lsls	r4, r0
10004100:	4326      	orrs	r6, r4
10004102:	1e72      	subs	r2, r6, #1
10004104:	4196      	sbcs	r6, r2
10004106:	432e      	orrs	r6, r5
10004108:	2400      	movs	r4, #0
1000410a:	e7db      	b.n	100040c4 <__aeabi_dmul+0x45c>
1000410c:	9a01      	ldr	r2, [sp, #4]
1000410e:	0765      	lsls	r5, r4, #29
10004110:	08f6      	lsrs	r6, r6, #3
10004112:	0260      	lsls	r0, r4, #9
10004114:	2701      	movs	r7, #1
10004116:	4017      	ands	r7, r2
10004118:	432e      	orrs	r6, r5
1000411a:	0b04      	lsrs	r4, r0, #12
1000411c:	2200      	movs	r2, #0
1000411e:	e73d      	b.n	10003f9c <__aeabi_dmul+0x334>
10004120:	2400      	movs	r4, #0
10004122:	e7ed      	b.n	10004100 <__aeabi_dmul+0x498>
10004124:	2180      	movs	r1, #128	; 0x80
10004126:	030f      	lsls	r7, r1, #12
10004128:	433c      	orrs	r4, r7
1000412a:	9801      	ldr	r0, [sp, #4]
1000412c:	0324      	lsls	r4, r4, #12
1000412e:	2701      	movs	r7, #1
10004130:	0b24      	lsrs	r4, r4, #12
10004132:	4007      	ands	r7, r0
10004134:	4a00      	ldr	r2, [pc, #0]	; (10004138 <__aeabi_dmul+0x4d0>)
10004136:	e731      	b.n	10003f9c <__aeabi_dmul+0x334>
10004138:	000007ff 	.word	0x000007ff
1000413c:	fffffc02 	.word	0xfffffc02
10004140:	0000041e 	.word	0x0000041e
10004144:	fffffbe2 	.word	0xfffffbe2
10004148:	0000043e 	.word	0x0000043e

1000414c <__aeabi_dsub>:
1000414c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000414e:	4657      	mov	r7, sl
10004150:	464e      	mov	r6, r9
10004152:	4645      	mov	r5, r8
10004154:	b4e0      	push	{r5, r6, r7}
10004156:	1c07      	adds	r7, r0, #0
10004158:	030d      	lsls	r5, r1, #12
1000415a:	004e      	lsls	r6, r1, #1
1000415c:	0a68      	lsrs	r0, r5, #9
1000415e:	0fcc      	lsrs	r4, r1, #31
10004160:	0f79      	lsrs	r1, r7, #29
10004162:	4308      	orrs	r0, r1
10004164:	4684      	mov	ip, r0
10004166:	1c11      	adds	r1, r2, #0
10004168:	0318      	lsls	r0, r3, #12
1000416a:	005a      	lsls	r2, r3, #1
1000416c:	00fd      	lsls	r5, r7, #3
1000416e:	0a40      	lsrs	r0, r0, #9
10004170:	0fdf      	lsrs	r7, r3, #31
10004172:	0f4b      	lsrs	r3, r1, #29
10004174:	4318      	orrs	r0, r3
10004176:	4bca      	ldr	r3, [pc, #808]	; (100044a0 <__aeabi_dsub+0x354>)
10004178:	00c9      	lsls	r1, r1, #3
1000417a:	0d76      	lsrs	r6, r6, #21
1000417c:	0d52      	lsrs	r2, r2, #21
1000417e:	468a      	mov	sl, r1
10004180:	429a      	cmp	r2, r3
10004182:	d100      	bne.n	10004186 <__aeabi_dsub+0x3a>
10004184:	e0e0      	b.n	10004348 <__aeabi_dsub+0x1fc>
10004186:	2301      	movs	r3, #1
10004188:	405f      	eors	r7, r3
1000418a:	46b9      	mov	r9, r7
1000418c:	42bc      	cmp	r4, r7
1000418e:	d100      	bne.n	10004192 <__aeabi_dsub+0x46>
10004190:	e0a8      	b.n	100042e4 <__aeabi_dsub+0x198>
10004192:	1ab7      	subs	r7, r6, r2
10004194:	2f00      	cmp	r7, #0
10004196:	dc00      	bgt.n	1000419a <__aeabi_dsub+0x4e>
10004198:	e110      	b.n	100043bc <__aeabi_dsub+0x270>
1000419a:	2a00      	cmp	r2, #0
1000419c:	d112      	bne.n	100041c4 <__aeabi_dsub+0x78>
1000419e:	4652      	mov	r2, sl
100041a0:	4302      	orrs	r2, r0
100041a2:	d100      	bne.n	100041a6 <__aeabi_dsub+0x5a>
100041a4:	e0d4      	b.n	10004350 <__aeabi_dsub+0x204>
100041a6:	3f01      	subs	r7, #1
100041a8:	2f00      	cmp	r7, #0
100041aa:	d000      	beq.n	100041ae <__aeabi_dsub+0x62>
100041ac:	e160      	b.n	10004470 <__aeabi_dsub+0x324>
100041ae:	4651      	mov	r1, sl
100041b0:	1a6f      	subs	r7, r5, r1
100041b2:	42bd      	cmp	r5, r7
100041b4:	41ad      	sbcs	r5, r5
100041b6:	4662      	mov	r2, ip
100041b8:	426b      	negs	r3, r5
100041ba:	1a10      	subs	r0, r2, r0
100041bc:	1c3d      	adds	r5, r7, #0
100041be:	1ac3      	subs	r3, r0, r3
100041c0:	1c37      	adds	r7, r6, #0
100041c2:	e024      	b.n	1000420e <__aeabi_dsub+0xc2>
100041c4:	4ab6      	ldr	r2, [pc, #728]	; (100044a0 <__aeabi_dsub+0x354>)
100041c6:	4296      	cmp	r6, r2
100041c8:	d100      	bne.n	100041cc <__aeabi_dsub+0x80>
100041ca:	e0e3      	b.n	10004394 <__aeabi_dsub+0x248>
100041cc:	2180      	movs	r1, #128	; 0x80
100041ce:	040b      	lsls	r3, r1, #16
100041d0:	4318      	orrs	r0, r3
100041d2:	2f38      	cmp	r7, #56	; 0x38
100041d4:	dd00      	ble.n	100041d8 <__aeabi_dsub+0x8c>
100041d6:	e123      	b.n	10004420 <__aeabi_dsub+0x2d4>
100041d8:	2f1f      	cmp	r7, #31
100041da:	dd00      	ble.n	100041de <__aeabi_dsub+0x92>
100041dc:	e166      	b.n	100044ac <__aeabi_dsub+0x360>
100041de:	2120      	movs	r1, #32
100041e0:	1bc9      	subs	r1, r1, r7
100041e2:	1c02      	adds	r2, r0, #0
100041e4:	4653      	mov	r3, sl
100041e6:	408a      	lsls	r2, r1
100041e8:	40fb      	lsrs	r3, r7
100041ea:	431a      	orrs	r2, r3
100041ec:	4653      	mov	r3, sl
100041ee:	408b      	lsls	r3, r1
100041f0:	1c19      	adds	r1, r3, #0
100041f2:	1e4b      	subs	r3, r1, #1
100041f4:	4199      	sbcs	r1, r3
100041f6:	1c03      	adds	r3, r0, #0
100041f8:	430a      	orrs	r2, r1
100041fa:	40fb      	lsrs	r3, r7
100041fc:	1aaa      	subs	r2, r5, r2
100041fe:	4667      	mov	r7, ip
10004200:	4295      	cmp	r5, r2
10004202:	41ad      	sbcs	r5, r5
10004204:	1af8      	subs	r0, r7, r3
10004206:	426b      	negs	r3, r5
10004208:	1ac3      	subs	r3, r0, r3
1000420a:	1c15      	adds	r5, r2, #0
1000420c:	1c37      	adds	r7, r6, #0
1000420e:	021a      	lsls	r2, r3, #8
10004210:	d400      	bmi.n	10004214 <__aeabi_dsub+0xc8>
10004212:	e0c7      	b.n	100043a4 <__aeabi_dsub+0x258>
10004214:	025e      	lsls	r6, r3, #9
10004216:	0a71      	lsrs	r1, r6, #9
10004218:	4688      	mov	r8, r1
1000421a:	4642      	mov	r2, r8
1000421c:	2a00      	cmp	r2, #0
1000421e:	d100      	bne.n	10004222 <__aeabi_dsub+0xd6>
10004220:	e0f0      	b.n	10004404 <__aeabi_dsub+0x2b8>
10004222:	4640      	mov	r0, r8
10004224:	f000 fbb8 	bl	10004998 <__clzsi2>
10004228:	1c02      	adds	r2, r0, #0
1000422a:	3a08      	subs	r2, #8
1000422c:	2a1f      	cmp	r2, #31
1000422e:	dd00      	ble.n	10004232 <__aeabi_dsub+0xe6>
10004230:	e0f1      	b.n	10004416 <__aeabi_dsub+0x2ca>
10004232:	2328      	movs	r3, #40	; 0x28
10004234:	1a18      	subs	r0, r3, r0
10004236:	1c2e      	adds	r6, r5, #0
10004238:	4641      	mov	r1, r8
1000423a:	40c6      	lsrs	r6, r0
1000423c:	4091      	lsls	r1, r2
1000423e:	1c33      	adds	r3, r6, #0
10004240:	430b      	orrs	r3, r1
10004242:	4095      	lsls	r5, r2
10004244:	4297      	cmp	r7, r2
10004246:	dd00      	ble.n	1000424a <__aeabi_dsub+0xfe>
10004248:	e0a9      	b.n	1000439e <__aeabi_dsub+0x252>
1000424a:	1bd0      	subs	r0, r2, r7
1000424c:	1c41      	adds	r1, r0, #1
1000424e:	291f      	cmp	r1, #31
10004250:	dd00      	ble.n	10004254 <__aeabi_dsub+0x108>
10004252:	e112      	b.n	1000447a <__aeabi_dsub+0x32e>
10004254:	271f      	movs	r7, #31
10004256:	1a3a      	subs	r2, r7, r0
10004258:	1c2e      	adds	r6, r5, #0
1000425a:	1c18      	adds	r0, r3, #0
1000425c:	40ce      	lsrs	r6, r1
1000425e:	4090      	lsls	r0, r2
10004260:	4095      	lsls	r5, r2
10004262:	4330      	orrs	r0, r6
10004264:	1e6a      	subs	r2, r5, #1
10004266:	4195      	sbcs	r5, r2
10004268:	40cb      	lsrs	r3, r1
1000426a:	4305      	orrs	r5, r0
1000426c:	2101      	movs	r1, #1
1000426e:	2700      	movs	r7, #0
10004270:	260f      	movs	r6, #15
10004272:	402e      	ands	r6, r5
10004274:	2e04      	cmp	r6, #4
10004276:	d100      	bne.n	1000427a <__aeabi_dsub+0x12e>
10004278:	e072      	b.n	10004360 <__aeabi_dsub+0x214>
1000427a:	1d2e      	adds	r6, r5, #4
1000427c:	42ae      	cmp	r6, r5
1000427e:	41ad      	sbcs	r5, r5
10004280:	4268      	negs	r0, r5
10004282:	2280      	movs	r2, #128	; 0x80
10004284:	181b      	adds	r3, r3, r0
10004286:	2501      	movs	r5, #1
10004288:	0410      	lsls	r0, r2, #16
1000428a:	4018      	ands	r0, r3
1000428c:	402c      	ands	r4, r5
1000428e:	2800      	cmp	r0, #0
10004290:	d007      	beq.n	100042a2 <__aeabi_dsub+0x156>
10004292:	4f83      	ldr	r7, [pc, #524]	; (100044a0 <__aeabi_dsub+0x354>)
10004294:	42b9      	cmp	r1, r7
10004296:	d100      	bne.n	1000429a <__aeabi_dsub+0x14e>
10004298:	e0b0      	b.n	100043fc <__aeabi_dsub+0x2b0>
1000429a:	4a82      	ldr	r2, [pc, #520]	; (100044a4 <__aeabi_dsub+0x358>)
1000429c:	1c0f      	adds	r7, r1, #0
1000429e:	4013      	ands	r3, r2
100042a0:	3101      	adds	r1, #1
100042a2:	08f2      	lsrs	r2, r6, #3
100042a4:	0549      	lsls	r1, r1, #21
100042a6:	075e      	lsls	r6, r3, #29
100042a8:	4332      	orrs	r2, r6
100042aa:	08db      	lsrs	r3, r3, #3
100042ac:	0d48      	lsrs	r0, r1, #21
100042ae:	2801      	cmp	r0, #1
100042b0:	dc00      	bgt.n	100042b4 <__aeabi_dsub+0x168>
100042b2:	e079      	b.n	100043a8 <__aeabi_dsub+0x25c>
100042b4:	031b      	lsls	r3, r3, #12
100042b6:	0578      	lsls	r0, r7, #21
100042b8:	0b1e      	lsrs	r6, r3, #12
100042ba:	0d47      	lsrs	r7, r0, #21
100042bc:	2000      	movs	r0, #0
100042be:	2100      	movs	r1, #0
100042c0:	0d09      	lsrs	r1, r1, #20
100042c2:	057d      	lsls	r5, r7, #21
100042c4:	050b      	lsls	r3, r1, #20
100042c6:	4f78      	ldr	r7, [pc, #480]	; (100044a8 <__aeabi_dsub+0x35c>)
100042c8:	431e      	orrs	r6, r3
100042ca:	1c10      	adds	r0, r2, #0
100042cc:	4037      	ands	r7, r6
100042ce:	086a      	lsrs	r2, r5, #1
100042d0:	4317      	orrs	r7, r2
100042d2:	007e      	lsls	r6, r7, #1
100042d4:	0871      	lsrs	r1, r6, #1
100042d6:	07e4      	lsls	r4, r4, #31
100042d8:	4321      	orrs	r1, r4
100042da:	bc1c      	pop	{r2, r3, r4}
100042dc:	4690      	mov	r8, r2
100042de:	4699      	mov	r9, r3
100042e0:	46a2      	mov	sl, r4
100042e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100042e4:	1ab3      	subs	r3, r6, r2
100042e6:	2b00      	cmp	r3, #0
100042e8:	dc00      	bgt.n	100042ec <__aeabi_dsub+0x1a0>
100042ea:	e0a6      	b.n	1000443a <__aeabi_dsub+0x2ee>
100042ec:	2a00      	cmp	r2, #0
100042ee:	d03e      	beq.n	1000436e <__aeabi_dsub+0x222>
100042f0:	4a6b      	ldr	r2, [pc, #428]	; (100044a0 <__aeabi_dsub+0x354>)
100042f2:	4296      	cmp	r6, r2
100042f4:	d04e      	beq.n	10004394 <__aeabi_dsub+0x248>
100042f6:	2180      	movs	r1, #128	; 0x80
100042f8:	040f      	lsls	r7, r1, #16
100042fa:	4338      	orrs	r0, r7
100042fc:	2b38      	cmp	r3, #56	; 0x38
100042fe:	dc00      	bgt.n	10004302 <__aeabi_dsub+0x1b6>
10004300:	e118      	b.n	10004534 <__aeabi_dsub+0x3e8>
10004302:	4653      	mov	r3, sl
10004304:	4318      	orrs	r0, r3
10004306:	2700      	movs	r7, #0
10004308:	2200      	movs	r2, #0
1000430a:	2800      	cmp	r0, #0
1000430c:	d000      	beq.n	10004310 <__aeabi_dsub+0x1c4>
1000430e:	2201      	movs	r2, #1
10004310:	1952      	adds	r2, r2, r5
10004312:	42aa      	cmp	r2, r5
10004314:	41ad      	sbcs	r5, r5
10004316:	4467      	add	r7, ip
10004318:	426b      	negs	r3, r5
1000431a:	18fb      	adds	r3, r7, r3
1000431c:	1c15      	adds	r5, r2, #0
1000431e:	1c37      	adds	r7, r6, #0
10004320:	021e      	lsls	r6, r3, #8
10004322:	d53f      	bpl.n	100043a4 <__aeabi_dsub+0x258>
10004324:	485e      	ldr	r0, [pc, #376]	; (100044a0 <__aeabi_dsub+0x354>)
10004326:	1c7e      	adds	r6, r7, #1
10004328:	4286      	cmp	r6, r0
1000432a:	d100      	bne.n	1000432e <__aeabi_dsub+0x1e2>
1000432c:	e17b      	b.n	10004626 <__aeabi_dsub+0x4da>
1000432e:	495d      	ldr	r1, [pc, #372]	; (100044a4 <__aeabi_dsub+0x358>)
10004330:	2201      	movs	r2, #1
10004332:	402a      	ands	r2, r5
10004334:	400b      	ands	r3, r1
10004336:	0868      	lsrs	r0, r5, #1
10004338:	1c15      	adds	r5, r2, #0
1000433a:	07d9      	lsls	r1, r3, #31
1000433c:	4305      	orrs	r5, r0
1000433e:	430d      	orrs	r5, r1
10004340:	085b      	lsrs	r3, r3, #1
10004342:	1cb9      	adds	r1, r7, #2
10004344:	1c37      	adds	r7, r6, #0
10004346:	e793      	b.n	10004270 <__aeabi_dsub+0x124>
10004348:	4301      	orrs	r1, r0
1000434a:	d100      	bne.n	1000434e <__aeabi_dsub+0x202>
1000434c:	e71b      	b.n	10004186 <__aeabi_dsub+0x3a>
1000434e:	e71c      	b.n	1000418a <__aeabi_dsub+0x3e>
10004350:	1c71      	adds	r1, r6, #1
10004352:	1c37      	adds	r7, r6, #0
10004354:	260f      	movs	r6, #15
10004356:	4663      	mov	r3, ip
10004358:	402e      	ands	r6, r5
1000435a:	2e04      	cmp	r6, #4
1000435c:	d000      	beq.n	10004360 <__aeabi_dsub+0x214>
1000435e:	e78c      	b.n	1000427a <__aeabi_dsub+0x12e>
10004360:	2280      	movs	r2, #128	; 0x80
10004362:	2601      	movs	r6, #1
10004364:	0410      	lsls	r0, r2, #16
10004366:	4034      	ands	r4, r6
10004368:	4018      	ands	r0, r3
1000436a:	1c2e      	adds	r6, r5, #0
1000436c:	e78f      	b.n	1000428e <__aeabi_dsub+0x142>
1000436e:	4652      	mov	r2, sl
10004370:	4302      	orrs	r2, r0
10004372:	d0ed      	beq.n	10004350 <__aeabi_dsub+0x204>
10004374:	3b01      	subs	r3, #1
10004376:	2b00      	cmp	r3, #0
10004378:	d109      	bne.n	1000438e <__aeabi_dsub+0x242>
1000437a:	4657      	mov	r7, sl
1000437c:	1979      	adds	r1, r7, r5
1000437e:	42a9      	cmp	r1, r5
10004380:	4192      	sbcs	r2, r2
10004382:	4255      	negs	r5, r2
10004384:	4460      	add	r0, ip
10004386:	1943      	adds	r3, r0, r5
10004388:	1c37      	adds	r7, r6, #0
1000438a:	1c0d      	adds	r5, r1, #0
1000438c:	e7c8      	b.n	10004320 <__aeabi_dsub+0x1d4>
1000438e:	4944      	ldr	r1, [pc, #272]	; (100044a0 <__aeabi_dsub+0x354>)
10004390:	428e      	cmp	r6, r1
10004392:	d1b3      	bne.n	100042fc <__aeabi_dsub+0x1b0>
10004394:	2080      	movs	r0, #128	; 0x80
10004396:	4663      	mov	r3, ip
10004398:	0101      	lsls	r1, r0, #4
1000439a:	1c37      	adds	r7, r6, #0
1000439c:	e768      	b.n	10004270 <__aeabi_dsub+0x124>
1000439e:	1abf      	subs	r7, r7, r2
100043a0:	4a40      	ldr	r2, [pc, #256]	; (100044a4 <__aeabi_dsub+0x358>)
100043a2:	4013      	ands	r3, r2
100043a4:	1c79      	adds	r1, r7, #1
100043a6:	e763      	b.n	10004270 <__aeabi_dsub+0x124>
100043a8:	1c15      	adds	r5, r2, #0
100043aa:	431d      	orrs	r5, r3
100043ac:	d100      	bne.n	100043b0 <__aeabi_dsub+0x264>
100043ae:	e221      	b.n	100047f4 <__aeabi_dsub+0x6a8>
100043b0:	2f00      	cmp	r7, #0
100043b2:	d03e      	beq.n	10004432 <__aeabi_dsub+0x2e6>
100043b4:	2680      	movs	r6, #128	; 0x80
100043b6:	0331      	lsls	r1, r6, #12
100043b8:	430b      	orrs	r3, r1
100043ba:	e77b      	b.n	100042b4 <__aeabi_dsub+0x168>
100043bc:	2f00      	cmp	r7, #0
100043be:	d000      	beq.n	100043c2 <__aeabi_dsub+0x276>
100043c0:	e086      	b.n	100044d0 <__aeabi_dsub+0x384>
100043c2:	1c72      	adds	r2, r6, #1
100043c4:	0551      	lsls	r1, r2, #21
100043c6:	0d4b      	lsrs	r3, r1, #21
100043c8:	2b01      	cmp	r3, #1
100043ca:	dc00      	bgt.n	100043ce <__aeabi_dsub+0x282>
100043cc:	e0f0      	b.n	100045b0 <__aeabi_dsub+0x464>
100043ce:	4657      	mov	r7, sl
100043d0:	1bea      	subs	r2, r5, r7
100043d2:	4295      	cmp	r5, r2
100043d4:	419b      	sbcs	r3, r3
100043d6:	4667      	mov	r7, ip
100043d8:	1a39      	subs	r1, r7, r0
100043da:	425b      	negs	r3, r3
100043dc:	1ac9      	subs	r1, r1, r3
100043de:	4688      	mov	r8, r1
100043e0:	020b      	lsls	r3, r1, #8
100043e2:	d400      	bmi.n	100043e6 <__aeabi_dsub+0x29a>
100043e4:	e09d      	b.n	10004522 <__aeabi_dsub+0x3d6>
100043e6:	4654      	mov	r4, sl
100043e8:	1b65      	subs	r5, r4, r5
100043ea:	45aa      	cmp	sl, r5
100043ec:	4192      	sbcs	r2, r2
100043ee:	1bc0      	subs	r0, r0, r7
100043f0:	4257      	negs	r7, r2
100043f2:	1bc3      	subs	r3, r0, r7
100043f4:	4698      	mov	r8, r3
100043f6:	1c37      	adds	r7, r6, #0
100043f8:	464c      	mov	r4, r9
100043fa:	e70e      	b.n	1000421a <__aeabi_dsub+0xce>
100043fc:	1c0f      	adds	r7, r1, #0
100043fe:	2600      	movs	r6, #0
10004400:	2200      	movs	r2, #0
10004402:	e75b      	b.n	100042bc <__aeabi_dsub+0x170>
10004404:	1c28      	adds	r0, r5, #0
10004406:	f000 fac7 	bl	10004998 <__clzsi2>
1000440a:	3020      	adds	r0, #32
1000440c:	1c02      	adds	r2, r0, #0
1000440e:	3a08      	subs	r2, #8
10004410:	2a1f      	cmp	r2, #31
10004412:	dc00      	bgt.n	10004416 <__aeabi_dsub+0x2ca>
10004414:	e70d      	b.n	10004232 <__aeabi_dsub+0xe6>
10004416:	3828      	subs	r0, #40	; 0x28
10004418:	4085      	lsls	r5, r0
1000441a:	1c2b      	adds	r3, r5, #0
1000441c:	2500      	movs	r5, #0
1000441e:	e711      	b.n	10004244 <__aeabi_dsub+0xf8>
10004420:	4657      	mov	r7, sl
10004422:	4338      	orrs	r0, r7
10004424:	2300      	movs	r3, #0
10004426:	2200      	movs	r2, #0
10004428:	2800      	cmp	r0, #0
1000442a:	d100      	bne.n	1000442e <__aeabi_dsub+0x2e2>
1000442c:	e6e6      	b.n	100041fc <__aeabi_dsub+0xb0>
1000442e:	2201      	movs	r2, #1
10004430:	e6e4      	b.n	100041fc <__aeabi_dsub+0xb0>
10004432:	031d      	lsls	r5, r3, #12
10004434:	0b2e      	lsrs	r6, r5, #12
10004436:	2700      	movs	r7, #0
10004438:	e740      	b.n	100042bc <__aeabi_dsub+0x170>
1000443a:	2b00      	cmp	r3, #0
1000443c:	d000      	beq.n	10004440 <__aeabi_dsub+0x2f4>
1000443e:	e0d9      	b.n	100045f4 <__aeabi_dsub+0x4a8>
10004440:	1c77      	adds	r7, r6, #1
10004442:	0579      	lsls	r1, r7, #21
10004444:	0d4a      	lsrs	r2, r1, #21
10004446:	2a01      	cmp	r2, #1
10004448:	dc00      	bgt.n	1000444c <__aeabi_dsub+0x300>
1000444a:	e095      	b.n	10004578 <__aeabi_dsub+0x42c>
1000444c:	4b14      	ldr	r3, [pc, #80]	; (100044a0 <__aeabi_dsub+0x354>)
1000444e:	429f      	cmp	r7, r3
10004450:	d100      	bne.n	10004454 <__aeabi_dsub+0x308>
10004452:	e0fe      	b.n	10004652 <__aeabi_dsub+0x506>
10004454:	4651      	mov	r1, sl
10004456:	1949      	adds	r1, r1, r5
10004458:	42a9      	cmp	r1, r5
1000445a:	41ad      	sbcs	r5, r5
1000445c:	4662      	mov	r2, ip
1000445e:	426b      	negs	r3, r5
10004460:	1880      	adds	r0, r0, r2
10004462:	18c2      	adds	r2, r0, r3
10004464:	0849      	lsrs	r1, r1, #1
10004466:	07d5      	lsls	r5, r2, #31
10004468:	430d      	orrs	r5, r1
1000446a:	0853      	lsrs	r3, r2, #1
1000446c:	1cb1      	adds	r1, r6, #2
1000446e:	e6ff      	b.n	10004270 <__aeabi_dsub+0x124>
10004470:	490b      	ldr	r1, [pc, #44]	; (100044a0 <__aeabi_dsub+0x354>)
10004472:	428e      	cmp	r6, r1
10004474:	d000      	beq.n	10004478 <__aeabi_dsub+0x32c>
10004476:	e6ac      	b.n	100041d2 <__aeabi_dsub+0x86>
10004478:	e78c      	b.n	10004394 <__aeabi_dsub+0x248>
1000447a:	1c06      	adds	r6, r0, #0
1000447c:	3e1f      	subs	r6, #31
1000447e:	1c1f      	adds	r7, r3, #0
10004480:	40f7      	lsrs	r7, r6
10004482:	1c3e      	adds	r6, r7, #0
10004484:	2920      	cmp	r1, #32
10004486:	d073      	beq.n	10004570 <__aeabi_dsub+0x424>
10004488:	223f      	movs	r2, #63	; 0x3f
1000448a:	1a10      	subs	r0, r2, r0
1000448c:	4083      	lsls	r3, r0
1000448e:	431d      	orrs	r5, r3
10004490:	1e6b      	subs	r3, r5, #1
10004492:	419d      	sbcs	r5, r3
10004494:	4335      	orrs	r5, r6
10004496:	2101      	movs	r1, #1
10004498:	2300      	movs	r3, #0
1000449a:	2700      	movs	r7, #0
1000449c:	e6e8      	b.n	10004270 <__aeabi_dsub+0x124>
1000449e:	46c0      	nop			; (mov r8, r8)
100044a0:	000007ff 	.word	0x000007ff
100044a4:	ff7fffff 	.word	0xff7fffff
100044a8:	800fffff 	.word	0x800fffff
100044ac:	1c3b      	adds	r3, r7, #0
100044ae:	3b20      	subs	r3, #32
100044b0:	1c01      	adds	r1, r0, #0
100044b2:	40d9      	lsrs	r1, r3
100044b4:	1c0b      	adds	r3, r1, #0
100044b6:	2f20      	cmp	r7, #32
100044b8:	d05c      	beq.n	10004574 <__aeabi_dsub+0x428>
100044ba:	2240      	movs	r2, #64	; 0x40
100044bc:	1bd7      	subs	r7, r2, r7
100044be:	40b8      	lsls	r0, r7
100044c0:	1c02      	adds	r2, r0, #0
100044c2:	4650      	mov	r0, sl
100044c4:	4302      	orrs	r2, r0
100044c6:	1e51      	subs	r1, r2, #1
100044c8:	418a      	sbcs	r2, r1
100044ca:	431a      	orrs	r2, r3
100044cc:	2300      	movs	r3, #0
100044ce:	e695      	b.n	100041fc <__aeabi_dsub+0xb0>
100044d0:	427f      	negs	r7, r7
100044d2:	2e00      	cmp	r6, #0
100044d4:	d040      	beq.n	10004558 <__aeabi_dsub+0x40c>
100044d6:	4cca      	ldr	r4, [pc, #808]	; (10004800 <__aeabi_dsub+0x6b4>)
100044d8:	42a2      	cmp	r2, r4
100044da:	d100      	bne.n	100044de <__aeabi_dsub+0x392>
100044dc:	e11f      	b.n	1000471e <__aeabi_dsub+0x5d2>
100044de:	2180      	movs	r1, #128	; 0x80
100044e0:	4666      	mov	r6, ip
100044e2:	040b      	lsls	r3, r1, #16
100044e4:	431e      	orrs	r6, r3
100044e6:	46b4      	mov	ip, r6
100044e8:	2f38      	cmp	r7, #56	; 0x38
100044ea:	dd00      	ble.n	100044ee <__aeabi_dsub+0x3a2>
100044ec:	e0a9      	b.n	10004642 <__aeabi_dsub+0x4f6>
100044ee:	2f1f      	cmp	r7, #31
100044f0:	dd00      	ble.n	100044f4 <__aeabi_dsub+0x3a8>
100044f2:	e13d      	b.n	10004770 <__aeabi_dsub+0x624>
100044f4:	2320      	movs	r3, #32
100044f6:	1bde      	subs	r6, r3, r7
100044f8:	1c29      	adds	r1, r5, #0
100044fa:	4664      	mov	r4, ip
100044fc:	40b4      	lsls	r4, r6
100044fe:	40f9      	lsrs	r1, r7
10004500:	40b5      	lsls	r5, r6
10004502:	1e6b      	subs	r3, r5, #1
10004504:	419d      	sbcs	r5, r3
10004506:	4321      	orrs	r1, r4
10004508:	4663      	mov	r3, ip
1000450a:	430d      	orrs	r5, r1
1000450c:	40fb      	lsrs	r3, r7
1000450e:	4657      	mov	r7, sl
10004510:	1b7d      	subs	r5, r7, r5
10004512:	1ac0      	subs	r0, r0, r3
10004514:	45aa      	cmp	sl, r5
10004516:	419b      	sbcs	r3, r3
10004518:	425f      	negs	r7, r3
1000451a:	1bc3      	subs	r3, r0, r7
1000451c:	464c      	mov	r4, r9
1000451e:	1c17      	adds	r7, r2, #0
10004520:	e675      	b.n	1000420e <__aeabi_dsub+0xc2>
10004522:	1c0d      	adds	r5, r1, #0
10004524:	4315      	orrs	r5, r2
10004526:	d120      	bne.n	1000456a <__aeabi_dsub+0x41e>
10004528:	2400      	movs	r4, #0
1000452a:	2101      	movs	r1, #1
1000452c:	2300      	movs	r3, #0
1000452e:	2604      	movs	r6, #4
10004530:	2700      	movs	r7, #0
10004532:	e6b6      	b.n	100042a2 <__aeabi_dsub+0x156>
10004534:	2b1f      	cmp	r3, #31
10004536:	dc4a      	bgt.n	100045ce <__aeabi_dsub+0x482>
10004538:	2120      	movs	r1, #32
1000453a:	1ac9      	subs	r1, r1, r3
1000453c:	1c07      	adds	r7, r0, #0
1000453e:	4652      	mov	r2, sl
10004540:	408f      	lsls	r7, r1
10004542:	40da      	lsrs	r2, r3
10004544:	433a      	orrs	r2, r7
10004546:	4657      	mov	r7, sl
10004548:	408f      	lsls	r7, r1
1000454a:	1c39      	adds	r1, r7, #0
1000454c:	1e4f      	subs	r7, r1, #1
1000454e:	41b9      	sbcs	r1, r7
10004550:	40d8      	lsrs	r0, r3
10004552:	430a      	orrs	r2, r1
10004554:	1c07      	adds	r7, r0, #0
10004556:	e6db      	b.n	10004310 <__aeabi_dsub+0x1c4>
10004558:	4664      	mov	r4, ip
1000455a:	432c      	orrs	r4, r5
1000455c:	d169      	bne.n	10004632 <__aeabi_dsub+0x4e6>
1000455e:	1c51      	adds	r1, r2, #1
10004560:	1c03      	adds	r3, r0, #0
10004562:	4655      	mov	r5, sl
10004564:	1c17      	adds	r7, r2, #0
10004566:	464c      	mov	r4, r9
10004568:	e682      	b.n	10004270 <__aeabi_dsub+0x124>
1000456a:	1c15      	adds	r5, r2, #0
1000456c:	1c37      	adds	r7, r6, #0
1000456e:	e654      	b.n	1000421a <__aeabi_dsub+0xce>
10004570:	2300      	movs	r3, #0
10004572:	e78c      	b.n	1000448e <__aeabi_dsub+0x342>
10004574:	2200      	movs	r2, #0
10004576:	e7a4      	b.n	100044c2 <__aeabi_dsub+0x376>
10004578:	4667      	mov	r7, ip
1000457a:	432f      	orrs	r7, r5
1000457c:	2e00      	cmp	r6, #0
1000457e:	d000      	beq.n	10004582 <__aeabi_dsub+0x436>
10004580:	e0d4      	b.n	1000472c <__aeabi_dsub+0x5e0>
10004582:	2f00      	cmp	r7, #0
10004584:	d100      	bne.n	10004588 <__aeabi_dsub+0x43c>
10004586:	e126      	b.n	100047d6 <__aeabi_dsub+0x68a>
10004588:	4653      	mov	r3, sl
1000458a:	4303      	orrs	r3, r0
1000458c:	d100      	bne.n	10004590 <__aeabi_dsub+0x444>
1000458e:	e0e4      	b.n	1000475a <__aeabi_dsub+0x60e>
10004590:	4651      	mov	r1, sl
10004592:	194f      	adds	r7, r1, r5
10004594:	42af      	cmp	r7, r5
10004596:	41ad      	sbcs	r5, r5
10004598:	4460      	add	r0, ip
1000459a:	426e      	negs	r6, r5
1000459c:	1983      	adds	r3, r0, r6
1000459e:	021e      	lsls	r6, r3, #8
100045a0:	d400      	bmi.n	100045a4 <__aeabi_dsub+0x458>
100045a2:	e14e      	b.n	10004842 <__aeabi_dsub+0x6f6>
100045a4:	4897      	ldr	r0, [pc, #604]	; (10004804 <__aeabi_dsub+0x6b8>)
100045a6:	1c3d      	adds	r5, r7, #0
100045a8:	4003      	ands	r3, r0
100045aa:	2102      	movs	r1, #2
100045ac:	2701      	movs	r7, #1
100045ae:	e65f      	b.n	10004270 <__aeabi_dsub+0x124>
100045b0:	4661      	mov	r1, ip
100045b2:	4329      	orrs	r1, r5
100045b4:	2e00      	cmp	r6, #0
100045b6:	d129      	bne.n	1000460c <__aeabi_dsub+0x4c0>
100045b8:	2900      	cmp	r1, #0
100045ba:	d176      	bne.n	100046aa <__aeabi_dsub+0x55e>
100045bc:	4651      	mov	r1, sl
100045be:	4301      	orrs	r1, r0
100045c0:	d0b2      	beq.n	10004528 <__aeabi_dsub+0x3dc>
100045c2:	1c03      	adds	r3, r0, #0
100045c4:	4655      	mov	r5, sl
100045c6:	464c      	mov	r4, r9
100045c8:	2101      	movs	r1, #1
100045ca:	2700      	movs	r7, #0
100045cc:	e650      	b.n	10004270 <__aeabi_dsub+0x124>
100045ce:	1c1f      	adds	r7, r3, #0
100045d0:	3f20      	subs	r7, #32
100045d2:	1c01      	adds	r1, r0, #0
100045d4:	40f9      	lsrs	r1, r7
100045d6:	1c0f      	adds	r7, r1, #0
100045d8:	2b20      	cmp	r3, #32
100045da:	d100      	bne.n	100045de <__aeabi_dsub+0x492>
100045dc:	e0c6      	b.n	1000476c <__aeabi_dsub+0x620>
100045de:	2240      	movs	r2, #64	; 0x40
100045e0:	1ad3      	subs	r3, r2, r3
100045e2:	4098      	lsls	r0, r3
100045e4:	1c02      	adds	r2, r0, #0
100045e6:	4650      	mov	r0, sl
100045e8:	4302      	orrs	r2, r0
100045ea:	1e53      	subs	r3, r2, #1
100045ec:	419a      	sbcs	r2, r3
100045ee:	433a      	orrs	r2, r7
100045f0:	2700      	movs	r7, #0
100045f2:	e68d      	b.n	10004310 <__aeabi_dsub+0x1c4>
100045f4:	425b      	negs	r3, r3
100045f6:	2e00      	cmp	r6, #0
100045f8:	d130      	bne.n	1000465c <__aeabi_dsub+0x510>
100045fa:	4667      	mov	r7, ip
100045fc:	432f      	orrs	r7, r5
100045fe:	d000      	beq.n	10004602 <__aeabi_dsub+0x4b6>
10004600:	e0c8      	b.n	10004794 <__aeabi_dsub+0x648>
10004602:	1c51      	adds	r1, r2, #1
10004604:	1c03      	adds	r3, r0, #0
10004606:	4655      	mov	r5, sl
10004608:	1c17      	adds	r7, r2, #0
1000460a:	e631      	b.n	10004270 <__aeabi_dsub+0x124>
1000460c:	2900      	cmp	r1, #0
1000460e:	d165      	bne.n	100046dc <__aeabi_dsub+0x590>
10004610:	4657      	mov	r7, sl
10004612:	4307      	orrs	r7, r0
10004614:	d100      	bne.n	10004618 <__aeabi_dsub+0x4cc>
10004616:	e0c8      	b.n	100047aa <__aeabi_dsub+0x65e>
10004618:	1c03      	adds	r3, r0, #0
1000461a:	2080      	movs	r0, #128	; 0x80
1000461c:	4655      	mov	r5, sl
1000461e:	464c      	mov	r4, r9
10004620:	0101      	lsls	r1, r0, #4
10004622:	4f77      	ldr	r7, [pc, #476]	; (10004800 <__aeabi_dsub+0x6b4>)
10004624:	e624      	b.n	10004270 <__aeabi_dsub+0x124>
10004626:	2380      	movs	r3, #128	; 0x80
10004628:	1c37      	adds	r7, r6, #0
1000462a:	0119      	lsls	r1, r3, #4
1000462c:	2604      	movs	r6, #4
1000462e:	2300      	movs	r3, #0
10004630:	e637      	b.n	100042a2 <__aeabi_dsub+0x156>
10004632:	3f01      	subs	r7, #1
10004634:	2f00      	cmp	r7, #0
10004636:	d16e      	bne.n	10004716 <__aeabi_dsub+0x5ca>
10004638:	4654      	mov	r4, sl
1000463a:	4661      	mov	r1, ip
1000463c:	1b65      	subs	r5, r4, r5
1000463e:	1a40      	subs	r0, r0, r1
10004640:	e768      	b.n	10004514 <__aeabi_dsub+0x3c8>
10004642:	4667      	mov	r7, ip
10004644:	433d      	orrs	r5, r7
10004646:	2300      	movs	r3, #0
10004648:	2d00      	cmp	r5, #0
1000464a:	d100      	bne.n	1000464e <__aeabi_dsub+0x502>
1000464c:	e75f      	b.n	1000450e <__aeabi_dsub+0x3c2>
1000464e:	2501      	movs	r5, #1
10004650:	e75d      	b.n	1000450e <__aeabi_dsub+0x3c2>
10004652:	2680      	movs	r6, #128	; 0x80
10004654:	0131      	lsls	r1, r6, #4
10004656:	2300      	movs	r3, #0
10004658:	2604      	movs	r6, #4
1000465a:	e622      	b.n	100042a2 <__aeabi_dsub+0x156>
1000465c:	4968      	ldr	r1, [pc, #416]	; (10004800 <__aeabi_dsub+0x6b4>)
1000465e:	428a      	cmp	r2, r1
10004660:	d100      	bne.n	10004664 <__aeabi_dsub+0x518>
10004662:	e0c1      	b.n	100047e8 <__aeabi_dsub+0x69c>
10004664:	2780      	movs	r7, #128	; 0x80
10004666:	4666      	mov	r6, ip
10004668:	0439      	lsls	r1, r7, #16
1000466a:	430e      	orrs	r6, r1
1000466c:	46b4      	mov	ip, r6
1000466e:	2b38      	cmp	r3, #56	; 0x38
10004670:	dd00      	ble.n	10004674 <__aeabi_dsub+0x528>
10004672:	e0a2      	b.n	100047ba <__aeabi_dsub+0x66e>
10004674:	2b1f      	cmp	r3, #31
10004676:	dd00      	ble.n	1000467a <__aeabi_dsub+0x52e>
10004678:	e0d0      	b.n	1000481c <__aeabi_dsub+0x6d0>
1000467a:	2120      	movs	r1, #32
1000467c:	1ac9      	subs	r1, r1, r3
1000467e:	1c2e      	adds	r6, r5, #0
10004680:	4667      	mov	r7, ip
10004682:	408f      	lsls	r7, r1
10004684:	408d      	lsls	r5, r1
10004686:	40de      	lsrs	r6, r3
10004688:	433e      	orrs	r6, r7
1000468a:	1c29      	adds	r1, r5, #0
1000468c:	4667      	mov	r7, ip
1000468e:	1e4d      	subs	r5, r1, #1
10004690:	41a9      	sbcs	r1, r5
10004692:	40df      	lsrs	r7, r3
10004694:	1c35      	adds	r5, r6, #0
10004696:	430d      	orrs	r5, r1
10004698:	1c3e      	adds	r6, r7, #0
1000469a:	4455      	add	r5, sl
1000469c:	4555      	cmp	r5, sl
1000469e:	419b      	sbcs	r3, r3
100046a0:	1830      	adds	r0, r6, r0
100046a2:	425e      	negs	r6, r3
100046a4:	1983      	adds	r3, r0, r6
100046a6:	1c17      	adds	r7, r2, #0
100046a8:	e63a      	b.n	10004320 <__aeabi_dsub+0x1d4>
100046aa:	4656      	mov	r6, sl
100046ac:	4306      	orrs	r6, r0
100046ae:	d054      	beq.n	1000475a <__aeabi_dsub+0x60e>
100046b0:	4657      	mov	r7, sl
100046b2:	1bea      	subs	r2, r5, r7
100046b4:	4663      	mov	r3, ip
100046b6:	4295      	cmp	r5, r2
100046b8:	41b6      	sbcs	r6, r6
100046ba:	1a19      	subs	r1, r3, r0
100046bc:	4273      	negs	r3, r6
100046be:	1acb      	subs	r3, r1, r3
100046c0:	021e      	lsls	r6, r3, #8
100046c2:	d400      	bmi.n	100046c6 <__aeabi_dsub+0x57a>
100046c4:	e0a2      	b.n	1000480c <__aeabi_dsub+0x6c0>
100046c6:	1b7d      	subs	r5, r7, r5
100046c8:	4664      	mov	r4, ip
100046ca:	45aa      	cmp	sl, r5
100046cc:	41bf      	sbcs	r7, r7
100046ce:	1b00      	subs	r0, r0, r4
100046d0:	427a      	negs	r2, r7
100046d2:	1a83      	subs	r3, r0, r2
100046d4:	464c      	mov	r4, r9
100046d6:	2101      	movs	r1, #1
100046d8:	2700      	movs	r7, #0
100046da:	e5c9      	b.n	10004270 <__aeabi_dsub+0x124>
100046dc:	4656      	mov	r6, sl
100046de:	4306      	orrs	r6, r0
100046e0:	d03f      	beq.n	10004762 <__aeabi_dsub+0x616>
100046e2:	4662      	mov	r2, ip
100046e4:	2180      	movs	r1, #128	; 0x80
100046e6:	0757      	lsls	r7, r2, #29
100046e8:	08ed      	lsrs	r5, r5, #3
100046ea:	08d3      	lsrs	r3, r2, #3
100046ec:	030a      	lsls	r2, r1, #12
100046ee:	433d      	orrs	r5, r7
100046f0:	4213      	tst	r3, r2
100046f2:	d008      	beq.n	10004706 <__aeabi_dsub+0x5ba>
100046f4:	08c6      	lsrs	r6, r0, #3
100046f6:	4216      	tst	r6, r2
100046f8:	d105      	bne.n	10004706 <__aeabi_dsub+0x5ba>
100046fa:	4655      	mov	r5, sl
100046fc:	08ec      	lsrs	r4, r5, #3
100046fe:	0745      	lsls	r5, r0, #29
10004700:	4325      	orrs	r5, r4
10004702:	1c33      	adds	r3, r6, #0
10004704:	464c      	mov	r4, r9
10004706:	0f68      	lsrs	r0, r5, #29
10004708:	00db      	lsls	r3, r3, #3
1000470a:	2680      	movs	r6, #128	; 0x80
1000470c:	4303      	orrs	r3, r0
1000470e:	00ed      	lsls	r5, r5, #3
10004710:	0131      	lsls	r1, r6, #4
10004712:	4f3b      	ldr	r7, [pc, #236]	; (10004800 <__aeabi_dsub+0x6b4>)
10004714:	e5ac      	b.n	10004270 <__aeabi_dsub+0x124>
10004716:	493a      	ldr	r1, [pc, #232]	; (10004800 <__aeabi_dsub+0x6b4>)
10004718:	428a      	cmp	r2, r1
1000471a:	d000      	beq.n	1000471e <__aeabi_dsub+0x5d2>
1000471c:	e6e4      	b.n	100044e8 <__aeabi_dsub+0x39c>
1000471e:	2680      	movs	r6, #128	; 0x80
10004720:	1c03      	adds	r3, r0, #0
10004722:	4655      	mov	r5, sl
10004724:	464c      	mov	r4, r9
10004726:	0131      	lsls	r1, r6, #4
10004728:	1c17      	adds	r7, r2, #0
1000472a:	e5a1      	b.n	10004270 <__aeabi_dsub+0x124>
1000472c:	2f00      	cmp	r7, #0
1000472e:	d04c      	beq.n	100047ca <__aeabi_dsub+0x67e>
10004730:	4653      	mov	r3, sl
10004732:	4303      	orrs	r3, r0
10004734:	d015      	beq.n	10004762 <__aeabi_dsub+0x616>
10004736:	4662      	mov	r2, ip
10004738:	2680      	movs	r6, #128	; 0x80
1000473a:	08ed      	lsrs	r5, r5, #3
1000473c:	0751      	lsls	r1, r2, #29
1000473e:	08d3      	lsrs	r3, r2, #3
10004740:	0337      	lsls	r7, r6, #12
10004742:	430d      	orrs	r5, r1
10004744:	423b      	tst	r3, r7
10004746:	d0de      	beq.n	10004706 <__aeabi_dsub+0x5ba>
10004748:	08c2      	lsrs	r2, r0, #3
1000474a:	423a      	tst	r2, r7
1000474c:	d1db      	bne.n	10004706 <__aeabi_dsub+0x5ba>
1000474e:	4655      	mov	r5, sl
10004750:	08e9      	lsrs	r1, r5, #3
10004752:	0745      	lsls	r5, r0, #29
10004754:	1c13      	adds	r3, r2, #0
10004756:	430d      	orrs	r5, r1
10004758:	e7d5      	b.n	10004706 <__aeabi_dsub+0x5ba>
1000475a:	4663      	mov	r3, ip
1000475c:	2101      	movs	r1, #1
1000475e:	2700      	movs	r7, #0
10004760:	e586      	b.n	10004270 <__aeabi_dsub+0x124>
10004762:	2780      	movs	r7, #128	; 0x80
10004764:	0139      	lsls	r1, r7, #4
10004766:	4663      	mov	r3, ip
10004768:	4f25      	ldr	r7, [pc, #148]	; (10004800 <__aeabi_dsub+0x6b4>)
1000476a:	e581      	b.n	10004270 <__aeabi_dsub+0x124>
1000476c:	2200      	movs	r2, #0
1000476e:	e73a      	b.n	100045e6 <__aeabi_dsub+0x49a>
10004770:	1c3c      	adds	r4, r7, #0
10004772:	3c20      	subs	r4, #32
10004774:	4666      	mov	r6, ip
10004776:	40e6      	lsrs	r6, r4
10004778:	1c33      	adds	r3, r6, #0
1000477a:	2f20      	cmp	r7, #32
1000477c:	d05f      	beq.n	1000483e <__aeabi_dsub+0x6f2>
1000477e:	2440      	movs	r4, #64	; 0x40
10004780:	1be7      	subs	r7, r4, r7
10004782:	4666      	mov	r6, ip
10004784:	40be      	lsls	r6, r7
10004786:	1c31      	adds	r1, r6, #0
10004788:	430d      	orrs	r5, r1
1000478a:	1e69      	subs	r1, r5, #1
1000478c:	418d      	sbcs	r5, r1
1000478e:	431d      	orrs	r5, r3
10004790:	2300      	movs	r3, #0
10004792:	e6bc      	b.n	1000450e <__aeabi_dsub+0x3c2>
10004794:	3b01      	subs	r3, #1
10004796:	2b00      	cmp	r3, #0
10004798:	d122      	bne.n	100047e0 <__aeabi_dsub+0x694>
1000479a:	4455      	add	r5, sl
1000479c:	4555      	cmp	r5, sl
1000479e:	41bf      	sbcs	r7, r7
100047a0:	427b      	negs	r3, r7
100047a2:	4460      	add	r0, ip
100047a4:	18c3      	adds	r3, r0, r3
100047a6:	1c17      	adds	r7, r2, #0
100047a8:	e5ba      	b.n	10004320 <__aeabi_dsub+0x1d4>
100047aa:	2180      	movs	r1, #128	; 0x80
100047ac:	2204      	movs	r2, #4
100047ae:	2400      	movs	r4, #0
100047b0:	0109      	lsls	r1, r1, #4
100047b2:	4b15      	ldr	r3, [pc, #84]	; (10004808 <__aeabi_dsub+0x6bc>)
100047b4:	4256      	negs	r6, r2
100047b6:	4f12      	ldr	r7, [pc, #72]	; (10004800 <__aeabi_dsub+0x6b4>)
100047b8:	e573      	b.n	100042a2 <__aeabi_dsub+0x156>
100047ba:	4663      	mov	r3, ip
100047bc:	431d      	orrs	r5, r3
100047be:	2600      	movs	r6, #0
100047c0:	2d00      	cmp	r5, #0
100047c2:	d100      	bne.n	100047c6 <__aeabi_dsub+0x67a>
100047c4:	e769      	b.n	1000469a <__aeabi_dsub+0x54e>
100047c6:	2501      	movs	r5, #1
100047c8:	e767      	b.n	1000469a <__aeabi_dsub+0x54e>
100047ca:	2280      	movs	r2, #128	; 0x80
100047cc:	1c03      	adds	r3, r0, #0
100047ce:	4655      	mov	r5, sl
100047d0:	0111      	lsls	r1, r2, #4
100047d2:	4f0b      	ldr	r7, [pc, #44]	; (10004800 <__aeabi_dsub+0x6b4>)
100047d4:	e54c      	b.n	10004270 <__aeabi_dsub+0x124>
100047d6:	1c03      	adds	r3, r0, #0
100047d8:	4655      	mov	r5, sl
100047da:	2101      	movs	r1, #1
100047dc:	2700      	movs	r7, #0
100047de:	e547      	b.n	10004270 <__aeabi_dsub+0x124>
100047e0:	4907      	ldr	r1, [pc, #28]	; (10004800 <__aeabi_dsub+0x6b4>)
100047e2:	428a      	cmp	r2, r1
100047e4:	d000      	beq.n	100047e8 <__aeabi_dsub+0x69c>
100047e6:	e742      	b.n	1000466e <__aeabi_dsub+0x522>
100047e8:	2180      	movs	r1, #128	; 0x80
100047ea:	1c03      	adds	r3, r0, #0
100047ec:	4655      	mov	r5, sl
100047ee:	0109      	lsls	r1, r1, #4
100047f0:	1c17      	adds	r7, r2, #0
100047f2:	e53d      	b.n	10004270 <__aeabi_dsub+0x124>
100047f4:	057f      	lsls	r7, r7, #21
100047f6:	0d7f      	lsrs	r7, r7, #21
100047f8:	2600      	movs	r6, #0
100047fa:	2200      	movs	r2, #0
100047fc:	e55e      	b.n	100042bc <__aeabi_dsub+0x170>
100047fe:	46c0      	nop			; (mov r8, r8)
10004800:	000007ff 	.word	0x000007ff
10004804:	ff7fffff 	.word	0xff7fffff
10004808:	007fffff 	.word	0x007fffff
1000480c:	1c1d      	adds	r5, r3, #0
1000480e:	4315      	orrs	r5, r2
10004810:	d100      	bne.n	10004814 <__aeabi_dsub+0x6c8>
10004812:	e689      	b.n	10004528 <__aeabi_dsub+0x3dc>
10004814:	1c15      	adds	r5, r2, #0
10004816:	2101      	movs	r1, #1
10004818:	2700      	movs	r7, #0
1000481a:	e529      	b.n	10004270 <__aeabi_dsub+0x124>
1000481c:	1c1f      	adds	r7, r3, #0
1000481e:	3f20      	subs	r7, #32
10004820:	4661      	mov	r1, ip
10004822:	40f9      	lsrs	r1, r7
10004824:	2b20      	cmp	r3, #32
10004826:	d010      	beq.n	1000484a <__aeabi_dsub+0x6fe>
10004828:	2640      	movs	r6, #64	; 0x40
1000482a:	1af3      	subs	r3, r6, r3
1000482c:	4667      	mov	r7, ip
1000482e:	409f      	lsls	r7, r3
10004830:	1c3b      	adds	r3, r7, #0
10004832:	431d      	orrs	r5, r3
10004834:	1e6b      	subs	r3, r5, #1
10004836:	419d      	sbcs	r5, r3
10004838:	430d      	orrs	r5, r1
1000483a:	2600      	movs	r6, #0
1000483c:	e72d      	b.n	1000469a <__aeabi_dsub+0x54e>
1000483e:	2100      	movs	r1, #0
10004840:	e7a2      	b.n	10004788 <__aeabi_dsub+0x63c>
10004842:	1c3d      	adds	r5, r7, #0
10004844:	2101      	movs	r1, #1
10004846:	2700      	movs	r7, #0
10004848:	e512      	b.n	10004270 <__aeabi_dsub+0x124>
1000484a:	2300      	movs	r3, #0
1000484c:	e7f1      	b.n	10004832 <__aeabi_dsub+0x6e6>
1000484e:	46c0      	nop			; (mov r8, r8)

10004850 <__aeabi_d2iz>:
10004850:	4a13      	ldr	r2, [pc, #76]	; (100048a0 <__aeabi_d2iz+0x50>)
10004852:	030b      	lsls	r3, r1, #12
10004854:	b530      	push	{r4, r5, lr}
10004856:	1c05      	adds	r5, r0, #0
10004858:	0048      	lsls	r0, r1, #1
1000485a:	0b1c      	lsrs	r4, r3, #12
1000485c:	0fc9      	lsrs	r1, r1, #31
1000485e:	0d43      	lsrs	r3, r0, #21
10004860:	2000      	movs	r0, #0
10004862:	4293      	cmp	r3, r2
10004864:	dd11      	ble.n	1000488a <__aeabi_d2iz+0x3a>
10004866:	480f      	ldr	r0, [pc, #60]	; (100048a4 <__aeabi_d2iz+0x54>)
10004868:	4283      	cmp	r3, r0
1000486a:	dc0f      	bgt.n	1000488c <__aeabi_d2iz+0x3c>
1000486c:	2280      	movs	r2, #128	; 0x80
1000486e:	0350      	lsls	r0, r2, #13
10004870:	4a0d      	ldr	r2, [pc, #52]	; (100048a8 <__aeabi_d2iz+0x58>)
10004872:	4304      	orrs	r4, r0
10004874:	1ad0      	subs	r0, r2, r3
10004876:	281f      	cmp	r0, #31
10004878:	dd0b      	ble.n	10004892 <__aeabi_d2iz+0x42>
1000487a:	4d0c      	ldr	r5, [pc, #48]	; (100048ac <__aeabi_d2iz+0x5c>)
1000487c:	1aeb      	subs	r3, r5, r3
1000487e:	40dc      	lsrs	r4, r3
10004880:	1c22      	adds	r2, r4, #0
10004882:	4250      	negs	r0, r2
10004884:	2900      	cmp	r1, #0
10004886:	d100      	bne.n	1000488a <__aeabi_d2iz+0x3a>
10004888:	1c10      	adds	r0, r2, #0
1000488a:	bd30      	pop	{r4, r5, pc}
1000488c:	4c08      	ldr	r4, [pc, #32]	; (100048b0 <__aeabi_d2iz+0x60>)
1000488e:	1908      	adds	r0, r1, r4
10004890:	e7fb      	b.n	1000488a <__aeabi_d2iz+0x3a>
10004892:	40c5      	lsrs	r5, r0
10004894:	4807      	ldr	r0, [pc, #28]	; (100048b4 <__aeabi_d2iz+0x64>)
10004896:	1c2a      	adds	r2, r5, #0
10004898:	181d      	adds	r5, r3, r0
1000489a:	40ac      	lsls	r4, r5
1000489c:	4322      	orrs	r2, r4
1000489e:	e7f0      	b.n	10004882 <__aeabi_d2iz+0x32>
100048a0:	000003fe 	.word	0x000003fe
100048a4:	0000041d 	.word	0x0000041d
100048a8:	00000433 	.word	0x00000433
100048ac:	00000413 	.word	0x00000413
100048b0:	7fffffff 	.word	0x7fffffff
100048b4:	fffffbed 	.word	0xfffffbed

100048b8 <__aeabi_ui2d>:
100048b8:	b570      	push	{r4, r5, r6, lr}
100048ba:	1e04      	subs	r4, r0, #0
100048bc:	d026      	beq.n	1000490c <__aeabi_ui2d+0x54>
100048be:	f000 f86b 	bl	10004998 <__clzsi2>
100048c2:	4914      	ldr	r1, [pc, #80]	; (10004914 <__aeabi_ui2d+0x5c>)
100048c4:	1a0a      	subs	r2, r1, r0
100048c6:	280a      	cmp	r0, #10
100048c8:	dd13      	ble.n	100048f2 <__aeabi_ui2d+0x3a>
100048ca:	380b      	subs	r0, #11
100048cc:	4084      	lsls	r4, r0
100048ce:	0556      	lsls	r6, r2, #21
100048d0:	0324      	lsls	r4, r4, #12
100048d2:	0d72      	lsrs	r2, r6, #21
100048d4:	0b25      	lsrs	r5, r4, #12
100048d6:	2600      	movs	r6, #0
100048d8:	2000      	movs	r0, #0
100048da:	2100      	movs	r1, #0
100048dc:	1c30      	adds	r0, r6, #0
100048de:	0d0e      	lsrs	r6, r1, #20
100048e0:	0533      	lsls	r3, r6, #20
100048e2:	4c0d      	ldr	r4, [pc, #52]	; (10004918 <__aeabi_ui2d+0x60>)
100048e4:	432b      	orrs	r3, r5
100048e6:	0511      	lsls	r1, r2, #20
100048e8:	401c      	ands	r4, r3
100048ea:	430c      	orrs	r4, r1
100048ec:	0065      	lsls	r5, r4, #1
100048ee:	0869      	lsrs	r1, r5, #1
100048f0:	bd70      	pop	{r4, r5, r6, pc}
100048f2:	230b      	movs	r3, #11
100048f4:	1c05      	adds	r5, r0, #0
100048f6:	1a18      	subs	r0, r3, r0
100048f8:	3515      	adds	r5, #21
100048fa:	1c21      	adds	r1, r4, #0
100048fc:	40c4      	lsrs	r4, r0
100048fe:	40a9      	lsls	r1, r5
10004900:	0552      	lsls	r2, r2, #21
10004902:	0325      	lsls	r5, r4, #12
10004904:	1c0e      	adds	r6, r1, #0
10004906:	0b2d      	lsrs	r5, r5, #12
10004908:	0d52      	lsrs	r2, r2, #21
1000490a:	e7e5      	b.n	100048d8 <__aeabi_ui2d+0x20>
1000490c:	2200      	movs	r2, #0
1000490e:	2500      	movs	r5, #0
10004910:	2600      	movs	r6, #0
10004912:	e7e1      	b.n	100048d8 <__aeabi_ui2d+0x20>
10004914:	0000041e 	.word	0x0000041e
10004918:	800fffff 	.word	0x800fffff

1000491c <__aeabi_cdrcmple>:
1000491c:	4684      	mov	ip, r0
1000491e:	1c10      	adds	r0, r2, #0
10004920:	4662      	mov	r2, ip
10004922:	468c      	mov	ip, r1
10004924:	1c19      	adds	r1, r3, #0
10004926:	4663      	mov	r3, ip
10004928:	e000      	b.n	1000492c <__aeabi_cdcmpeq>
1000492a:	46c0      	nop			; (mov r8, r8)

1000492c <__aeabi_cdcmpeq>:
1000492c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000492e:	f000 f903 	bl	10004b38 <__ledf2>
10004932:	2800      	cmp	r0, #0
10004934:	d401      	bmi.n	1000493a <__aeabi_cdcmpeq+0xe>
10004936:	2100      	movs	r1, #0
10004938:	42c8      	cmn	r0, r1
1000493a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000493c <__aeabi_dcmpeq>:
1000493c:	b510      	push	{r4, lr}
1000493e:	f000 f849 	bl	100049d4 <__eqdf2>
10004942:	4240      	negs	r0, r0
10004944:	3001      	adds	r0, #1
10004946:	bd10      	pop	{r4, pc}

10004948 <__aeabi_dcmplt>:
10004948:	b510      	push	{r4, lr}
1000494a:	f000 f8f5 	bl	10004b38 <__ledf2>
1000494e:	2800      	cmp	r0, #0
10004950:	db01      	blt.n	10004956 <__aeabi_dcmplt+0xe>
10004952:	2000      	movs	r0, #0
10004954:	bd10      	pop	{r4, pc}
10004956:	2001      	movs	r0, #1
10004958:	bd10      	pop	{r4, pc}
1000495a:	46c0      	nop			; (mov r8, r8)

1000495c <__aeabi_dcmple>:
1000495c:	b510      	push	{r4, lr}
1000495e:	f000 f8eb 	bl	10004b38 <__ledf2>
10004962:	2800      	cmp	r0, #0
10004964:	dd01      	ble.n	1000496a <__aeabi_dcmple+0xe>
10004966:	2000      	movs	r0, #0
10004968:	bd10      	pop	{r4, pc}
1000496a:	2001      	movs	r0, #1
1000496c:	bd10      	pop	{r4, pc}
1000496e:	46c0      	nop			; (mov r8, r8)

10004970 <__aeabi_dcmpgt>:
10004970:	b510      	push	{r4, lr}
10004972:	f000 f86d 	bl	10004a50 <__gedf2>
10004976:	2800      	cmp	r0, #0
10004978:	dc01      	bgt.n	1000497e <__aeabi_dcmpgt+0xe>
1000497a:	2000      	movs	r0, #0
1000497c:	bd10      	pop	{r4, pc}
1000497e:	2001      	movs	r0, #1
10004980:	bd10      	pop	{r4, pc}
10004982:	46c0      	nop			; (mov r8, r8)

10004984 <__aeabi_dcmpge>:
10004984:	b510      	push	{r4, lr}
10004986:	f000 f863 	bl	10004a50 <__gedf2>
1000498a:	2800      	cmp	r0, #0
1000498c:	da01      	bge.n	10004992 <__aeabi_dcmpge+0xe>
1000498e:	2000      	movs	r0, #0
10004990:	bd10      	pop	{r4, pc}
10004992:	2001      	movs	r0, #1
10004994:	bd10      	pop	{r4, pc}
10004996:	46c0      	nop			; (mov r8, r8)

10004998 <__clzsi2>:
10004998:	211c      	movs	r1, #28
1000499a:	2301      	movs	r3, #1
1000499c:	041b      	lsls	r3, r3, #16
1000499e:	4298      	cmp	r0, r3
100049a0:	d301      	bcc.n	100049a6 <__clzsi2+0xe>
100049a2:	0c00      	lsrs	r0, r0, #16
100049a4:	3910      	subs	r1, #16
100049a6:	0a1b      	lsrs	r3, r3, #8
100049a8:	4298      	cmp	r0, r3
100049aa:	d301      	bcc.n	100049b0 <__clzsi2+0x18>
100049ac:	0a00      	lsrs	r0, r0, #8
100049ae:	3908      	subs	r1, #8
100049b0:	091b      	lsrs	r3, r3, #4
100049b2:	4298      	cmp	r0, r3
100049b4:	d301      	bcc.n	100049ba <__clzsi2+0x22>
100049b6:	0900      	lsrs	r0, r0, #4
100049b8:	3904      	subs	r1, #4
100049ba:	a202      	add	r2, pc, #8	; (adr r2, 100049c4 <__clzsi2+0x2c>)
100049bc:	5c10      	ldrb	r0, [r2, r0]
100049be:	1840      	adds	r0, r0, r1
100049c0:	4770      	bx	lr
100049c2:	46c0      	nop			; (mov r8, r8)
100049c4:	02020304 	.word	0x02020304
100049c8:	01010101 	.word	0x01010101
	...

100049d4 <__eqdf2>:
100049d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100049d6:	4694      	mov	ip, r2
100049d8:	4647      	mov	r7, r8
100049da:	031a      	lsls	r2, r3, #12
100049dc:	1c06      	adds	r6, r0, #0
100049de:	0058      	lsls	r0, r3, #1
100049e0:	b480      	push	{r7}
100049e2:	0b17      	lsrs	r7, r2, #12
100049e4:	0d42      	lsrs	r2, r0, #21
100049e6:	4819      	ldr	r0, [pc, #100]	; (10004a4c <__eqdf2+0x78>)
100049e8:	030d      	lsls	r5, r1, #12
100049ea:	004c      	lsls	r4, r1, #1
100049ec:	0fdb      	lsrs	r3, r3, #31
100049ee:	0b2d      	lsrs	r5, r5, #12
100049f0:	0d64      	lsrs	r4, r4, #21
100049f2:	0fc9      	lsrs	r1, r1, #31
100049f4:	4698      	mov	r8, r3
100049f6:	4284      	cmp	r4, r0
100049f8:	d008      	beq.n	10004a0c <__eqdf2+0x38>
100049fa:	4814      	ldr	r0, [pc, #80]	; (10004a4c <__eqdf2+0x78>)
100049fc:	4282      	cmp	r2, r0
100049fe:	d00d      	beq.n	10004a1c <__eqdf2+0x48>
10004a00:	2001      	movs	r0, #1
10004a02:	4294      	cmp	r4, r2
10004a04:	d012      	beq.n	10004a2c <__eqdf2+0x58>
10004a06:	bc04      	pop	{r2}
10004a08:	4690      	mov	r8, r2
10004a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004a0c:	1c2b      	adds	r3, r5, #0
10004a0e:	4333      	orrs	r3, r6
10004a10:	2001      	movs	r0, #1
10004a12:	2b00      	cmp	r3, #0
10004a14:	d1f7      	bne.n	10004a06 <__eqdf2+0x32>
10004a16:	480d      	ldr	r0, [pc, #52]	; (10004a4c <__eqdf2+0x78>)
10004a18:	4282      	cmp	r2, r0
10004a1a:	d1f1      	bne.n	10004a00 <__eqdf2+0x2c>
10004a1c:	4663      	mov	r3, ip
10004a1e:	433b      	orrs	r3, r7
10004a20:	2001      	movs	r0, #1
10004a22:	2b00      	cmp	r3, #0
10004a24:	d1ef      	bne.n	10004a06 <__eqdf2+0x32>
10004a26:	2001      	movs	r0, #1
10004a28:	4294      	cmp	r4, r2
10004a2a:	d1ec      	bne.n	10004a06 <__eqdf2+0x32>
10004a2c:	42bd      	cmp	r5, r7
10004a2e:	d1ea      	bne.n	10004a06 <__eqdf2+0x32>
10004a30:	4566      	cmp	r6, ip
10004a32:	d1e8      	bne.n	10004a06 <__eqdf2+0x32>
10004a34:	4541      	cmp	r1, r8
10004a36:	d006      	beq.n	10004a46 <__eqdf2+0x72>
10004a38:	2c00      	cmp	r4, #0
10004a3a:	d1e4      	bne.n	10004a06 <__eqdf2+0x32>
10004a3c:	1c28      	adds	r0, r5, #0
10004a3e:	4330      	orrs	r0, r6
10004a40:	1e45      	subs	r5, r0, #1
10004a42:	41a8      	sbcs	r0, r5
10004a44:	e7df      	b.n	10004a06 <__eqdf2+0x32>
10004a46:	2000      	movs	r0, #0
10004a48:	e7dd      	b.n	10004a06 <__eqdf2+0x32>
10004a4a:	46c0      	nop			; (mov r8, r8)
10004a4c:	000007ff 	.word	0x000007ff

10004a50 <__gedf2>:
10004a50:	b5f0      	push	{r4, r5, r6, r7, lr}
10004a52:	4657      	mov	r7, sl
10004a54:	464e      	mov	r6, r9
10004a56:	4645      	mov	r5, r8
10004a58:	b4e0      	push	{r5, r6, r7}
10004a5a:	1c04      	adds	r4, r0, #0
10004a5c:	004e      	lsls	r6, r1, #1
10004a5e:	0308      	lsls	r0, r1, #12
10004a60:	0fc9      	lsrs	r1, r1, #31
10004a62:	468a      	mov	sl, r1
10004a64:	1c17      	adds	r7, r2, #0
10004a66:	0059      	lsls	r1, r3, #1
10004a68:	031a      	lsls	r2, r3, #12
10004a6a:	0b05      	lsrs	r5, r0, #12
10004a6c:	0d70      	lsrs	r0, r6, #21
10004a6e:	0b16      	lsrs	r6, r2, #12
10004a70:	0d4a      	lsrs	r2, r1, #21
10004a72:	4930      	ldr	r1, [pc, #192]	; (10004b34 <__gedf2+0xe4>)
10004a74:	0fdb      	lsrs	r3, r3, #31
10004a76:	469c      	mov	ip, r3
10004a78:	4288      	cmp	r0, r1
10004a7a:	d032      	beq.n	10004ae2 <__gedf2+0x92>
10004a7c:	492d      	ldr	r1, [pc, #180]	; (10004b34 <__gedf2+0xe4>)
10004a7e:	428a      	cmp	r2, r1
10004a80:	d035      	beq.n	10004aee <__gedf2+0x9e>
10004a82:	2800      	cmp	r0, #0
10004a84:	d10f      	bne.n	10004aa6 <__gedf2+0x56>
10004a86:	1c29      	adds	r1, r5, #0
10004a88:	4321      	orrs	r1, r4
10004a8a:	424b      	negs	r3, r1
10004a8c:	414b      	adcs	r3, r1
10004a8e:	4698      	mov	r8, r3
10004a90:	2a00      	cmp	r2, #0
10004a92:	d00b      	beq.n	10004aac <__gedf2+0x5c>
10004a94:	2b00      	cmp	r3, #0
10004a96:	d11a      	bne.n	10004ace <__gedf2+0x7e>
10004a98:	45e2      	cmp	sl, ip
10004a9a:	d02c      	beq.n	10004af6 <__gedf2+0xa6>
10004a9c:	4655      	mov	r5, sl
10004a9e:	2d00      	cmp	r5, #0
10004aa0:	d118      	bne.n	10004ad4 <__gedf2+0x84>
10004aa2:	2001      	movs	r0, #1
10004aa4:	e018      	b.n	10004ad8 <__gedf2+0x88>
10004aa6:	2a00      	cmp	r2, #0
10004aa8:	d1f6      	bne.n	10004a98 <__gedf2+0x48>
10004aaa:	4690      	mov	r8, r2
10004aac:	1c31      	adds	r1, r6, #0
10004aae:	4339      	orrs	r1, r7
10004ab0:	424b      	negs	r3, r1
10004ab2:	414b      	adcs	r3, r1
10004ab4:	4641      	mov	r1, r8
10004ab6:	2900      	cmp	r1, #0
10004ab8:	d106      	bne.n	10004ac8 <__gedf2+0x78>
10004aba:	2b00      	cmp	r3, #0
10004abc:	d0ec      	beq.n	10004a98 <__gedf2+0x48>
10004abe:	4656      	mov	r6, sl
10004ac0:	2001      	movs	r0, #1
10004ac2:	2e00      	cmp	r6, #0
10004ac4:	d008      	beq.n	10004ad8 <__gedf2+0x88>
10004ac6:	e005      	b.n	10004ad4 <__gedf2+0x84>
10004ac8:	2000      	movs	r0, #0
10004aca:	2b00      	cmp	r3, #0
10004acc:	d104      	bne.n	10004ad8 <__gedf2+0x88>
10004ace:	4667      	mov	r7, ip
10004ad0:	2f00      	cmp	r7, #0
10004ad2:	d1e6      	bne.n	10004aa2 <__gedf2+0x52>
10004ad4:	2301      	movs	r3, #1
10004ad6:	4258      	negs	r0, r3
10004ad8:	bc1c      	pop	{r2, r3, r4}
10004ada:	4690      	mov	r8, r2
10004adc:	4699      	mov	r9, r3
10004ade:	46a2      	mov	sl, r4
10004ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004ae2:	1c2b      	adds	r3, r5, #0
10004ae4:	4323      	orrs	r3, r4
10004ae6:	d0c9      	beq.n	10004a7c <__gedf2+0x2c>
10004ae8:	2102      	movs	r1, #2
10004aea:	4248      	negs	r0, r1
10004aec:	e7f4      	b.n	10004ad8 <__gedf2+0x88>
10004aee:	1c33      	adds	r3, r6, #0
10004af0:	433b      	orrs	r3, r7
10004af2:	d0c6      	beq.n	10004a82 <__gedf2+0x32>
10004af4:	e7f8      	b.n	10004ae8 <__gedf2+0x98>
10004af6:	4290      	cmp	r0, r2
10004af8:	dc05      	bgt.n	10004b06 <__gedf2+0xb6>
10004afa:	da09      	bge.n	10004b10 <__gedf2+0xc0>
10004afc:	4652      	mov	r2, sl
10004afe:	2a00      	cmp	r2, #0
10004b00:	d0e8      	beq.n	10004ad4 <__gedf2+0x84>
10004b02:	2001      	movs	r0, #1
10004b04:	e7e8      	b.n	10004ad8 <__gedf2+0x88>
10004b06:	4654      	mov	r4, sl
10004b08:	2c00      	cmp	r4, #0
10004b0a:	d1e3      	bne.n	10004ad4 <__gedf2+0x84>
10004b0c:	2001      	movs	r0, #1
10004b0e:	e7e3      	b.n	10004ad8 <__gedf2+0x88>
10004b10:	42b5      	cmp	r5, r6
10004b12:	d8c3      	bhi.n	10004a9c <__gedf2+0x4c>
10004b14:	d007      	beq.n	10004b26 <__gedf2+0xd6>
10004b16:	2000      	movs	r0, #0
10004b18:	42b5      	cmp	r5, r6
10004b1a:	d2dd      	bcs.n	10004ad8 <__gedf2+0x88>
10004b1c:	4650      	mov	r0, sl
10004b1e:	2800      	cmp	r0, #0
10004b20:	d0d8      	beq.n	10004ad4 <__gedf2+0x84>
10004b22:	2001      	movs	r0, #1
10004b24:	e7d8      	b.n	10004ad8 <__gedf2+0x88>
10004b26:	42bc      	cmp	r4, r7
10004b28:	d8b8      	bhi.n	10004a9c <__gedf2+0x4c>
10004b2a:	2000      	movs	r0, #0
10004b2c:	42bc      	cmp	r4, r7
10004b2e:	d3f5      	bcc.n	10004b1c <__gedf2+0xcc>
10004b30:	e7d2      	b.n	10004ad8 <__gedf2+0x88>
10004b32:	46c0      	nop			; (mov r8, r8)
10004b34:	000007ff 	.word	0x000007ff

10004b38 <__ledf2>:
10004b38:	b5f0      	push	{r4, r5, r6, r7, lr}
10004b3a:	4644      	mov	r4, r8
10004b3c:	465f      	mov	r7, fp
10004b3e:	4656      	mov	r6, sl
10004b40:	464d      	mov	r5, r9
10004b42:	b4f0      	push	{r4, r5, r6, r7}
10004b44:	4694      	mov	ip, r2
10004b46:	1c06      	adds	r6, r0, #0
10004b48:	031a      	lsls	r2, r3, #12
10004b4a:	0058      	lsls	r0, r3, #1
10004b4c:	0b17      	lsrs	r7, r2, #12
10004b4e:	0d42      	lsrs	r2, r0, #21
10004b50:	482e      	ldr	r0, [pc, #184]	; (10004c0c <__ledf2+0xd4>)
10004b52:	030d      	lsls	r5, r1, #12
10004b54:	004c      	lsls	r4, r1, #1
10004b56:	0fdb      	lsrs	r3, r3, #31
10004b58:	0b2d      	lsrs	r5, r5, #12
10004b5a:	0d64      	lsrs	r4, r4, #21
10004b5c:	0fc9      	lsrs	r1, r1, #31
10004b5e:	4698      	mov	r8, r3
10004b60:	4284      	cmp	r4, r0
10004b62:	d033      	beq.n	10004bcc <__ledf2+0x94>
10004b64:	4829      	ldr	r0, [pc, #164]	; (10004c0c <__ledf2+0xd4>)
10004b66:	4282      	cmp	r2, r0
10004b68:	d036      	beq.n	10004bd8 <__ledf2+0xa0>
10004b6a:	2c00      	cmp	r4, #0
10004b6c:	d019      	beq.n	10004ba2 <__ledf2+0x6a>
10004b6e:	2a00      	cmp	r2, #0
10004b70:	d120      	bne.n	10004bb4 <__ledf2+0x7c>
10004b72:	4693      	mov	fp, r2
10004b74:	4663      	mov	r3, ip
10004b76:	433b      	orrs	r3, r7
10004b78:	4258      	negs	r0, r3
10004b7a:	4158      	adcs	r0, r3
10004b7c:	465b      	mov	r3, fp
10004b7e:	4682      	mov	sl, r0
10004b80:	2b00      	cmp	r3, #0
10004b82:	d01d      	beq.n	10004bc0 <__ledf2+0x88>
10004b84:	4651      	mov	r1, sl
10004b86:	2000      	movs	r0, #0
10004b88:	2900      	cmp	r1, #0
10004b8a:	d104      	bne.n	10004b96 <__ledf2+0x5e>
10004b8c:	4642      	mov	r2, r8
10004b8e:	2a00      	cmp	r2, #0
10004b90:	d114      	bne.n	10004bbc <__ledf2+0x84>
10004b92:	2401      	movs	r4, #1
10004b94:	4260      	negs	r0, r4
10004b96:	bc3c      	pop	{r2, r3, r4, r5}
10004b98:	4690      	mov	r8, r2
10004b9a:	4699      	mov	r9, r3
10004b9c:	46a2      	mov	sl, r4
10004b9e:	46ab      	mov	fp, r5
10004ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004ba2:	1c2b      	adds	r3, r5, #0
10004ba4:	4333      	orrs	r3, r6
10004ba6:	4258      	negs	r0, r3
10004ba8:	4143      	adcs	r3, r0
10004baa:	469b      	mov	fp, r3
10004bac:	2a00      	cmp	r2, #0
10004bae:	d0e1      	beq.n	10004b74 <__ledf2+0x3c>
10004bb0:	2b00      	cmp	r3, #0
10004bb2:	d1eb      	bne.n	10004b8c <__ledf2+0x54>
10004bb4:	4541      	cmp	r1, r8
10004bb6:	d015      	beq.n	10004be4 <__ledf2+0xac>
10004bb8:	2900      	cmp	r1, #0
10004bba:	d1ea      	bne.n	10004b92 <__ledf2+0x5a>
10004bbc:	2001      	movs	r0, #1
10004bbe:	e7ea      	b.n	10004b96 <__ledf2+0x5e>
10004bc0:	2800      	cmp	r0, #0
10004bc2:	d0f7      	beq.n	10004bb4 <__ledf2+0x7c>
10004bc4:	2001      	movs	r0, #1
10004bc6:	2900      	cmp	r1, #0
10004bc8:	d0e5      	beq.n	10004b96 <__ledf2+0x5e>
10004bca:	e7e2      	b.n	10004b92 <__ledf2+0x5a>
10004bcc:	1c2b      	adds	r3, r5, #0
10004bce:	4333      	orrs	r3, r6
10004bd0:	2002      	movs	r0, #2
10004bd2:	2b00      	cmp	r3, #0
10004bd4:	d1df      	bne.n	10004b96 <__ledf2+0x5e>
10004bd6:	e7c5      	b.n	10004b64 <__ledf2+0x2c>
10004bd8:	4663      	mov	r3, ip
10004bda:	433b      	orrs	r3, r7
10004bdc:	2002      	movs	r0, #2
10004bde:	2b00      	cmp	r3, #0
10004be0:	d1d9      	bne.n	10004b96 <__ledf2+0x5e>
10004be2:	e7c2      	b.n	10004b6a <__ledf2+0x32>
10004be4:	4294      	cmp	r4, r2
10004be6:	dce7      	bgt.n	10004bb8 <__ledf2+0x80>
10004be8:	db05      	blt.n	10004bf6 <__ledf2+0xbe>
10004bea:	42bd      	cmp	r5, r7
10004bec:	d8e4      	bhi.n	10004bb8 <__ledf2+0x80>
10004bee:	d006      	beq.n	10004bfe <__ledf2+0xc6>
10004bf0:	2000      	movs	r0, #0
10004bf2:	42bd      	cmp	r5, r7
10004bf4:	d2cf      	bcs.n	10004b96 <__ledf2+0x5e>
10004bf6:	2900      	cmp	r1, #0
10004bf8:	d0cb      	beq.n	10004b92 <__ledf2+0x5a>
10004bfa:	2001      	movs	r0, #1
10004bfc:	e7cb      	b.n	10004b96 <__ledf2+0x5e>
10004bfe:	4566      	cmp	r6, ip
10004c00:	d8da      	bhi.n	10004bb8 <__ledf2+0x80>
10004c02:	2000      	movs	r0, #0
10004c04:	4566      	cmp	r6, ip
10004c06:	d3f6      	bcc.n	10004bf6 <__ledf2+0xbe>
10004c08:	e7c5      	b.n	10004b96 <__ledf2+0x5e>
10004c0a:	46c0      	nop			; (mov r8, r8)
10004c0c:	000007ff 	.word	0x000007ff

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <CCU40_3_Veneer+0x20>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <CCU40_3_Veneer+0x24>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <CCU40_3_Veneer+0x28>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <CCU40_3_Veneer+0x2c>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <CCU40_3_Veneer+0x30>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <CCU40_3_Veneer+0x34>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <CCU40_3_Veneer+0x38>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <CCU40_3_Veneer+0x3c>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <CCU40_3_Veneer+0x40>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <CCU40_3_Veneer+0x44>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <CCU40_3_Veneer+0x48>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0
	...

20000064 <USIC0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4821      	ldr	r0, [pc, #132]	; (200000ec <CCU40_3_Veneer+0x4c>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4821      	ldr	r0, [pc, #132]	; (200000f0 <CCU40_3_Veneer+0x50>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4821      	ldr	r0, [pc, #132]	; (200000f4 <CCU40_3_Veneer+0x54>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4821      	ldr	r0, [pc, #132]	; (200000f8 <CCU40_3_Veneer+0x58>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4821      	ldr	r0, [pc, #132]	; (200000fc <CCU40_3_Veneer+0x5c>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4821      	ldr	r0, [pc, #132]	; (20000100 <CCU40_3_Veneer+0x60>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4821      	ldr	r0, [pc, #132]	; (20000104 <CCU40_3_Veneer+0x64>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4821      	ldr	r0, [pc, #132]	; (20000108 <CCU40_3_Veneer+0x68>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0
	...

20000094 <CCU40_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	481d      	ldr	r0, [pc, #116]	; (2000010c <CCU40_3_Veneer+0x6c>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	481d      	ldr	r0, [pc, #116]	; (20000110 <CCU40_3_Veneer+0x70>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	481d      	ldr	r0, [pc, #116]	; (20000114 <CCU40_3_Veneer+0x74>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	481d      	ldr	r0, [pc, #116]	; (20000118 <CCU40_3_Veneer+0x78>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0
	...

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	100015b3 	.word	0x100015b3
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	100015b5 	.word	0x100015b5
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	100015b7 	.word	0x100015b7
    MOV PC,R0
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	10002849 	.word	0x10002849
    MOV PC,R0
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	100015bb 	.word	0x100015bb
    MOV PC,R0
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	100015bd 	.word	0x100015bd
    MOV PC,R0
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	100015bf 	.word	0x100015bf
    MOV PC,R0
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	100015c1 	.word	0x100015c1
    MOV PC,R0
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	100015c3 	.word	0x100015c3
    MOV PC,R0
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	100015c5 	.word	0x100015c5
    MOV PC,R0
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	100015c7 	.word	0x100015c7
    .long 0
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000ec:	100015d5 	.word	0x100015d5
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f0:	100015d7 	.word	0x100015d7
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f4:	100015d9 	.word	0x100015d9
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000f8:	100015db 	.word	0x100015db
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
200000fc:	100015dd 	.word	0x100015dd
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000100:	100015df 	.word	0x100015df
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000104:	100015c9 	.word	0x100015c9
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000108:	100015cb 	.word	0x100015cb
    .long 0
    .long 0
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
2000010c:	100015cd 	.word	0x100015cd
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000110:	100015cf 	.word	0x100015cf
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000114:	100015d1 	.word	0x100015d1
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
20000118:	100015d3 	.word	0x100015d3
