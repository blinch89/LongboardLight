
LongboardLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a88  10001000  10001000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000010  10004a88  10004a88  00004a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata       00000328  10004a98  10004a98  00004a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .VENEER_Code  00000110  2000000c  10004dc0  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .GUARD_Band   00000004  2000011c  00000000  0000011c  2**0
                  ALLOC
  5 Stack         00000800  20000120  00000000  00000120  2**0
                  ALLOC
  6 .bss          0000015c  20000920  20000920  00010920  2**2
                  ALLOC
  7 .data         00000004  20000a80  10004ed0  00008a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .debug_aranges 00000378  00000000  00000000  00008a88  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000040ce  00000000  00000000  00008e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ece  00000000  00000000  0000cece  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004cb3  00000000  00000000  0000dd9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b80  00000000  00000000  00012a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000269f4  00000000  00000000  000135d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d66  00000000  00000000  00039fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000290  00000000  00000000  0003ad30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 0000059c  00000000  00000000  0003afc0  2**0
                  CONTENTS, READONLY
 17 .debug_macro  00007e33  00000000  00000000  0003b55c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10001000 <__Xmc1100_interrupt_vector_cortex_m>:
10001000:	20 09 00 20 19 10 00 10 2d 14 00 10 2f 14 00 10      .. ....-.../...
10001010:	00 04 00 00 00 00 00 00                             ........

10001018 <__Xmc1100_reset_cortex_m>:
__Xmc1100_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1100_stack
10001018:	4802      	ldr	r0, [pc, #8]	; (10001024 <__Xmc1100_reset_cortex_m+0xc>)
    MOV SP,R0
1000101a:	4685      	mov	sp, r0
    
    /* Launch custom pre-program loading startup procedure */
    LDR R0,=hardware_init_hook
1000101c:	4802      	ldr	r0, [pc, #8]	; (10001028 <__Xmc1100_reset_cortex_m+0x10>)
    BLX R0
1000101e:	4780      	blx	r0

    /* Branch to the program loader now */
    B       __Xmc1100_Program_Loader 
10001020:	e012      	b.n	10001048 <__Xmc1100_Program_Loader>
10001022:	0000      	.short	0x0000
__Xmc1100_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1100_stack
10001024:	20000920 	.word	0x20000920
    MOV SP,R0
    
    /* Launch custom pre-program loading startup procedure */
    LDR R0,=hardware_init_hook
10001028:	100010d1 	.word	0x100010d1

1000102c <__COPY_FLASH2RAM>:
   to C land is given */
   .section .Xmc1100.postreset,"x",%progbits
 __COPY_FLASH2RAM:
   .fnstart:
   /* Is there anything to be copied? */
   CMP R2,#0
1000102c:	2a00      	cmp	r2, #0
   BEQ SKIPCOPY
1000102e:	d00a      	beq.n	10001046 <SKIPCOPY>
   
   /* For bytecount less than 4, at least 1 word must be copied */
   CMP R2,#4
10001030:	2a04      	cmp	r2, #4
   BCS STARTCOPY
10001032:	d200      	bcs.n	10001036 <STARTCOPY>
   
   /* Byte count < 4 ; so bump it up */
   MOVS R2,#4
10001034:	2204      	movs	r2, #4

10001036 <STARTCOPY>:
STARTCOPY:
   /* 
      R2 contains byte count. Change it to word count. It is ensured in the 
      linker script that the length is always word aligned.
   */
   LSRS R2,R2,#2 /* Divide by 4 to obtain word count */
10001036:	0892      	lsrs	r2, r2, #2

10001038 <COPYLOOP>:

   /* The proverbial loop from the schooldays */
COPYLOOP:
   LDR R3,[R0]
10001038:	6803      	ldr	r3, [r0, #0]
   STR R3,[R1]
1000103a:	600b      	str	r3, [r1, #0]
   SUBS R2,#1
1000103c:	3a01      	subs	r2, #1
   BEQ SKIPCOPY
1000103e:	d002      	beq.n	10001046 <SKIPCOPY>
   ADDS R0,#4
10001040:	3004      	adds	r0, #4
   ADDS R1,#4
10001042:	3104      	adds	r1, #4
   B COPYLOOP
10001044:	e7f8      	b.n	10001038 <COPYLOOP>

10001046 <SKIPCOPY>:
    
SKIPCOPY:
   BX LR
10001046:	4770      	bx	lr

10001048 <__Xmc1100_Program_Loader>:
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001048:	4811      	ldr	r0, [pc, #68]	; (10001090 <SKIPCLEAR+0x14>)
   LDR R1, =__Xmc1100_sData
1000104a:	4912      	ldr	r1, [pc, #72]	; (10001094 <SKIPCLEAR+0x18>)
   LDR R2, =__Xmc1100_Data_Size
1000104c:	4a12      	ldr	r2, [pc, #72]	; (10001098 <SKIPCLEAR+0x1c>)
   BL __COPY_FLASH2RAM
1000104e:	f7ff ffed 	bl	1000102c <__COPY_FLASH2RAM>

   /* RAM_CODE COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =__ram_code_load
10001052:	4812      	ldr	r0, [pc, #72]	; (1000109c <SKIPCLEAR+0x20>)
   LDR R1, =__ram_code_start
10001054:	4912      	ldr	r1, [pc, #72]	; (100010a0 <SKIPCLEAR+0x24>)
   LDR R2, =__ram_code_size
10001056:	4a13      	ldr	r2, [pc, #76]	; (100010a4 <SKIPCLEAR+0x28>)
   BL __COPY_FLASH2RAM
10001058:	f7ff ffe8 	bl	1000102c <__COPY_FLASH2RAM>

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
1000105c:	4812      	ldr	r0, [pc, #72]	; (100010a8 <SKIPCLEAR+0x2c>)
   LDR R1, =VeneerStart
1000105e:	4913      	ldr	r1, [pc, #76]	; (100010ac <SKIPCLEAR+0x30>)
   LDR R2, =VeneerSize
10001060:	4a13      	ldr	r2, [pc, #76]	; (100010b0 <SKIPCLEAR+0x34>)
   BL __COPY_FLASH2RAM
10001062:	f7ff ffe3 	bl	1000102c <__COPY_FLASH2RAM>

   /* BSS CLEAR */
   LDR R0, =__Xmc1100_sBSS     /* Start of BSS */
10001066:	4813      	ldr	r0, [pc, #76]	; (100010b4 <SKIPCLEAR+0x38>)
   LDR R1, =__Xmc1100_BSS_Size /* BSS size in bytes */
10001068:	4913      	ldr	r1, [pc, #76]	; (100010b8 <SKIPCLEAR+0x3c>)

   /* Find out if there are items assigned to BSS */   
   CMP R1,#0 
1000106a:	2900      	cmp	r1, #0
   BEQ SKIPCLEAR
1000106c:	d006      	beq.n	1000107c <SKIPCLEAR>

1000106e <STARTCLEAR>:

STARTCLEAR:
   LSRS R1,R1,#2            /* BSS size in words */
1000106e:	0889      	lsrs	r1, r1, #2
   
   MOVS R2,#0
10001070:	2200      	movs	r2, #0

10001072 <CLEARLOOP>:
CLEARLOOP:
   STR R2,[R0]
10001072:	6002      	str	r2, [r0, #0]
   SUBS R1,#1
10001074:	3901      	subs	r1, #1
   BEQ SKIPCLEAR
10001076:	d001      	beq.n	1000107c <SKIPCLEAR>
   ADDS R0,#4
10001078:	3004      	adds	r0, #4
   B CLEARLOOP
1000107a:	e7fa      	b.n	10001072 <CLEARLOOP>

1000107c <SKIPCLEAR>:
    
SKIPCLEAR:

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1100_stack 
1000107c:	480f      	ldr	r0, [pc, #60]	; (100010bc <SKIPCLEAR+0x40>)
   MOV SP,R0
1000107e:	4685      	mov	sp, r0

   /* Perform System Initialization */   
   LDR R0,=SystemInit
10001080:	480f      	ldr	r0, [pc, #60]	; (100010c0 <SKIPCLEAR+0x44>)
   BLX R0
10001082:	4780      	blx	r0

   /* Launch custom post-program loading startup procedure */
   LDR R0,=software_init_hook
10001084:	480f      	ldr	r0, [pc, #60]	; (100010c4 <SKIPCLEAR+0x48>)
   BLX R0
10001086:	4780      	blx	r0

   MOVS R0,#0
10001088:	2000      	movs	r0, #0
   MOVS R1,#0
1000108a:	2100      	movs	r1, #0
   LDR R2, =main
1000108c:	4a0e      	ldr	r2, [pc, #56]	; (100010c8 <SKIPCLEAR+0x4c>)
   MOV PC,R2
1000108e:	4697      	mov	pc, r2
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001090:	10004ed0 	.word	0x10004ed0
   LDR R1, =__Xmc1100_sData
10001094:	20000a80 	.word	0x20000a80
   LDR R2, =__Xmc1100_Data_Size
10001098:	00000004 	.word	0x00000004
   BL __COPY_FLASH2RAM

   /* RAM_CODE COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =__ram_code_load
1000109c:	10004ed4 	.word	0x10004ed4
   LDR R1, =__ram_code_start
100010a0:	20000a84 	.word	0x20000a84
   LDR R2, =__ram_code_size
100010a4:	00000000 	.word	0x00000000
   BL __COPY_FLASH2RAM

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
100010a8:	10004dc0 	.word	0x10004dc0
   LDR R1, =VeneerStart
100010ac:	2000000c 	.word	0x2000000c
   LDR R2, =VeneerSize
100010b0:	00000110 	.word	0x00000110
   BL __COPY_FLASH2RAM

   /* BSS CLEAR */
   LDR R0, =__Xmc1100_sBSS     /* Start of BSS */
100010b4:	20000920 	.word	0x20000920
   LDR R1, =__Xmc1100_BSS_Size /* BSS size in bytes */
100010b8:	0000015c 	.word	0x0000015c
   B CLEARLOOP
    
SKIPCLEAR:

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1100_stack 
100010bc:	20000920 	.word	0x20000920
   MOV SP,R0

   /* Perform System Initialization */   
   LDR R0,=SystemInit
100010c0:	1000145d 	.word	0x1000145d
   BLX R0

   /* Launch custom post-program loading startup procedure */
   LDR R0,=software_init_hook
100010c4:	100010cd 	.word	0x100010cd
   BLX R0

   MOVS R0,#0
   MOVS R1,#0
   LDR R2, =main
100010c8:	1000115d 	.word	0x1000115d

100010cc <software_init_hook>:
   has not been started.
 */
     .weak software_init_hook
     .type software_init_hook, %function
software_init_hook:
     NOP
100010cc:	46c0      	nop			; (mov r8, r8)
     BX LR
100010ce:	4770      	bx	lr

100010d0 <hardware_init_hook>:
     .size software_init_hook, . - software_init_hook

     .weak hardware_init_hook
     .type hardware_init_hook, %function
hardware_init_hook:
     NOP
100010d0:	46c0      	nop			; (mov r8, r8)
     BX LR
100010d2:	4770      	bx	lr

100010d4 <P0_5_set_mode>:

__STATIC_INLINE void P0_4_disable_pps(void){
    PORT0->PPS &= ~0x00000010UL;
}

__STATIC_INLINE void P0_5_set_mode(uint8_t mode){
100010d4:	b580      	push	{r7, lr}
100010d6:	b082      	sub	sp, #8
100010d8:	af00      	add	r7, sp, #0
100010da:	1c02      	adds	r2, r0, #0
100010dc:	1dfb      	adds	r3, r7, #7
100010de:	701a      	strb	r2, [r3, #0]
    PORT0->IOCR4 &= ~0x0000f800UL;
100010e0:	4b08      	ldr	r3, [pc, #32]	; (10001104 <P0_5_set_mode+0x30>)
100010e2:	4a08      	ldr	r2, [pc, #32]	; (10001104 <P0_5_set_mode+0x30>)
100010e4:	6951      	ldr	r1, [r2, #20]
100010e6:	4a08      	ldr	r2, [pc, #32]	; (10001108 <P0_5_set_mode+0x34>)
100010e8:	400a      	ands	r2, r1
100010ea:	615a      	str	r2, [r3, #20]
    PORT0->IOCR4 |= mode << 8;
100010ec:	4b05      	ldr	r3, [pc, #20]	; (10001104 <P0_5_set_mode+0x30>)
100010ee:	4a05      	ldr	r2, [pc, #20]	; (10001104 <P0_5_set_mode+0x30>)
100010f0:	6951      	ldr	r1, [r2, #20]
100010f2:	1dfa      	adds	r2, r7, #7
100010f4:	7812      	ldrb	r2, [r2, #0]
100010f6:	0212      	lsls	r2, r2, #8
100010f8:	430a      	orrs	r2, r1
100010fa:	615a      	str	r2, [r3, #20]
}
100010fc:	46bd      	mov	sp, r7
100010fe:	b002      	add	sp, #8
10001100:	bd80      	pop	{r7, pc}
10001102:	46c0      	nop			; (mov r8, r8)
10001104:	40040000 	.word	0x40040000
10001108:	ffff07ff 	.word	0xffff07ff

1000110c <P0_6_set_mode>:

__STATIC_INLINE void P0_5_disable_pps(void){
    PORT0->PPS &= ~0x00000020UL;
}

__STATIC_INLINE void P0_6_set_mode(uint8_t mode){
1000110c:	b580      	push	{r7, lr}
1000110e:	b082      	sub	sp, #8
10001110:	af00      	add	r7, sp, #0
10001112:	1c02      	adds	r2, r0, #0
10001114:	1dfb      	adds	r3, r7, #7
10001116:	701a      	strb	r2, [r3, #0]
    PORT0->IOCR4 &= ~0x00f80000UL;
10001118:	4b08      	ldr	r3, [pc, #32]	; (1000113c <P0_6_set_mode+0x30>)
1000111a:	4a08      	ldr	r2, [pc, #32]	; (1000113c <P0_6_set_mode+0x30>)
1000111c:	6951      	ldr	r1, [r2, #20]
1000111e:	4a08      	ldr	r2, [pc, #32]	; (10001140 <P0_6_set_mode+0x34>)
10001120:	400a      	ands	r2, r1
10001122:	615a      	str	r2, [r3, #20]
    PORT0->IOCR4 |= mode << 16;
10001124:	4b05      	ldr	r3, [pc, #20]	; (1000113c <P0_6_set_mode+0x30>)
10001126:	4a05      	ldr	r2, [pc, #20]	; (1000113c <P0_6_set_mode+0x30>)
10001128:	6951      	ldr	r1, [r2, #20]
1000112a:	1dfa      	adds	r2, r7, #7
1000112c:	7812      	ldrb	r2, [r2, #0]
1000112e:	0412      	lsls	r2, r2, #16
10001130:	430a      	orrs	r2, r1
10001132:	615a      	str	r2, [r3, #20]
}
10001134:	46bd      	mov	sp, r7
10001136:	b002      	add	sp, #8
10001138:	bd80      	pop	{r7, pc}
1000113a:	46c0      	nop			; (mov r8, r8)
1000113c:	40040000 	.word	0x40040000
10001140:	ff07ffff 	.word	0xff07ffff

10001144 <P0_6_read>:

__STATIC_INLINE void P0_6_toggle(void){
    PORT0->OMR = 0x00400040UL;
}

__STATIC_INLINE uint32_t P0_6_read(void){
10001144:	b580      	push	{r7, lr}
10001146:	af00      	add	r7, sp, #0
    return(PORT0->IN & 0x00000040UL);
10001148:	4b03      	ldr	r3, [pc, #12]	; (10001158 <P0_6_read+0x14>)
1000114a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1000114c:	2340      	movs	r3, #64	; 0x40
1000114e:	4013      	ands	r3, r2
}
10001150:	1c18      	adds	r0, r3, #0
10001152:	46bd      	mov	sp, r7
10001154:	bd80      	pop	{r7, pc}
10001156:	46c0      	nop			; (mov r8, r8)
10001158:	40040000 	.word	0x40040000

1000115c <main>:

void updateOnboardLEDs();
void buttonRead(void *ptr);

int main(void)
{
1000115c:	b580      	push	{r7, lr}
1000115e:	b082      	sub	sp, #8
10001160:	af00      	add	r7, sp, #0
//	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)
	DAVE_Init();			// Initialization of DAVE Apps
10001162:	f001 fe3d 	bl	10002de0 <DAVE_Init>
	IO004_SetPin(IO004_Handle0);
10001166:	4b18      	ldr	r3, [pc, #96]	; (100011c8 <main+0x6c>)
10001168:	685b      	ldr	r3, [r3, #4]
1000116a:	4a17      	ldr	r2, [pc, #92]	; (100011c8 <main+0x6c>)
1000116c:	7852      	ldrb	r2, [r2, #1]
1000116e:	2101      	movs	r1, #1
10001170:	1c08      	adds	r0, r1, #0
10001172:	4090      	lsls	r0, r2
10001174:	1c02      	adds	r2, r0, #0
10001176:	605a      	str	r2, [r3, #4]
	P0_5_set_mode(OUTPUT_PP_GP); 	//WS2812 data pin
10001178:	2080      	movs	r0, #128	; 0x80
1000117a:	f7ff ffab 	bl	100010d4 <P0_5_set_mode>
	P0_6_set_mode(INPUT_PU);     	//button
1000117e:	2010      	movs	r0, #16
10001180:	f7ff ffc4 	bl	1000110c <P0_6_set_mode>
	enum colorState state = OFF;
10001184:	1cfb      	adds	r3, r7, #3
10001186:	2200      	movs	r2, #0
10001188:	701a      	strb	r2, [r3, #0]
	handle_t timer;
	timer=SYSTM001_CreateTimer(500,SYSTM001_PERIODIC,updateOnboardLEDs,NULL);
1000118a:	23fa      	movs	r3, #250	; 0xfa
1000118c:	005a      	lsls	r2, r3, #1
1000118e:	4b0f      	ldr	r3, [pc, #60]	; (100011cc <main+0x70>)
10001190:	1c10      	adds	r0, r2, #0
10001192:	2101      	movs	r1, #1
10001194:	1c1a      	adds	r2, r3, #0
10001196:	2300      	movs	r3, #0
10001198:	f001 fada 	bl	10002750 <SYSTM001_CreateTimer>
1000119c:	1c03      	adds	r3, r0, #0
1000119e:	607b      	str	r3, [r7, #4]
	SYSTM001_StartTimer(timer);
100011a0:	687b      	ldr	r3, [r7, #4]
100011a2:	1c18      	adds	r0, r3, #0
100011a4:	f001 fb66 	bl	10002874 <SYSTM001_StartTimer>
	timer=SYSTM001_CreateTimer(400,SYSTM001_PERIODIC,buttonRead,&state);
100011a8:	23c8      	movs	r3, #200	; 0xc8
100011aa:	0059      	lsls	r1, r3, #1
100011ac:	4a08      	ldr	r2, [pc, #32]	; (100011d0 <main+0x74>)
100011ae:	1cfb      	adds	r3, r7, #3
100011b0:	1c08      	adds	r0, r1, #0
100011b2:	2101      	movs	r1, #1
100011b4:	f001 facc 	bl	10002750 <SYSTM001_CreateTimer>
100011b8:	1c03      	adds	r3, r0, #0
100011ba:	607b      	str	r3, [r7, #4]
	SYSTM001_StartTimer(timer);
100011bc:	687b      	ldr	r3, [r7, #4]
100011be:	1c18      	adds	r0, r3, #0
100011c0:	f001 fb58 	bl	10002874 <SYSTM001_StartTimer>
	while(1);
100011c4:	e7fe      	b.n	100011c4 <main+0x68>
100011c6:	46c0      	nop			; (mov r8, r8)
100011c8:	10004d30 	.word	0x10004d30
100011cc:	100011d5 	.word	0x100011d5
100011d0:	1000120d 	.word	0x1000120d

100011d4 <updateOnboardLEDs>:
	return 0;
}


void updateOnboardLEDs()
{
100011d4:	b580      	push	{r7, lr}
100011d6:	af00      	add	r7, sp, #0
	IO004_TogglePin(IO004_Handle0);
100011d8:	4b09      	ldr	r3, [pc, #36]	; (10001200 <updateOnboardLEDs+0x2c>)
100011da:	685b      	ldr	r3, [r3, #4]
100011dc:	4a08      	ldr	r2, [pc, #32]	; (10001200 <updateOnboardLEDs+0x2c>)
100011de:	7852      	ldrb	r2, [r2, #1]
100011e0:	4908      	ldr	r1, [pc, #32]	; (10001204 <updateOnboardLEDs+0x30>)
100011e2:	1c08      	adds	r0, r1, #0
100011e4:	4090      	lsls	r0, r2
100011e6:	1c02      	adds	r2, r0, #0
100011e8:	605a      	str	r2, [r3, #4]
	IO004_TogglePin(IO004_Handle1);
100011ea:	4b07      	ldr	r3, [pc, #28]	; (10001208 <updateOnboardLEDs+0x34>)
100011ec:	685b      	ldr	r3, [r3, #4]
100011ee:	4a06      	ldr	r2, [pc, #24]	; (10001208 <updateOnboardLEDs+0x34>)
100011f0:	7852      	ldrb	r2, [r2, #1]
100011f2:	4904      	ldr	r1, [pc, #16]	; (10001204 <updateOnboardLEDs+0x30>)
100011f4:	1c08      	adds	r0, r1, #0
100011f6:	4090      	lsls	r0, r2
100011f8:	1c02      	adds	r2, r0, #0
100011fa:	605a      	str	r2, [r3, #4]
}
100011fc:	46bd      	mov	sp, r7
100011fe:	bd80      	pop	{r7, pc}
10001200:	10004d30 	.word	0x10004d30
10001204:	00010001 	.word	0x00010001
10001208:	10004d38 	.word	0x10004d38

1000120c <buttonRead>:


void buttonRead(void *ptr)
{
1000120c:	b580      	push	{r7, lr}
1000120e:	b084      	sub	sp, #16
10001210:	af00      	add	r7, sp, #0
10001212:	6078      	str	r0, [r7, #4]
	if(!P0_6_read()) //button pressed?
10001214:	f7ff ff96 	bl	10001144 <P0_6_read>
10001218:	1c03      	adds	r3, r0, #0
1000121a:	2b00      	cmp	r3, #0
1000121c:	d114      	bne.n	10001248 <buttonRead+0x3c>
	{
		enum colorState *lightState = ptr;
1000121e:	687b      	ldr	r3, [r7, #4]
10001220:	60fb      	str	r3, [r7, #12]
		if(*lightState == CYAN) *lightState = OFF; //CYAN is last Value of enum
10001222:	68fb      	ldr	r3, [r7, #12]
10001224:	781b      	ldrb	r3, [r3, #0]
10001226:	2b08      	cmp	r3, #8
10001228:	d103      	bne.n	10001232 <buttonRead+0x26>
1000122a:	68fb      	ldr	r3, [r7, #12]
1000122c:	2200      	movs	r2, #0
1000122e:	701a      	strb	r2, [r3, #0]
10001230:	e005      	b.n	1000123e <buttonRead+0x32>
		else (*lightState)++;
10001232:	68fb      	ldr	r3, [r7, #12]
10001234:	781b      	ldrb	r3, [r3, #0]
10001236:	3301      	adds	r3, #1
10001238:	b2da      	uxtb	r2, r3
1000123a:	68fb      	ldr	r3, [r7, #12]
1000123c:	701a      	strb	r2, [r3, #0]
		updateWS2812LEDs(*lightState);
1000123e:	68fb      	ldr	r3, [r7, #12]
10001240:	781b      	ldrb	r3, [r3, #0]
10001242:	1c18      	adds	r0, r3, #0
10001244:	f000 f804 	bl	10001250 <updateWS2812LEDs>
	}
}
10001248:	46bd      	mov	sp, r7
1000124a:	b004      	add	sp, #16
1000124c:	bd80      	pop	{r7, pc}
1000124e:	46c0      	nop			; (mov r8, r8)

10001250 <updateWS2812LEDs>:
						 0xFF,0xFF,0x00};



void updateWS2812LEDs(enum colorState state)
{
10001250:	b580      	push	{r7, lr}
10001252:	b082      	sub	sp, #8
10001254:	af00      	add	r7, sp, #0
10001256:	1c02      	adds	r2, r0, #0
10001258:	1dfb      	adds	r3, r7, #7
1000125a:	701a      	strb	r2, [r3, #0]


	switch(state)
1000125c:	1dfb      	adds	r3, r7, #7
1000125e:	781b      	ldrb	r3, [r3, #0]
10001260:	2b08      	cmp	r3, #8
10001262:	d900      	bls.n	10001266 <updateWS2812LEDs+0x16>
10001264:	e094      	b.n	10001390 <updateWS2812LEDs+0x140>
10001266:	009a      	lsls	r2, r3, #2
10001268:	4b4b      	ldr	r3, [pc, #300]	; (10001398 <updateWS2812LEDs+0x148>)
1000126a:	18d3      	adds	r3, r2, r3
1000126c:	681b      	ldr	r3, [r3, #0]
1000126e:	469f      	mov	pc, r3
	{
	case RGB:
		ws2812_sendarray((uint8_t*)rgb, sizeof(rgb));
10001270:	4b4a      	ldr	r3, [pc, #296]	; (1000139c <updateWS2812LEDs+0x14c>)
10001272:	1c18      	adds	r0, r3, #0
10001274:	213f      	movs	r1, #63	; 0x3f
10001276:	f000 f8a3 	bl	100013c0 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)rgb, sizeof(rgb));
1000127a:	4b48      	ldr	r3, [pc, #288]	; (1000139c <updateWS2812LEDs+0x14c>)
1000127c:	1c18      	adds	r0, r3, #0
1000127e:	213f      	movs	r1, #63	; 0x3f
10001280:	f000 f89e 	bl	100013c0 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)rgb, sizeof(rgb));
10001284:	4b45      	ldr	r3, [pc, #276]	; (1000139c <updateWS2812LEDs+0x14c>)
10001286:	1c18      	adds	r0, r3, #0
10001288:	213f      	movs	r1, #63	; 0x3f
1000128a:	f000 f899 	bl	100013c0 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)rgb, sizeof(rgb));
1000128e:	4b43      	ldr	r3, [pc, #268]	; (1000139c <updateWS2812LEDs+0x14c>)
10001290:	1c18      	adds	r0, r3, #0
10001292:	213f      	movs	r1, #63	; 0x3f
10001294:	f000 f894 	bl	100013c0 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)rgb, sizeof(rgb));
10001298:	4b40      	ldr	r3, [pc, #256]	; (1000139c <updateWS2812LEDs+0x14c>)
1000129a:	1c18      	adds	r0, r3, #0
1000129c:	213f      	movs	r1, #63	; 0x3f
1000129e:	f000 f88f 	bl	100013c0 <ws2812_sendarray>
		break;
100012a2:	e076      	b.n	10001392 <updateWS2812LEDs+0x142>
	case RED:
		ws2812_sendarray((uint8_t*)red, sizeof(red));
100012a4:	4b3e      	ldr	r3, [pc, #248]	; (100013a0 <updateWS2812LEDs+0x150>)
100012a6:	1c18      	adds	r0, r3, #0
100012a8:	213f      	movs	r1, #63	; 0x3f
100012aa:	f000 f889 	bl	100013c0 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)red, sizeof(red));
100012ae:	4b3c      	ldr	r3, [pc, #240]	; (100013a0 <updateWS2812LEDs+0x150>)
100012b0:	1c18      	adds	r0, r3, #0
100012b2:	213f      	movs	r1, #63	; 0x3f
100012b4:	f000 f884 	bl	100013c0 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)red, sizeof(red));
100012b8:	4b39      	ldr	r3, [pc, #228]	; (100013a0 <updateWS2812LEDs+0x150>)
100012ba:	1c18      	adds	r0, r3, #0
100012bc:	213f      	movs	r1, #63	; 0x3f
100012be:	f000 f87f 	bl	100013c0 <ws2812_sendarray>
		break;
100012c2:	e066      	b.n	10001392 <updateWS2812LEDs+0x142>
	case GREEN:
		ws2812_sendarray((uint8_t*)green, sizeof(green));
100012c4:	4b37      	ldr	r3, [pc, #220]	; (100013a4 <updateWS2812LEDs+0x154>)
100012c6:	1c18      	adds	r0, r3, #0
100012c8:	213f      	movs	r1, #63	; 0x3f
100012ca:	f000 f879 	bl	100013c0 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)green, sizeof(green));
100012ce:	4b35      	ldr	r3, [pc, #212]	; (100013a4 <updateWS2812LEDs+0x154>)
100012d0:	1c18      	adds	r0, r3, #0
100012d2:	213f      	movs	r1, #63	; 0x3f
100012d4:	f000 f874 	bl	100013c0 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)green, sizeof(green));
100012d8:	4b32      	ldr	r3, [pc, #200]	; (100013a4 <updateWS2812LEDs+0x154>)
100012da:	1c18      	adds	r0, r3, #0
100012dc:	213f      	movs	r1, #63	; 0x3f
100012de:	f000 f86f 	bl	100013c0 <ws2812_sendarray>
		break;
100012e2:	e056      	b.n	10001392 <updateWS2812LEDs+0x142>
	case BLUE:
		ws2812_sendarray((uint8_t*)blue, sizeof(blue));
100012e4:	4b30      	ldr	r3, [pc, #192]	; (100013a8 <updateWS2812LEDs+0x158>)
100012e6:	1c18      	adds	r0, r3, #0
100012e8:	213f      	movs	r1, #63	; 0x3f
100012ea:	f000 f869 	bl	100013c0 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)blue, sizeof(blue));
100012ee:	4b2e      	ldr	r3, [pc, #184]	; (100013a8 <updateWS2812LEDs+0x158>)
100012f0:	1c18      	adds	r0, r3, #0
100012f2:	213f      	movs	r1, #63	; 0x3f
100012f4:	f000 f864 	bl	100013c0 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)blue, sizeof(blue));
100012f8:	4b2b      	ldr	r3, [pc, #172]	; (100013a8 <updateWS2812LEDs+0x158>)
100012fa:	1c18      	adds	r0, r3, #0
100012fc:	213f      	movs	r1, #63	; 0x3f
100012fe:	f000 f85f 	bl	100013c0 <ws2812_sendarray>
		break;
10001302:	e046      	b.n	10001392 <updateWS2812LEDs+0x142>
	case WHITE:
		ws2812_sendarray((uint8_t*)white, sizeof(white));
10001304:	4b29      	ldr	r3, [pc, #164]	; (100013ac <updateWS2812LEDs+0x15c>)
10001306:	1c18      	adds	r0, r3, #0
10001308:	213f      	movs	r1, #63	; 0x3f
1000130a:	f000 f859 	bl	100013c0 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)white, sizeof(white));
1000130e:	4b27      	ldr	r3, [pc, #156]	; (100013ac <updateWS2812LEDs+0x15c>)
10001310:	1c18      	adds	r0, r3, #0
10001312:	213f      	movs	r1, #63	; 0x3f
10001314:	f000 f854 	bl	100013c0 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)white, sizeof(white));
10001318:	4b24      	ldr	r3, [pc, #144]	; (100013ac <updateWS2812LEDs+0x15c>)
1000131a:	1c18      	adds	r0, r3, #0
1000131c:	213f      	movs	r1, #63	; 0x3f
1000131e:	f000 f84f 	bl	100013c0 <ws2812_sendarray>
		break;
10001322:	e036      	b.n	10001392 <updateWS2812LEDs+0x142>
	case YELLOW:
		ws2812_sendarray((uint8_t*)yello, sizeof(yello));
10001324:	4b22      	ldr	r3, [pc, #136]	; (100013b0 <updateWS2812LEDs+0x160>)
10001326:	1c18      	adds	r0, r3, #0
10001328:	213f      	movs	r1, #63	; 0x3f
1000132a:	f000 f849 	bl	100013c0 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)yello, sizeof(yello));
1000132e:	4b20      	ldr	r3, [pc, #128]	; (100013b0 <updateWS2812LEDs+0x160>)
10001330:	1c18      	adds	r0, r3, #0
10001332:	213f      	movs	r1, #63	; 0x3f
10001334:	f000 f844 	bl	100013c0 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)yello, sizeof(yello));
10001338:	4b1d      	ldr	r3, [pc, #116]	; (100013b0 <updateWS2812LEDs+0x160>)
1000133a:	1c18      	adds	r0, r3, #0
1000133c:	213f      	movs	r1, #63	; 0x3f
1000133e:	f000 f83f 	bl	100013c0 <ws2812_sendarray>
		break;
10001342:	e026      	b.n	10001392 <updateWS2812LEDs+0x142>
	case PURPLE:
		ws2812_sendarray((uint8_t*)purpl, sizeof(purpl));
10001344:	4b1b      	ldr	r3, [pc, #108]	; (100013b4 <updateWS2812LEDs+0x164>)
10001346:	1c18      	adds	r0, r3, #0
10001348:	213f      	movs	r1, #63	; 0x3f
1000134a:	f000 f839 	bl	100013c0 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)purpl, sizeof(purpl));
1000134e:	4b19      	ldr	r3, [pc, #100]	; (100013b4 <updateWS2812LEDs+0x164>)
10001350:	1c18      	adds	r0, r3, #0
10001352:	213f      	movs	r1, #63	; 0x3f
10001354:	f000 f834 	bl	100013c0 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)purpl, sizeof(purpl));
10001358:	4b16      	ldr	r3, [pc, #88]	; (100013b4 <updateWS2812LEDs+0x164>)
1000135a:	1c18      	adds	r0, r3, #0
1000135c:	213f      	movs	r1, #63	; 0x3f
1000135e:	f000 f82f 	bl	100013c0 <ws2812_sendarray>
		break;
10001362:	e016      	b.n	10001392 <updateWS2812LEDs+0x142>
	case CYAN:
		ws2812_sendarray((uint8_t*)cyan, sizeof(cyan));
10001364:	4b14      	ldr	r3, [pc, #80]	; (100013b8 <updateWS2812LEDs+0x168>)
10001366:	1c18      	adds	r0, r3, #0
10001368:	213f      	movs	r1, #63	; 0x3f
1000136a:	f000 f829 	bl	100013c0 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)cyan, sizeof(cyan));
1000136e:	4b12      	ldr	r3, [pc, #72]	; (100013b8 <updateWS2812LEDs+0x168>)
10001370:	1c18      	adds	r0, r3, #0
10001372:	213f      	movs	r1, #63	; 0x3f
10001374:	f000 f824 	bl	100013c0 <ws2812_sendarray>
		ws2812_sendarray((uint8_t*)cyan, sizeof(cyan));
10001378:	4b0f      	ldr	r3, [pc, #60]	; (100013b8 <updateWS2812LEDs+0x168>)
1000137a:	1c18      	adds	r0, r3, #0
1000137c:	213f      	movs	r1, #63	; 0x3f
1000137e:	f000 f81f 	bl	100013c0 <ws2812_sendarray>
		break;
10001382:	e006      	b.n	10001392 <updateWS2812LEDs+0x142>
	case OFF:
		ws2812_sendarray((uint8_t*)off, sizeof(off));
10001384:	4b0d      	ldr	r3, [pc, #52]	; (100013bc <updateWS2812LEDs+0x16c>)
10001386:	1c18      	adds	r0, r3, #0
10001388:	213f      	movs	r1, #63	; 0x3f
1000138a:	f000 f819 	bl	100013c0 <ws2812_sendarray>
		break;
1000138e:	e000      	b.n	10001392 <updateWS2812LEDs+0x142>
	default:
		break;
10001390:	46c0      	nop			; (mov r8, r8)
	}
}
10001392:	46bd      	mov	sp, r7
10001394:	b002      	add	sp, #8
10001396:	bd80      	pop	{r7, pc}
10001398:	10004cd8 	.word	0x10004cd8
1000139c:	10004a98 	.word	0x10004a98
100013a0:	10004ad8 	.word	0x10004ad8
100013a4:	10004b18 	.word	0x10004b18
100013a8:	10004b58 	.word	0x10004b58
100013ac:	10004b98 	.word	0x10004b98
100013b0:	10004c98 	.word	0x10004c98
100013b4:	10004c18 	.word	0x10004c18
100013b8:	10004c58 	.word	0x10004c58
100013bc:	10004bd8 	.word	0x10004bd8

100013c0 <ws2812_sendarray>:
#define ws2812_DEL8 ws2812_DEL4 ws2812_DEL4
#define ws2812_DEL16 ws2812_DEL8 ws2812_DEL8


void ws2812_sendarray(uint8_t *data,int datlen)
{
100013c0:	b5b0      	push	{r4, r5, r7, lr}
100013c2:	b088      	sub	sp, #32
100013c4:	af00      	add	r7, sp, #0
100013c6:	6078      	str	r0, [r7, #4]
100013c8:	6039      	str	r1, [r7, #0]
	uint32_t maskhi = ws2812_mask_set;
100013ca:	2320      	movs	r3, #32
100013cc:	61bb      	str	r3, [r7, #24]
	uint32_t masklo = ws2812_mask_clr;
100013ce:	2380      	movs	r3, #128	; 0x80
100013d0:	039b      	lsls	r3, r3, #14
100013d2:	617b      	str	r3, [r7, #20]
	volatile uint32_t *set = ws2812_port_set;
100013d4:	4b14      	ldr	r3, [pc, #80]	; (10001428 <end45+0x1c>)
100013d6:	613b      	str	r3, [r7, #16]
	volatile uint32_t *clr = ws2812_port_clr;
100013d8:	4b13      	ldr	r3, [pc, #76]	; (10001428 <end45+0x1c>)
100013da:	60fb      	str	r3, [r7, #12]
	uint32_t i;
	uint32_t curbyte;

	while (datlen--) {
100013dc:	e017      	b.n	1000140e <end45+0x2>
		curbyte=*data++;
100013de:	687b      	ldr	r3, [r7, #4]
100013e0:	781b      	ldrb	r3, [r3, #0]
100013e2:	60bb      	str	r3, [r7, #8]
100013e4:	687b      	ldr	r3, [r7, #4]
100013e6:	3301      	adds	r3, #1
100013e8:	607b      	str	r3, [r7, #4]

	asm volatile(
100013ea:	68bb      	ldr	r3, [r7, #8]
100013ec:	693a      	ldr	r2, [r7, #16]
100013ee:	68f9      	ldr	r1, [r7, #12]
100013f0:	6978      	ldr	r0, [r7, #20]
100013f2:	69bd      	ldr	r5, [r7, #24]
100013f4:	69fc      	ldr	r4, [r7, #28]
100013f6:	061b      	lsls	r3, r3, #24
100013f8:	2408      	movs	r4, #8

100013fa <ilop45>:
100013fa:	005b      	lsls	r3, r3, #1
100013fc:	6015      	str	r5, [r2, #0]
100013fe:	46c0      	nop			; (mov r8, r8)
10001400:	d200      	bcs.n	10001404 <one45>
10001402:	6008      	str	r0, [r1, #0]

10001404 <one45>:
10001404:	3c01      	subs	r4, #1
10001406:	6008      	str	r0, [r1, #0]
10001408:	d000      	beq.n	1000140c <end45>
1000140a:	e7f6      	b.n	100013fa <ilop45>

1000140c <end45>:
1000140c:	61fc      	str	r4, [r7, #28]
	volatile uint32_t *set = ws2812_port_set;
	volatile uint32_t *clr = ws2812_port_clr;
	uint32_t i;
	uint32_t curbyte;

	while (datlen--) {
1000140e:	683b      	ldr	r3, [r7, #0]
10001410:	1e5a      	subs	r2, r3, #1
10001412:	4193      	sbcs	r3, r2
10001414:	b2db      	uxtb	r3, r3
10001416:	683a      	ldr	r2, [r7, #0]
10001418:	3a01      	subs	r2, #1
1000141a:	603a      	str	r2, [r7, #0]
1000141c:	2b00      	cmp	r3, #0
1000141e:	d1de      	bne.n	100013de <ws2812_sendarray+0x1e>
			"end%=:								\n\t"
			:	[ctr] "+r" (i)
			:	[dat] "r" (curbyte), [set] "r" (set), [clr] "r" (clr), [masklo] "r" (masklo), [maskhi] "r" (maskhi)
			);
	}
}
10001420:	46bd      	mov	sp, r7
10001422:	b008      	add	sp, #32
10001424:	bdb0      	pop	{r4, r5, r7, pc}
10001426:	46c0      	nop			; (mov r8, r8)
10001428:	40040004 	.word	0x40040004

1000142c <NMI_Handler>:
/* Default exception Handlers - Users may override this default functionality by
   defining handlers of the same name in their C code */
    .thumb 
    .text

    Insert_ExceptionHandler NMI_Handler
1000142c:	e7fe      	b.n	1000142c <NMI_Handler>

1000142e <HardFault_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler HardFault_Handler
1000142e:	e7fe      	b.n	1000142e <HardFault_Handler>

10001430 <SVC_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler SVC_Handler
10001430:	e7fe      	b.n	10001430 <SVC_Handler>

10001432 <PendSV_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler PendSV_Handler
10001432:	e7fe      	b.n	10001432 <PendSV_Handler>
/* ======================================================================== */
    Insert_ExceptionHandler SysTick_Handler
10001434:	e7fe      	b.n	10001434 <PendSV_Handler+0x2>

10001436 <SCU_0_IRQHandler>:
/* ============= END OF EXCEPTION HANDLER DEFINITION ======================== */

/* ============= START OF INTERRUPT HANDLER DEFINITION ====================== */

/* IRQ Handlers */
    Insert_ExceptionHandler SCU_0_IRQHandler
10001436:	e7fe      	b.n	10001436 <SCU_0_IRQHandler>

10001438 <SCU_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_1_IRQHandler
10001438:	e7fe      	b.n	10001438 <SCU_1_IRQHandler>

1000143a <SCU_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_2_IRQHandler
1000143a:	e7fe      	b.n	1000143a <SCU_2_IRQHandler>

1000143c <ERU0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_0_IRQHandler
1000143c:	e7fe      	b.n	1000143c <ERU0_0_IRQHandler>

1000143e <ERU0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_1_IRQHandler
1000143e:	e7fe      	b.n	1000143e <ERU0_1_IRQHandler>

10001440 <ERU0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_2_IRQHandler
10001440:	e7fe      	b.n	10001440 <ERU0_2_IRQHandler>

10001442 <ERU0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_3_IRQHandler
10001442:	e7fe      	b.n	10001442 <ERU0_3_IRQHandler>

10001444 <VADC0_C0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_0_IRQHandler
10001444:	e7fe      	b.n	10001444 <VADC0_C0_0_IRQHandler>

10001446 <VADC0_C0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_1_IRQHandler
10001446:	e7fe      	b.n	10001446 <VADC0_C0_1_IRQHandler>

10001448 <CCU40_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_0_IRQHandler
10001448:	e7fe      	b.n	10001448 <CCU40_0_IRQHandler>

1000144a <CCU40_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_1_IRQHandler
1000144a:	e7fe      	b.n	1000144a <CCU40_1_IRQHandler>

1000144c <CCU40_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_2_IRQHandler
1000144c:	e7fe      	b.n	1000144c <CCU40_2_IRQHandler>

1000144e <CCU40_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_3_IRQHandler
1000144e:	e7fe      	b.n	1000144e <CCU40_3_IRQHandler>

10001450 <USIC0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_0_IRQHandler
10001450:	e7fe      	b.n	10001450 <USIC0_0_IRQHandler>

10001452 <USIC0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_1_IRQHandler
10001452:	e7fe      	b.n	10001452 <USIC0_1_IRQHandler>

10001454 <USIC0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_2_IRQHandler
10001454:	e7fe      	b.n	10001454 <USIC0_2_IRQHandler>

10001456 <USIC0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_3_IRQHandler
10001456:	e7fe      	b.n	10001456 <USIC0_3_IRQHandler>

10001458 <USIC0_4_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_4_IRQHandler
10001458:	e7fe      	b.n	10001458 <USIC0_4_IRQHandler>

1000145a <USIC0_5_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_5_IRQHandler
1000145a:	e7fe      	b.n	1000145a <USIC0_5_IRQHandler>

1000145c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{    
1000145c:	b580      	push	{r7, lr}
1000145e:	af00      	add	r7, sp, #0
   * while((SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk));
   * SCU_GENERAL->PASSWD = 0x000000C3UL; // enable bit protection
   * SystemCoreClockUpdate();
   *
   */
  SystemCoreClockUpdate();
10001460:	f000 f802 	bl	10001468 <SystemCoreClockUpdate>
}
10001464:	46bd      	mov	sp, r7
10001466:	bd80      	pop	{r7, pc}

10001468 <SystemCoreClockUpdate>:
  * @note   -  
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10001468:	b580      	push	{r7, lr}
1000146a:	b082      	sub	sp, #8
1000146c:	af00      	add	r7, sp, #0
  uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
1000146e:	4b11      	ldr	r3, [pc, #68]	; (100014b4 <SystemCoreClockUpdate+0x4c>)
10001470:	681a      	ldr	r2, [r3, #0]
10001472:	23ff      	movs	r3, #255	; 0xff
10001474:	021b      	lsls	r3, r3, #8
10001476:	4013      	ands	r3, r2
10001478:	0a1b      	lsrs	r3, r3, #8
1000147a:	607b      	str	r3, [r7, #4]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
1000147c:	4b0d      	ldr	r3, [pc, #52]	; (100014b4 <SystemCoreClockUpdate+0x4c>)
1000147e:	681a      	ldr	r2, [r3, #0]
10001480:	23ff      	movs	r3, #255	; 0xff
10001482:	4013      	ands	r3, r2
10001484:	603b      	str	r3, [r7, #0]
  
  if(IDIV)
10001486:	687b      	ldr	r3, [r7, #4]
10001488:	2b00      	cmp	r3, #0
1000148a:	d00c      	beq.n	100014a6 <SystemCoreClockUpdate+0x3e>
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((MCLK_MHZ << 7) / ((IDIV << 8) + FDIV)) << 1;
1000148c:	687b      	ldr	r3, [r7, #4]
1000148e:	021a      	lsls	r2, r3, #8
10001490:	683b      	ldr	r3, [r7, #0]
10001492:	18d3      	adds	r3, r2, r3
10001494:	4808      	ldr	r0, [pc, #32]	; (100014b8 <SystemCoreClockUpdate+0x50>)
10001496:	1c19      	adds	r1, r3, #0
10001498:	f001 fe56 	bl	10003148 <__aeabi_uidiv>
1000149c:	1c03      	adds	r3, r0, #0
1000149e:	005a      	lsls	r2, r3, #1
100014a0:	4b06      	ldr	r3, [pc, #24]	; (100014bc <SystemCoreClockUpdate+0x54>)
100014a2:	601a      	str	r2, [r3, #0]
100014a4:	e002      	b.n	100014ac <SystemCoreClockUpdate+0x44>
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = MCLK_MHZ;
100014a6:	4b05      	ldr	r3, [pc, #20]	; (100014bc <SystemCoreClockUpdate+0x54>)
100014a8:	4a05      	ldr	r2, [pc, #20]	; (100014c0 <SystemCoreClockUpdate+0x58>)
100014aa:	601a      	str	r2, [r3, #0]
  }
}
100014ac:	46bd      	mov	sp, r7
100014ae:	b002      	add	sp, #8
100014b0:	bd80      	pop	{r7, pc}
100014b2:	46c0      	nop			; (mov r8, r8)
100014b4:	40010300 	.word	0x40010300
100014b8:	f4240000 	.word	0xf4240000
100014bc:	20000938 	.word	0x20000938
100014c0:	01e84800 	.word	0x01e84800

100014c4 <_open>:
/* ========================================================================= */
/*
 * File open
 */
__attribute__((weak)) int _open(const char *name, int flags, int mode)
{
100014c4:	b580      	push	{r7, lr}
100014c6:	b084      	sub	sp, #16
100014c8:	af00      	add	r7, sp, #0
100014ca:	60f8      	str	r0, [r7, #12]
100014cc:	60b9      	str	r1, [r7, #8]
100014ce:	607a      	str	r2, [r7, #4]
 flags = flags;
 mode = mode;
 return -1;
100014d0:	2301      	movs	r3, #1
100014d2:	425b      	negs	r3, r3
}
100014d4:	1c18      	adds	r0, r3, #0
100014d6:	46bd      	mov	sp, r7
100014d8:	b004      	add	sp, #16
100014da:	bd80      	pop	{r7, pc}

100014dc <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
100014dc:	b580      	push	{r7, lr}
100014de:	b084      	sub	sp, #16
100014e0:	af00      	add	r7, sp, #0
100014e2:	60f8      	str	r0, [r7, #12]
100014e4:	60b9      	str	r1, [r7, #8]
100014e6:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
100014e8:	2301      	movs	r3, #1
100014ea:	425b      	negs	r3, r3
}
100014ec:	1c18      	adds	r0, r3, #0
100014ee:	46bd      	mov	sp, r7
100014f0:	b004      	add	sp, #16
100014f2:	bd80      	pop	{r7, pc}

100014f4 <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
100014f4:	b580      	push	{r7, lr}
100014f6:	b084      	sub	sp, #16
100014f8:	af00      	add	r7, sp, #0
100014fa:	60f8      	str	r0, [r7, #12]
100014fc:	60b9      	str	r1, [r7, #8]
100014fe:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
10001500:	2300      	movs	r3, #0
}
10001502:	1c18      	adds	r0, r3, #0
10001504:	46bd      	mov	sp, r7
10001506:	b004      	add	sp, #16
10001508:	bd80      	pop	{r7, pc}
1000150a:	46c0      	nop			; (mov r8, r8)

1000150c <_write>:

/*
 * File write
 */
__attribute__((weak)) int _write(int file, char *buf, int nbytes)
{
1000150c:	b580      	push	{r7, lr}
1000150e:	b084      	sub	sp, #16
10001510:	af00      	add	r7, sp, #0
10001512:	60f8      	str	r0, [r7, #12]
10001514:	60b9      	str	r1, [r7, #8]
10001516:	607a      	str	r2, [r7, #4]
 return -1;
10001518:	2301      	movs	r3, #1
1000151a:	425b      	negs	r3, r3
}
1000151c:	1c18      	adds	r0, r3, #0
1000151e:	46bd      	mov	sp, r7
10001520:	b004      	add	sp, #16
10001522:	bd80      	pop	{r7, pc}

10001524 <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
10001524:	b580      	push	{r7, lr}
10001526:	af00      	add	r7, sp, #0
 return -1;
10001528:	2301      	movs	r3, #1
1000152a:	425b      	negs	r3, r3
}
1000152c:	1c18      	adds	r0, r3, #0
1000152e:	46bd      	mov	sp, r7
10001530:	bd80      	pop	{r7, pc}
10001532:	46c0      	nop			; (mov r8, r8)

10001534 <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
10001534:	b580      	push	{r7, lr}
10001536:	b082      	sub	sp, #8
10001538:	af00      	add	r7, sp, #0
1000153a:	6078      	str	r0, [r7, #4]
1000153c:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
1000153e:	683b      	ldr	r3, [r7, #0]
10001540:	2b00      	cmp	r3, #0
10001542:	d002      	beq.n	1000154a <_fstat+0x16>
  return -1;
10001544:	2301      	movs	r3, #1
10001546:	425b      	negs	r3, r3
10001548:	e001      	b.n	1000154e <_fstat+0x1a>
 else
  return -2;
1000154a:	2302      	movs	r3, #2
1000154c:	425b      	negs	r3, r3
}
1000154e:	1c18      	adds	r0, r3, #0
10001550:	46bd      	mov	sp, r7
10001552:	b002      	add	sp, #8
10001554:	bd80      	pop	{r7, pc}
10001556:	46c0      	nop			; (mov r8, r8)

10001558 <_link>:
/*
 * File linking
 */
__attribute__((weak)) int _link (char *old, char *new)
{
10001558:	b580      	push	{r7, lr}
1000155a:	b082      	sub	sp, #8
1000155c:	af00      	add	r7, sp, #0
1000155e:	6078      	str	r0, [r7, #4]
10001560:	6039      	str	r1, [r7, #0]
 if (old == new)
10001562:	687a      	ldr	r2, [r7, #4]
10001564:	683b      	ldr	r3, [r7, #0]
10001566:	429a      	cmp	r2, r3
10001568:	d102      	bne.n	10001570 <_link+0x18>
  return -1;
1000156a:	2301      	movs	r3, #1
1000156c:	425b      	negs	r3, r3
1000156e:	e001      	b.n	10001574 <_link+0x1c>
 else
  return -2;
10001570:	2302      	movs	r3, #2
10001572:	425b      	negs	r3, r3
}
10001574:	1c18      	adds	r0, r3, #0
10001576:	46bd      	mov	sp, r7
10001578:	b002      	add	sp, #8
1000157a:	bd80      	pop	{r7, pc}

1000157c <_unlink>:

/*
 * Unlinking directory entry
 */
__attribute__((weak)) int _unlink(char *name)
{
1000157c:	b580      	push	{r7, lr}
1000157e:	b082      	sub	sp, #8
10001580:	af00      	add	r7, sp, #0
10001582:	6078      	str	r0, [r7, #4]
 return -1;
10001584:	2301      	movs	r3, #1
10001586:	425b      	negs	r3, r3
}
10001588:	1c18      	adds	r0, r3, #0
1000158a:	46bd      	mov	sp, r7
1000158c:	b002      	add	sp, #8
1000158e:	bd80      	pop	{r7, pc}

10001590 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
10001590:	b580      	push	{r7, lr}
10001592:	b086      	sub	sp, #24
10001594:	af00      	add	r7, sp, #0
10001596:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
10001598:	4b14      	ldr	r3, [pc, #80]	; (100015ec <_sbrk+0x5c>)
1000159a:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
1000159c:	4b14      	ldr	r3, [pc, #80]	; (100015f0 <_sbrk+0x60>)
1000159e:	681b      	ldr	r3, [r3, #0]
100015a0:	2b00      	cmp	r3, #0
100015a2:	d108      	bne.n	100015b6 <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
100015a4:	4b12      	ldr	r3, [pc, #72]	; (100015f0 <_sbrk+0x60>)
100015a6:	4a13      	ldr	r2, [pc, #76]	; (100015f4 <_sbrk+0x64>)
100015a8:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
100015aa:	4b11      	ldr	r3, [pc, #68]	; (100015f0 <_sbrk+0x60>)
100015ac:	681a      	ldr	r2, [r3, #0]
100015ae:	697b      	ldr	r3, [r7, #20]
100015b0:	18d2      	adds	r2, r2, r3
100015b2:	4b11      	ldr	r3, [pc, #68]	; (100015f8 <_sbrk+0x68>)
100015b4:	601a      	str	r2, [r3, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
100015b6:	4b0e      	ldr	r3, [pc, #56]	; (100015f0 <_sbrk+0x60>)
100015b8:	681b      	ldr	r3, [r3, #0]
100015ba:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
100015bc:	4b0c      	ldr	r3, [pc, #48]	; (100015f0 <_sbrk+0x60>)
100015be:	681b      	ldr	r3, [r3, #0]
100015c0:	1c1a      	adds	r2, r3, #0
100015c2:	687b      	ldr	r3, [r7, #4]
100015c4:	18d3      	adds	r3, r2, r3
100015c6:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
100015c8:	2207      	movs	r2, #7
100015ca:	4393      	bics	r3, r2
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
100015cc:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
100015ce:	4b0a      	ldr	r3, [pc, #40]	; (100015f8 <_sbrk+0x68>)
100015d0:	681b      	ldr	r3, [r3, #0]
100015d2:	68fa      	ldr	r2, [r7, #12]
100015d4:	429a      	cmp	r2, r3
100015d6:	d301      	bcc.n	100015dc <_sbrk+0x4c>
  return ((unsigned char *)NULL);
100015d8:	2300      	movs	r3, #0
100015da:	e003      	b.n	100015e4 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
100015dc:	4b04      	ldr	r3, [pc, #16]	; (100015f0 <_sbrk+0x60>)
100015de:	68fa      	ldr	r2, [r7, #12]
100015e0:	601a      	str	r2, [r3, #0]
  return CurrBreak;
100015e2:	693b      	ldr	r3, [r7, #16]
 }
}
100015e4:	1c18      	adds	r0, r3, #0
100015e6:	46bd      	mov	sp, r7
100015e8:	b006      	add	sp, #24
100015ea:	bd80      	pop	{r7, pc}
100015ec:	00003578 	.word	0x00003578
100015f0:	20000924 	.word	0x20000924
100015f4:	20000a88 	.word	0x20000a88
100015f8:	20000928 	.word	0x20000928

100015fc <_times>:
/* ========================================================================= */
/*
 * Process timing information
 */
__attribute__((weak)) int _times(struct tms *buf)
{
100015fc:	b580      	push	{r7, lr}
100015fe:	b082      	sub	sp, #8
10001600:	af00      	add	r7, sp, #0
10001602:	6078      	str	r0, [r7, #4]
 return -1;
10001604:	2301      	movs	r3, #1
10001606:	425b      	negs	r3, r3
}
10001608:	1c18      	adds	r0, r3, #0
1000160a:	46bd      	mov	sp, r7
1000160c:	b002      	add	sp, #8
1000160e:	bd80      	pop	{r7, pc}

10001610 <_wait>:
/*
 * Waiting for a child process to complete
 */
__attribute__((weak)) int _wait(int *status)
{
10001610:	b580      	push	{r7, lr}
10001612:	b082      	sub	sp, #8
10001614:	af00      	add	r7, sp, #0
10001616:	6078      	str	r0, [r7, #4]
 return -1;
10001618:	2301      	movs	r3, #1
1000161a:	425b      	negs	r3, r3
}
1000161c:	1c18      	adds	r0, r3, #0
1000161e:	46bd      	mov	sp, r7
10001620:	b002      	add	sp, #8
10001622:	bd80      	pop	{r7, pc}

10001624 <_kill>:

/*
 * Kill a process
 */
__attribute__((weak)) int _kill(int pid,int sig)
{
10001624:	b580      	push	{r7, lr}
10001626:	b082      	sub	sp, #8
10001628:	af00      	add	r7, sp, #0
1000162a:	6078      	str	r0, [r7, #4]
1000162c:	6039      	str	r1, [r7, #0]
 pid = pid;
 sig = sig;
 return -1;
1000162e:	2301      	movs	r3, #1
10001630:	425b      	negs	r3, r3
}
10001632:	1c18      	adds	r0, r3, #0
10001634:	46bd      	mov	sp, r7
10001636:	b002      	add	sp, #8
10001638:	bd80      	pop	{r7, pc}
1000163a:	46c0      	nop			; (mov r8, r8)

1000163c <_fork>:

/*
 * Forking a child process
 */
__attribute__((weak)) int _fork(void)
{
1000163c:	b580      	push	{r7, lr}
1000163e:	af00      	add	r7, sp, #0
 return -1;
10001640:	2301      	movs	r3, #1
10001642:	425b      	negs	r3, r3
}
10001644:	1c18      	adds	r0, r3, #0
10001646:	46bd      	mov	sp, r7
10001648:	bd80      	pop	{r7, pc}
1000164a:	46c0      	nop			; (mov r8, r8)

1000164c <_getpid>:

/*
 * Process ID
 */
__attribute__((weak)) int _getpid(void)
{
1000164c:	b580      	push	{r7, lr}
1000164e:	af00      	add	r7, sp, #0
 return -1;
10001650:	2301      	movs	r3, #1
10001652:	425b      	negs	r3, r3
}
10001654:	1c18      	adds	r0, r3, #0
10001656:	46bd      	mov	sp, r7
10001658:	bd80      	pop	{r7, pc}
1000165a:	46c0      	nop			; (mov r8, r8)

1000165c <_exit>:

/*
 * Program/process exit
 */
__attribute__((weak)) void _exit(int rc)
{
1000165c:	b580      	push	{r7, lr}
1000165e:	b082      	sub	sp, #8
10001660:	af00      	add	r7, sp, #0
10001662:	6078      	str	r0, [r7, #4]
 rc = rc;
 while(1){}
10001664:	e7fe      	b.n	10001664 <_exit+0x8>
10001666:	46c0      	nop			; (mov r8, r8)

10001668 <_init>:
}

/* Init */
__attribute__((weak)) void _init(void)
{}
10001668:	b580      	push	{r7, lr}
1000166a:	af00      	add	r7, sp, #0
1000166c:	46bd      	mov	sp, r7
1000166e:	bd80      	pop	{r7, pc}

10001670 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
10001670:	b580      	push	{r7, lr}
10001672:	b082      	sub	sp, #8
10001674:	af00      	add	r7, sp, #0
10001676:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
10001678:	2301      	movs	r3, #1
1000167a:	425b      	negs	r3, r3
}
1000167c:	1c18      	adds	r0, r3, #0
1000167e:	46bd      	mov	sp, r7
10001680:	b002      	add	sp, #8
10001682:	bd80      	pop	{r7, pc}

10001684 <UART001_lInit>:
 * @return  None <BR>
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/ 
void UART001_lInit (const UART001_HandleType* Handle)
{
10001684:	b580      	push	{r7, lr}
10001686:	b084      	sub	sp, #16
10001688:	af00      	add	r7, sp, #0
1000168a:	6078      	str	r0, [r7, #4]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
1000168c:	687b      	ldr	r3, [r7, #4]
1000168e:	681b      	ldr	r3, [r3, #0]
10001690:	60fb      	str	r3, [r7, #12]
 
  /** UART initialisation  */

  /* Disable UART mode before configuring all USIC registers to avoid 
   * unintended edges */ 
  UartRegs->CCR &= ~( ((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk))); 
10001692:	68fb      	ldr	r3, [r7, #12]
10001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001696:	2202      	movs	r2, #2
10001698:	1c19      	adds	r1, r3, #0
1000169a:	4391      	bics	r1, r2
1000169c:	1c0a      	adds	r2, r1, #0
1000169e:	68fb      	ldr	r3, [r7, #12]
100016a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable the USIC Channel */
  UartRegs->KSCFG |= ((((uint32_t)MASK_ONE  & USIC_CH_KSCFG_MODEN_Msk)) | \
100016a2:	68fb      	ldr	r3, [r7, #12]
100016a4:	68db      	ldr	r3, [r3, #12]
100016a6:	2203      	movs	r2, #3
100016a8:	431a      	orrs	r2, r3
100016aa:	68fb      	ldr	r3, [r7, #12]
100016ac:	60da      	str	r2, [r3, #12]
                         USIC_CH_KSCFG_BPMODEN_Msk)); 
   
  /* Configuration of USIC Channel Fractional Divider */

  /* Fractional divider mode selected */
  UartRegs->FDR |= (((uint32_t)SHIFT_TWO << USIC_CH_FDR_DM_Pos) \
100016ae:	68fb      	ldr	r3, [r7, #12]
100016b0:	691b      	ldr	r3, [r3, #16]
100016b2:	2280      	movs	r2, #128	; 0x80
100016b4:	0212      	lsls	r2, r2, #8
100016b6:	431a      	orrs	r2, r3
100016b8:	68fb      	ldr	r3, [r7, #12]
100016ba:	611a      	str	r2, [r3, #16]
                                                     & USIC_CH_FDR_DM_Msk);
  
  /* Step value */
  UartRegs->FDR |= ((Handle->BGR_STEP) & USIC_CH_FDR_STEP_Msk);
100016bc:	68fb      	ldr	r3, [r7, #12]
100016be:	691a      	ldr	r2, [r3, #16]
100016c0:	687b      	ldr	r3, [r7, #4]
100016c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
100016c4:	059b      	lsls	r3, r3, #22
100016c6:	0d9b      	lsrs	r3, r3, #22
100016c8:	431a      	orrs	r2, r3
100016ca:	68fb      	ldr	r3, [r7, #12]
100016cc:	611a      	str	r2, [r3, #16]
          
  /* The PreDivider for CTQ, PCTQ = 0  */
  /* The Denominator for CTQ, DCTQ = 16 */
    
  UartRegs->BRG |= \
100016ce:	68fb      	ldr	r3, [r7, #12]
100016d0:	695a      	ldr	r2, [r3, #20]
	  ((((uint32_t)(Handle->BGR_PCTQ) << USIC_CH_BRG_PCTQ_Pos) & \
100016d2:	6879      	ldr	r1, [r7, #4]
100016d4:	2330      	movs	r3, #48	; 0x30
100016d6:	5ccb      	ldrb	r3, [r1, r3]
100016d8:	0219      	lsls	r1, r3, #8
100016da:	23c0      	movs	r3, #192	; 0xc0
100016dc:	009b      	lsls	r3, r3, #2
100016de:	4019      	ands	r1, r3
		  	     USIC_CH_BRG_PCTQ_Msk) | \
      (((uint32_t)(Handle->BGR_DCTQ) << USIC_CH_BRG_DCTQ_Pos) & \
100016e0:	687b      	ldr	r3, [r7, #4]
100016e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
100016e4:	0298      	lsls	r0, r3, #10
100016e6:	23f8      	movs	r3, #248	; 0xf8
100016e8:	01db      	lsls	r3, r3, #7
100016ea:	4003      	ands	r3, r0
  /* The PreDivider for CTQ, PCTQ = 0  */
  /* The Denominator for CTQ, DCTQ = 16 */
    
  UartRegs->BRG |= \
	  ((((uint32_t)(Handle->BGR_PCTQ) << USIC_CH_BRG_PCTQ_Pos) & \
		  	     USIC_CH_BRG_PCTQ_Msk) | \
100016ec:	4319      	orrs	r1, r3
      (((uint32_t)(Handle->BGR_DCTQ) << USIC_CH_BRG_DCTQ_Pos) & \
	     USIC_CH_BRG_DCTQ_Msk) | \
      (((uint32_t)(Handle->BGR_PDIV) << USIC_CH_BRG_PDIV_Pos) &  \
100016ee:	687b      	ldr	r3, [r7, #4]
100016f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
100016f2:	0418      	lsls	r0, r3, #16
100016f4:	4b4f      	ldr	r3, [pc, #316]	; (10001834 <UART001_lInit+0x1b0>)
100016f6:	4003      	ands	r3, r0
    
  UartRegs->BRG |= \
	  ((((uint32_t)(Handle->BGR_PCTQ) << USIC_CH_BRG_PCTQ_Pos) & \
		  	     USIC_CH_BRG_PCTQ_Msk) | \
      (((uint32_t)(Handle->BGR_DCTQ) << USIC_CH_BRG_DCTQ_Pos) & \
	     USIC_CH_BRG_DCTQ_Msk) | \
100016f8:	430b      	orrs	r3, r1
  UartRegs->FDR |= ((Handle->BGR_STEP) & USIC_CH_FDR_STEP_Msk);
          
  /* The PreDivider for CTQ, PCTQ = 0  */
  /* The Denominator for CTQ, DCTQ = 16 */
    
  UartRegs->BRG |= \
100016fa:	431a      	orrs	r2, r3
100016fc:	68fb      	ldr	r3, [r7, #12]
100016fe:	615a      	str	r2, [r3, #20]
  /* Configuration of USIC Shift Control */
  
  /* Transmit/Receive LSB first is selected  */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  UartRegs->SCTR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_SCTR_PDL_Pos) & \
10001700:	68fb      	ldr	r3, [r7, #12]
10001702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001704:	2281      	movs	r2, #129	; 0x81
10001706:	0052      	lsls	r2, r2, #1
10001708:	431a      	orrs	r2, r3
1000170a:	68fb      	ldr	r3, [r7, #12]
1000170c:	635a      	str	r2, [r3, #52]	; 0x34
    USIC_CH_SCTR_PDL_Msk ) | \
    (((uint32_t)SHIFT_ONE  <<  USIC_CH_SCTR_TRM_Pos ) & USIC_CH_SCTR_TRM_Msk ));
  /* Set Word Length (WLE) & Frame Length (FLE) */
  UartRegs->SCTR |= ((((uint32_t)Handle->DataBits  << USIC_CH_SCTR_FLE_Pos) & \
1000170e:	68fb      	ldr	r3, [r7, #12]
10001710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10001712:	687b      	ldr	r3, [r7, #4]
10001714:	8b9b      	ldrh	r3, [r3, #28]
10001716:	0419      	lsls	r1, r3, #16
10001718:	23fc      	movs	r3, #252	; 0xfc
1000171a:	039b      	lsls	r3, r3, #14
1000171c:	4019      	ands	r1, r3
                      USIC_CH_SCTR_FLE_Msk ) | \
                     (((uint32_t)Handle->DataBits  << USIC_CH_SCTR_WLE_Pos) & \
1000171e:	687b      	ldr	r3, [r7, #4]
10001720:	8b9b      	ldrh	r3, [r3, #28]
10001722:	0618      	lsls	r0, r3, #24
10001724:	23f0      	movs	r3, #240	; 0xf0
10001726:	051b      	lsls	r3, r3, #20
10001728:	4003      	ands	r3, r0
  UartRegs->SCTR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_SCTR_PDL_Pos) & \
    USIC_CH_SCTR_PDL_Msk ) | \
    (((uint32_t)SHIFT_ONE  <<  USIC_CH_SCTR_TRM_Pos ) & USIC_CH_SCTR_TRM_Msk ));
  /* Set Word Length (WLE) & Frame Length (FLE) */
  UartRegs->SCTR |= ((((uint32_t)Handle->DataBits  << USIC_CH_SCTR_FLE_Pos) & \
                      USIC_CH_SCTR_FLE_Msk ) | \
1000172a:	430b      	orrs	r3, r1
  /* Passive Data Level (PDL) = 1 */
  UartRegs->SCTR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_SCTR_PDL_Pos) & \
    USIC_CH_SCTR_PDL_Msk ) | \
    (((uint32_t)SHIFT_ONE  <<  USIC_CH_SCTR_TRM_Pos ) & USIC_CH_SCTR_TRM_Msk ));
  /* Set Word Length (WLE) & Frame Length (FLE) */
  UartRegs->SCTR |= ((((uint32_t)Handle->DataBits  << USIC_CH_SCTR_FLE_Pos) & \
1000172c:	431a      	orrs	r2, r3
1000172e:	68fb      	ldr	r3, [r7, #12]
10001730:	635a      	str	r2, [r3, #52]	; 0x34
       
  /* Configuration of USIC Transmit Control/Status Register */ 
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
	
  UartRegs->TCSR |= ((((uint32_t)SHIFT_ONE  << USIC_CH_TCSR_TDEN_Pos) & \
10001732:	68fb      	ldr	r3, [r7, #12]
10001734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10001736:	22a0      	movs	r2, #160	; 0xa0
10001738:	00d2      	lsls	r2, r2, #3
1000173a:	431a      	orrs	r2, r3
1000173c:	68fb      	ldr	r3, [r7, #12]
1000173e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Sample Mode (SMD) = 1 */
  /* 1 Stop bit is selected */   
  /* Sample Point (SP) as configured */
  /* Pulse Length (PL) = 0 */
  
  UartRegs->PCR_ASCMode |= ((((uint32_t)MASK_ONE & USIC_CH_PCR_ASCMode_SMD_Msk)) |\
10001740:	68fb      	ldr	r3, [r7, #12]
10001742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    (((uint32_t)Handle->StopBit  << USIC_CH_PCR_ASCMode_STPB_Pos) & \
10001744:	687b      	ldr	r3, [r7, #4]
10001746:	7d5b      	ldrb	r3, [r3, #21]
10001748:	0059      	lsls	r1, r3, #1
1000174a:	2302      	movs	r3, #2
1000174c:	4019      	ands	r1, r3
    USIC_CH_PCR_ASCMode_STPB_Msk) | \
    (((uint32_t)(Handle->BGR_SP) << USIC_CH_PCR_ASCMode_SP_Pos) & \
1000174e:	687b      	ldr	r3, [r7, #4]
10001750:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
10001752:	0218      	lsls	r0, r3, #8
10001754:	23f8      	movs	r3, #248	; 0xf8
10001756:	015b      	lsls	r3, r3, #5
10001758:	4003      	ands	r3, r0
  /* Sample Point (SP) as configured */
  /* Pulse Length (PL) = 0 */
  
  UartRegs->PCR_ASCMode |= ((((uint32_t)MASK_ONE & USIC_CH_PCR_ASCMode_SMD_Msk)) |\
    (((uint32_t)Handle->StopBit  << USIC_CH_PCR_ASCMode_STPB_Pos) & \
    USIC_CH_PCR_ASCMode_STPB_Msk) | \
1000175a:	430b      	orrs	r3, r1
  /* Sample Mode (SMD) = 1 */
  /* 1 Stop bit is selected */   
  /* Sample Point (SP) as configured */
  /* Pulse Length (PL) = 0 */
  
  UartRegs->PCR_ASCMode |= ((((uint32_t)MASK_ONE & USIC_CH_PCR_ASCMode_SMD_Msk)) |\
1000175c:	4313      	orrs	r3, r2
1000175e:	2201      	movs	r2, #1
10001760:	431a      	orrs	r2, r3
10001762:	68fb      	ldr	r3, [r7, #12]
10001764:	63da      	str	r2, [r3, #60]	; 0x3c
    (((uint32_t)Handle->StopBit  << USIC_CH_PCR_ASCMode_STPB_Pos) & \
    USIC_CH_PCR_ASCMode_STPB_Msk) | \
    (((uint32_t)(Handle->BGR_SP) << USIC_CH_PCR_ASCMode_SP_Pos) & \
    USIC_CH_PCR_ASCMode_SP_Msk));
      
  if(Handle->RecvNoiseEn)
10001766:	687a      	ldr	r2, [r7, #4]
10001768:	2324      	movs	r3, #36	; 0x24
1000176a:	5cd3      	ldrb	r3, [r2, r3]
1000176c:	2b00      	cmp	r3, #0
1000176e:	d005      	beq.n	1000177c <UART001_lInit+0xf8>
  {
   	/* Enable Receiver Noise Interrupt*/  
    UartRegs->PCR_ASCMode |=(((uint32_t)SHIFT_ONE  << USIC_CH_PCR_CTR5_Pos) & \
10001770:	68fb      	ldr	r3, [r7, #12]
10001772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001774:	2220      	movs	r2, #32
10001776:	431a      	orrs	r2, r3
10001778:	68fb      	ldr	r3, [r7, #12]
1000177a:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  	  	  	  USIC_CH_PCR_CTR5_Msk); 
  }
  
  if(Handle->FormatErrEn)
1000177c:	687a      	ldr	r2, [r7, #4]
1000177e:	2325      	movs	r3, #37	; 0x25
10001780:	5cd3      	ldrb	r3, [r2, r3]
10001782:	2b00      	cmp	r3, #0
10001784:	d005      	beq.n	10001792 <UART001_lInit+0x10e>
  {
   	/* Enable Format Error Interrupt*/  
    UartRegs->PCR_ASCMode |=(((uint32_t)SHIFT_ONE  << USIC_CH_PCR_CTR6_Pos) & \
10001786:	68fb      	ldr	r3, [r7, #12]
10001788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000178a:	2240      	movs	r2, #64	; 0x40
1000178c:	431a      	orrs	r2, r3
1000178e:	68fb      	ldr	r3, [r7, #12]
10001790:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  	  	  	                             USIC_CH_PCR_CTR6_Msk); 
  }
  
  if(Handle->FrameFinEn)
10001792:	687a      	ldr	r2, [r7, #4]
10001794:	2326      	movs	r3, #38	; 0x26
10001796:	5cd3      	ldrb	r3, [r2, r3]
10001798:	2b00      	cmp	r3, #0
1000179a:	d005      	beq.n	100017a8 <UART001_lInit+0x124>
  {
   	/* Enable Frame Finished Interrupt*/  
    UartRegs->PCR_ASCMode |=(((uint32_t)SHIFT_ONE  << USIC_CH_PCR_CTR7_Pos) & \
1000179c:	68fb      	ldr	r3, [r7, #12]
1000179e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100017a0:	2280      	movs	r2, #128	; 0x80
100017a2:	431a      	orrs	r2, r3
100017a4:	68fb      	ldr	r3, [r7, #12]
100017a6:	63da      	str	r2, [r3, #60]	; 0x3c
		  	                                   	  	 USIC_CH_PCR_CTR7_Msk); 
  } 
  
  if (Handle->TxFifoEn)
100017a8:	687b      	ldr	r3, [r7, #4]
100017aa:	7f9b      	ldrb	r3, [r3, #30]
100017ac:	2b00      	cmp	r3, #0
100017ae:	d011      	beq.n	100017d4 <UART001_lInit+0x150>
  {	
	  /* Configuration of Transmitter Buffer Control Register */ 
	  UartRegs->TBCTR |= ((((uint32_t)Handle->TxLimit  << \
100017b0:	68fa      	ldr	r2, [r7, #12]
100017b2:	2384      	movs	r3, #132	; 0x84
100017b4:	005b      	lsls	r3, r3, #1
100017b6:	58d2      	ldr	r2, [r2, r3]
100017b8:	6879      	ldr	r1, [r7, #4]
100017ba:	2320      	movs	r3, #32
100017bc:	5ccb      	ldrb	r3, [r1, r3]
100017be:	0219      	lsls	r1, r3, #8
						USIC_CH_TBCTR_LIMIT_Pos ) & USIC_CH_TBCTR_LIMIT_Msk));
100017c0:	23fc      	movs	r3, #252	; 0xfc
100017c2:	019b      	lsls	r3, r3, #6
100017c4:	400b      	ands	r3, r1
  } 
  
  if (Handle->TxFifoEn)
  {	
	  /* Configuration of Transmitter Buffer Control Register */ 
	  UartRegs->TBCTR |= ((((uint32_t)Handle->TxLimit  << \
100017c6:	1c11      	adds	r1, r2, #0
100017c8:	4319      	orrs	r1, r3
100017ca:	68fa      	ldr	r2, [r7, #12]
100017cc:	2384      	movs	r3, #132	; 0x84
100017ce:	005b      	lsls	r3, r3, #1
100017d0:	50d1      	str	r1, [r2, r3]
100017d2:	e006      	b.n	100017e2 <UART001_lInit+0x15e>
						USIC_CH_TBCTR_LIMIT_Pos ) & USIC_CH_TBCTR_LIMIT_Msk));
  }
  else
  {
	  /* TBIF is set to simplify polling*/
	  UartRegs->PSR_ASCMode |= (((uint32_t)SHIFT_ONE  << USIC_CH_PSR_TBIF_Pos) & \
100017d4:	68fb      	ldr	r3, [r7, #12]
100017d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100017d8:	2280      	movs	r2, #128	; 0x80
100017da:	0192      	lsls	r2, r2, #6
100017dc:	431a      	orrs	r2, r3
100017de:	68fb      	ldr	r3, [r7, #12]
100017e0:	649a      	str	r2, [r3, #72]	; 0x48
	 		  (uint32_t)USIC_CH_PSR_TBIF_Msk);
  }
  
  if (Handle->RxFifoEn)
100017e2:	687b      	ldr	r3, [r7, #4]
100017e4:	7fdb      	ldrb	r3, [r3, #31]
100017e6:	2b00      	cmp	r3, #0
100017e8:	d013      	beq.n	10001812 <UART001_lInit+0x18e>
  {
	  /* Configuration of Receiver Buffer Control Register */ 
	  UartRegs->RBCTR |= ((((uint32_t)Handle->RxLimit  << \
100017ea:	68fa      	ldr	r2, [r7, #12]
100017ec:	2386      	movs	r3, #134	; 0x86
100017ee:	005b      	lsls	r3, r3, #1
100017f0:	58d2      	ldr	r2, [r2, r3]
100017f2:	6879      	ldr	r1, [r7, #4]
100017f4:	2321      	movs	r3, #33	; 0x21
100017f6:	5ccb      	ldrb	r3, [r1, r3]
100017f8:	0219      	lsls	r1, r3, #8
						   USIC_CH_RBCTR_LIMIT_Pos) & USIC_CH_RBCTR_LIMIT_Msk) | \
100017fa:	23fc      	movs	r3, #252	; 0xfc
100017fc:	019b      	lsls	r3, r3, #6
100017fe:	400b      	ands	r3, r1
  }
  
  if (Handle->RxFifoEn)
  {
	  /* Configuration of Receiver Buffer Control Register */ 
	  UartRegs->RBCTR |= ((((uint32_t)Handle->RxLimit  << \
10001800:	4313      	orrs	r3, r2
10001802:	2280      	movs	r2, #128	; 0x80
10001804:	0552      	lsls	r2, r2, #21
10001806:	1c11      	adds	r1, r2, #0
10001808:	4319      	orrs	r1, r3
1000180a:	68fa      	ldr	r2, [r7, #12]
1000180c:	2386      	movs	r3, #134	; 0x86
1000180e:	005b      	lsls	r3, r3, #1
10001810:	50d1      	str	r1, [r2, r3]
							(((uint32_t)SHIFT_ONE << USIC_CH_RBCTR_LOF_Pos) & \
						   USIC_CH_RBCTR_LOF_Msk));
  }else{}
  
  /* Configuration of Channel Control Register */ 
  UartRegs->CCR |= (((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
10001812:	68fb      	ldr	r3, [r7, #12]
10001814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                    (((uint32_t)Handle->Parity  << USIC_CH_CCR_PM_Pos) & \
10001816:	687b      	ldr	r3, [r7, #4]
10001818:	7d9b      	ldrb	r3, [r3, #22]
1000181a:	0219      	lsls	r1, r3, #8
1000181c:	23c0      	movs	r3, #192	; 0xc0
1000181e:	009b      	lsls	r3, r3, #2
10001820:	400b      	ands	r3, r1
							(((uint32_t)SHIFT_ONE << USIC_CH_RBCTR_LOF_Pos) & \
						   USIC_CH_RBCTR_LOF_Msk));
  }else{}
  
  /* Configuration of Channel Control Register */ 
  UartRegs->CCR |= (((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
10001822:	4313      	orrs	r3, r2
10001824:	2202      	movs	r2, #2
10001826:	431a      	orrs	r2, r3
10001828:	68fb      	ldr	r3, [r7, #12]
1000182a:	641a      	str	r2, [r3, #64]	; 0x40
                    (((uint32_t)Handle->Parity  << USIC_CH_CCR_PM_Pos) & \
                     USIC_CH_CCR_PM_Msk));

}
1000182c:	46bd      	mov	sp, r7
1000182e:	b004      	add	sp, #16
10001830:	bd80      	pop	{r7, pc}
10001832:	46c0      	nop			; (mov r8, r8)
10001834:	03ff0000 	.word	0x03ff0000

10001838 <UART001_lConfigTXPin>:
 * @return  None <BR>
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/ 
void UART001_lConfigTXPin(const UART001_HandleType* Handle)
{
10001838:	b590      	push	{r4, r7, lr}
1000183a:	b085      	sub	sp, #20
1000183c:	af00      	add	r7, sp, #0
1000183e:	6078      	str	r0, [r7, #4]
	uint32_t TempPortPin;

    /* set the TX portpin to '1' */
    Handle->PinHandle.TX_PortBase->OMR |= (uint32_t)SHIFT_ONE << \
10001840:	687b      	ldr	r3, [r7, #4]
10001842:	685b      	ldr	r3, [r3, #4]
10001844:	687a      	ldr	r2, [r7, #4]
10001846:	6852      	ldr	r2, [r2, #4]
10001848:	6851      	ldr	r1, [r2, #4]
   		                                (uint32_t)Handle->PinHandle.TX_Pin;
1000184a:	687a      	ldr	r2, [r7, #4]
1000184c:	7a12      	ldrb	r2, [r2, #8]
void UART001_lConfigTXPin(const UART001_HandleType* Handle)
{
	uint32_t TempPortPin;

    /* set the TX portpin to '1' */
    Handle->PinHandle.TX_PortBase->OMR |= (uint32_t)SHIFT_ONE << \
1000184e:	2001      	movs	r0, #1
10001850:	1c04      	adds	r4, r0, #0
10001852:	4094      	lsls	r4, r2
10001854:	1c22      	adds	r2, r4, #0
10001856:	430a      	orrs	r2, r1
10001858:	605a      	str	r2, [r3, #4]
   		                                (uint32_t)Handle->PinHandle.TX_Pin;
     
	/* Configure TX portpin as Open-drain General-purpose output */
    TempPortPin = (uint32_t)Handle->PinHandle.TX_Pin;
1000185a:	687b      	ldr	r3, [r7, #4]
1000185c:	7a1b      	ldrb	r3, [r3, #8]
1000185e:	60fb      	str	r3, [r7, #12]

    if (FIRST_NIBBLE > TempPortPin)
10001860:	68fb      	ldr	r3, [r7, #12]
10001862:	2b03      	cmp	r3, #3
10001864:	d80e      	bhi.n	10001884 <UART001_lConfigTXPin+0x4c>
    {
   	  Handle->PinHandle.TX_PortBase->IOCR0 |= \
10001866:	687b      	ldr	r3, [r7, #4]
10001868:	685b      	ldr	r3, [r3, #4]
1000186a:	687a      	ldr	r2, [r7, #4]
1000186c:	6852      	ldr	r2, [r2, #4]
1000186e:	6911      	ldr	r1, [r2, #16]
   			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
10001870:	68fa      	ldr	r2, [r7, #12]
10001872:	00d2      	lsls	r2, r2, #3
    TempPortPin = (uint32_t)Handle->PinHandle.TX_Pin;

    if (FIRST_NIBBLE > TempPortPin)
    {
   	  Handle->PinHandle.TX_PortBase->IOCR0 |= \
   			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
10001874:	3203      	adds	r2, #3
10001876:	2018      	movs	r0, #24
10001878:	1c04      	adds	r4, r0, #0
1000187a:	4094      	lsls	r4, r2
1000187c:	1c22      	adds	r2, r4, #0
	/* Configure TX portpin as Open-drain General-purpose output */
    TempPortPin = (uint32_t)Handle->PinHandle.TX_Pin;

    if (FIRST_NIBBLE > TempPortPin)
    {
   	  Handle->PinHandle.TX_PortBase->IOCR0 |= \
1000187e:	430a      	orrs	r2, r1
10001880:	611a      	str	r2, [r3, #16]
10001882:	e046      	b.n	10001912 <UART001_lConfigTXPin+0xda>
   			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
    }
    else if ((FIRST_NIBBLE <= TempPortPin) && (SECOND_NIBBLE > TempPortPin))
10001884:	68fb      	ldr	r3, [r7, #12]
10001886:	2b03      	cmp	r3, #3
10001888:	d914      	bls.n	100018b4 <UART001_lConfigTXPin+0x7c>
1000188a:	68fb      	ldr	r3, [r7, #12]
1000188c:	2b07      	cmp	r3, #7
1000188e:	d811      	bhi.n	100018b4 <UART001_lConfigTXPin+0x7c>
    {
	  TempPortPin = TempPortPin - FIRST_NIBBLE;
10001890:	68fb      	ldr	r3, [r7, #12]
10001892:	3b04      	subs	r3, #4
10001894:	60fb      	str	r3, [r7, #12]
	  Handle->PinHandle.TX_PortBase->IOCR4 |= \
10001896:	687b      	ldr	r3, [r7, #4]
10001898:	685b      	ldr	r3, [r3, #4]
1000189a:	687a      	ldr	r2, [r7, #4]
1000189c:	6852      	ldr	r2, [r2, #4]
1000189e:	6951      	ldr	r1, [r2, #20]
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
100018a0:	68fa      	ldr	r2, [r7, #12]
100018a2:	00d2      	lsls	r2, r2, #3
    }
    else if ((FIRST_NIBBLE <= TempPortPin) && (SECOND_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - FIRST_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR4 |= \
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
100018a4:	3203      	adds	r2, #3
100018a6:	2018      	movs	r0, #24
100018a8:	1c04      	adds	r4, r0, #0
100018aa:	4094      	lsls	r4, r2
100018ac:	1c22      	adds	r2, r4, #0
							(TempPortPin * 8U)));
    }
    else if ((FIRST_NIBBLE <= TempPortPin) && (SECOND_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - FIRST_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR4 |= \
100018ae:	430a      	orrs	r2, r1
100018b0:	615a      	str	r2, [r3, #20]
100018b2:	e02e      	b.n	10001912 <UART001_lConfigTXPin+0xda>
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
    }
    else if ((SECOND_NIBBLE <= TempPortPin) && (THIRD_NIBBLE > TempPortPin))
100018b4:	68fb      	ldr	r3, [r7, #12]
100018b6:	2b07      	cmp	r3, #7
100018b8:	d914      	bls.n	100018e4 <UART001_lConfigTXPin+0xac>
100018ba:	68fb      	ldr	r3, [r7, #12]
100018bc:	2b0b      	cmp	r3, #11
100018be:	d811      	bhi.n	100018e4 <UART001_lConfigTXPin+0xac>
    {
 	  TempPortPin = TempPortPin - SECOND_NIBBLE;
100018c0:	68fb      	ldr	r3, [r7, #12]
100018c2:	3b08      	subs	r3, #8
100018c4:	60fb      	str	r3, [r7, #12]
 	  Handle->PinHandle.TX_PortBase->IOCR8 |= \
100018c6:	687b      	ldr	r3, [r7, #4]
100018c8:	685b      	ldr	r3, [r3, #4]
100018ca:	687a      	ldr	r2, [r7, #4]
100018cc:	6852      	ldr	r2, [r2, #4]
100018ce:	6991      	ldr	r1, [r2, #24]
 			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
100018d0:	68fa      	ldr	r2, [r7, #12]
100018d2:	00d2      	lsls	r2, r2, #3
    }
    else if ((SECOND_NIBBLE <= TempPortPin) && (THIRD_NIBBLE > TempPortPin))
    {
 	  TempPortPin = TempPortPin - SECOND_NIBBLE;
 	  Handle->PinHandle.TX_PortBase->IOCR8 |= \
 			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
100018d4:	3203      	adds	r2, #3
100018d6:	2018      	movs	r0, #24
100018d8:	1c04      	adds	r4, r0, #0
100018da:	4094      	lsls	r4, r2
100018dc:	1c22      	adds	r2, r4, #0
							(TempPortPin * 8U)));
    }
    else if ((SECOND_NIBBLE <= TempPortPin) && (THIRD_NIBBLE > TempPortPin))
    {
 	  TempPortPin = TempPortPin - SECOND_NIBBLE;
 	  Handle->PinHandle.TX_PortBase->IOCR8 |= \
100018de:	430a      	orrs	r2, r1
100018e0:	619a      	str	r2, [r3, #24]
100018e2:	e016      	b.n	10001912 <UART001_lConfigTXPin+0xda>
 			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
    }
    else if ((THIRD_NIBBLE <= TempPortPin) && (FOURTH_NIBBLE > TempPortPin))
100018e4:	68fb      	ldr	r3, [r7, #12]
100018e6:	2b0b      	cmp	r3, #11
100018e8:	d913      	bls.n	10001912 <UART001_lConfigTXPin+0xda>
100018ea:	68fb      	ldr	r3, [r7, #12]
100018ec:	2b0f      	cmp	r3, #15
100018ee:	d810      	bhi.n	10001912 <UART001_lConfigTXPin+0xda>
    {
	  TempPortPin = TempPortPin - THIRD_NIBBLE;
100018f0:	68fb      	ldr	r3, [r7, #12]
100018f2:	3b0c      	subs	r3, #12
100018f4:	60fb      	str	r3, [r7, #12]
	  Handle->PinHandle.TX_PortBase->IOCR12 |= \
100018f6:	687b      	ldr	r3, [r7, #4]
100018f8:	685b      	ldr	r3, [r3, #4]
100018fa:	687a      	ldr	r2, [r7, #4]
100018fc:	6852      	ldr	r2, [r2, #4]
100018fe:	69d1      	ldr	r1, [r2, #28]
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
							(TempPortPin * 8U)));
10001900:	68fa      	ldr	r2, [r7, #12]
10001902:	00d2      	lsls	r2, r2, #3
    }
    else if ((THIRD_NIBBLE <= TempPortPin) && (FOURTH_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - THIRD_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR12 |= \
			                ((uint32_t)UART001_OPENDRAIN_OUT << (3U + \
10001904:	3203      	adds	r2, #3
10001906:	2018      	movs	r0, #24
10001908:	1c04      	adds	r4, r0, #0
1000190a:	4094      	lsls	r4, r2
1000190c:	1c22      	adds	r2, r4, #0
							(TempPortPin * 8U)));
    }
    else if ((THIRD_NIBBLE <= TempPortPin) && (FOURTH_NIBBLE > TempPortPin))
    {
	  TempPortPin = TempPortPin - THIRD_NIBBLE;
	  Handle->PinHandle.TX_PortBase->IOCR12 |= \
1000190e:	430a      	orrs	r2, r1
10001910:	61da      	str	r2, [r3, #28]
							(TempPortPin * 8U)));
    }
	else
	{}

}
10001912:	46bd      	mov	sp, r7
10001914:	b005      	add	sp, #20
10001916:	bd90      	pop	{r4, r7, pc}

10001918 <UART001_labsRealType>:
 * 				 -ve float value if Number is >= 0.0 <BR>
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/
float UART001_labsRealType(float Number)
{
10001918:	b580      	push	{r7, lr}
1000191a:	b084      	sub	sp, #16
1000191c:	af00      	add	r7, sp, #0
1000191e:	6078      	str	r0, [r7, #4]
   float return_value;
	if (Number < 0.0F){
10001920:	6878      	ldr	r0, [r7, #4]
10001922:	2100      	movs	r1, #0
10001924:	f001 fc72 	bl	1000320c <__aeabi_fcmplt>
10001928:	1c03      	adds	r3, r0, #0
1000192a:	2b00      	cmp	r3, #0
1000192c:	d005      	beq.n	1000193a <UART001_labsRealType+0x22>
		return_value = -Number;
1000192e:	687b      	ldr	r3, [r7, #4]
10001930:	2280      	movs	r2, #128	; 0x80
10001932:	0612      	lsls	r2, r2, #24
10001934:	4053      	eors	r3, r2
10001936:	60fb      	str	r3, [r7, #12]
10001938:	e001      	b.n	1000193e <UART001_labsRealType+0x26>
	}
	else{
		return_value = Number;
1000193a:	687b      	ldr	r3, [r7, #4]
1000193c:	60fb      	str	r3, [r7, #12]
	}
	return return_value;
1000193e:	68fb      	ldr	r3, [r7, #12]
}
10001940:	1c18      	adds	r0, r3, #0
10001942:	46bd      	mov	sp, r7
10001944:	b004      	add	sp, #16
10001946:	bd80      	pop	{r7, pc}

10001948 <UART001_lConfigureBaudRate>:
 *
 * <b>Reentrant: No </b><BR>
 ******************************************************************************/
void UART001_lConfigureBaudRate\
                              (uint32_t BaudRate,uint32_t* Pdiv,uint32_t* Step)
{
10001948:	b5b0      	push	{r4, r5, r7, lr}
1000194a:	b0ae      	sub	sp, #184	; 0xb8
1000194c:	af00      	add	r7, sp, #0
1000194e:	60f8      	str	r0, [r7, #12]
10001950:	60b9      	str	r1, [r7, #8]
10001952:	607a      	str	r2, [r7, #4]
	uint32_t fdr_step = 0x00U;
10001954:	2300      	movs	r3, #0
10001956:	20b4      	movs	r0, #180	; 0xb4
10001958:	19c0      	adds	r0, r0, r7
1000195a:	6003      	str	r3, [r0, #0]
	uint32_t brg_pdiv = 0x00U;
1000195c:	2300      	movs	r3, #0
1000195e:	21b0      	movs	r1, #176	; 0xb0
10001960:	19c9      	adds	r1, r1, r7
10001962:	600b      	str	r3, [r1, #0]
	uint32_t divisor_in = BaudRate ;
10001964:	68fb      	ldr	r3, [r7, #12]
10001966:	22ac      	movs	r2, #172	; 0xac
10001968:	19d2      	adds	r2, r2, r7
1000196a:	6013      	str	r3, [r2, #0]
	/* fPB / 1024 * (Brg_dctq + 1) */
	uint32_t dividend_in = 0U;
1000196c:	2300      	movs	r3, #0
1000196e:	20a8      	movs	r0, #168	; 0xa8
10001970:	19c0      	adds	r0, r0, r7
10001972:	6003      	str	r3, [r0, #0]
	uint32_t divisor_array[4];
	uint32_t dividend_array[4];
	uint32_t div_array[4];
	uint32_t max, frac,divisor1,divisor2,dividend1,dividend2;
	uint32_t array_count,array_count_1,array_count_2;
	uint32_t do_while_break = 0U;
10001974:	2300      	movs	r3, #0
10001976:	2188      	movs	r1, #136	; 0x88
10001978:	19c9      	adds	r1, r1, r7
1000197a:	600b      	str	r3, [r1, #0]
	uint32_t temp = 0U;
1000197c:	2300      	movs	r3, #0
1000197e:	67fb      	str	r3, [r7, #124]	; 0x7c
	float div_factor;
	uint32_t loop_cnt;
	bool swapped;
	dividend_in = (uint32_t)((uint32_t)(UART001_CLOCK * 1000000)/ \
10001980:	4be0      	ldr	r3, [pc, #896]	; (10001d04 <UART001_lConfigureBaudRate+0x3bc>)
10001982:	22a8      	movs	r2, #168	; 0xa8
10001984:	19d2      	adds	r2, r2, r7
10001986:	6013      	str	r3, [r2, #0]
                    	(UART001_MAX_VALUE * UART001_DCTQ_VALUE)); 
	/* swap if divisor_in/dividend_in > max_divisor/max_dividend */
	div_factor = (float) divisor_in/(float) dividend_in;
10001988:	23ac      	movs	r3, #172	; 0xac
1000198a:	19db      	adds	r3, r3, r7
1000198c:	6818      	ldr	r0, [r3, #0]
1000198e:	f002 f853 	bl	10003a38 <__aeabi_ui2f>
10001992:	1c04      	adds	r4, r0, #0
10001994:	21a8      	movs	r1, #168	; 0xa8
10001996:	19c9      	adds	r1, r1, r7
10001998:	6808      	ldr	r0, [r1, #0]
1000199a:	f002 f84d 	bl	10003a38 <__aeabi_ui2f>
1000199e:	1c03      	adds	r3, r0, #0
100019a0:	1c20      	adds	r0, r4, #0
100019a2:	1c19      	adds	r1, r3, #0
100019a4:	f001 fc7c 	bl	100032a0 <__aeabi_fdiv>
100019a8:	1c03      	adds	r3, r0, #0
100019aa:	67bb      	str	r3, [r7, #120]	; 0x78
	if ( div_factor > 1.0F)
100019ac:	6fb8      	ldr	r0, [r7, #120]	; 0x78
100019ae:	21fe      	movs	r1, #254	; 0xfe
100019b0:	0589      	lsls	r1, r1, #22
100019b2:	f001 fc3f 	bl	10003234 <__aeabi_fcmpgt>
100019b6:	1c03      	adds	r3, r0, #0
100019b8:	2b00      	cmp	r3, #0
100019ba:	d017      	beq.n	100019ec <UART001_lConfigureBaudRate+0xa4>
	{
		max = UART001_MAX_VALUE;
100019bc:	2380      	movs	r3, #128	; 0x80
100019be:	00db      	lsls	r3, r3, #3
100019c0:	22a4      	movs	r2, #164	; 0xa4
100019c2:	19d2      	adds	r2, r2, r7
100019c4:	6013      	str	r3, [r2, #0]
		swapped = 1U;
100019c6:	1c3b      	adds	r3, r7, #0
100019c8:	3383      	adds	r3, #131	; 0x83
100019ca:	2201      	movs	r2, #1
100019cc:	701a      	strb	r2, [r3, #0]
		temp = divisor_in;
100019ce:	20ac      	movs	r0, #172	; 0xac
100019d0:	19c0      	adds	r0, r0, r7
100019d2:	6803      	ldr	r3, [r0, #0]
100019d4:	67fb      	str	r3, [r7, #124]	; 0x7c
		divisor_in = dividend_in;
100019d6:	21a8      	movs	r1, #168	; 0xa8
100019d8:	19c9      	adds	r1, r1, r7
100019da:	680b      	ldr	r3, [r1, #0]
100019dc:	22ac      	movs	r2, #172	; 0xac
100019de:	19d2      	adds	r2, r2, r7
100019e0:	6013      	str	r3, [r2, #0]
		dividend_in = temp;
100019e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
100019e4:	20a8      	movs	r0, #168	; 0xa8
100019e6:	19c0      	adds	r0, r0, r7
100019e8:	6003      	str	r3, [r0, #0]
100019ea:	e008      	b.n	100019fe <UART001_lConfigureBaudRate+0xb6>
	}
	else
	{
		swapped = 0U;
100019ec:	1c3b      	adds	r3, r7, #0
100019ee:	3383      	adds	r3, #131	; 0x83
100019f0:	2200      	movs	r2, #0
100019f2:	701a      	strb	r2, [r3, #0]
		max = UART001_MAX_VALUE;
100019f4:	2380      	movs	r3, #128	; 0x80
100019f6:	00db      	lsls	r3, r3, #3
100019f8:	21a4      	movs	r1, #164	; 0xa4
100019fa:	19c9      	adds	r1, r1, r7
100019fc:	600b      	str	r3, [r1, #0]
	}
	/*Init parameters*/
	loop_cnt = 0U;
100019fe:	2300      	movs	r3, #0
10001a00:	2284      	movs	r2, #132	; 0x84
10001a02:	19d2      	adds	r2, r2, r7
10001a04:	6013      	str	r3, [r2, #0]
	array_count = 0U;
10001a06:	2300      	movs	r3, #0
10001a08:	2090      	movs	r0, #144	; 0x90
10001a0a:	19c0      	adds	r0, r0, r7
10001a0c:	6003      	str	r3, [r0, #0]
	array_count_1 = 0U;
10001a0e:	2300      	movs	r3, #0
10001a10:	218c      	movs	r1, #140	; 0x8c
10001a12:	19c9      	adds	r1, r1, r7
10001a14:	600b      	str	r3, [r1, #0]
	divisor[0] = divisor_in;
10001a16:	1c3b      	adds	r3, r7, #0
10001a18:	3360      	adds	r3, #96	; 0x60
10001a1a:	20ac      	movs	r0, #172	; 0xac
10001a1c:	19c0      	adds	r0, r0, r7
10001a1e:	6802      	ldr	r2, [r0, #0]
10001a20:	601a      	str	r2, [r3, #0]
	remainder[0] = dividend_in;
10001a22:	1c3b      	adds	r3, r7, #0
10001a24:	3340      	adds	r3, #64	; 0x40
10001a26:	21a8      	movs	r1, #168	; 0xa8
10001a28:	19c9      	adds	r1, r1, r7
10001a2a:	680a      	ldr	r2, [r1, #0]
10001a2c:	601a      	str	r2, [r3, #0]
	divisor_array[0] = 1U;
10001a2e:	1c3b      	adds	r3, r7, #0
10001a30:	3330      	adds	r3, #48	; 0x30
10001a32:	2201      	movs	r2, #1
10001a34:	601a      	str	r2, [r3, #0]
	dividend_array[0] = 0U;
10001a36:	1c3b      	adds	r3, r7, #0
10001a38:	3320      	adds	r3, #32
10001a3a:	2200      	movs	r2, #0
10001a3c:	601a      	str	r2, [r3, #0]
	do {
			++loop_cnt;
10001a3e:	2284      	movs	r2, #132	; 0x84
10001a40:	19d2      	adds	r2, r2, r7
10001a42:	6813      	ldr	r3, [r2, #0]
10001a44:	3301      	adds	r3, #1
10001a46:	2084      	movs	r0, #132	; 0x84
10001a48:	19c0      	adds	r0, r0, r7
10001a4a:	6003      	str	r3, [r0, #0]
			array_count_2 = array_count_1; /* on first loop is not used */
10001a4c:	218c      	movs	r1, #140	; 0x8c
10001a4e:	19c9      	adds	r1, r1, r7
10001a50:	680b      	ldr	r3, [r1, #0]
10001a52:	677b      	str	r3, [r7, #116]	; 0x74
			array_count_1 = array_count;
10001a54:	2290      	movs	r2, #144	; 0x90
10001a56:	19d2      	adds	r2, r2, r7
10001a58:	6813      	ldr	r3, [r2, #0]
10001a5a:	208c      	movs	r0, #140	; 0x8c
10001a5c:	19c0      	adds	r0, r0, r7
10001a5e:	6003      	str	r3, [r0, #0]
			array_count = loop_cnt % 4U;
10001a60:	2184      	movs	r1, #132	; 0x84
10001a62:	19c9      	adds	r1, r1, r7
10001a64:	680a      	ldr	r2, [r1, #0]
10001a66:	2303      	movs	r3, #3
10001a68:	4013      	ands	r3, r2
10001a6a:	2290      	movs	r2, #144	; 0x90
10001a6c:	19d2      	adds	r2, r2, r7
10001a6e:	6013      	str	r3, [r2, #0]
			dividend[array_count] = divisor[array_count_1];
10001a70:	1c3b      	adds	r3, r7, #0
10001a72:	3360      	adds	r3, #96	; 0x60
10001a74:	208c      	movs	r0, #140	; 0x8c
10001a76:	19c0      	adds	r0, r0, r7
10001a78:	6802      	ldr	r2, [r0, #0]
10001a7a:	0092      	lsls	r2, r2, #2
10001a7c:	58d1      	ldr	r1, [r2, r3]
10001a7e:	1c3b      	adds	r3, r7, #0
10001a80:	3350      	adds	r3, #80	; 0x50
10001a82:	2090      	movs	r0, #144	; 0x90
10001a84:	19c0      	adds	r0, r0, r7
10001a86:	6802      	ldr	r2, [r0, #0]
10001a88:	0092      	lsls	r2, r2, #2
10001a8a:	50d1      	str	r1, [r2, r3]
			
			divisor[array_count] = remainder[array_count_1];
10001a8c:	1c3b      	adds	r3, r7, #0
10001a8e:	3340      	adds	r3, #64	; 0x40
10001a90:	218c      	movs	r1, #140	; 0x8c
10001a92:	19c9      	adds	r1, r1, r7
10001a94:	680a      	ldr	r2, [r1, #0]
10001a96:	0092      	lsls	r2, r2, #2
10001a98:	58d1      	ldr	r1, [r2, r3]
10001a9a:	1c3b      	adds	r3, r7, #0
10001a9c:	3360      	adds	r3, #96	; 0x60
10001a9e:	2090      	movs	r0, #144	; 0x90
10001aa0:	19c0      	adds	r0, r0, r7
10001aa2:	6802      	ldr	r2, [r0, #0]
10001aa4:	0092      	lsls	r2, r2, #2
10001aa6:	50d1      	str	r1, [r2, r3]
			
			div_array[array_count] = \
			                       dividend[array_count] / divisor[array_count];
10001aa8:	1c3b      	adds	r3, r7, #0
10001aaa:	3350      	adds	r3, #80	; 0x50
10001aac:	2190      	movs	r1, #144	; 0x90
10001aae:	19c9      	adds	r1, r1, r7
10001ab0:	680a      	ldr	r2, [r1, #0]
10001ab2:	0092      	lsls	r2, r2, #2
10001ab4:	58d2      	ldr	r2, [r2, r3]
10001ab6:	1c3b      	adds	r3, r7, #0
10001ab8:	3360      	adds	r3, #96	; 0x60
10001aba:	2090      	movs	r0, #144	; 0x90
10001abc:	19c0      	adds	r0, r0, r7
10001abe:	6801      	ldr	r1, [r0, #0]
10001ac0:	0089      	lsls	r1, r1, #2
10001ac2:	58cb      	ldr	r3, [r1, r3]
10001ac4:	1c10      	adds	r0, r2, #0
10001ac6:	1c19      	adds	r1, r3, #0
10001ac8:	f001 fb3e 	bl	10003148 <__aeabi_uidiv>
10001acc:	1c03      	adds	r3, r0, #0
10001ace:	1c19      	adds	r1, r3, #0
			array_count = loop_cnt % 4U;
			dividend[array_count] = divisor[array_count_1];
			
			divisor[array_count] = remainder[array_count_1];
			
			div_array[array_count] = \
10001ad0:	1c3b      	adds	r3, r7, #0
10001ad2:	3310      	adds	r3, #16
10001ad4:	2090      	movs	r0, #144	; 0x90
10001ad6:	19c0      	adds	r0, r0, r7
10001ad8:	6802      	ldr	r2, [r0, #0]
10001ada:	0092      	lsls	r2, r2, #2
10001adc:	50d1      	str	r1, [r2, r3]
			                       dividend[array_count] / divisor[array_count];
			
			remainder[array_count] = \
			                       dividend[array_count] % divisor[array_count];
10001ade:	1c3b      	adds	r3, r7, #0
10001ae0:	3350      	adds	r3, #80	; 0x50
10001ae2:	2190      	movs	r1, #144	; 0x90
10001ae4:	19c9      	adds	r1, r1, r7
10001ae6:	680a      	ldr	r2, [r1, #0]
10001ae8:	0092      	lsls	r2, r2, #2
10001aea:	58d2      	ldr	r2, [r2, r3]
10001aec:	1c3b      	adds	r3, r7, #0
10001aee:	3360      	adds	r3, #96	; 0x60
10001af0:	2090      	movs	r0, #144	; 0x90
10001af2:	19c0      	adds	r0, r0, r7
10001af4:	6801      	ldr	r1, [r0, #0]
10001af6:	0089      	lsls	r1, r1, #2
10001af8:	58cb      	ldr	r3, [r1, r3]
10001afa:	1c10      	adds	r0, r2, #0
10001afc:	1c19      	adds	r1, r3, #0
10001afe:	f001 fb67 	bl	100031d0 <__aeabi_uidivmod>
10001b02:	1c0b      	adds	r3, r1, #0
10001b04:	1c19      	adds	r1, r3, #0
			divisor[array_count] = remainder[array_count_1];
			
			div_array[array_count] = \
			                       dividend[array_count] / divisor[array_count];
			
			remainder[array_count] = \
10001b06:	1c3b      	adds	r3, r7, #0
10001b08:	3340      	adds	r3, #64	; 0x40
10001b0a:	2090      	movs	r0, #144	; 0x90
10001b0c:	19c0      	adds	r0, r0, r7
10001b0e:	6802      	ldr	r2, [r0, #0]
10001b10:	0092      	lsls	r2, r2, #2
10001b12:	50d1      	str	r1, [r2, r3]
			                       dividend[array_count] % divisor[array_count];
			
			/* This executed only on first loop */
			if (loop_cnt == 1U)
10001b14:	2184      	movs	r1, #132	; 0x84
10001b16:	19c9      	adds	r1, r1, r7
10001b18:	680b      	ldr	r3, [r1, #0]
10001b1a:	2b01      	cmp	r3, #1
10001b1c:	d10a      	bne.n	10001b34 <UART001_lConfigureBaudRate+0x1ec>
			{ 
				divisor_array[1] = div_array[1];
10001b1e:	1c3b      	adds	r3, r7, #0
10001b20:	3310      	adds	r3, #16
10001b22:	685a      	ldr	r2, [r3, #4]
10001b24:	1c3b      	adds	r3, r7, #0
10001b26:	3330      	adds	r3, #48	; 0x30
10001b28:	605a      	str	r2, [r3, #4]
				dividend_array[1] = 1U;
10001b2a:	1c3b      	adds	r3, r7, #0
10001b2c:	3320      	adds	r3, #32
10001b2e:	2201      	movs	r2, #1
10001b30:	605a      	str	r2, [r3, #4]
10001b32:	e037      	b.n	10001ba4 <UART001_lConfigureBaudRate+0x25c>
			}
			else
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
10001b34:	1c3b      	adds	r3, r7, #0
10001b36:	3310      	adds	r3, #16
10001b38:	2090      	movs	r0, #144	; 0x90
10001b3a:	19c0      	adds	r0, r0, r7
10001b3c:	6802      	ldr	r2, [r0, #0]
10001b3e:	0092      	lsls	r2, r2, #2
10001b40:	58d3      	ldr	r3, [r2, r3]
10001b42:	1c3a      	adds	r2, r7, #0
10001b44:	3230      	adds	r2, #48	; 0x30
10001b46:	208c      	movs	r0, #140	; 0x8c
10001b48:	19c0      	adds	r0, r0, r7
10001b4a:	6801      	ldr	r1, [r0, #0]
10001b4c:	0089      	lsls	r1, r1, #2
10001b4e:	588a      	ldr	r2, [r1, r2]
10001b50:	435a      	muls	r2, r3
				       divisor_array[array_count_2];
10001b52:	1c3b      	adds	r3, r7, #0
10001b54:	3330      	adds	r3, #48	; 0x30
10001b56:	6f79      	ldr	r1, [r7, #116]	; 0x74
10001b58:	0089      	lsls	r1, r1, #2
10001b5a:	58cb      	ldr	r3, [r1, r3]
				dividend_array[1] = 1U;
			}
			else
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
10001b5c:	18d1      	adds	r1, r2, r3
				divisor_array[1] = div_array[1];
				dividend_array[1] = 1U;
			}
			else
			{
				divisor_array[array_count] = \
10001b5e:	1c3b      	adds	r3, r7, #0
10001b60:	3330      	adds	r3, #48	; 0x30
10001b62:	2090      	movs	r0, #144	; 0x90
10001b64:	19c0      	adds	r0, r0, r7
10001b66:	6802      	ldr	r2, [r0, #0]
10001b68:	0092      	lsls	r2, r2, #2
10001b6a:	50d1      	str	r1, [r2, r3]
				      (div_array[array_count] * divisor_array[array_count_1]) + \
				       divisor_array[array_count_2];
				dividend_array[array_count] = \
				      (div_array[array_count] * dividend_array[array_count_1]) + \
10001b6c:	1c3b      	adds	r3, r7, #0
10001b6e:	3310      	adds	r3, #16
10001b70:	2190      	movs	r1, #144	; 0x90
10001b72:	19c9      	adds	r1, r1, r7
10001b74:	680a      	ldr	r2, [r1, #0]
10001b76:	0092      	lsls	r2, r2, #2
10001b78:	58d3      	ldr	r3, [r2, r3]
10001b7a:	1c3a      	adds	r2, r7, #0
10001b7c:	3220      	adds	r2, #32
10001b7e:	208c      	movs	r0, #140	; 0x8c
10001b80:	19c0      	adds	r0, r0, r7
10001b82:	6801      	ldr	r1, [r0, #0]
10001b84:	0089      	lsls	r1, r1, #2
10001b86:	588a      	ldr	r2, [r1, r2]
10001b88:	435a      	muls	r2, r3
				       dividend_array[array_count_2];
10001b8a:	1c3b      	adds	r3, r7, #0
10001b8c:	3320      	adds	r3, #32
10001b8e:	6f79      	ldr	r1, [r7, #116]	; 0x74
10001b90:	0089      	lsls	r1, r1, #2
10001b92:	58cb      	ldr	r3, [r1, r3]
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
				       divisor_array[array_count_2];
				dividend_array[array_count] = \
				      (div_array[array_count] * dividend_array[array_count_1]) + \
10001b94:	18d1      	adds	r1, r2, r3
			else
			{
				divisor_array[array_count] = \
				      (div_array[array_count] * divisor_array[array_count_1]) + \
				       divisor_array[array_count_2];
				dividend_array[array_count] = \
10001b96:	1c3b      	adds	r3, r7, #0
10001b98:	3320      	adds	r3, #32
10001b9a:	2090      	movs	r0, #144	; 0x90
10001b9c:	19c0      	adds	r0, r0, r7
10001b9e:	6802      	ldr	r2, [r0, #0]
10001ba0:	0092      	lsls	r2, r2, #2
10001ba2:	50d1      	str	r1, [r2, r3]
				      (div_array[array_count] * dividend_array[array_count_1]) + \
				       dividend_array[array_count_2];
			}
			if (dividend_array[array_count] > max) 
10001ba4:	1c3b      	adds	r3, r7, #0
10001ba6:	3320      	adds	r3, #32
10001ba8:	2190      	movs	r1, #144	; 0x90
10001baa:	19c9      	adds	r1, r1, r7
10001bac:	680a      	ldr	r2, [r1, #0]
10001bae:	0092      	lsls	r2, r2, #2
10001bb0:	58d2      	ldr	r2, [r2, r3]
10001bb2:	20a4      	movs	r0, #164	; 0xa4
10001bb4:	19c0      	adds	r0, r0, r7
10001bb6:	6803      	ldr	r3, [r0, #0]
10001bb8:	429a      	cmp	r2, r3
10001bba:	d800      	bhi.n	10001bbe <UART001_lConfigureBaudRate+0x276>
10001bbc:	e0fd      	b.n	10001dba <UART001_lConfigureBaudRate+0x472>
			{
				divisor1 = divisor_array[array_count_1];
10001bbe:	1c3b      	adds	r3, r7, #0
10001bc0:	3330      	adds	r3, #48	; 0x30
10001bc2:	218c      	movs	r1, #140	; 0x8c
10001bc4:	19c9      	adds	r1, r1, r7
10001bc6:	680a      	ldr	r2, [r1, #0]
10001bc8:	0092      	lsls	r2, r2, #2
10001bca:	58d3      	ldr	r3, [r2, r3]
10001bcc:	22a0      	movs	r2, #160	; 0xa0
10001bce:	19d2      	adds	r2, r2, r7
10001bd0:	6013      	str	r3, [r2, #0]
				dividend1 = dividend_array[array_count_1];
10001bd2:	1c3b      	adds	r3, r7, #0
10001bd4:	3320      	adds	r3, #32
10001bd6:	208c      	movs	r0, #140	; 0x8c
10001bd8:	19c0      	adds	r0, r0, r7
10001bda:	6802      	ldr	r2, [r0, #0]
10001bdc:	0092      	lsls	r2, r2, #2
10001bde:	58d3      	ldr	r3, [r2, r3]
10001be0:	2198      	movs	r1, #152	; 0x98
10001be2:	19c9      	adds	r1, r1, r7
10001be4:	600b      	str	r3, [r1, #0]
				frac = (max - dividend_array[array_count_2]) / \
10001be6:	1c3b      	adds	r3, r7, #0
10001be8:	3320      	adds	r3, #32
10001bea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
10001bec:	0092      	lsls	r2, r2, #2
10001bee:	58d3      	ldr	r3, [r2, r3]
10001bf0:	20a4      	movs	r0, #164	; 0xa4
10001bf2:	19c0      	adds	r0, r0, r7
10001bf4:	6802      	ldr	r2, [r0, #0]
10001bf6:	1ad2      	subs	r2, r2, r3
				                               dividend_array[array_count_1];
10001bf8:	1c3b      	adds	r3, r7, #0
10001bfa:	3320      	adds	r3, #32
10001bfc:	208c      	movs	r0, #140	; 0x8c
10001bfe:	19c0      	adds	r0, r0, r7
10001c00:	6801      	ldr	r1, [r0, #0]
10001c02:	0089      	lsls	r1, r1, #2
10001c04:	58cb      	ldr	r3, [r1, r3]
			}
			if (dividend_array[array_count] > max) 
			{
				divisor1 = divisor_array[array_count_1];
				dividend1 = dividend_array[array_count_1];
				frac = (max - dividend_array[array_count_2]) / \
10001c06:	1c10      	adds	r0, r2, #0
10001c08:	1c19      	adds	r1, r3, #0
10001c0a:	f001 fa9d 	bl	10003148 <__aeabi_uidiv>
10001c0e:	1c03      	adds	r3, r0, #0
10001c10:	673b      	str	r3, [r7, #112]	; 0x70
				                               dividend_array[array_count_1];
				divisor2 = (frac * divisor_array[array_count-1U]) + \
10001c12:	2190      	movs	r1, #144	; 0x90
10001c14:	19c9      	adds	r1, r1, r7
10001c16:	680b      	ldr	r3, [r1, #0]
10001c18:	1e5a      	subs	r2, r3, #1
10001c1a:	1c3b      	adds	r3, r7, #0
10001c1c:	3330      	adds	r3, #48	; 0x30
10001c1e:	0092      	lsls	r2, r2, #2
10001c20:	58d3      	ldr	r3, [r2, r3]
10001c22:	6f3a      	ldr	r2, [r7, #112]	; 0x70
10001c24:	435a      	muls	r2, r3
				                                divisor_array[array_count-2U];
10001c26:	2090      	movs	r0, #144	; 0x90
10001c28:	19c0      	adds	r0, r0, r7
10001c2a:	6803      	ldr	r3, [r0, #0]
10001c2c:	1e99      	subs	r1, r3, #2
10001c2e:	1c3b      	adds	r3, r7, #0
10001c30:	3330      	adds	r3, #48	; 0x30
10001c32:	0089      	lsls	r1, r1, #2
10001c34:	58cb      	ldr	r3, [r1, r3]
			{
				divisor1 = divisor_array[array_count_1];
				dividend1 = dividend_array[array_count_1];
				frac = (max - dividend_array[array_count_2]) / \
				                               dividend_array[array_count_1];
				divisor2 = (frac * divisor_array[array_count-1U]) + \
10001c36:	18d3      	adds	r3, r2, r3
10001c38:	219c      	movs	r1, #156	; 0x9c
10001c3a:	19c9      	adds	r1, r1, r7
10001c3c:	600b      	str	r3, [r1, #0]
				                                divisor_array[array_count-2U];
				dividend2 = (frac * dividend_array[array_count-1U]) + \
10001c3e:	2290      	movs	r2, #144	; 0x90
10001c40:	19d2      	adds	r2, r2, r7
10001c42:	6813      	ldr	r3, [r2, #0]
10001c44:	1e5a      	subs	r2, r3, #1
10001c46:	1c3b      	adds	r3, r7, #0
10001c48:	3320      	adds	r3, #32
10001c4a:	0092      	lsls	r2, r2, #2
10001c4c:	58d3      	ldr	r3, [r2, r3]
10001c4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
10001c50:	435a      	muls	r2, r3
				                               dividend_array[array_count_2];
10001c52:	1c3b      	adds	r3, r7, #0
10001c54:	3320      	adds	r3, #32
10001c56:	6f79      	ldr	r1, [r7, #116]	; 0x74
10001c58:	0089      	lsls	r1, r1, #2
10001c5a:	58cb      	ldr	r3, [r1, r3]
				dividend1 = dividend_array[array_count_1];
				frac = (max - dividend_array[array_count_2]) / \
				                               dividend_array[array_count_1];
				divisor2 = (frac * divisor_array[array_count-1U]) + \
				                                divisor_array[array_count-2U];
				dividend2 = (frac * dividend_array[array_count-1U]) + \
10001c5c:	18d3      	adds	r3, r2, r3
10001c5e:	2094      	movs	r0, #148	; 0x94
10001c60:	19c0      	adds	r0, r0, r7
10001c62:	6003      	str	r3, [r0, #0]
				                               dividend_array[array_count_2];
				/* Swap if required */
				if (swapped) {
10001c64:	1c3b      	adds	r3, r7, #0
10001c66:	3383      	adds	r3, #131	; 0x83
10001c68:	781b      	ldrb	r3, [r3, #0]
10001c6a:	2b00      	cmp	r3, #0
10001c6c:	d01b      	beq.n	10001ca6 <UART001_lConfigureBaudRate+0x35e>
						/* Swap divisor1 and dividend1 */
						temp = divisor1;
10001c6e:	21a0      	movs	r1, #160	; 0xa0
10001c70:	19c9      	adds	r1, r1, r7
10001c72:	680b      	ldr	r3, [r1, #0]
10001c74:	67fb      	str	r3, [r7, #124]	; 0x7c
						divisor1 = dividend1;
10001c76:	2298      	movs	r2, #152	; 0x98
10001c78:	19d2      	adds	r2, r2, r7
10001c7a:	6813      	ldr	r3, [r2, #0]
10001c7c:	20a0      	movs	r0, #160	; 0xa0
10001c7e:	19c0      	adds	r0, r0, r7
10001c80:	6003      	str	r3, [r0, #0]
						dividend1 = temp;
10001c82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10001c84:	2198      	movs	r1, #152	; 0x98
10001c86:	19c9      	adds	r1, r1, r7
10001c88:	600b      	str	r3, [r1, #0]
						/* Swap divisor2 and dividend2 */
						temp = divisor2;
10001c8a:	229c      	movs	r2, #156	; 0x9c
10001c8c:	19d2      	adds	r2, r2, r7
10001c8e:	6813      	ldr	r3, [r2, #0]
10001c90:	67fb      	str	r3, [r7, #124]	; 0x7c
						divisor2 = dividend2;
10001c92:	2094      	movs	r0, #148	; 0x94
10001c94:	19c0      	adds	r0, r0, r7
10001c96:	6803      	ldr	r3, [r0, #0]
10001c98:	219c      	movs	r1, #156	; 0x9c
10001c9a:	19c9      	adds	r1, r1, r7
10001c9c:	600b      	str	r3, [r1, #0]
						dividend2 = temp;
10001c9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10001ca0:	2294      	movs	r2, #148	; 0x94
10001ca2:	19d2      	adds	r2, r2, r7
10001ca4:	6013      	str	r3, [r2, #0]
					}
				/* Remove if one of has divisor 0 */
				if ((dividend1 == 0U) || (divisor1 == 0U)) {
10001ca6:	2098      	movs	r0, #152	; 0x98
10001ca8:	19c0      	adds	r0, r0, r7
10001caa:	6803      	ldr	r3, [r0, #0]
10001cac:	2b00      	cmp	r3, #0
10001cae:	d004      	beq.n	10001cba <UART001_lConfigureBaudRate+0x372>
10001cb0:	21a0      	movs	r1, #160	; 0xa0
10001cb2:	19c9      	adds	r1, r1, r7
10001cb4:	680b      	ldr	r3, [r1, #0]
10001cb6:	2b00      	cmp	r3, #0
10001cb8:	d10c      	bne.n	10001cd4 <UART001_lConfigureBaudRate+0x38c>
					fdr_step = divisor2;
10001cba:	229c      	movs	r2, #156	; 0x9c
10001cbc:	19d2      	adds	r2, r2, r7
10001cbe:	6813      	ldr	r3, [r2, #0]
10001cc0:	20b4      	movs	r0, #180	; 0xb4
10001cc2:	19c0      	adds	r0, r0, r7
10001cc4:	6003      	str	r3, [r0, #0]
					brg_pdiv = dividend2;
10001cc6:	2194      	movs	r1, #148	; 0x94
10001cc8:	19c9      	adds	r1, r1, r7
10001cca:	680b      	ldr	r3, [r1, #0]
10001ccc:	22b0      	movs	r2, #176	; 0xb0
10001cce:	19d2      	adds	r2, r2, r7
10001cd0:	6013      	str	r3, [r2, #0]
10001cd2:	e06d      	b.n	10001db0 <UART001_lConfigureBaudRate+0x468>
				}else if ((dividend2 == 0U) || (divisor2 == 0U)) {
10001cd4:	2094      	movs	r0, #148	; 0x94
10001cd6:	19c0      	adds	r0, r0, r7
10001cd8:	6803      	ldr	r3, [r0, #0]
10001cda:	2b00      	cmp	r3, #0
10001cdc:	d004      	beq.n	10001ce8 <UART001_lConfigureBaudRate+0x3a0>
10001cde:	219c      	movs	r1, #156	; 0x9c
10001ce0:	19c9      	adds	r1, r1, r7
10001ce2:	680b      	ldr	r3, [r1, #0]
10001ce4:	2b00      	cmp	r3, #0
10001ce6:	d10f      	bne.n	10001d08 <UART001_lConfigureBaudRate+0x3c0>
					fdr_step = divisor1;
10001ce8:	22a0      	movs	r2, #160	; 0xa0
10001cea:	19d2      	adds	r2, r2, r7
10001cec:	6813      	ldr	r3, [r2, #0]
10001cee:	20b4      	movs	r0, #180	; 0xb4
10001cf0:	19c0      	adds	r0, r0, r7
10001cf2:	6003      	str	r3, [r0, #0]
					brg_pdiv = dividend1;
10001cf4:	2198      	movs	r1, #152	; 0x98
10001cf6:	19c9      	adds	r1, r1, r7
10001cf8:	680b      	ldr	r3, [r1, #0]
10001cfa:	22b0      	movs	r2, #176	; 0xb0
10001cfc:	19d2      	adds	r2, r2, r7
10001cfe:	6013      	str	r3, [r2, #0]
10001d00:	e056      	b.n	10001db0 <UART001_lConfigureBaudRate+0x468>
10001d02:	46c0      	nop			; (mov r8, r8)
10001d04:	0000030d 	.word	0x0000030d
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
					    ((float) divisor1 / (float) dividend1 )) > \
10001d08:	23a0      	movs	r3, #160	; 0xa0
10001d0a:	19db      	adds	r3, r3, r7
10001d0c:	6818      	ldr	r0, [r3, #0]
10001d0e:	f001 fe93 	bl	10003a38 <__aeabi_ui2f>
10001d12:	1c04      	adds	r4, r0, #0
10001d14:	2198      	movs	r1, #152	; 0x98
10001d16:	19c9      	adds	r1, r1, r7
10001d18:	6808      	ldr	r0, [r1, #0]
10001d1a:	f001 fe8d 	bl	10003a38 <__aeabi_ui2f>
10001d1e:	1c03      	adds	r3, r0, #0
10001d20:	1c20      	adds	r0, r4, #0
10001d22:	1c19      	adds	r1, r3, #0
10001d24:	f001 fabc 	bl	100032a0 <__aeabi_fdiv>
10001d28:	1c03      	adds	r3, r0, #0
				}else if ((dividend2 == 0U) || (divisor2 == 0U)) {
					fdr_step = divisor1;
					brg_pdiv = dividend1;
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
10001d2a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
10001d2c:	1c19      	adds	r1, r3, #0
10001d2e:	f001 fca9 	bl	10003684 <__aeabi_fsub>
10001d32:	1c03      	adds	r3, r0, #0
10001d34:	1c18      	adds	r0, r3, #0
10001d36:	f7ff fdef 	bl	10001918 <UART001_labsRealType>
10001d3a:	1c04      	adds	r4, r0, #0
					    ((float) divisor1 / (float) dividend1 )) > \
					    UART001_labsRealType(div_factor - \
					    ((float) divisor2 / (float) dividend2 ))) 
10001d3c:	229c      	movs	r2, #156	; 0x9c
10001d3e:	19d2      	adds	r2, r2, r7
10001d40:	6810      	ldr	r0, [r2, #0]
10001d42:	f001 fe79 	bl	10003a38 <__aeabi_ui2f>
10001d46:	1c05      	adds	r5, r0, #0
10001d48:	2394      	movs	r3, #148	; 0x94
10001d4a:	19db      	adds	r3, r3, r7
10001d4c:	6818      	ldr	r0, [r3, #0]
10001d4e:	f001 fe73 	bl	10003a38 <__aeabi_ui2f>
10001d52:	1c03      	adds	r3, r0, #0
10001d54:	1c28      	adds	r0, r5, #0
10001d56:	1c19      	adds	r1, r3, #0
10001d58:	f001 faa2 	bl	100032a0 <__aeabi_fdiv>
10001d5c:	1c03      	adds	r3, r0, #0
					brg_pdiv = dividend1;
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
					    ((float) divisor1 / (float) dividend1 )) > \
					    UART001_labsRealType(div_factor - \
10001d5e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
10001d60:	1c19      	adds	r1, r3, #0
10001d62:	f001 fc8f 	bl	10003684 <__aeabi_fsub>
10001d66:	1c03      	adds	r3, r0, #0
10001d68:	1c18      	adds	r0, r3, #0
10001d6a:	f7ff fdd5 	bl	10001918 <UART001_labsRealType>
10001d6e:	1c03      	adds	r3, r0, #0
				}else if ((dividend2 == 0U) || (divisor2 == 0U)) {
					fdr_step = divisor1;
					brg_pdiv = dividend1;
				}else { 
					/*  Find the most nearest to target division */
					if (UART001_labsRealType(div_factor - \
10001d70:	1c20      	adds	r0, r4, #0
10001d72:	1c19      	adds	r1, r3, #0
10001d74:	f001 fa5e 	bl	10003234 <__aeabi_fcmpgt>
10001d78:	1c03      	adds	r3, r0, #0
10001d7a:	2b00      	cmp	r3, #0
10001d7c:	d00c      	beq.n	10001d98 <UART001_lConfigureBaudRate+0x450>
					    ((float) divisor1 / (float) dividend1 )) > \
					    UART001_labsRealType(div_factor - \
					    ((float) divisor2 / (float) dividend2 ))) 
					{
						fdr_step = divisor2;
10001d7e:	209c      	movs	r0, #156	; 0x9c
10001d80:	19c0      	adds	r0, r0, r7
10001d82:	6803      	ldr	r3, [r0, #0]
10001d84:	21b4      	movs	r1, #180	; 0xb4
10001d86:	19c9      	adds	r1, r1, r7
10001d88:	600b      	str	r3, [r1, #0]
						brg_pdiv = dividend2;
10001d8a:	2294      	movs	r2, #148	; 0x94
10001d8c:	19d2      	adds	r2, r2, r7
10001d8e:	6813      	ldr	r3, [r2, #0]
10001d90:	20b0      	movs	r0, #176	; 0xb0
10001d92:	19c0      	adds	r0, r0, r7
10001d94:	6003      	str	r3, [r0, #0]
10001d96:	e00b      	b.n	10001db0 <UART001_lConfigureBaudRate+0x468>
					}else {
						fdr_step = divisor1;
10001d98:	21a0      	movs	r1, #160	; 0xa0
10001d9a:	19c9      	adds	r1, r1, r7
10001d9c:	680b      	ldr	r3, [r1, #0]
10001d9e:	22b4      	movs	r2, #180	; 0xb4
10001da0:	19d2      	adds	r2, r2, r7
10001da2:	6013      	str	r3, [r2, #0]
						brg_pdiv = dividend1;
10001da4:	2098      	movs	r0, #152	; 0x98
10001da6:	19c0      	adds	r0, r0, r7
10001da8:	6803      	ldr	r3, [r0, #0]
10001daa:	21b0      	movs	r1, #176	; 0xb0
10001dac:	19c9      	adds	r1, r1, r7
10001dae:	600b      	str	r3, [r1, #0]
					}
				}
				do_while_break = 0x05U;
10001db0:	2305      	movs	r3, #5
10001db2:	2288      	movs	r2, #136	; 0x88
10001db4:	19d2      	adds	r2, r2, r7
10001db6:	6013      	str	r3, [r2, #0]
10001db8:	e033      	b.n	10001e22 <UART001_lConfigureBaudRate+0x4da>
			}
			else if (remainder[array_count]== 0U) 
10001dba:	1c3b      	adds	r3, r7, #0
10001dbc:	3340      	adds	r3, #64	; 0x40
10001dbe:	2090      	movs	r0, #144	; 0x90
10001dc0:	19c0      	adds	r0, r0, r7
10001dc2:	6802      	ldr	r2, [r0, #0]
10001dc4:	0092      	lsls	r2, r2, #2
10001dc6:	58d3      	ldr	r3, [r2, r3]
10001dc8:	2b00      	cmp	r3, #0
10001dca:	d12a      	bne.n	10001e22 <UART001_lConfigureBaudRate+0x4da>
			{
				fdr_step = divisor_array[array_count];
10001dcc:	1c3b      	adds	r3, r7, #0
10001dce:	3330      	adds	r3, #48	; 0x30
10001dd0:	2190      	movs	r1, #144	; 0x90
10001dd2:	19c9      	adds	r1, r1, r7
10001dd4:	680a      	ldr	r2, [r1, #0]
10001dd6:	0092      	lsls	r2, r2, #2
10001dd8:	58d3      	ldr	r3, [r2, r3]
10001dda:	22b4      	movs	r2, #180	; 0xb4
10001ddc:	19d2      	adds	r2, r2, r7
10001dde:	6013      	str	r3, [r2, #0]
				brg_pdiv = dividend_array[array_count];
10001de0:	1c3b      	adds	r3, r7, #0
10001de2:	3320      	adds	r3, #32
10001de4:	2090      	movs	r0, #144	; 0x90
10001de6:	19c0      	adds	r0, r0, r7
10001de8:	6802      	ldr	r2, [r0, #0]
10001dea:	0092      	lsls	r2, r2, #2
10001dec:	58d3      	ldr	r3, [r2, r3]
10001dee:	21b0      	movs	r1, #176	; 0xb0
10001df0:	19c9      	adds	r1, r1, r7
10001df2:	600b      	str	r3, [r1, #0]
				if (swapped)
10001df4:	1c3b      	adds	r3, r7, #0
10001df6:	3383      	adds	r3, #131	; 0x83
10001df8:	781b      	ldrb	r3, [r3, #0]
10001dfa:	2b00      	cmp	r3, #0
10001dfc:	d00d      	beq.n	10001e1a <UART001_lConfigureBaudRate+0x4d2>
				{
					/* Swap fdr_step and brg_pdiv */
					temp = fdr_step;
10001dfe:	22b4      	movs	r2, #180	; 0xb4
10001e00:	19d2      	adds	r2, r2, r7
10001e02:	6813      	ldr	r3, [r2, #0]
10001e04:	67fb      	str	r3, [r7, #124]	; 0x7c
					fdr_step = brg_pdiv;
10001e06:	20b0      	movs	r0, #176	; 0xb0
10001e08:	19c0      	adds	r0, r0, r7
10001e0a:	6803      	ldr	r3, [r0, #0]
10001e0c:	21b4      	movs	r1, #180	; 0xb4
10001e0e:	19c9      	adds	r1, r1, r7
10001e10:	600b      	str	r3, [r1, #0]
					brg_pdiv = temp;
10001e12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10001e14:	22b0      	movs	r2, #176	; 0xb0
10001e16:	19d2      	adds	r2, r2, r7
10001e18:	6013      	str	r3, [r2, #0]
				}
				do_while_break = 0x05U;
10001e1a:	2305      	movs	r3, #5
10001e1c:	2088      	movs	r0, #136	; 0x88
10001e1e:	19c0      	adds	r0, r0, r7
10001e20:	6003      	str	r3, [r0, #0]
			}
			else {
			  /* Do Nothing */
			}
		} while (do_while_break != 0x05U);
10001e22:	2188      	movs	r1, #136	; 0x88
10001e24:	19c9      	adds	r1, r1, r7
10001e26:	680b      	ldr	r3, [r1, #0]
10001e28:	2b05      	cmp	r3, #5
10001e2a:	d000      	beq.n	10001e2e <UART001_lConfigureBaudRate+0x4e6>
10001e2c:	e607      	b.n	10001a3e <UART001_lConfigureBaudRate+0xf6>

	if(fdr_step >= UART001_MAX_VALUE)
10001e2e:	23b4      	movs	r3, #180	; 0xb4
10001e30:	19db      	adds	r3, r3, r7
10001e32:	681a      	ldr	r2, [r3, #0]
10001e34:	4b0a      	ldr	r3, [pc, #40]	; (10001e60 <UART001_lConfigureBaudRate+0x518>)
10001e36:	429a      	cmp	r2, r3
10001e38:	d903      	bls.n	10001e42 <UART001_lConfigureBaudRate+0x4fa>
	{
	   fdr_step = 1023U;
10001e3a:	4b09      	ldr	r3, [pc, #36]	; (10001e60 <UART001_lConfigureBaudRate+0x518>)
10001e3c:	20b4      	movs	r0, #180	; 0xb4
10001e3e:	19c0      	adds	r0, r0, r7
10001e40:	6003      	str	r3, [r0, #0]
	}

	*Step = fdr_step;
10001e42:	687b      	ldr	r3, [r7, #4]
10001e44:	21b4      	movs	r1, #180	; 0xb4
10001e46:	19c9      	adds	r1, r1, r7
10001e48:	680a      	ldr	r2, [r1, #0]
10001e4a:	601a      	str	r2, [r3, #0]

	*Pdiv = brg_pdiv - 1U;
10001e4c:	22b0      	movs	r2, #176	; 0xb0
10001e4e:	19d2      	adds	r2, r2, r7
10001e50:	6813      	ldr	r3, [r2, #0]
10001e52:	1e5a      	subs	r2, r3, #1
10001e54:	68bb      	ldr	r3, [r7, #8]
10001e56:	601a      	str	r2, [r3, #0]
}
10001e58:	46bd      	mov	sp, r7
10001e5a:	b02e      	add	sp, #184	; 0xb8
10001e5c:	bdb0      	pop	{r4, r5, r7, pc}
10001e5e:	46c0      	nop			; (mov r8, r8)
10001e60:	000003ff 	.word	0x000003ff

10001e64 <UART001_Init>:
 *
 * <b>Reentrant: No </b><BR>
 *
 ******************************************************************************/
void UART001_Init(void)
{
10001e64:	b580      	push	{r7, lr}
10001e66:	b082      	sub	sp, #8
10001e68:	af00      	add	r7, sp, #0
    #if (__TARGET_DEVICE__ != XMC45)
	#if ((__TARGET_DEVICE__ == XMC13) || \
	     (__TARGET_DEVICE__ == XMC12) || \
	     (__TARGET_DEVICE__ == XMC11))
	  /* Disable the USIC0/USIC1 clock gating for XMC1000 devices */	     
	  SCU_GENERAL->PASSWD = 0x000000C0UL;
10001e6a:	4b1d      	ldr	r3, [pc, #116]	; (10001ee0 <UART001_Init+0x7c>)
10001e6c:	22c0      	movs	r2, #192	; 0xc0
10001e6e:	625a      	str	r2, [r3, #36]	; 0x24
	  WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, \
10001e70:	4b1c      	ldr	r3, [pc, #112]	; (10001ee4 <UART001_Init+0x80>)
10001e72:	4a1c      	ldr	r2, [pc, #112]	; (10001ee4 <UART001_Init+0x80>)
10001e74:	6812      	ldr	r2, [r2, #0]
10001e76:	491c      	ldr	r1, [pc, #112]	; (10001ee8 <UART001_Init+0x84>)
10001e78:	430a      	orrs	r2, r1
10001e7a:	601a      	str	r2, [r3, #0]
	                                SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);

	  #if defined(UART001_PER0_USIC0_ENABLED)
	  SET_BIT(SCU_CLK->CGATCLR0, SCU_CLK_CGATCLR0_USIC0_Pos);
10001e7c:	4b19      	ldr	r3, [pc, #100]	; (10001ee4 <UART001_Init+0x80>)
10001e7e:	4a19      	ldr	r2, [pc, #100]	; (10001ee4 <UART001_Init+0x80>)
10001e80:	6912      	ldr	r2, [r2, #16]
10001e82:	2108      	movs	r1, #8
10001e84:	430a      	orrs	r2, r1
10001e86:	611a      	str	r2, [r3, #16]
      #endif
      #if defined(UART001_PER1_USIC1_ENABLED)
	  SET_BIT(SCU_CLK->CGATCLR1, SCU_CLK_CGATCLR1_USIC1_Pos);
	  #endif
	  while ((SCU_CLK->CLKCR)&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10001e88:	46c0      	nop			; (mov r8, r8)
10001e8a:	4b16      	ldr	r3, [pc, #88]	; (10001ee4 <UART001_Init+0x80>)
10001e8c:	681a      	ldr	r2, [r3, #0]
10001e8e:	2380      	movs	r3, #128	; 0x80
10001e90:	05db      	lsls	r3, r3, #23
10001e92:	4013      	ands	r3, r2
10001e94:	d1f9      	bne.n	10001e8a <UART001_Init+0x26>
	  {
	  	;
	  }
	  SCU_GENERAL->PASSWD = 0x000000C3UL;
10001e96:	4b12      	ldr	r3, [pc, #72]	; (10001ee0 <UART001_Init+0x7c>)
10001e98:	22c3      	movs	r2, #195	; 0xc3
10001e9a:	625a      	str	r2, [r3, #36]	; 0x24
   #if defined(UART001_PER1_USIC2_ENABLED)
	  RESET001_DeassertReset(PER1_USIC2); 
   #endif 
   #endif  
	  
   for (LoopIndex = (uint32_t)0; LoopIndex < (uint32_t)UART001_NUM_HANDLES; \
10001e9c:	2300      	movs	r3, #0
10001e9e:	607b      	str	r3, [r7, #4]
10001ea0:	e017      	b.n	10001ed2 <UART001_Init+0x6e>
	                           LoopIndex++)
   {
	  if (UART001_HandleArray[LoopIndex]->Mode == UART_HALFDUPLEX)
10001ea2:	4b12      	ldr	r3, [pc, #72]	; (10001eec <UART001_Init+0x88>)
10001ea4:	687a      	ldr	r2, [r7, #4]
10001ea6:	0092      	lsls	r2, r2, #2
10001ea8:	58d3      	ldr	r3, [r2, r3]
10001eaa:	7d1b      	ldrb	r3, [r3, #20]
10001eac:	2b01      	cmp	r3, #1
10001eae:	d106      	bne.n	10001ebe <UART001_Init+0x5a>
	  {
	   /*Configure TX Pin in Open-drain mode to allow the Wired-AND connection*/
		UART001_lConfigTXPin(UART001_HandleArray[LoopIndex]);
10001eb0:	4b0e      	ldr	r3, [pc, #56]	; (10001eec <UART001_Init+0x88>)
10001eb2:	687a      	ldr	r2, [r7, #4]
10001eb4:	0092      	lsls	r2, r2, #2
10001eb6:	58d3      	ldr	r3, [r2, r3]
10001eb8:	1c18      	adds	r0, r3, #0
10001eba:	f7ff fcbd 	bl	10001838 <UART001_lConfigTXPin>
	  }
	  
	  UART001_lInit(UART001_HandleArray[LoopIndex]);
10001ebe:	4b0b      	ldr	r3, [pc, #44]	; (10001eec <UART001_Init+0x88>)
10001ec0:	687a      	ldr	r2, [r7, #4]
10001ec2:	0092      	lsls	r2, r2, #2
10001ec4:	58d3      	ldr	r3, [r2, r3]
10001ec6:	1c18      	adds	r0, r3, #0
10001ec8:	f7ff fbdc 	bl	10001684 <UART001_lInit>
	  RESET001_DeassertReset(PER1_USIC2); 
   #endif 
   #endif  
	  
   for (LoopIndex = (uint32_t)0; LoopIndex < (uint32_t)UART001_NUM_HANDLES; \
	                           LoopIndex++)
10001ecc:	687b      	ldr	r3, [r7, #4]
10001ece:	3301      	adds	r3, #1
10001ed0:	607b      	str	r3, [r7, #4]
   #if defined(UART001_PER1_USIC2_ENABLED)
	  RESET001_DeassertReset(PER1_USIC2); 
   #endif 
   #endif  
	  
   for (LoopIndex = (uint32_t)0; LoopIndex < (uint32_t)UART001_NUM_HANDLES; \
10001ed2:	687b      	ldr	r3, [r7, #4]
10001ed4:	2b00      	cmp	r3, #0
10001ed6:	d0e4      	beq.n	10001ea2 <UART001_Init+0x3e>
	  }
	  
	  UART001_lInit(UART001_HandleArray[LoopIndex]);
   }
   
}
10001ed8:	46bd      	mov	sp, r7
10001eda:	b002      	add	sp, #8
10001edc:	bd80      	pop	{r7, pc}
10001ede:	46c0      	nop			; (mov r8, r8)
10001ee0:	40010000 	.word	0x40010000
10001ee4:	40010300 	.word	0x40010300
10001ee8:	3ff00000 	.word	0x3ff00000
10001eec:	20000a80 	.word	0x20000a80

10001ef0 <UART001_DeInit>:
 *
 * <b>Reentrant: No </b><BR>
 *
 ******************************************************************************/
 void  UART001_DeInit (const UART001_HandleType* Handle)
{
10001ef0:	b580      	push	{r7, lr}
10001ef2:	b082      	sub	sp, #8
10001ef4:	af00      	add	r7, sp, #0
10001ef6:	6078      	str	r0, [r7, #4]
  /* <<<DD_UART001_API_2>>> */
  /* Place holder function */      
}
10001ef8:	46bd      	mov	sp, r7
10001efa:	b002      	add	sp, #8
10001efc:	bd80      	pop	{r7, pc}
10001efe:	46c0      	nop			; (mov r8, r8)

10001f00 <UART001_Configure>:
  const UART001_HandleType* Handle,
  uint32_t BaudRate,
  UART_ParityType Parity,
  UART_StopBitType Stopbit
)
{
10001f00:	b580      	push	{r7, lr}
10001f02:	b08a      	sub	sp, #40	; 0x28
10001f04:	af00      	add	r7, sp, #0
10001f06:	60f8      	str	r0, [r7, #12]
10001f08:	60b9      	str	r1, [r7, #8]
10001f0a:	1c11      	adds	r1, r2, #0
10001f0c:	1c1a      	adds	r2, r3, #0
10001f0e:	1dfb      	adds	r3, r7, #7
10001f10:	7019      	strb	r1, [r3, #0]
10001f12:	1dbb      	adds	r3, r7, #6
10001f14:	701a      	strb	r2, [r3, #0]
   uint32_t Brg_Pdiv = 0x00U;
10001f16:	2300      	movs	r3, #0
10001f18:	617b      	str	r3, [r7, #20]
   uint32_t Fdr_Step = 0x00U;
10001f1a:	2300      	movs	r3, #0
10001f1c:	613b      	str	r3, [r7, #16]
   uint32_t TXIDLE_status;
   uint32_t RXIDLE_status;
   USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
10001f1e:	68fb      	ldr	r3, [r7, #12]
10001f20:	681b      	ldr	r3, [r3, #0]
10001f22:	623b      	str	r3, [r7, #32]
   status_t Status = (status_t)UART001_ERROR;
10001f24:	2305      	movs	r3, #5
10001f26:	627b      	str	r3, [r7, #36]	; 0x24
   
   /* <<<DD_UART001_API_3>>>*/

   TXIDLE_status = (uint32_t)\
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_TXIDLE_Msk, \
10001f28:	6a3b      	ldr	r3, [r7, #32]
10001f2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
   status_t Status = (status_t)UART001_ERROR;
   
   /* <<<DD_UART001_API_3>>>*/

   TXIDLE_status = (uint32_t)\
10001f2c:	2301      	movs	r3, #1
10001f2e:	4013      	ands	r3, r2
10001f30:	61fb      	str	r3, [r7, #28]
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_TXIDLE_Msk, \
	                       USIC_CH_PSR_ASCMode_TXIDLE_Pos);

   RXIDLE_status = (uint32_t)\
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_RXIDLE_Msk, \
10001f32:	6a3b      	ldr	r3, [r7, #32]
10001f34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
10001f36:	2302      	movs	r3, #2
10001f38:	4013      	ands	r3, r2

   TXIDLE_status = (uint32_t)\
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_TXIDLE_Msk, \
	                       USIC_CH_PSR_ASCMode_TXIDLE_Pos);

   RXIDLE_status = (uint32_t)\
10001f3a:	085b      	lsrs	r3, r3, #1
10001f3c:	61bb      	str	r3, [r7, #24]
                 RD_REG(UartRegs->PSR_ASCMode,USIC_CH_PSR_ASCMode_RXIDLE_Msk, \
	                       USIC_CH_PSR_ASCMode_RXIDLE_Pos);
   if(( TXIDLE_status & RXIDLE_status) == 0x01U)
10001f3e:	69fb      	ldr	r3, [r7, #28]
10001f40:	69ba      	ldr	r2, [r7, #24]
10001f42:	4013      	ands	r3, r2
10001f44:	2b01      	cmp	r3, #1
10001f46:	d156      	bne.n	10001ff6 <UART001_Configure+0xf6>
    {
      /* Disable UART mode before configuring all USIC registers to avoid 
       * unintended edges */ 
      UartRegs->CCR &= ~( ((uint32_t)(UART_MODE  & USIC_CH_CCR_MODE_Msk)));  
10001f48:	6a3b      	ldr	r3, [r7, #32]
10001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001f4c:	2202      	movs	r2, #2
10001f4e:	1c19      	adds	r1, r3, #0
10001f50:	4391      	bics	r1, r2
10001f52:	1c0a      	adds	r2, r1, #0
10001f54:	6a3b      	ldr	r3, [r7, #32]
10001f56:	641a      	str	r2, [r3, #64]	; 0x40
	  
      /* Configuration of USIC Channel Fractional Divider */
      UART001_lConfigureBaudRate(BaudRate,&Brg_Pdiv,&Fdr_Step);
10001f58:	68b9      	ldr	r1, [r7, #8]
10001f5a:	1c3a      	adds	r2, r7, #0
10001f5c:	3214      	adds	r2, #20
10001f5e:	1c3b      	adds	r3, r7, #0
10001f60:	3310      	adds	r3, #16
10001f62:	1c08      	adds	r0, r1, #0
10001f64:	1c11      	adds	r1, r2, #0
10001f66:	1c1a      	adds	r2, r3, #0
10001f68:	f7ff fcee 	bl	10001948 <UART001_lConfigureBaudRate>

      /* Step value: 0x3FF */
      UartRegs->FDR &= ~(USIC_CH_FDR_STEP_Msk);
10001f6c:	6a3b      	ldr	r3, [r7, #32]
10001f6e:	691b      	ldr	r3, [r3, #16]
10001f70:	0a9b      	lsrs	r3, r3, #10
10001f72:	029a      	lsls	r2, r3, #10
10001f74:	6a3b      	ldr	r3, [r7, #32]
10001f76:	611a      	str	r2, [r3, #16]
      UartRegs->FDR |= ( Fdr_Step & USIC_CH_FDR_STEP_Msk);
10001f78:	6a3b      	ldr	r3, [r7, #32]
10001f7a:	691a      	ldr	r2, [r3, #16]
10001f7c:	693b      	ldr	r3, [r7, #16]
10001f7e:	059b      	lsls	r3, r3, #22
10001f80:	0d9b      	lsrs	r3, r3, #22
10001f82:	431a      	orrs	r2, r3
10001f84:	6a3b      	ldr	r3, [r7, #32]
10001f86:	611a      	str	r2, [r3, #16]
              
      /* The PreDivider for CTQ, PCTQ = 0  */
      /* The Denominator for CTQ, DCTQ = 16 */

      UartRegs->BRG &= ~(USIC_CH_BRG_PDIV_Msk);
10001f88:	6a3b      	ldr	r3, [r7, #32]
10001f8a:	695a      	ldr	r2, [r3, #20]
10001f8c:	4b1d      	ldr	r3, [pc, #116]	; (10002004 <UART001_Configure+0x104>)
10001f8e:	401a      	ands	r2, r3
10001f90:	6a3b      	ldr	r3, [r7, #32]
10001f92:	615a      	str	r2, [r3, #20]
      UartRegs->BRG |= ((((uint32_t)Brg_Pdiv  << USIC_CH_BRG_PDIV_Pos) \
10001f94:	6a3b      	ldr	r3, [r7, #32]
10001f96:	695a      	ldr	r2, [r3, #20]
10001f98:	697b      	ldr	r3, [r7, #20]
10001f9a:	0419      	lsls	r1, r3, #16
    		                                          &  USIC_CH_BRG_PDIV_Msk));
10001f9c:	4b1a      	ldr	r3, [pc, #104]	; (10002008 <UART001_Configure+0x108>)
10001f9e:	400b      	ands	r3, r1
              
      /* The PreDivider for CTQ, PCTQ = 0  */
      /* The Denominator for CTQ, DCTQ = 16 */

      UartRegs->BRG &= ~(USIC_CH_BRG_PDIV_Msk);
      UartRegs->BRG |= ((((uint32_t)Brg_Pdiv  << USIC_CH_BRG_PDIV_Pos) \
10001fa0:	431a      	orrs	r2, r3
10001fa2:	6a3b      	ldr	r3, [r7, #32]
10001fa4:	615a      	str	r2, [r3, #20]
    		                                          &  USIC_CH_BRG_PDIV_Msk));

      /* Configure StopBit */
      UartRegs->PCR_ASCMode &= ~(USIC_CH_PCR_ASCMode_STPB_Msk);
10001fa6:	6a3b      	ldr	r3, [r7, #32]
10001fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001faa:	2202      	movs	r2, #2
10001fac:	1c19      	adds	r1, r3, #0
10001fae:	4391      	bics	r1, r2
10001fb0:	1c0a      	adds	r2, r1, #0
10001fb2:	6a3b      	ldr	r3, [r7, #32]
10001fb4:	63da      	str	r2, [r3, #60]	; 0x3c
      UartRegs->PCR_ASCMode |= \
10001fb6:	6a3b      	ldr	r3, [r7, #32]
10001fb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                      (((uint32_t)Stopbit << USIC_CH_PCR_ASCMode_STPB_Pos) & \
10001fba:	1dbb      	adds	r3, r7, #6
10001fbc:	781b      	ldrb	r3, [r3, #0]
10001fbe:	0059      	lsls	r1, r3, #1
10001fc0:	2302      	movs	r3, #2
10001fc2:	400b      	ands	r3, r1
      UartRegs->BRG |= ((((uint32_t)Brg_Pdiv  << USIC_CH_BRG_PDIV_Pos) \
    		                                          &  USIC_CH_BRG_PDIV_Msk));

      /* Configure StopBit */
      UartRegs->PCR_ASCMode &= ~(USIC_CH_PCR_ASCMode_STPB_Msk);
      UartRegs->PCR_ASCMode |= \
10001fc4:	431a      	orrs	r2, r3
10001fc6:	6a3b      	ldr	r3, [r7, #32]
10001fc8:	63da      	str	r2, [r3, #60]	; 0x3c
                      (((uint32_t)Stopbit << USIC_CH_PCR_ASCMode_STPB_Pos) & \
                       USIC_CH_PCR_ASCMode_STPB_Msk);
          
      /* Configure Parity*/
      UartRegs->CCR &= ~(USIC_CH_CCR_PM_Msk);
10001fca:	6a3b      	ldr	r3, [r7, #32]
10001fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10001fce:	4b0f      	ldr	r3, [pc, #60]	; (1000200c <UART001_Configure+0x10c>)
10001fd0:	401a      	ands	r2, r3
10001fd2:	6a3b      	ldr	r3, [r7, #32]
10001fd4:	641a      	str	r2, [r3, #64]	; 0x40
      UartRegs->CCR |= (((UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
10001fd6:	6a3b      	ldr	r3, [r7, #32]
10001fd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                        (((uint32_t)Parity  << USIC_CH_CCR_PM_Pos) & \
10001fda:	1dfb      	adds	r3, r7, #7
10001fdc:	781b      	ldrb	r3, [r3, #0]
10001fde:	0219      	lsls	r1, r3, #8
10001fe0:	23c0      	movs	r3, #192	; 0xc0
10001fe2:	009b      	lsls	r3, r3, #2
10001fe4:	400b      	ands	r3, r1
                      (((uint32_t)Stopbit << USIC_CH_PCR_ASCMode_STPB_Pos) & \
                       USIC_CH_PCR_ASCMode_STPB_Msk);
          
      /* Configure Parity*/
      UartRegs->CCR &= ~(USIC_CH_CCR_PM_Msk);
      UartRegs->CCR |= (((UART_MODE  & USIC_CH_CCR_MODE_Msk)) | \
10001fe6:	4313      	orrs	r3, r2
10001fe8:	2202      	movs	r2, #2
10001fea:	431a      	orrs	r2, r3
10001fec:	6a3b      	ldr	r3, [r7, #32]
10001fee:	641a      	str	r2, [r3, #64]	; 0x40
                        (((uint32_t)Parity  << USIC_CH_CCR_PM_Pos) & \
                                                       USIC_CH_CCR_PM_Msk));

      Status = (status_t)DAVEApp_SUCCESS;
10001ff0:	2300      	movs	r3, #0
10001ff2:	627b      	str	r3, [r7, #36]	; 0x24
10001ff4:	e001      	b.n	10001ffa <UART001_Configure+0xfa>
    }
    else
    {
      Status = (status_t)UART001_BUSY;
10001ff6:	2303      	movs	r3, #3
10001ff8:	627b      	str	r3, [r7, #36]	; 0x24
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Status), &Status);
    }
  
  return Status;
10001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
10001ffc:	1c18      	adds	r0, r3, #0
10001ffe:	46bd      	mov	sp, r7
10002000:	b00a      	add	sp, #40	; 0x28
10002002:	bd80      	pop	{r7, pc}
10002004:	fc00ffff 	.word	0xfc00ffff
10002008:	03ff0000 	.word	0x03ff0000
1000200c:	fffffcff 	.word	0xfffffcff

10002010 <UART001_ReadDataMultiple>:
(
  const UART001_HandleType* Handle,
  uint16_t* DataPtr,
  uint32_t Count
)
{ 
10002010:	b580      	push	{r7, lr}
10002012:	b086      	sub	sp, #24
10002014:	af00      	add	r7, sp, #0
10002016:	60f8      	str	r0, [r7, #12]
10002018:	60b9      	str	r1, [r7, #8]
1000201a:	607a      	str	r2, [r7, #4]
  uint32_t ReadCount = 0x00U;
1000201c:	2300      	movs	r3, #0
1000201e:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
10002020:	68fb      	ldr	r3, [r7, #12]
10002022:	681b      	ldr	r3, [r3, #0]
10002024:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
10002026:	68fb      	ldr	r3, [r7, #12]
10002028:	7fdb      	ldrb	r3, [r3, #31]
1000202a:	2b00      	cmp	r3, #0
1000202c:	d01c      	beq.n	10002068 <UART001_ReadDataMultiple+0x58>
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
1000202e:	e00f      	b.n	10002050 <UART001_ReadDataMultiple+0x40>
	  {
		*DataPtr = (uint16_t)UartRegs->OUTR;
10002030:	693a      	ldr	r2, [r7, #16]
10002032:	238e      	movs	r3, #142	; 0x8e
10002034:	005b      	lsls	r3, r3, #1
10002036:	58d3      	ldr	r3, [r2, r3]
10002038:	b29a      	uxth	r2, r3
1000203a:	68bb      	ldr	r3, [r7, #8]
1000203c:	801a      	strh	r2, [r3, #0]
		Count--;
1000203e:	687b      	ldr	r3, [r7, #4]
10002040:	3b01      	subs	r3, #1
10002042:	607b      	str	r3, [r7, #4]
		ReadCount++;
10002044:	697b      	ldr	r3, [r7, #20]
10002046:	3301      	adds	r3, #1
10002048:	617b      	str	r3, [r7, #20]
		DataPtr++;
1000204a:	68bb      	ldr	r3, [r7, #8]
1000204c:	3302      	adds	r3, #2
1000204e:	60bb      	str	r3, [r7, #8]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
10002050:	693a      	ldr	r2, [r7, #16]
10002052:	238a      	movs	r3, #138	; 0x8a
10002054:	005b      	lsls	r3, r3, #1
10002056:	58d2      	ldr	r2, [r2, r3]
10002058:	2308      	movs	r3, #8
1000205a:	4013      	ands	r3, r2
1000205c:	08db      	lsrs	r3, r3, #3
1000205e:	d10b      	bne.n	10002078 <UART001_ReadDataMultiple+0x68>
10002060:	687b      	ldr	r3, [r7, #4]
10002062:	2b00      	cmp	r3, #0
10002064:	d1e4      	bne.n	10002030 <UART001_ReadDataMultiple+0x20>
10002066:	e007      	b.n	10002078 <UART001_ReadDataMultiple+0x68>
	  }
  }
  else
  {
	  /* If FIFO is disabled read data from standard receive buffer */
	  *DataPtr = (uint16_t)UartRegs->RBUF;
10002068:	693b      	ldr	r3, [r7, #16]
1000206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
1000206c:	b29a      	uxth	r2, r3
1000206e:	68bb      	ldr	r3, [r7, #8]
10002070:	801a      	strh	r2, [r3, #0]
	  ReadCount++;
10002072:	697b      	ldr	r3, [r7, #20]
10002074:	3301      	adds	r3, #1
10002076:	617b      	str	r3, [r7, #20]
  }
  return ReadCount;
10002078:	697b      	ldr	r3, [r7, #20]
}
1000207a:	1c18      	adds	r0, r3, #0
1000207c:	46bd      	mov	sp, r7
1000207e:	b006      	add	sp, #24
10002080:	bd80      	pop	{r7, pc}
10002082:	46c0      	nop			; (mov r8, r8)

10002084 <UART001_ReadDataBytes>:
(
  const UART001_HandleType* Handle,
  uint8_t* DataPtr,
  uint32_t Count
)
{ 
10002084:	b580      	push	{r7, lr}
10002086:	b086      	sub	sp, #24
10002088:	af00      	add	r7, sp, #0
1000208a:	60f8      	str	r0, [r7, #12]
1000208c:	60b9      	str	r1, [r7, #8]
1000208e:	607a      	str	r2, [r7, #4]
  uint32_t ReadCount = 0x00U;
10002090:	2300      	movs	r3, #0
10002092:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
10002094:	68fb      	ldr	r3, [r7, #12]
10002096:	681b      	ldr	r3, [r3, #0]
10002098:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
1000209a:	68fb      	ldr	r3, [r7, #12]
1000209c:	7fdb      	ldrb	r3, [r3, #31]
1000209e:	2b00      	cmp	r3, #0
100020a0:	d01c      	beq.n	100020dc <UART001_ReadDataBytes+0x58>
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
100020a2:	e00f      	b.n	100020c4 <UART001_ReadDataBytes+0x40>
	  {
		*DataPtr = (uint8_t)UartRegs->OUTR;
100020a4:	693a      	ldr	r2, [r7, #16]
100020a6:	238e      	movs	r3, #142	; 0x8e
100020a8:	005b      	lsls	r3, r3, #1
100020aa:	58d3      	ldr	r3, [r2, r3]
100020ac:	b2da      	uxtb	r2, r3
100020ae:	68bb      	ldr	r3, [r7, #8]
100020b0:	701a      	strb	r2, [r3, #0]
		Count--;
100020b2:	687b      	ldr	r3, [r7, #4]
100020b4:	3b01      	subs	r3, #1
100020b6:	607b      	str	r3, [r7, #4]
		ReadCount++;
100020b8:	697b      	ldr	r3, [r7, #20]
100020ba:	3301      	adds	r3, #1
100020bc:	617b      	str	r3, [r7, #20]
		DataPtr++;
100020be:	68bb      	ldr	r3, [r7, #8]
100020c0:	3301      	adds	r3, #1
100020c2:	60bb      	str	r3, [r7, #8]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;  
  /* <<<DD_UART001_API_4>>>*/
  /* If FIFO is enabled read data from receive FIFO buffer */
  if(Handle->RxFifoEn) 
  {
	  while(! USIC_ubIsRxFIFOempty(UartRegs) && Count)
100020c4:	693a      	ldr	r2, [r7, #16]
100020c6:	238a      	movs	r3, #138	; 0x8a
100020c8:	005b      	lsls	r3, r3, #1
100020ca:	58d2      	ldr	r2, [r2, r3]
100020cc:	2308      	movs	r3, #8
100020ce:	4013      	ands	r3, r2
100020d0:	08db      	lsrs	r3, r3, #3
100020d2:	d10b      	bne.n	100020ec <UART001_ReadDataBytes+0x68>
100020d4:	687b      	ldr	r3, [r7, #4]
100020d6:	2b00      	cmp	r3, #0
100020d8:	d1e4      	bne.n	100020a4 <UART001_ReadDataBytes+0x20>
100020da:	e007      	b.n	100020ec <UART001_ReadDataBytes+0x68>
	  }
  }
  else
  {
	  /* If FIFO is disabled read data from standard receive buffer */
	  *DataPtr = (uint8_t)UartRegs->RBUF;
100020dc:	693b      	ldr	r3, [r7, #16]
100020de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100020e0:	b2da      	uxtb	r2, r3
100020e2:	68bb      	ldr	r3, [r7, #8]
100020e4:	701a      	strb	r2, [r3, #0]
	  ReadCount++;
100020e6:	697b      	ldr	r3, [r7, #20]
100020e8:	3301      	adds	r3, #1
100020ea:	617b      	str	r3, [r7, #20]
  }  
  return ReadCount;
100020ec:	697b      	ldr	r3, [r7, #20]
}
100020ee:	1c18      	adds	r0, r3, #0
100020f0:	46bd      	mov	sp, r7
100020f2:	b006      	add	sp, #24
100020f4:	bd80      	pop	{r7, pc}
100020f6:	46c0      	nop			; (mov r8, r8)

100020f8 <UART001_WriteDataMultiple>:
(
  const UART001_HandleType* Handle,
  uint16_t* DataPtr,
  uint32_t Count
)
{
100020f8:	b580      	push	{r7, lr}
100020fa:	b086      	sub	sp, #24
100020fc:	af00      	add	r7, sp, #0
100020fe:	60f8      	str	r0, [r7, #12]
10002100:	60b9      	str	r1, [r7, #8]
10002102:	607a      	str	r2, [r7, #4]
  uint32_t WriteCount = 0x00U;
10002104:	2300      	movs	r3, #0
10002106:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs; 
10002108:	68fb      	ldr	r3, [r7, #12]
1000210a:	681b      	ldr	r3, [r3, #0]
1000210c:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_5>>>*/
  /* If FIFO is enabled write data to the transmit FIFO buffer */
  if(Handle->TxFifoEn) 
1000210e:	68fb      	ldr	r3, [r7, #12]
10002110:	7f9b      	ldrb	r3, [r3, #30]
10002112:	2b00      	cmp	r3, #0
10002114:	d01d      	beq.n	10002152 <UART001_WriteDataMultiple+0x5a>
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
10002116:	e00f      	b.n	10002138 <UART001_WriteDataMultiple+0x40>
	  {
		UartRegs->IN[0] = *DataPtr;
10002118:	68bb      	ldr	r3, [r7, #8]
1000211a:	881b      	ldrh	r3, [r3, #0]
1000211c:	1c19      	adds	r1, r3, #0
1000211e:	693a      	ldr	r2, [r7, #16]
10002120:	23c0      	movs	r3, #192	; 0xc0
10002122:	005b      	lsls	r3, r3, #1
10002124:	50d1      	str	r1, [r2, r3]
		Count--;
10002126:	687b      	ldr	r3, [r7, #4]
10002128:	3b01      	subs	r3, #1
1000212a:	607b      	str	r3, [r7, #4]
		WriteCount++;
1000212c:	697b      	ldr	r3, [r7, #20]
1000212e:	3301      	adds	r3, #1
10002130:	617b      	str	r3, [r7, #20]
		DataPtr++;
10002132:	68bb      	ldr	r3, [r7, #8]
10002134:	3302      	adds	r3, #2
10002136:	60bb      	str	r3, [r7, #8]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs; 
  /* <<<DD_UART001_API_5>>>*/
  /* If FIFO is enabled write data to the transmit FIFO buffer */
  if(Handle->TxFifoEn) 
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
10002138:	693a      	ldr	r2, [r7, #16]
1000213a:	238a      	movs	r3, #138	; 0x8a
1000213c:	005b      	lsls	r3, r3, #1
1000213e:	58d2      	ldr	r2, [r2, r3]
10002140:	2380      	movs	r3, #128	; 0x80
10002142:	015b      	lsls	r3, r3, #5
10002144:	4013      	ands	r3, r2
10002146:	0b1b      	lsrs	r3, r3, #12
10002148:	d111      	bne.n	1000216e <UART001_WriteDataMultiple+0x76>
1000214a:	687b      	ldr	r3, [r7, #4]
1000214c:	2b00      	cmp	r3, #0
1000214e:	d1e3      	bne.n	10002118 <UART001_WriteDataMultiple+0x20>
10002150:	e00d      	b.n	1000216e <UART001_WriteDataMultiple+0x76>
	  }
  }
  else
  {	  
	  /* If FIFO is disabled write data to the standard transmit buffer */
	  if (!(USIC_CH_TCSR_TDV_Msk & UartRegs->TCSR))
10002152:	693b      	ldr	r3, [r7, #16]
10002154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
10002156:	2380      	movs	r3, #128	; 0x80
10002158:	4013      	ands	r3, r2
1000215a:	d108      	bne.n	1000216e <UART001_WriteDataMultiple+0x76>
	  {
		UartRegs->TBUF[0] = *DataPtr;	
1000215c:	68bb      	ldr	r3, [r7, #8]
1000215e:	881b      	ldrh	r3, [r3, #0]
10002160:	1c19      	adds	r1, r3, #0
10002162:	693a      	ldr	r2, [r7, #16]
10002164:	2380      	movs	r3, #128	; 0x80
10002166:	50d1      	str	r1, [r2, r3]
		WriteCount++; 
10002168:	697b      	ldr	r3, [r7, #20]
1000216a:	3301      	adds	r3, #1
1000216c:	617b      	str	r3, [r7, #20]
	  }
  }
  return WriteCount;
1000216e:	697b      	ldr	r3, [r7, #20]
}
10002170:	1c18      	adds	r0, r3, #0
10002172:	46bd      	mov	sp, r7
10002174:	b006      	add	sp, #24
10002176:	bd80      	pop	{r7, pc}

10002178 <UART001_WriteDataBytes>:
(
  const UART001_HandleType* Handle,
  const uint8_t* DataPtr,
  uint32_t Count
)
{
10002178:	b580      	push	{r7, lr}
1000217a:	b086      	sub	sp, #24
1000217c:	af00      	add	r7, sp, #0
1000217e:	60f8      	str	r0, [r7, #12]
10002180:	60b9      	str	r1, [r7, #8]
10002182:	607a      	str	r2, [r7, #4]
  uint32_t WriteCount = 0x00U;
10002184:	2300      	movs	r3, #0
10002186:	617b      	str	r3, [r7, #20]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs; 
10002188:	68fb      	ldr	r3, [r7, #12]
1000218a:	681b      	ldr	r3, [r3, #0]
1000218c:	613b      	str	r3, [r7, #16]
  /* <<<DD_UART001_API_6>>> */
  
  /* If FIFO is enabled write data to the transmit FIFO buffer */  
  if(Handle->TxFifoEn) 
1000218e:	68fb      	ldr	r3, [r7, #12]
10002190:	7f9b      	ldrb	r3, [r3, #30]
10002192:	2b00      	cmp	r3, #0
10002194:	d01d      	beq.n	100021d2 <UART001_WriteDataBytes+0x5a>
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
10002196:	e00f      	b.n	100021b8 <UART001_WriteDataBytes+0x40>
	  {
		UartRegs->IN[0] = *DataPtr;
10002198:	68bb      	ldr	r3, [r7, #8]
1000219a:	781b      	ldrb	r3, [r3, #0]
1000219c:	1c19      	adds	r1, r3, #0
1000219e:	693a      	ldr	r2, [r7, #16]
100021a0:	23c0      	movs	r3, #192	; 0xc0
100021a2:	005b      	lsls	r3, r3, #1
100021a4:	50d1      	str	r1, [r2, r3]
		Count--;
100021a6:	687b      	ldr	r3, [r7, #4]
100021a8:	3b01      	subs	r3, #1
100021aa:	607b      	str	r3, [r7, #4]
		WriteCount++;
100021ac:	697b      	ldr	r3, [r7, #20]
100021ae:	3301      	adds	r3, #1
100021b0:	617b      	str	r3, [r7, #20]
		DataPtr++;
100021b2:	68bb      	ldr	r3, [r7, #8]
100021b4:	3301      	adds	r3, #1
100021b6:	60bb      	str	r3, [r7, #8]
  /* <<<DD_UART001_API_6>>> */
  
  /* If FIFO is enabled write data to the transmit FIFO buffer */  
  if(Handle->TxFifoEn) 
  {
	  while(! USIC_IsTxFIFOfull(UartRegs)&& Count)
100021b8:	693a      	ldr	r2, [r7, #16]
100021ba:	238a      	movs	r3, #138	; 0x8a
100021bc:	005b      	lsls	r3, r3, #1
100021be:	58d2      	ldr	r2, [r2, r3]
100021c0:	2380      	movs	r3, #128	; 0x80
100021c2:	015b      	lsls	r3, r3, #5
100021c4:	4013      	ands	r3, r2
100021c6:	0b1b      	lsrs	r3, r3, #12
100021c8:	d111      	bne.n	100021ee <UART001_WriteDataBytes+0x76>
100021ca:	687b      	ldr	r3, [r7, #4]
100021cc:	2b00      	cmp	r3, #0
100021ce:	d1e3      	bne.n	10002198 <UART001_WriteDataBytes+0x20>
100021d0:	e00d      	b.n	100021ee <UART001_WriteDataBytes+0x76>
	  }
  }
  else
  {	  
	  /* If FIFO is disabled write data to the standard transmit buffer */  
	  if (!(USIC_CH_TCSR_TDV_Msk & UartRegs->TCSR))
100021d2:	693b      	ldr	r3, [r7, #16]
100021d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
100021d6:	2380      	movs	r3, #128	; 0x80
100021d8:	4013      	ands	r3, r2
100021da:	d108      	bne.n	100021ee <UART001_WriteDataBytes+0x76>
	  {
		UartRegs->TBUF[0] = *DataPtr;	
100021dc:	68bb      	ldr	r3, [r7, #8]
100021de:	781b      	ldrb	r3, [r3, #0]
100021e0:	1c19      	adds	r1, r3, #0
100021e2:	693a      	ldr	r2, [r7, #16]
100021e4:	2380      	movs	r3, #128	; 0x80
100021e6:	50d1      	str	r1, [r2, r3]
		WriteCount++; 
100021e8:	697b      	ldr	r3, [r7, #20]
100021ea:	3301      	adds	r3, #1
100021ec:	617b      	str	r3, [r7, #20]
	  }
  }
  return WriteCount;
100021ee:	697b      	ldr	r3, [r7, #20]
}
100021f0:	1c18      	adds	r0, r3, #0
100021f2:	46bd      	mov	sp, r7
100021f4:	b006      	add	sp, #24
100021f6:	bd80      	pop	{r7, pc}

100021f8 <UART001_GetFlagStatus>:
status_t UART001_GetFlagStatus 
(
  const UART001_HandleType* Handle,
  UART001_FlagStatusType Flag
)
{
100021f8:	b580      	push	{r7, lr}
100021fa:	b086      	sub	sp, #24
100021fc:	af00      	add	r7, sp, #0
100021fe:	6078      	str	r0, [r7, #4]
10002200:	1c0a      	adds	r2, r1, #0
10002202:	1cfb      	adds	r3, r7, #3
10002204:	701a      	strb	r2, [r3, #0]
  status_t Status = (status_t)UART001_RESET;
10002206:	2301      	movs	r3, #1
10002208:	617b      	str	r3, [r7, #20]
  uint32_t TempValue = 0x00U;
1000220a:	2300      	movs	r3, #0
1000220c:	613b      	str	r3, [r7, #16]
  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
1000220e:	687b      	ldr	r3, [r7, #4]
10002210:	681b      	ldr	r3, [r3, #0]
10002212:	60fb      	str	r3, [r7, #12]
  
  /* <<<DD_UART001_API_7>>>*/
  if(Flag <= UART001_ALT_REC_IND_FLAG)
10002214:	1cfb      	adds	r3, r7, #3
10002216:	781b      	ldrb	r3, [r3, #0]
10002218:	2b0f      	cmp	r3, #15
1000221a:	d80a      	bhi.n	10002232 <UART001_GetFlagStatus+0x3a>
  {
    TempValue = UartRegs->PSR_ASCMode;
1000221c:	68fb      	ldr	r3, [r7, #12]
1000221e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002220:	613b      	str	r3, [r7, #16]
    TempValue  &= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
10002222:	1cfb      	adds	r3, r7, #3
10002224:	781b      	ldrb	r3, [r3, #0]
10002226:	2201      	movs	r2, #1
10002228:	409a      	lsls	r2, r3
1000222a:	693b      	ldr	r3, [r7, #16]
1000222c:	4013      	ands	r3, r2
1000222e:	613b      	str	r3, [r7, #16]
10002230:	e01e      	b.n	10002270 <UART001_GetFlagStatus+0x78>
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
10002232:	1cfb      	adds	r3, r7, #3
10002234:	781b      	ldrb	r3, [r3, #0]
10002236:	2b12      	cmp	r3, #18
10002238:	d80d      	bhi.n	10002256 <UART001_GetFlagStatus+0x5e>
  {
    TempValue = UartRegs->TRBSR;
1000223a:	68fa      	ldr	r2, [r7, #12]
1000223c:	238a      	movs	r3, #138	; 0x8a
1000223e:	005b      	lsls	r3, r3, #1
10002240:	58d3      	ldr	r3, [r2, r3]
10002242:	613b      	str	r3, [r7, #16]
    TempValue  &= ((uint32_t)SHIFT_ONE << \
                  ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG));
10002244:	1cfb      	adds	r3, r7, #3
10002246:	781b      	ldrb	r3, [r3, #0]
10002248:	3b10      	subs	r3, #16
    TempValue  &= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
  {
    TempValue = UartRegs->TRBSR;
    TempValue  &= ((uint32_t)SHIFT_ONE << \
1000224a:	2201      	movs	r2, #1
1000224c:	409a      	lsls	r2, r3
1000224e:	693b      	ldr	r3, [r7, #16]
10002250:	4013      	ands	r3, r2
10002252:	613b      	str	r3, [r7, #16]
10002254:	e00c      	b.n	10002270 <UART001_GetFlagStatus+0x78>
                  ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG));
    
  }
  else
  {
    TempValue = UartRegs->TRBSR;
10002256:	68fa      	ldr	r2, [r7, #12]
10002258:	238a      	movs	r3, #138	; 0x8a
1000225a:	005b      	lsls	r3, r3, #1
1000225c:	58d3      	ldr	r3, [r2, r3]
1000225e:	613b      	str	r3, [r7, #16]
    TempValue  &= ((uint32_t)SHIFT_ONE << \
       (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + 0x05U ));
10002260:	1cfb      	adds	r3, r7, #3
10002262:	781b      	ldrb	r3, [r3, #0]
10002264:	3b0b      	subs	r3, #11
    
  }
  else
  {
    TempValue = UartRegs->TRBSR;
    TempValue  &= ((uint32_t)SHIFT_ONE << \
10002266:	2201      	movs	r2, #1
10002268:	409a      	lsls	r2, r3
1000226a:	693b      	ldr	r3, [r7, #16]
1000226c:	4013      	ands	r3, r2
1000226e:	613b      	str	r3, [r7, #16]
       (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + 0x05U ));
  } 

  if(TempValue)
10002270:	693b      	ldr	r3, [r7, #16]
10002272:	2b00      	cmp	r3, #0
10002274:	d001      	beq.n	1000227a <UART001_GetFlagStatus+0x82>
  {
    Status = (status_t)UART001_SET;
10002276:	2302      	movs	r3, #2
10002278:	617b      	str	r3, [r7, #20]
  }
  return Status;
1000227a:	697b      	ldr	r3, [r7, #20]
}
1000227c:	1c18      	adds	r0, r3, #0
1000227e:	46bd      	mov	sp, r7
10002280:	b006      	add	sp, #24
10002282:	bd80      	pop	{r7, pc}

10002284 <UART001_ClearFlag>:
void UART001_ClearFlag
(
  const UART001_HandleType* Handle,
  UART001_FlagStatusType Flag
)
{
10002284:	b580      	push	{r7, lr}
10002286:	b084      	sub	sp, #16
10002288:	af00      	add	r7, sp, #0
1000228a:	6078      	str	r0, [r7, #4]
1000228c:	1c0a      	adds	r2, r1, #0
1000228e:	1cfb      	adds	r3, r7, #3
10002290:	701a      	strb	r2, [r3, #0]

  USIC_CH_TypeDef* UartRegs = Handle->UartRegs;
10002292:	687b      	ldr	r3, [r7, #4]
10002294:	681b      	ldr	r3, [r3, #0]
10002296:	60fb      	str	r3, [r7, #12]
  
  /* <<<DD_UART001_API_8>>>*/
  if(Flag <= UART001_ALT_REC_IND_FLAG)
10002298:	1cfb      	adds	r3, r7, #3
1000229a:	781b      	ldrb	r3, [r3, #0]
1000229c:	2b0f      	cmp	r3, #15
1000229e:	d80b      	bhi.n	100022b8 <UART001_ClearFlag+0x34>
  {
    UartRegs->PSCR  |= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
100022a0:	68fb      	ldr	r3, [r7, #12]
100022a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
100022a4:	1cfb      	adds	r3, r7, #3
100022a6:	781b      	ldrb	r3, [r3, #0]
100022a8:	2101      	movs	r1, #1
100022aa:	1c08      	adds	r0, r1, #0
100022ac:	4098      	lsls	r0, r3
100022ae:	1c03      	adds	r3, r0, #0
100022b0:	431a      	orrs	r2, r3
100022b2:	68fb      	ldr	r3, [r7, #12]
100022b4:	64da      	str	r2, [r3, #76]	; 0x4c
100022b6:	e026      	b.n	10002306 <UART001_ClearFlag+0x82>
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
100022b8:	1cfb      	adds	r3, r7, #3
100022ba:	781b      	ldrb	r3, [r3, #0]
100022bc:	2b12      	cmp	r3, #18
100022be:	d811      	bhi.n	100022e4 <UART001_ClearFlag+0x60>
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
100022c0:	68fa      	ldr	r2, [r7, #12]
100022c2:	238c      	movs	r3, #140	; 0x8c
100022c4:	005b      	lsls	r3, r3, #1
100022c6:	58d2      	ldr	r2, [r2, r3]
                 ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG)); 
100022c8:	1cfb      	adds	r3, r7, #3
100022ca:	781b      	ldrb	r3, [r3, #0]
100022cc:	3b10      	subs	r3, #16
  {
    UartRegs->PSCR  |= ((uint32_t)SHIFT_ONE << (uint32_t)Flag);    
  }
  else if(Flag <= UART001_FIFO_ALTRECV_BUF_FLAG)
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
100022ce:	2101      	movs	r1, #1
100022d0:	1c08      	adds	r0, r1, #0
100022d2:	4098      	lsls	r0, r3
100022d4:	1c03      	adds	r3, r0, #0
100022d6:	1c11      	adds	r1, r2, #0
100022d8:	4319      	orrs	r1, r3
100022da:	68fa      	ldr	r2, [r7, #12]
100022dc:	238c      	movs	r3, #140	; 0x8c
100022de:	005b      	lsls	r3, r3, #1
100022e0:	50d1      	str	r1, [r2, r3]
100022e2:	e010      	b.n	10002306 <UART001_ClearFlag+0x82>
                 ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG)); 
  }
  else
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
100022e4:	68fa      	ldr	r2, [r7, #12]
100022e6:	238c      	movs	r3, #140	; 0x8c
100022e8:	005b      	lsls	r3, r3, #1
100022ea:	58d2      	ldr	r2, [r2, r3]
               (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + \
100022ec:	1cfb      	adds	r3, r7, #3
100022ee:	781b      	ldrb	r3, [r3, #0]
100022f0:	3b0b      	subs	r3, #11
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
                 ((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG)); 
  }
  else
  {
    UartRegs->TRBSCR  |= ((uint32_t)SHIFT_ONE << \
100022f2:	2101      	movs	r1, #1
100022f4:	1c08      	adds	r0, r1, #0
100022f6:	4098      	lsls	r0, r3
100022f8:	1c03      	adds	r3, r0, #0
100022fa:	1c11      	adds	r1, r2, #0
100022fc:	4319      	orrs	r1, r3
100022fe:	68fa      	ldr	r2, [r7, #12]
10002300:	238c      	movs	r3, #140	; 0x8c
10002302:	005b      	lsls	r3, r3, #1
10002304:	50d1      	str	r1, [r2, r3]
               (((uint32_t)Flag - (uint32_t)UART001_FIFO_STD_RECV_BUF_FLAG) + \
                                                       UART001_FLAG_OFFSET ));
  }  
  
}
10002306:	46bd      	mov	sp, r7
10002308:	b004      	add	sp, #16
1000230a:	bd80      	pop	{r7, pc}

1000230c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
1000230c:	b5b0      	push	{r4, r5, r7, lr}
1000230e:	b082      	sub	sp, #8
10002310:	af00      	add	r7, sp, #0
10002312:	1c02      	adds	r2, r0, #0
10002314:	6039      	str	r1, [r7, #0]
10002316:	1dfb      	adds	r3, r7, #7
10002318:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
1000231a:	1dfb      	adds	r3, r7, #7
1000231c:	781b      	ldrb	r3, [r3, #0]
1000231e:	2b7f      	cmp	r3, #127	; 0x7f
10002320:	d932      	bls.n	10002388 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10002322:	4930      	ldr	r1, [pc, #192]	; (100023e4 <NVIC_SetPriority+0xd8>)
10002324:	1dfb      	adds	r3, r7, #7
10002326:	781b      	ldrb	r3, [r3, #0]
10002328:	1c1a      	adds	r2, r3, #0
1000232a:	230f      	movs	r3, #15
1000232c:	4013      	ands	r3, r2
1000232e:	3b08      	subs	r3, #8
10002330:	0898      	lsrs	r0, r3, #2
10002332:	4a2c      	ldr	r2, [pc, #176]	; (100023e4 <NVIC_SetPriority+0xd8>)
10002334:	1dfb      	adds	r3, r7, #7
10002336:	781b      	ldrb	r3, [r3, #0]
10002338:	1c1c      	adds	r4, r3, #0
1000233a:	230f      	movs	r3, #15
1000233c:	4023      	ands	r3, r4
1000233e:	3b08      	subs	r3, #8
10002340:	089b      	lsrs	r3, r3, #2
10002342:	3306      	adds	r3, #6
10002344:	009b      	lsls	r3, r3, #2
10002346:	18d3      	adds	r3, r2, r3
10002348:	685b      	ldr	r3, [r3, #4]
1000234a:	1dfa      	adds	r2, r7, #7
1000234c:	7812      	ldrb	r2, [r2, #0]
1000234e:	1c14      	adds	r4, r2, #0
10002350:	2203      	movs	r2, #3
10002352:	4022      	ands	r2, r4
10002354:	00d2      	lsls	r2, r2, #3
10002356:	24ff      	movs	r4, #255	; 0xff
10002358:	1c25      	adds	r5, r4, #0
1000235a:	4095      	lsls	r5, r2
1000235c:	1c2a      	adds	r2, r5, #0
1000235e:	43d2      	mvns	r2, r2
10002360:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
10002362:	683b      	ldr	r3, [r7, #0]
10002364:	019c      	lsls	r4, r3, #6
10002366:	23ff      	movs	r3, #255	; 0xff
10002368:	401c      	ands	r4, r3
1000236a:	1dfb      	adds	r3, r7, #7
1000236c:	781b      	ldrb	r3, [r3, #0]
1000236e:	1c1d      	adds	r5, r3, #0
10002370:	2303      	movs	r3, #3
10002372:	402b      	ands	r3, r5
10002374:	00db      	lsls	r3, r3, #3
10002376:	1c25      	adds	r5, r4, #0
10002378:	409d      	lsls	r5, r3
1000237a:	1c2b      	adds	r3, r5, #0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
1000237c:	431a      	orrs	r2, r3
1000237e:	1d83      	adds	r3, r0, #6
10002380:	009b      	lsls	r3, r3, #2
10002382:	18cb      	adds	r3, r1, r3
10002384:	605a      	str	r2, [r3, #4]
10002386:	e029      	b.n	100023dc <NVIC_SetPriority+0xd0>
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10002388:	4b17      	ldr	r3, [pc, #92]	; (100023e8 <NVIC_SetPriority+0xdc>)
1000238a:	1dfa      	adds	r2, r7, #7
1000238c:	7812      	ldrb	r2, [r2, #0]
1000238e:	b252      	sxtb	r2, r2
10002390:	0892      	lsrs	r2, r2, #2
10002392:	4915      	ldr	r1, [pc, #84]	; (100023e8 <NVIC_SetPriority+0xdc>)
10002394:	1df8      	adds	r0, r7, #7
10002396:	7800      	ldrb	r0, [r0, #0]
10002398:	b240      	sxtb	r0, r0
1000239a:	0880      	lsrs	r0, r0, #2
1000239c:	30c0      	adds	r0, #192	; 0xc0
1000239e:	0080      	lsls	r0, r0, #2
100023a0:	5841      	ldr	r1, [r0, r1]
100023a2:	1df8      	adds	r0, r7, #7
100023a4:	7800      	ldrb	r0, [r0, #0]
100023a6:	1c04      	adds	r4, r0, #0
100023a8:	2003      	movs	r0, #3
100023aa:	4020      	ands	r0, r4
100023ac:	00c0      	lsls	r0, r0, #3
100023ae:	24ff      	movs	r4, #255	; 0xff
100023b0:	1c25      	adds	r5, r4, #0
100023b2:	4085      	lsls	r5, r0
100023b4:	1c28      	adds	r0, r5, #0
100023b6:	43c0      	mvns	r0, r0
100023b8:	4008      	ands	r0, r1
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
100023ba:	6839      	ldr	r1, [r7, #0]
100023bc:	018c      	lsls	r4, r1, #6
100023be:	21ff      	movs	r1, #255	; 0xff
100023c0:	400c      	ands	r4, r1
100023c2:	1df9      	adds	r1, r7, #7
100023c4:	7809      	ldrb	r1, [r1, #0]
100023c6:	1c0d      	adds	r5, r1, #0
100023c8:	2103      	movs	r1, #3
100023ca:	4029      	ands	r1, r5
100023cc:	00c9      	lsls	r1, r1, #3
100023ce:	1c25      	adds	r5, r4, #0
100023d0:	408d      	lsls	r5, r1
100023d2:	1c29      	adds	r1, r5, #0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
100023d4:	4301      	orrs	r1, r0
100023d6:	32c0      	adds	r2, #192	; 0xc0
100023d8:	0092      	lsls	r2, r2, #2
100023da:	50d1      	str	r1, [r2, r3]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
100023dc:	46bd      	mov	sp, r7
100023de:	b002      	add	sp, #8
100023e0:	bdb0      	pop	{r4, r5, r7, pc}
100023e2:	46c0      	nop			; (mov r8, r8)
100023e4:	e000ed00 	.word	0xe000ed00
100023e8:	e000e100 	.word	0xe000e100

100023ec <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
100023ec:	b580      	push	{r7, lr}
100023ee:	b082      	sub	sp, #8
100023f0:	af00      	add	r7, sp, #0
100023f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
100023f4:	687b      	ldr	r3, [r7, #4]
100023f6:	1e5a      	subs	r2, r3, #1
100023f8:	4b0c      	ldr	r3, [pc, #48]	; (1000242c <SysTick_Config+0x40>)
100023fa:	429a      	cmp	r2, r3
100023fc:	d901      	bls.n	10002402 <SysTick_Config+0x16>
100023fe:	2301      	movs	r3, #1
10002400:	e010      	b.n	10002424 <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
10002402:	4b0b      	ldr	r3, [pc, #44]	; (10002430 <SysTick_Config+0x44>)
10002404:	687a      	ldr	r2, [r7, #4]
10002406:	3a01      	subs	r2, #1
10002408:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
1000240a:	2301      	movs	r3, #1
1000240c:	425b      	negs	r3, r3
1000240e:	1c18      	adds	r0, r3, #0
10002410:	2103      	movs	r1, #3
10002412:	f7ff ff7b 	bl	1000230c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
10002416:	4b06      	ldr	r3, [pc, #24]	; (10002430 <SysTick_Config+0x44>)
10002418:	2200      	movs	r2, #0
1000241a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1000241c:	4b04      	ldr	r3, [pc, #16]	; (10002430 <SysTick_Config+0x44>)
1000241e:	2207      	movs	r2, #7
10002420:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
10002422:	2300      	movs	r3, #0
}
10002424:	1c18      	adds	r0, r3, #0
10002426:	46bd      	mov	sp, r7
10002428:	b002      	add	sp, #8
1000242a:	bd80      	pop	{r7, pc}
1000242c:	00ffffff 	.word	0x00ffffff
10002430:	e000e010 	.word	0xe000e010

10002434 <SYSTM001_lInsertTimerList>:

/*
 * This function is called to insert a timer into the timer list.
 */
static void  SYSTM001_lInsertTimerList (uint32_t Index)
{
10002434:	b580      	push	{r7, lr}
10002436:	b086      	sub	sp, #24
10002438:	af00      	add	r7, sp, #0
1000243a:	6078      	str	r0, [r7, #4]
  SYSTM001_TimerObject* TmrObjPtr;
  int32_t DeltaTicks;
  uint32_t TempTmrCnt;
   /* Get timer time */
  TempTmrCnt = TimerTbl[Index].TimerCount;
1000243c:	4a50      	ldr	r2, [pc, #320]	; (10002580 <SYSTM001_lInsertTimerList+0x14c>)
1000243e:	687b      	ldr	r3, [r7, #4]
10002440:	015b      	lsls	r3, r3, #5
10002442:	18d3      	adds	r3, r2, r3
10002444:	3308      	adds	r3, #8
10002446:	681b      	ldr	r3, [r3, #0]
10002448:	60fb      	str	r3, [r7, #12]
  /* Check if timer count is zero */
  /* <<<DD_SYSTM001_PRIV _API_1>>> */

  /* Check if Timer list is NULL */
  if(TimerList == NULL)
1000244a:	4b4e      	ldr	r3, [pc, #312]	; (10002584 <SYSTM001_lInsertTimerList+0x150>)
1000244c:	681b      	ldr	r3, [r3, #0]
1000244e:	2b00      	cmp	r3, #0
10002450:	d106      	bne.n	10002460 <SYSTM001_lInsertTimerList+0x2c>
  {
      /* Set this as first Timer */
      TimerList = &TimerTbl[Index];
10002452:	687b      	ldr	r3, [r7, #4]
10002454:	015a      	lsls	r2, r3, #5
10002456:	4b4a      	ldr	r3, [pc, #296]	; (10002580 <SYSTM001_lInsertTimerList+0x14c>)
10002458:	18d2      	adds	r2, r2, r3
1000245a:	4b4a      	ldr	r3, [pc, #296]	; (10002584 <SYSTM001_lInsertTimerList+0x150>)
1000245c:	601a      	str	r2, [r3, #0]
1000245e:	e08b      	b.n	10002578 <SYSTM001_lInsertTimerList+0x144>
  }
  /* IF Not, find the correct place ,and insert the specified timer */
  else
  {
    TmrObjPtr = TimerList;
10002460:	4b48      	ldr	r3, [pc, #288]	; (10002584 <SYSTM001_lInsertTimerList+0x150>)
10002462:	681b      	ldr	r3, [r3, #0]
10002464:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    DeltaTicks = (int32_t)TempTmrCnt;
10002466:	68fb      	ldr	r3, [r7, #12]
10002468:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while(TmrObjPtr != NULL)
1000246a:	e081      	b.n	10002570 <SYSTM001_lInsertTimerList+0x13c>
    {
      /* Get timer Count Difference  */
      DeltaTicks -= (int32_t)TmrObjPtr->TimerCount;
1000246c:	697b      	ldr	r3, [r7, #20]
1000246e:	689b      	ldr	r3, [r3, #8]
10002470:	693a      	ldr	r2, [r7, #16]
10002472:	1ad3      	subs	r3, r2, r3
10002474:	613b      	str	r3, [r7, #16]
      /* Is delta ticks<0? */
      if(DeltaTicks < 0)
10002476:	693b      	ldr	r3, [r7, #16]
10002478:	2b00      	cmp	r3, #0
1000247a:	da5a      	bge.n	10002532 <SYSTM001_lInsertTimerList+0xfe>
      {
        /*  Check If head item */
        if(TmrObjPtr->TimerPrev!= NULL)
1000247c:	697b      	ldr	r3, [r7, #20]
1000247e:	69db      	ldr	r3, [r3, #28]
10002480:	2b00      	cmp	r3, #0
10002482:	d01c      	beq.n	100024be <SYSTM001_lInsertTimerList+0x8a>
        {
          /* If Insert to list */
          TmrObjPtr->TimerPrev->TimerNext = &TimerTbl[Index];
10002484:	697b      	ldr	r3, [r7, #20]
10002486:	69db      	ldr	r3, [r3, #28]
10002488:	687a      	ldr	r2, [r7, #4]
1000248a:	0151      	lsls	r1, r2, #5
1000248c:	4a3c      	ldr	r2, [pc, #240]	; (10002580 <SYSTM001_lInsertTimerList+0x14c>)
1000248e:	188a      	adds	r2, r1, r2
10002490:	619a      	str	r2, [r3, #24]
          TimerTbl[Index].TimerPrev = TmrObjPtr->TimerPrev;
10002492:	697b      	ldr	r3, [r7, #20]
10002494:	69da      	ldr	r2, [r3, #28]
10002496:	493a      	ldr	r1, [pc, #232]	; (10002580 <SYSTM001_lInsertTimerList+0x14c>)
10002498:	687b      	ldr	r3, [r7, #4]
1000249a:	015b      	lsls	r3, r3, #5
1000249c:	18cb      	adds	r3, r1, r3
1000249e:	331c      	adds	r3, #28
100024a0:	601a      	str	r2, [r3, #0]
          TimerTbl[Index].TimerNext = TmrObjPtr;
100024a2:	4a37      	ldr	r2, [pc, #220]	; (10002580 <SYSTM001_lInsertTimerList+0x14c>)
100024a4:	687b      	ldr	r3, [r7, #4]
100024a6:	015b      	lsls	r3, r3, #5
100024a8:	18d3      	adds	r3, r2, r3
100024aa:	3318      	adds	r3, #24
100024ac:	697a      	ldr	r2, [r7, #20]
100024ae:	601a      	str	r2, [r3, #0]
          TmrObjPtr->TimerPrev = &TimerTbl[Index];
100024b0:	687b      	ldr	r3, [r7, #4]
100024b2:	015a      	lsls	r2, r3, #5
100024b4:	4b32      	ldr	r3, [pc, #200]	; (10002580 <SYSTM001_lInsertTimerList+0x14c>)
100024b6:	18d2      	adds	r2, r2, r3
100024b8:	697b      	ldr	r3, [r7, #20]
100024ba:	61da      	str	r2, [r3, #28]
100024bc:	e014      	b.n	100024e8 <SYSTM001_lInsertTimerList+0xb4>
        }
        else
        {
          /* Set Timer as first item */
          TimerTbl[Index].TimerNext = TimerList;
100024be:	4b31      	ldr	r3, [pc, #196]	; (10002584 <SYSTM001_lInsertTimerList+0x150>)
100024c0:	681a      	ldr	r2, [r3, #0]
100024c2:	492f      	ldr	r1, [pc, #188]	; (10002580 <SYSTM001_lInsertTimerList+0x14c>)
100024c4:	687b      	ldr	r3, [r7, #4]
100024c6:	015b      	lsls	r3, r3, #5
100024c8:	18cb      	adds	r3, r1, r3
100024ca:	3318      	adds	r3, #24
100024cc:	601a      	str	r2, [r3, #0]
          TimerList->TimerPrev = &TimerTbl[Index];
100024ce:	4b2d      	ldr	r3, [pc, #180]	; (10002584 <SYSTM001_lInsertTimerList+0x150>)
100024d0:	681b      	ldr	r3, [r3, #0]
100024d2:	687a      	ldr	r2, [r7, #4]
100024d4:	0151      	lsls	r1, r2, #5
100024d6:	4a2a      	ldr	r2, [pc, #168]	; (10002580 <SYSTM001_lInsertTimerList+0x14c>)
100024d8:	188a      	adds	r2, r1, r2
100024da:	61da      	str	r2, [r3, #28]
          TimerList = &TimerTbl[Index];
100024dc:	687b      	ldr	r3, [r7, #4]
100024de:	015a      	lsls	r2, r3, #5
100024e0:	4b27      	ldr	r3, [pc, #156]	; (10002580 <SYSTM001_lInsertTimerList+0x14c>)
100024e2:	18d2      	adds	r2, r2, r3
100024e4:	4b27      	ldr	r3, [pc, #156]	; (10002584 <SYSTM001_lInsertTimerList+0x150>)
100024e6:	601a      	str	r2, [r3, #0]
        }
        TimerTbl[Index].TimerCount = \
                TimerTbl[Index].TimerNext->TimerCount + (uint32_t)DeltaTicks;
100024e8:	4a25      	ldr	r2, [pc, #148]	; (10002580 <SYSTM001_lInsertTimerList+0x14c>)
100024ea:	687b      	ldr	r3, [r7, #4]
100024ec:	015b      	lsls	r3, r3, #5
100024ee:	18d3      	adds	r3, r2, r3
100024f0:	3318      	adds	r3, #24
100024f2:	681b      	ldr	r3, [r3, #0]
100024f4:	689a      	ldr	r2, [r3, #8]
100024f6:	693b      	ldr	r3, [r7, #16]
100024f8:	18d2      	adds	r2, r2, r3
          /* Set Timer as first item */
          TimerTbl[Index].TimerNext = TimerList;
          TimerList->TimerPrev = &TimerTbl[Index];
          TimerList = &TimerTbl[Index];
        }
        TimerTbl[Index].TimerCount = \
100024fa:	4921      	ldr	r1, [pc, #132]	; (10002580 <SYSTM001_lInsertTimerList+0x14c>)
100024fc:	687b      	ldr	r3, [r7, #4]
100024fe:	015b      	lsls	r3, r3, #5
10002500:	18cb      	adds	r3, r1, r3
10002502:	3308      	adds	r3, #8
10002504:	601a      	str	r2, [r3, #0]
                TimerTbl[Index].TimerNext->TimerCount + (uint32_t)DeltaTicks;
        TimerTbl[Index].TimerNext->TimerCount  -= TimerTbl[Index].TimerCount;
10002506:	4a1e      	ldr	r2, [pc, #120]	; (10002580 <SYSTM001_lInsertTimerList+0x14c>)
10002508:	687b      	ldr	r3, [r7, #4]
1000250a:	015b      	lsls	r3, r3, #5
1000250c:	18d3      	adds	r3, r2, r3
1000250e:	3318      	adds	r3, #24
10002510:	681b      	ldr	r3, [r3, #0]
10002512:	491b      	ldr	r1, [pc, #108]	; (10002580 <SYSTM001_lInsertTimerList+0x14c>)
10002514:	687a      	ldr	r2, [r7, #4]
10002516:	0152      	lsls	r2, r2, #5
10002518:	188a      	adds	r2, r1, r2
1000251a:	3218      	adds	r2, #24
1000251c:	6812      	ldr	r2, [r2, #0]
1000251e:	6891      	ldr	r1, [r2, #8]
10002520:	4817      	ldr	r0, [pc, #92]	; (10002580 <SYSTM001_lInsertTimerList+0x14c>)
10002522:	687a      	ldr	r2, [r7, #4]
10002524:	0152      	lsls	r2, r2, #5
10002526:	1882      	adds	r2, r0, r2
10002528:	3208      	adds	r2, #8
1000252a:	6812      	ldr	r2, [r2, #0]
1000252c:	1a8a      	subs	r2, r1, r2
1000252e:	609a      	str	r2, [r3, #8]
        break;
10002530:	e022      	b.n	10002578 <SYSTM001_lInsertTimerList+0x144>
      }
      /* Is last item in list? */
      else
      {
        if((DeltaTicks >= 0) && (TmrObjPtr->TimerNext == NULL))
10002532:	693b      	ldr	r3, [r7, #16]
10002534:	2b00      	cmp	r3, #0
10002536:	db18      	blt.n	1000256a <SYSTM001_lInsertTimerList+0x136>
10002538:	697b      	ldr	r3, [r7, #20]
1000253a:	699b      	ldr	r3, [r3, #24]
1000253c:	2b00      	cmp	r3, #0
1000253e:	d114      	bne.n	1000256a <SYSTM001_lInsertTimerList+0x136>
        {
          /* Yes,insert into */
          TimerTbl[Index].TimerPrev = TmrObjPtr;
10002540:	4a0f      	ldr	r2, [pc, #60]	; (10002580 <SYSTM001_lInsertTimerList+0x14c>)
10002542:	687b      	ldr	r3, [r7, #4]
10002544:	015b      	lsls	r3, r3, #5
10002546:	18d3      	adds	r3, r2, r3
10002548:	331c      	adds	r3, #28
1000254a:	697a      	ldr	r2, [r7, #20]
1000254c:	601a      	str	r2, [r3, #0]
          TmrObjPtr->TimerNext = &TimerTbl[Index];
1000254e:	687b      	ldr	r3, [r7, #4]
10002550:	015a      	lsls	r2, r3, #5
10002552:	4b0b      	ldr	r3, [pc, #44]	; (10002580 <SYSTM001_lInsertTimerList+0x14c>)
10002554:	18d2      	adds	r2, r2, r3
10002556:	697b      	ldr	r3, [r7, #20]
10002558:	619a      	str	r2, [r3, #24]
          TimerTbl[Index].TimerCount = (uint32_t)DeltaTicks;
1000255a:	693a      	ldr	r2, [r7, #16]
1000255c:	4908      	ldr	r1, [pc, #32]	; (10002580 <SYSTM001_lInsertTimerList+0x14c>)
1000255e:	687b      	ldr	r3, [r7, #4]
10002560:	015b      	lsls	r3, r3, #5
10002562:	18cb      	adds	r3, r1, r3
10002564:	3308      	adds	r3, #8
10002566:	601a      	str	r2, [r3, #0]
          break;
10002568:	e006      	b.n	10002578 <SYSTM001_lInsertTimerList+0x144>
        }
      }
      /* Get the next item in timer list    */
      TmrObjPtr = TmrObjPtr->TimerNext;
1000256a:	697b      	ldr	r3, [r7, #20]
1000256c:	699b      	ldr	r3, [r3, #24]
1000256e:	617b      	str	r3, [r7, #20]
  {
    TmrObjPtr = TimerList;
    /* Get timer tick */
    DeltaTicks = (int32_t)TempTmrCnt;
    /* Find correct place for inserting the timer */
    while(TmrObjPtr != NULL)
10002570:	697b      	ldr	r3, [r7, #20]
10002572:	2b00      	cmp	r3, #0
10002574:	d000      	beq.n	10002578 <SYSTM001_lInsertTimerList+0x144>
10002576:	e779      	b.n	1000246c <SYSTM001_lInsertTimerList+0x38>
      }
      /* Get the next item in timer list    */
      TmrObjPtr = TmrObjPtr->TimerNext;
    }
  }
}
10002578:	46bd      	mov	sp, r7
1000257a:	b006      	add	sp, #24
1000257c:	bd80      	pop	{r7, pc}
1000257e:	46c0      	nop			; (mov r8, r8)
10002580:	2000093c 	.word	0x2000093c
10002584:	2000092c 	.word	0x2000092c

10002588 <SYSTM001_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void  SYSTM001_lRemoveTimerList(uint32_t Index)
{
10002588:	b580      	push	{r7, lr}
1000258a:	b084      	sub	sp, #16
1000258c:	af00      	add	r7, sp, #0
1000258e:	6078      	str	r0, [r7, #4]
  SYSTM001_TimerObject* TmrObjPtr;
  TmrObjPtr = &TimerTbl[Index];
10002590:	687b      	ldr	r3, [r7, #4]
10002592:	015a      	lsls	r2, r3, #5
10002594:	4b27      	ldr	r3, [pc, #156]	; (10002634 <SYSTM001_lRemoveTimerList+0xac>)
10002596:	18d3      	adds	r3, r2, r3
10002598:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  /* <<<DD_SYSTM001_PRIV _API_2>>> */
  if((TmrObjPtr->TimerPrev == NULL) && (TmrObjPtr->TimerNext == NULL))
1000259a:	68fb      	ldr	r3, [r7, #12]
1000259c:	69db      	ldr	r3, [r3, #28]
1000259e:	2b00      	cmp	r3, #0
100025a0:	d107      	bne.n	100025b2 <SYSTM001_lRemoveTimerList+0x2a>
100025a2:	68fb      	ldr	r3, [r7, #12]
100025a4:	699b      	ldr	r3, [r3, #24]
100025a6:	2b00      	cmp	r3, #0
100025a8:	d103      	bne.n	100025b2 <SYSTM001_lRemoveTimerList+0x2a>
  {
    /* set timer list as NULL */ 
    TimerList = NULL;                 	
100025aa:	4b23      	ldr	r3, [pc, #140]	; (10002638 <SYSTM001_lRemoveTimerList+0xb0>)
100025ac:	2200      	movs	r2, #0
100025ae:	601a      	str	r2, [r3, #0]
100025b0:	e03d      	b.n	1000262e <SYSTM001_lRemoveTimerList+0xa6>
  }
   /* Check if the first item in timer list   */
  else if(TmrObjPtr->TimerPrev == NULL)     
100025b2:	68fb      	ldr	r3, [r7, #12]
100025b4:	69db      	ldr	r3, [r3, #28]
100025b6:	2b00      	cmp	r3, #0
100025b8:	d114      	bne.n	100025e4 <SYSTM001_lRemoveTimerList+0x5c>
  {   
    /* Remove timer from list,and reset timer list */
    TimerList  = TmrObjPtr->TimerNext;
100025ba:	68fb      	ldr	r3, [r7, #12]
100025bc:	699a      	ldr	r2, [r3, #24]
100025be:	4b1e      	ldr	r3, [pc, #120]	; (10002638 <SYSTM001_lRemoveTimerList+0xb0>)
100025c0:	601a      	str	r2, [r3, #0]
    TimerList->TimerPrev = NULL;
100025c2:	4b1d      	ldr	r3, [pc, #116]	; (10002638 <SYSTM001_lRemoveTimerList+0xb0>)
100025c4:	681b      	ldr	r3, [r3, #0]
100025c6:	2200      	movs	r2, #0
100025c8:	61da      	str	r2, [r3, #28]
    TmrObjPtr->TimerNext->TimerCount += TmrObjPtr->TimerCount;
100025ca:	68fb      	ldr	r3, [r7, #12]
100025cc:	699b      	ldr	r3, [r3, #24]
100025ce:	68fa      	ldr	r2, [r7, #12]
100025d0:	6992      	ldr	r2, [r2, #24]
100025d2:	6891      	ldr	r1, [r2, #8]
100025d4:	68fa      	ldr	r2, [r7, #12]
100025d6:	6892      	ldr	r2, [r2, #8]
100025d8:	188a      	adds	r2, r1, r2
100025da:	609a      	str	r2, [r3, #8]
    TmrObjPtr->TimerNext    = NULL;  
100025dc:	68fb      	ldr	r3, [r7, #12]
100025de:	2200      	movs	r2, #0
100025e0:	619a      	str	r2, [r3, #24]
100025e2:	e024      	b.n	1000262e <SYSTM001_lRemoveTimerList+0xa6>
  }
  /* Check if the last item in timer list   */
  else if(TmrObjPtr->TimerNext == NULL)      
100025e4:	68fb      	ldr	r3, [r7, #12]
100025e6:	699b      	ldr	r3, [r3, #24]
100025e8:	2b00      	cmp	r3, #0
100025ea:	d107      	bne.n	100025fc <SYSTM001_lRemoveTimerList+0x74>
  {
    /* Remove timer from list */
    TmrObjPtr->TimerPrev->TimerNext = NULL;	
100025ec:	68fb      	ldr	r3, [r7, #12]
100025ee:	69db      	ldr	r3, [r3, #28]
100025f0:	2200      	movs	r2, #0
100025f2:	619a      	str	r2, [r3, #24]
    TmrObjPtr->TimerPrev = NULL;
100025f4:	68fb      	ldr	r3, [r7, #12]
100025f6:	2200      	movs	r2, #0
100025f8:	61da      	str	r2, [r3, #28]
100025fa:	e018      	b.n	1000262e <SYSTM001_lRemoveTimerList+0xa6>
  }
  else                                /*  remove timer from list         */
  {
    /*  Remove timer from list */
    TmrObjPtr->TimerPrev->TimerNext  =  TmrObjPtr->TimerNext;
100025fc:	68fb      	ldr	r3, [r7, #12]
100025fe:	69db      	ldr	r3, [r3, #28]
10002600:	68fa      	ldr	r2, [r7, #12]
10002602:	6992      	ldr	r2, [r2, #24]
10002604:	619a      	str	r2, [r3, #24]
    TmrObjPtr->TimerNext->TimerPrev  =  TmrObjPtr->TimerPrev;
10002606:	68fb      	ldr	r3, [r7, #12]
10002608:	699b      	ldr	r3, [r3, #24]
1000260a:	68fa      	ldr	r2, [r7, #12]
1000260c:	69d2      	ldr	r2, [r2, #28]
1000260e:	61da      	str	r2, [r3, #28]
    TmrObjPtr->TimerNext->TimerCount  += TmrObjPtr->TimerCount;
10002610:	68fb      	ldr	r3, [r7, #12]
10002612:	699b      	ldr	r3, [r3, #24]
10002614:	68fa      	ldr	r2, [r7, #12]
10002616:	6992      	ldr	r2, [r2, #24]
10002618:	6891      	ldr	r1, [r2, #8]
1000261a:	68fa      	ldr	r2, [r7, #12]
1000261c:	6892      	ldr	r2, [r2, #8]
1000261e:	188a      	adds	r2, r1, r2
10002620:	609a      	str	r2, [r3, #8]
    TmrObjPtr->TimerNext = NULL;
10002622:	68fb      	ldr	r3, [r7, #12]
10002624:	2200      	movs	r2, #0
10002626:	619a      	str	r2, [r3, #24]
    TmrObjPtr->TimerPrev = NULL;
10002628:	68fb      	ldr	r3, [r7, #12]
1000262a:	2200      	movs	r2, #0
1000262c:	61da      	str	r2, [r3, #28]
  }
}
1000262e:	46bd      	mov	sp, r7
10002630:	b004      	add	sp, #16
10002632:	bd80      	pop	{r7, pc}
10002634:	2000093c 	.word	0x2000093c
10002638:	2000092c 	.word	0x2000092c

1000263c <SYSTM001_lTimerHandler>:

/*
 * Handler function  called from Systick event handler. 
 */
static void  SYSTM001_lTimerHandler (void)
{
1000263c:	b580      	push	{r7, lr}
1000263e:	b082      	sub	sp, #8
10002640:	af00      	add	r7, sp, #0
  SYSTM001_TimerObject* TmrObjPtr;
   /* Get first item of timer list       */
  TmrObjPtr = TimerList;         
10002642:	4b1f      	ldr	r3, [pc, #124]	; (100026c0 <SYSTM001_lTimerHandler+0x84>)
10002644:	681b      	ldr	r3, [r3, #0]
10002646:	607b      	str	r3, [r7, #4]
  /* <<<DD_SYSTM001_PRIV _API_3>>> */  
  while((TmrObjPtr != NULL) && (TmrObjPtr->TimerCount == 0UL) )
10002648:	e02d      	b.n	100026a6 <SYSTM001_lTimerHandler+0x6a>
  {	
    /* Check whether timer is a one shot timer */
    if(TmrObjPtr->TimerType == SYSTM001_ONE_SHOT)
1000264a:	687b      	ldr	r3, [r7, #4]
1000264c:	791b      	ldrb	r3, [r3, #4]
1000264e:	2b00      	cmp	r3, #0
10002650:	d10e      	bne.n	10002670 <SYSTM001_lTimerHandler+0x34>
    {
      /* Yes,remove this timer from timer list */
      SYSTM001_lRemoveTimerList(TmrObjPtr->TimerID);
10002652:	687b      	ldr	r3, [r7, #4]
10002654:	681b      	ldr	r3, [r3, #0]
10002656:	1c18      	adds	r0, r3, #0
10002658:	f7ff ff96 	bl	10002588 <SYSTM001_lRemoveTimerList>
      /* Set timer status as SYSTM001_STATE_STOPPED */
      TmrObjPtr->TimerState = SYSTM001_STATE_STOPPED;
1000265c:	687b      	ldr	r3, [r7, #4]
1000265e:	2201      	movs	r2, #1
10002660:	715a      	strb	r2, [r3, #5]
      /* Call timer callback function */
      (TmrObjPtr->TimerCallBack)(TmrObjPtr->ParamToCallBack);
10002662:	687b      	ldr	r3, [r7, #4]
10002664:	691a      	ldr	r2, [r3, #16]
10002666:	687b      	ldr	r3, [r7, #4]
10002668:	695b      	ldr	r3, [r3, #20]
1000266a:	1c18      	adds	r0, r3, #0
1000266c:	4790      	blx	r2
1000266e:	e017      	b.n	100026a0 <SYSTM001_lTimerHandler+0x64>
    }
    /* Check whether timer is SYSTM001_PERIODIC */
    else if(TmrObjPtr->TimerType == SYSTM001_PERIODIC)
10002670:	687b      	ldr	r3, [r7, #4]
10002672:	791b      	ldrb	r3, [r3, #4]
10002674:	2b01      	cmp	r3, #1
10002676:	d11e      	bne.n	100026b6 <SYSTM001_lTimerHandler+0x7a>
    {
      /* Yes,remove this timer from timer list */
      SYSTM001_lRemoveTimerList(TmrObjPtr->TimerID);
10002678:	687b      	ldr	r3, [r7, #4]
1000267a:	681b      	ldr	r3, [r3, #0]
1000267c:	1c18      	adds	r0, r3, #0
1000267e:	f7ff ff83 	bl	10002588 <SYSTM001_lRemoveTimerList>
      /* Reset timer tick             */
      TmrObjPtr->TimerCount = TmrObjPtr->TimerReload;
10002682:	687b      	ldr	r3, [r7, #4]
10002684:	68da      	ldr	r2, [r3, #12]
10002686:	687b      	ldr	r3, [r7, #4]
10002688:	609a      	str	r2, [r3, #8]
        /* Insert timer into timer list */
      SYSTM001_lInsertTimerList(TmrObjPtr->TimerID);
1000268a:	687b      	ldr	r3, [r7, #4]
1000268c:	681b      	ldr	r3, [r3, #0]
1000268e:	1c18      	adds	r0, r3, #0
10002690:	f7ff fed0 	bl	10002434 <SYSTM001_lInsertTimerList>
      /* Call timer callback function */
      (TmrObjPtr->TimerCallBack)(TmrObjPtr->ParamToCallBack);
10002694:	687b      	ldr	r3, [r7, #4]
10002696:	691a      	ldr	r2, [r3, #16]
10002698:	687b      	ldr	r3, [r7, #4]
1000269a:	695b      	ldr	r3, [r3, #20]
1000269c:	1c18      	adds	r0, r3, #0
1000269e:	4790      	blx	r2
    else
    {
      break;
    }
    /* Get first item of timer list */
    TmrObjPtr = TimerList;
100026a0:	4b07      	ldr	r3, [pc, #28]	; (100026c0 <SYSTM001_lTimerHandler+0x84>)
100026a2:	681b      	ldr	r3, [r3, #0]
100026a4:	607b      	str	r3, [r7, #4]
{
  SYSTM001_TimerObject* TmrObjPtr;
   /* Get first item of timer list       */
  TmrObjPtr = TimerList;         
  /* <<<DD_SYSTM001_PRIV _API_3>>> */  
  while((TmrObjPtr != NULL) && (TmrObjPtr->TimerCount == 0UL) )
100026a6:	687b      	ldr	r3, [r7, #4]
100026a8:	2b00      	cmp	r3, #0
100026aa:	d005      	beq.n	100026b8 <SYSTM001_lTimerHandler+0x7c>
100026ac:	687b      	ldr	r3, [r7, #4]
100026ae:	689b      	ldr	r3, [r3, #8]
100026b0:	2b00      	cmp	r3, #0
100026b2:	d0ca      	beq.n	1000264a <SYSTM001_lTimerHandler+0xe>
100026b4:	e000      	b.n	100026b8 <SYSTM001_lTimerHandler+0x7c>
      /* Call timer callback function */
      (TmrObjPtr->TimerCallBack)(TmrObjPtr->ParamToCallBack);
    }
    else
    {
      break;
100026b6:	46c0      	nop			; (mov r8, r8)
    }
    /* Get first item of timer list */
    TmrObjPtr = TimerList;
  }
}
100026b8:	46bd      	mov	sp, r7
100026ba:	b002      	add	sp, #8
100026bc:	bd80      	pop	{r7, pc}
100026be:	46c0      	nop			; (mov r8, r8)
100026c0:	2000092c 	.word	0x2000092c

100026c4 <SysTick_Handler>:

/*
 *  SysTick Event Handler 
 */
void  SysTick_Handler(void)
{ 
100026c4:	b580      	push	{r7, lr}
100026c6:	b082      	sub	sp, #8
100026c8:	af00      	add	r7, sp, #0
  SYSTM001_TimerObject* TmrObjPtr;
  TmrObjPtr = TimerList;
100026ca:	4b0e      	ldr	r3, [pc, #56]	; (10002704 <SysTick_Handler+0x40>)
100026cc:	681b      	ldr	r3, [r3, #0]
100026ce:	607b      	str	r3, [r7, #4]
  /* <<<DD_SYSTM001_PRIV _API_4>>> */
  SysTickCount++;
100026d0:	4b0d      	ldr	r3, [pc, #52]	; (10002708 <SysTick_Handler+0x44>)
100026d2:	681b      	ldr	r3, [r3, #0]
100026d4:	1c5a      	adds	r2, r3, #1
100026d6:	4b0c      	ldr	r3, [pc, #48]	; (10002708 <SysTick_Handler+0x44>)
100026d8:	601a      	str	r2, [r3, #0]
  if(TmrObjPtr == NULL)
100026da:	687b      	ldr	r3, [r7, #4]
100026dc:	2b00      	cmp	r3, #0
100026de:	d00e      	beq.n	100026fe <SysTick_Handler+0x3a>
    /* Not supposed to be here */
   ;  
  }
  else
  {
    if(TmrObjPtr->TimerCount > 1UL)
100026e0:	687b      	ldr	r3, [r7, #4]
100026e2:	689b      	ldr	r3, [r3, #8]
100026e4:	2b01      	cmp	r3, #1
100026e6:	d905      	bls.n	100026f4 <SysTick_Handler+0x30>
    {
      TmrObjPtr->TimerCount--;
100026e8:	687b      	ldr	r3, [r7, #4]
100026ea:	689b      	ldr	r3, [r3, #8]
100026ec:	1e5a      	subs	r2, r3, #1
100026ee:	687b      	ldr	r3, [r7, #4]
100026f0:	609a      	str	r2, [r3, #8]
100026f2:	e004      	b.n	100026fe <SysTick_Handler+0x3a>
    }
    else
    { 
      TmrObjPtr->TimerCount = 0;
100026f4:	687b      	ldr	r3, [r7, #4]
100026f6:	2200      	movs	r2, #0
100026f8:	609a      	str	r2, [r3, #8]
      SYSTM001_lTimerHandler();
100026fa:	f7ff ff9f 	bl	1000263c <SYSTM001_lTimerHandler>
    }
  }
}
100026fe:	46bd      	mov	sp, r7
10002700:	b002      	add	sp, #8
10002702:	bd80      	pop	{r7, pc}
10002704:	2000092c 	.word	0x2000092c
10002708:	20000934 	.word	0x20000934

1000270c <SYSTM001_Init>:
/*
 *  Initialization function which initializes the App internal data
 *  structures to default values. 
 */
void  SYSTM001_Init( void)
{
1000270c:	b580      	push	{r7, lr}
1000270e:	b082      	sub	sp, #8
10002710:	af00      	add	r7, sp, #0
    uint32_t Status = 0UL;
10002712:	2300      	movs	r3, #0
10002714:	607b      	str	r3, [r7, #4]

  /** Initialize the header of the list */
  TimerList = NULL;
10002716:	4b0c      	ldr	r3, [pc, #48]	; (10002748 <SYSTM001_Init+0x3c>)
10002718:	2200      	movs	r2, #0
1000271a:	601a      	str	r2, [r3, #0]
  /* Clock Initialization */
  CLK002_Init();
1000271c:	f000 fc00 	bl	10002f20 <CLK002_Init>
  /**   Initialize timer tracker  */
  Status = SysTick_Config((uint32_t)(SYSTM001_SYSTICK_INTERVAL * SYSTM001_SYS_CORE_CLOCK * 1000U));
10002720:	23fa      	movs	r3, #250	; 0xfa
10002722:	015b      	lsls	r3, r3, #5
10002724:	1c18      	adds	r0, r3, #0
10002726:	f7ff fe61 	bl	100023ec <SysTick_Config>
1000272a:	1c03      	adds	r3, r0, #0
1000272c:	607b      	str	r3, [r7, #4]
  if(Status == 1U)
  {
        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Status), &Status);
  }
    NVIC_SetPriority(SysTick_IRQn, 1);
1000272e:	2301      	movs	r3, #1
10002730:	425b      	negs	r3, r3
10002732:	1c18      	adds	r0, r3, #0
10002734:	2101      	movs	r1, #1
10002736:	f7ff fde9 	bl	1000230c <NVIC_SetPriority>
  TimerTracker = 0UL;
1000273a:	4b04      	ldr	r3, [pc, #16]	; (1000274c <SYSTM001_Init+0x40>)
1000273c:	2200      	movs	r2, #0
1000273e:	601a      	str	r2, [r3, #0]

}
10002740:	46bd      	mov	sp, r7
10002742:	b002      	add	sp, #8
10002744:	bd80      	pop	{r7, pc}
10002746:	46c0      	nop			; (mov r8, r8)
10002748:	2000092c 	.word	0x2000092c
1000274c:	20000930 	.word	0x20000930

10002750 <SYSTM001_CreateTimer>:
  uint32_t Period,
  SYSTM001_TimerType TimerType, 
  SYSTM001_TimerCallBackPtr TimerCallBack, 
  void  * pCallBackArgPtr
)
{
10002750:	b580      	push	{r7, lr}
10002752:	b088      	sub	sp, #32
10002754:	af00      	add	r7, sp, #0
10002756:	60f8      	str	r0, [r7, #12]
10002758:	607a      	str	r2, [r7, #4]
1000275a:	603b      	str	r3, [r7, #0]
1000275c:	1c3b      	adds	r3, r7, #0
1000275e:	330b      	adds	r3, #11
10002760:	1c0a      	adds	r2, r1, #0
10002762:	701a      	strb	r2, [r3, #0]
  uint32_t TimerID = 0UL;
10002764:	2300      	movs	r3, #0
10002766:	61fb      	str	r3, [r7, #28]
  uint32_t Count = 0UL;
10002768:	2300      	movs	r3, #0
1000276a:	61bb      	str	r3, [r7, #24]
  uint32_t Error = 0UL;  
1000276c:	2300      	movs	r3, #0
1000276e:	617b      	str	r3, [r7, #20]

  /* Check for input parameter */
    if((TimerType != SYSTM001_ONE_SHOT) && (TimerType != SYSTM001_PERIODIC))
10002770:	1c3b      	adds	r3, r7, #0
10002772:	330b      	adds	r3, #11
10002774:	781b      	ldrb	r3, [r3, #0]
10002776:	2b00      	cmp	r3, #0
10002778:	d006      	beq.n	10002788 <SYSTM001_CreateTimer+0x38>
1000277a:	1c3b      	adds	r3, r7, #0
1000277c:	330b      	adds	r3, #11
1000277e:	781b      	ldrb	r3, [r3, #0]
10002780:	2b01      	cmp	r3, #1
10002782:	d001      	beq.n	10002788 <SYSTM001_CreateTimer+0x38>
    {
      Error=(uint32_t)1UL;
10002784:	2301      	movs	r3, #1
10002786:	617b      	str	r3, [r7, #20]
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
      
    }
    if(Period < (uint32_t)SYSTM001_SYSTICK_INTERVAL)
10002788:	68fb      	ldr	r3, [r7, #12]
1000278a:	2b00      	cmp	r3, #0
1000278c:	d101      	bne.n	10002792 <SYSTM001_CreateTimer+0x42>
    {
      Error=(uint32_t)1UL;
1000278e:	2301      	movs	r3, #1
10002790:	617b      	str	r3, [r7, #20]
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
    }
    if(Period == 0)          /* Timer with '0' time is not allowed. */
10002792:	68fb      	ldr	r3, [r7, #12]
10002794:	2b00      	cmp	r3, #0
10002796:	d101      	bne.n	1000279c <SYSTM001_CreateTimer+0x4c>
    {
      Error=(uint32_t)1UL;
10002798:	2301      	movs	r3, #1
1000279a:	617b      	str	r3, [r7, #20]
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
    }

    if(TimerCallBack == NULL)
1000279c:	687b      	ldr	r3, [r7, #4]
1000279e:	2b00      	cmp	r3, #0
100027a0:	d101      	bne.n	100027a6 <SYSTM001_CreateTimer+0x56>
    {
      Error=(uint32_t)1UL;
100027a2:	2301      	movs	r3, #1
100027a4:	617b      	str	r3, [r7, #20]
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
    }
    if (!Error)	
100027a6:	697b      	ldr	r3, [r7, #20]
100027a8:	2b00      	cmp	r3, #0
100027aa:	d159      	bne.n	10002860 <SYSTM001_CreateTimer+0x110>
    {
       for(Count = 0UL; Count < SYSTM001_CFG_MAX_TMR; Count++)
100027ac:	2300      	movs	r3, #0
100027ae:	61bb      	str	r3, [r7, #24]
100027b0:	e053      	b.n	1000285a <SYSTM001_CreateTimer+0x10a>
       {
           /* Check for free timer ID */
           if((TimerTracker & ((uint32_t)1U << Count)) == 0U)
100027b2:	4b2e      	ldr	r3, [pc, #184]	; (1000286c <SYSTM001_CreateTimer+0x11c>)
100027b4:	681a      	ldr	r2, [r3, #0]
100027b6:	69bb      	ldr	r3, [r7, #24]
100027b8:	40da      	lsrs	r2, r3
100027ba:	2301      	movs	r3, #1
100027bc:	4013      	ands	r3, r2
100027be:	d149      	bne.n	10002854 <SYSTM001_CreateTimer+0x104>
           {
               /* If yes,assign ID to this timer      */
               TimerTracker |= ((uint32_t)1U << Count);
100027c0:	69bb      	ldr	r3, [r7, #24]
100027c2:	2201      	movs	r2, #1
100027c4:	409a      	lsls	r2, r3
100027c6:	4b29      	ldr	r3, [pc, #164]	; (1000286c <SYSTM001_CreateTimer+0x11c>)
100027c8:	681b      	ldr	r3, [r3, #0]
100027ca:	431a      	orrs	r2, r3
100027cc:	4b27      	ldr	r3, [pc, #156]	; (1000286c <SYSTM001_CreateTimer+0x11c>)
100027ce:	601a      	str	r2, [r3, #0]
               /* Initialize timer as per input values */
               TimerTbl[Count].TimerID     = Count;
100027d0:	4b27      	ldr	r3, [pc, #156]	; (10002870 <SYSTM001_CreateTimer+0x120>)
100027d2:	69ba      	ldr	r2, [r7, #24]
100027d4:	0152      	lsls	r2, r2, #5
100027d6:	69b9      	ldr	r1, [r7, #24]
100027d8:	50d1      	str	r1, [r2, r3]
               TimerTbl[Count].TimerType   = TimerType;
100027da:	4925      	ldr	r1, [pc, #148]	; (10002870 <SYSTM001_CreateTimer+0x120>)
100027dc:	69bb      	ldr	r3, [r7, #24]
100027de:	015b      	lsls	r3, r3, #5
100027e0:	1c3a      	adds	r2, r7, #0
100027e2:	320b      	adds	r2, #11
100027e4:	18cb      	adds	r3, r1, r3
100027e6:	7812      	ldrb	r2, [r2, #0]
100027e8:	711a      	strb	r2, [r3, #4]
               TimerTbl[Count].TimerState  = SYSTM001_STATE_STOPPED;
100027ea:	4a21      	ldr	r2, [pc, #132]	; (10002870 <SYSTM001_CreateTimer+0x120>)
100027ec:	69bb      	ldr	r3, [r7, #24]
100027ee:	015b      	lsls	r3, r3, #5
100027f0:	18d3      	adds	r3, r2, r3
100027f2:	2201      	movs	r2, #1
100027f4:	715a      	strb	r2, [r3, #5]
             TimerTbl[Count].TimerCount  = ((Period / SYSTM001_SYSTICK_INTERVAL)\
                                                    +HW_TIMER_ADDITIONAL_CNT);
100027f6:	68fb      	ldr	r3, [r7, #12]
100027f8:	1c5a      	adds	r2, r3, #1
               TimerTracker |= ((uint32_t)1U << Count);
               /* Initialize timer as per input values */
               TimerTbl[Count].TimerID     = Count;
               TimerTbl[Count].TimerType   = TimerType;
               TimerTbl[Count].TimerState  = SYSTM001_STATE_STOPPED;
             TimerTbl[Count].TimerCount  = ((Period / SYSTM001_SYSTICK_INTERVAL)\
100027fa:	491d      	ldr	r1, [pc, #116]	; (10002870 <SYSTM001_CreateTimer+0x120>)
100027fc:	69bb      	ldr	r3, [r7, #24]
100027fe:	015b      	lsls	r3, r3, #5
10002800:	18cb      	adds	r3, r1, r3
10002802:	3308      	adds	r3, #8
10002804:	601a      	str	r2, [r3, #0]
                                                    +HW_TIMER_ADDITIONAL_CNT);
               TimerTbl[Count].TimerReload	= (Period / SYSTM001_SYSTICK_INTERVAL);
10002806:	4a1a      	ldr	r2, [pc, #104]	; (10002870 <SYSTM001_CreateTimer+0x120>)
10002808:	69bb      	ldr	r3, [r7, #24]
1000280a:	015b      	lsls	r3, r3, #5
1000280c:	18d3      	adds	r3, r2, r3
1000280e:	330c      	adds	r3, #12
10002810:	68fa      	ldr	r2, [r7, #12]
10002812:	601a      	str	r2, [r3, #0]
               TimerTbl[Count].TimerCallBack = TimerCallBack;
10002814:	4a16      	ldr	r2, [pc, #88]	; (10002870 <SYSTM001_CreateTimer+0x120>)
10002816:	69bb      	ldr	r3, [r7, #24]
10002818:	015b      	lsls	r3, r3, #5
1000281a:	18d3      	adds	r3, r2, r3
1000281c:	3310      	adds	r3, #16
1000281e:	687a      	ldr	r2, [r7, #4]
10002820:	601a      	str	r2, [r3, #0]
               TimerTbl[Count].ParamToCallBack = pCallBackArgPtr;
10002822:	4a13      	ldr	r2, [pc, #76]	; (10002870 <SYSTM001_CreateTimer+0x120>)
10002824:	69bb      	ldr	r3, [r7, #24]
10002826:	015b      	lsls	r3, r3, #5
10002828:	18d3      	adds	r3, r2, r3
1000282a:	3314      	adds	r3, #20
1000282c:	683a      	ldr	r2, [r7, #0]
1000282e:	601a      	str	r2, [r3, #0]
               TimerTbl[Count].TimerPrev   = NULL;
10002830:	4a0f      	ldr	r2, [pc, #60]	; (10002870 <SYSTM001_CreateTimer+0x120>)
10002832:	69bb      	ldr	r3, [r7, #24]
10002834:	015b      	lsls	r3, r3, #5
10002836:	18d3      	adds	r3, r2, r3
10002838:	331c      	adds	r3, #28
1000283a:	2200      	movs	r2, #0
1000283c:	601a      	str	r2, [r3, #0]
               TimerTbl[Count].TimerNext   = NULL;
1000283e:	4a0c      	ldr	r2, [pc, #48]	; (10002870 <SYSTM001_CreateTimer+0x120>)
10002840:	69bb      	ldr	r3, [r7, #24]
10002842:	015b      	lsls	r3, r3, #5
10002844:	18d3      	adds	r3, r2, r3
10002846:	3318      	adds	r3, #24
10002848:	2200      	movs	r2, #0
1000284a:	601a      	str	r2, [r3, #0]
               TimerID = Count + 1U;
1000284c:	69bb      	ldr	r3, [r7, #24]
1000284e:	3301      	adds	r3, #1
10002850:	61fb      	str	r3, [r7, #28]
               break;
10002852:	e005      	b.n	10002860 <SYSTM001_CreateTimer+0x110>
      Error=(uint32_t)1UL;
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
    }
    if (!Error)	
    {
       for(Count = 0UL; Count < SYSTM001_CFG_MAX_TMR; Count++)
10002854:	69bb      	ldr	r3, [r7, #24]
10002856:	3301      	adds	r3, #1
10002858:	61bb      	str	r3, [r7, #24]
1000285a:	69bb      	ldr	r3, [r7, #24]
1000285c:	2b09      	cmp	r3, #9
1000285e:	d9a8      	bls.n	100027b2 <SYSTM001_CreateTimer+0x62>
               break;
            }
        }
    }

  return (handle_t)TimerID;
10002860:	69fb      	ldr	r3, [r7, #28]
}  
10002862:	1c18      	adds	r0, r3, #0
10002864:	46bd      	mov	sp, r7
10002866:	b008      	add	sp, #32
10002868:	bd80      	pop	{r7, pc}
1000286a:	46c0      	nop			; (mov r8, r8)
1000286c:	20000930 	.word	0x20000930
10002870:	2000093c 	.word	0x2000093c

10002874 <SYSTM001_StartTimer>:

/*
 *  Interface to start the software timer .
 */
status_t SYSTM001_StartTimer(handle_t  Handle) 
{
10002874:	b580      	push	{r7, lr}
10002876:	b084      	sub	sp, #16
10002878:	af00      	add	r7, sp, #0
1000287a:	6078      	str	r0, [r7, #4]
  status_t Error = (status_t )DAVEApp_SUCCESS;
1000287c:	2300      	movs	r3, #0
1000287e:	60fb      	str	r3, [r7, #12]


  /* Check validity of parameter */
  if(Handle > SYSTM001_CFG_MAX_TMR)
10002880:	687b      	ldr	r3, [r7, #4]
10002882:	2b0a      	cmp	r3, #10
10002884:	d901      	bls.n	1000288a <SYSTM001_StartTimer+0x16>
  {
    Error = (status_t)SYSTM001_INVALID_HANDLE_ERROR;
10002886:	2301      	movs	r3, #1
10002888:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  if( (TimerTracker & (1UL << (uint32_t)(Handle - 1U))) == 0UL)
1000288a:	4b18      	ldr	r3, [pc, #96]	; (100028ec <SYSTM001_StartTimer+0x78>)
1000288c:	681a      	ldr	r2, [r3, #0]
1000288e:	687b      	ldr	r3, [r7, #4]
10002890:	3b01      	subs	r3, #1
10002892:	40da      	lsrs	r2, r3
10002894:	2301      	movs	r3, #1
10002896:	4013      	ands	r3, r2
10002898:	d101      	bne.n	1000289e <SYSTM001_StartTimer+0x2a>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
1000289a:	2301      	movs	r3, #1
1000289c:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  /* Any timer with time '0', can't start again. */
  if(TimerTbl[Handle - 1U].TimerCount == 0UL)
1000289e:	687b      	ldr	r3, [r7, #4]
100028a0:	3b01      	subs	r3, #1
100028a2:	4a13      	ldr	r2, [pc, #76]	; (100028f0 <SYSTM001_StartTimer+0x7c>)
100028a4:	015b      	lsls	r3, r3, #5
100028a6:	18d3      	adds	r3, r2, r3
100028a8:	3308      	adds	r3, #8
100028aa:	681b      	ldr	r3, [r3, #0]
100028ac:	2b00      	cmp	r3, #0
100028ae:	d101      	bne.n	100028b4 <SYSTM001_StartTimer+0x40>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
100028b0:	2301      	movs	r3, #1
100028b2:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  
  
  if(Error == (status_t)DAVEApp_SUCCESS)
100028b4:	68fb      	ldr	r3, [r7, #12]
100028b6:	2b00      	cmp	r3, #0
100028b8:	d113      	bne.n	100028e2 <SYSTM001_StartTimer+0x6e>
  {
    /* Check if timer is running */
    if(TimerTbl[(Handle - 1U)].TimerState != SYSTM001_STATE_RUNNING)
100028ba:	687b      	ldr	r3, [r7, #4]
100028bc:	3b01      	subs	r3, #1
100028be:	4a0c      	ldr	r2, [pc, #48]	; (100028f0 <SYSTM001_StartTimer+0x7c>)
100028c0:	015b      	lsls	r3, r3, #5
100028c2:	18d3      	adds	r3, r2, r3
100028c4:	795b      	ldrb	r3, [r3, #5]
100028c6:	2b00      	cmp	r3, #0
100028c8:	d00b      	beq.n	100028e2 <SYSTM001_StartTimer+0x6e>
    {
      /* set timer status as SYSTM001_STATE_RUNNING */
      TimerTbl[(Handle - 1U)].TimerState = SYSTM001_STATE_RUNNING;
100028ca:	687b      	ldr	r3, [r7, #4]
100028cc:	3b01      	subs	r3, #1
100028ce:	4a08      	ldr	r2, [pc, #32]	; (100028f0 <SYSTM001_StartTimer+0x7c>)
100028d0:	015b      	lsls	r3, r3, #5
100028d2:	18d3      	adds	r3, r2, r3
100028d4:	2200      	movs	r2, #0
100028d6:	715a      	strb	r2, [r3, #5]
      /* Insert this timer into timer list  */
      SYSTM001_lInsertTimerList((Handle - 1U));
100028d8:	687b      	ldr	r3, [r7, #4]
100028da:	3b01      	subs	r3, #1
100028dc:	1c18      	adds	r0, r3, #0
100028de:	f7ff fda9 	bl	10002434 <SYSTM001_lInsertTimerList>
    }
  }

  return Error;
100028e2:	68fb      	ldr	r3, [r7, #12]
}
100028e4:	1c18      	adds	r0, r3, #0
100028e6:	46bd      	mov	sp, r7
100028e8:	b004      	add	sp, #16
100028ea:	bd80      	pop	{r7, pc}
100028ec:	20000930 	.word	0x20000930
100028f0:	2000093c 	.word	0x2000093c

100028f4 <SYSTM001_StopTimer>:

/*
 *  Interface to stop the software timer.
 */
status_t SYSTM001_StopTimer(handle_t Handle) 
{
100028f4:	b580      	push	{r7, lr}
100028f6:	b084      	sub	sp, #16
100028f8:	af00      	add	r7, sp, #0
100028fa:	6078      	str	r0, [r7, #4]
  status_t Error = (status_t )DAVEApp_SUCCESS;
100028fc:	2300      	movs	r3, #0
100028fe:	60fb      	str	r3, [r7, #12]


  /* Check validity of parameter        */
  if(Handle > SYSTM001_CFG_MAX_TMR)
10002900:	687b      	ldr	r3, [r7, #4]
10002902:	2b0a      	cmp	r3, #10
10002904:	d901      	bls.n	1000290a <SYSTM001_StopTimer+0x16>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10002906:	2301      	movs	r3, #1
10002908:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  if( (TimerTracker & (1UL << (uint32_t)(Handle - 1U))) == 0UL)
1000290a:	4b13      	ldr	r3, [pc, #76]	; (10002958 <SYSTM001_StopTimer+0x64>)
1000290c:	681a      	ldr	r2, [r3, #0]
1000290e:	687b      	ldr	r3, [r7, #4]
10002910:	3b01      	subs	r3, #1
10002912:	40da      	lsrs	r2, r3
10002914:	2301      	movs	r3, #1
10002916:	4013      	ands	r3, r2
10002918:	d101      	bne.n	1000291e <SYSTM001_StopTimer+0x2a>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
1000291a:	2301      	movs	r3, #1
1000291c:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }

  if(Error == (status_t)DAVEApp_SUCCESS)
1000291e:	68fb      	ldr	r3, [r7, #12]
10002920:	2b00      	cmp	r3, #0
10002922:	d113      	bne.n	1000294c <SYSTM001_StopTimer+0x58>
  {
    /* Check whether Timer is in Stop state */
    if(TimerTbl[(Handle - 1U)].TimerState != SYSTM001_STATE_STOPPED)
10002924:	687b      	ldr	r3, [r7, #4]
10002926:	3b01      	subs	r3, #1
10002928:	4a0c      	ldr	r2, [pc, #48]	; (1000295c <SYSTM001_StopTimer+0x68>)
1000292a:	015b      	lsls	r3, r3, #5
1000292c:	18d3      	adds	r3, r2, r3
1000292e:	795b      	ldrb	r3, [r3, #5]
10002930:	2b01      	cmp	r3, #1
10002932:	d00b      	beq.n	1000294c <SYSTM001_StopTimer+0x58>
    {
      /* remove Timer from node list */
      SYSTM001_lRemoveTimerList((Handle - 1U));
10002934:	687b      	ldr	r3, [r7, #4]
10002936:	3b01      	subs	r3, #1
10002938:	1c18      	adds	r0, r3, #0
1000293a:	f7ff fe25 	bl	10002588 <SYSTM001_lRemoveTimerList>

      /* Set timer status as SYSTM001_STATE_STOPPED  */
      TimerTbl[(Handle - 1U)].TimerState = SYSTM001_STATE_STOPPED;
1000293e:	687b      	ldr	r3, [r7, #4]
10002940:	3b01      	subs	r3, #1
10002942:	4a06      	ldr	r2, [pc, #24]	; (1000295c <SYSTM001_StopTimer+0x68>)
10002944:	015b      	lsls	r3, r3, #5
10002946:	18d3      	adds	r3, r2, r3
10002948:	2201      	movs	r2, #1
1000294a:	715a      	strb	r2, [r3, #5]
    }
  }

  return Error;
1000294c:	68fb      	ldr	r3, [r7, #12]
}
1000294e:	1c18      	adds	r0, r3, #0
10002950:	46bd      	mov	sp, r7
10002952:	b004      	add	sp, #16
10002954:	bd80      	pop	{r7, pc}
10002956:	46c0      	nop			; (mov r8, r8)
10002958:	20000930 	.word	0x20000930
1000295c:	2000093c 	.word	0x2000093c

10002960 <SYSTM001_DeleteTimer>:

/*
 *  Function to delete the Timer instance.
 */
status_t SYSTM001_DeleteTimer(handle_t Handle) 
{
10002960:	b580      	push	{r7, lr}
10002962:	b084      	sub	sp, #16
10002964:	af00      	add	r7, sp, #0
10002966:	6078      	str	r0, [r7, #4]
  status_t Error = (status_t )DAVEApp_SUCCESS;
10002968:	2300      	movs	r3, #0
1000296a:	60fb      	str	r3, [r7, #12]

  /* Check validity of parameter        */
  if(Handle > SYSTM001_CFG_MAX_TMR)
1000296c:	687b      	ldr	r3, [r7, #4]
1000296e:	2b0a      	cmp	r3, #10
10002970:	d901      	bls.n	10002976 <SYSTM001_DeleteTimer+0x16>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10002972:	2301      	movs	r3, #1
10002974:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  if( (TimerTracker & (1UL << (uint32_t)(Handle - 1U))) == 0UL)
10002976:	4b15      	ldr	r3, [pc, #84]	; (100029cc <SYSTM001_DeleteTimer+0x6c>)
10002978:	681a      	ldr	r2, [r3, #0]
1000297a:	687b      	ldr	r3, [r7, #4]
1000297c:	3b01      	subs	r3, #1
1000297e:	40da      	lsrs	r2, r3
10002980:	2301      	movs	r3, #1
10002982:	4013      	ands	r3, r2
10002984:	d101      	bne.n	1000298a <SYSTM001_DeleteTimer+0x2a>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10002986:	2301      	movs	r3, #1
10002988:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }

  if(Error == (status_t)DAVEApp_SUCCESS)
1000298a:	68fb      	ldr	r3, [r7, #12]
1000298c:	2b00      	cmp	r3, #0
1000298e:	d118      	bne.n	100029c2 <SYSTM001_DeleteTimer+0x62>
  {
    /* Check if timer is running */
    if(TimerTbl[(Handle - 1U)].TimerState == SYSTM001_STATE_RUNNING)
10002990:	687b      	ldr	r3, [r7, #4]
10002992:	3b01      	subs	r3, #1
10002994:	4a0e      	ldr	r2, [pc, #56]	; (100029d0 <SYSTM001_DeleteTimer+0x70>)
10002996:	015b      	lsls	r3, r3, #5
10002998:	18d3      	adds	r3, r2, r3
1000299a:	795b      	ldrb	r3, [r3, #5]
1000299c:	2b00      	cmp	r3, #0
1000299e:	d104      	bne.n	100029aa <SYSTM001_DeleteTimer+0x4a>
    {
      /* Yes,remove this timer from timer list*/
      SYSTM001_lRemoveTimerList((Handle - 1U));
100029a0:	687b      	ldr	r3, [r7, #4]
100029a2:	3b01      	subs	r3, #1
100029a4:	1c18      	adds	r0, r3, #0
100029a6:	f7ff fdef 	bl	10002588 <SYSTM001_lRemoveTimerList>
    }

    /* Release resource that this timer hold*/
    TimerTracker &=~((uint32_t)1U << (Handle - 1U));
100029aa:	687b      	ldr	r3, [r7, #4]
100029ac:	3b01      	subs	r3, #1
100029ae:	2201      	movs	r2, #1
100029b0:	1c11      	adds	r1, r2, #0
100029b2:	4099      	lsls	r1, r3
100029b4:	1c0b      	adds	r3, r1, #0
100029b6:	43da      	mvns	r2, r3
100029b8:	4b04      	ldr	r3, [pc, #16]	; (100029cc <SYSTM001_DeleteTimer+0x6c>)
100029ba:	681b      	ldr	r3, [r3, #0]
100029bc:	401a      	ands	r2, r3
100029be:	4b03      	ldr	r3, [pc, #12]	; (100029cc <SYSTM001_DeleteTimer+0x6c>)
100029c0:	601a      	str	r2, [r3, #0]
  }

  return Error;
100029c2:	68fb      	ldr	r3, [r7, #12]

}
100029c4:	1c18      	adds	r0, r3, #0
100029c6:	46bd      	mov	sp, r7
100029c8:	b004      	add	sp, #16
100029ca:	bd80      	pop	{r7, pc}
100029cc:	20000930 	.word	0x20000930
100029d0:	2000093c 	.word	0x2000093c

100029d4 <SYSTM001_GetTime>:

/*
 *  Interface to get the current system time.
 */
uint32_t  SYSTM001_GetTime(void)
{
100029d4:	b580      	push	{r7, lr}
100029d6:	af00      	add	r7, sp, #0
  /* <<<DD_SYSTM001 _API_6>>> */
  return CONVERT_SYSTICK_COUNT_TO_MSEC(SysTickCount);
100029d8:	4b02      	ldr	r3, [pc, #8]	; (100029e4 <SYSTM001_GetTime+0x10>)
100029da:	681b      	ldr	r3, [r3, #0]
}
100029dc:	1c18      	adds	r0, r3, #0
100029de:	46bd      	mov	sp, r7
100029e0:	bd80      	pop	{r7, pc}
100029e2:	46c0      	nop			; (mov r8, r8)
100029e4:	20000934 	.word	0x20000934

100029e8 <SYSTM001_GetSysTickCount>:
/*
 *  Utility function to get the no of system ticks for the 
 *  specified period.
 */
uint32_t  SYSTM001_GetSysTickCount(uint32_t Period ) 
{
100029e8:	b590      	push	{r4, r7, lr}
100029ea:	b085      	sub	sp, #20
100029ec:	af00      	add	r7, sp, #0
100029ee:	6078      	str	r0, [r7, #4]
  /* <<<DD_SYSTM001 _API_7>>> */
  uint32_t	Count  = CONVERT_MSEC_TO_SYSICK_COUNT(Period);
100029f0:	6878      	ldr	r0, [r7, #4]
100029f2:	f001 fe9d 	bl	10004730 <__aeabi_ui2d>
100029f6:	1c03      	adds	r3, r0, #0
100029f8:	1c0c      	adds	r4, r1, #0
100029fa:	1c18      	adds	r0, r3, #0
100029fc:	1c21      	adds	r1, r4, #0
100029fe:	4b0d      	ldr	r3, [pc, #52]	; (10002a34 <SYSTM001_GetSysTickCount+0x4c>)
10002a00:	4a0b      	ldr	r2, [pc, #44]	; (10002a30 <SYSTM001_GetSysTickCount+0x48>)
10002a02:	f001 f86d 	bl	10003ae0 <__aeabi_dmul>
10002a06:	1c03      	adds	r3, r0, #0
10002a08:	1c0c      	adds	r4, r1, #0
10002a0a:	1c18      	adds	r0, r3, #0
10002a0c:	1c21      	adds	r1, r4, #0
10002a0e:	4a0a      	ldr	r2, [pc, #40]	; (10002a38 <SYSTM001_GetSysTickCount+0x50>)
10002a10:	4b0a      	ldr	r3, [pc, #40]	; (10002a3c <SYSTM001_GetSysTickCount+0x54>)
10002a12:	f001 f865 	bl	10003ae0 <__aeabi_dmul>
10002a16:	1c03      	adds	r3, r0, #0
10002a18:	1c0c      	adds	r4, r1, #0
10002a1a:	1c18      	adds	r0, r3, #0
10002a1c:	1c21      	adds	r1, r4, #0
10002a1e:	f000 fc1f 	bl	10003260 <__aeabi_d2uiz>
10002a22:	1c03      	adds	r3, r0, #0
10002a24:	60fb      	str	r3, [r7, #12]
  return Count;
10002a26:	68fb      	ldr	r3, [r7, #12]
}
10002a28:	1c18      	adds	r0, r3, #0
10002a2a:	46bd      	mov	sp, r7
10002a2c:	b005      	add	sp, #20
10002a2e:	bd90      	pop	{r4, r7, pc}
10002a30:	00000000 	.word	0x00000000
10002a34:	40200000 	.word	0x40200000
10002a38:	00000000 	.word	0x00000000
10002a3c:	408f4000 	.word	0x408f4000

10002a40 <IO004_Init>:
/** @ingroup IO004_Func
 * @{
 */

void IO004_Init(void)
{
10002a40:	b580      	push	{r7, lr}
10002a42:	af00      	add	r7, sp, #0
   /* <<<DD_IO004_API_1>>> */

	   

  /* Configuration of 1 Port 0 based on User configuration */
  IO004_Handle0.PortRegs->OMR = 0U<< 0;
10002a44:	4b0a      	ldr	r3, [pc, #40]	; (10002a70 <IO004_Init+0x30>)
10002a46:	685b      	ldr	r3, [r3, #4]
10002a48:	2200      	movs	r2, #0
10002a4a:	605a      	str	r2, [r3, #4]
  
  IO004_Handle0.PortRegs->IOCR0 |= (0U << 3);   
10002a4c:	4b08      	ldr	r3, [pc, #32]	; (10002a70 <IO004_Init+0x30>)
10002a4e:	685b      	ldr	r3, [r3, #4]
10002a50:	4a07      	ldr	r2, [pc, #28]	; (10002a70 <IO004_Init+0x30>)
10002a52:	6852      	ldr	r2, [r2, #4]
10002a54:	6912      	ldr	r2, [r2, #16]
10002a56:	611a      	str	r2, [r3, #16]

  /* Configuration of 1 Port 1 based on User configuration */
  IO004_Handle1.PortRegs->OMR = 0U<< 1;
10002a58:	4b06      	ldr	r3, [pc, #24]	; (10002a74 <IO004_Init+0x34>)
10002a5a:	685b      	ldr	r3, [r3, #4]
10002a5c:	2200      	movs	r2, #0
10002a5e:	605a      	str	r2, [r3, #4]
  
  IO004_Handle1.PortRegs->IOCR0 |= (0U << 11);
10002a60:	4b04      	ldr	r3, [pc, #16]	; (10002a74 <IO004_Init+0x34>)
10002a62:	685b      	ldr	r3, [r3, #4]
10002a64:	4a03      	ldr	r2, [pc, #12]	; (10002a74 <IO004_Init+0x34>)
10002a66:	6852      	ldr	r2, [r2, #4]
10002a68:	6912      	ldr	r2, [r2, #16]
10002a6a:	611a      	str	r2, [r3, #16]
}
10002a6c:	46bd      	mov	sp, r7
10002a6e:	bd80      	pop	{r7, pc}
10002a70:	10004d30 	.word	0x10004d30
10002a74:	10004d38 	.word	0x10004d38

10002a78 <IO004_DisableOutputDriver>:

void IO004_DisableOutputDriver(const IO004_HandleType* Handle,IO004_InputModeType Mode)
{
10002a78:	b590      	push	{r4, r7, lr}
10002a7a:	b085      	sub	sp, #20
10002a7c:	af00      	add	r7, sp, #0
10002a7e:	6078      	str	r0, [r7, #4]
10002a80:	1c0a      	adds	r2, r1, #0
10002a82:	1cfb      	adds	r3, r7, #3
10002a84:	701a      	strb	r2, [r3, #0]
  uint8_t Pin = Handle->PortPin;
10002a86:	1c3b      	adds	r3, r7, #0
10002a88:	330f      	adds	r3, #15
10002a8a:	687a      	ldr	r2, [r7, #4]
10002a8c:	7852      	ldrb	r2, [r2, #1]
10002a8e:	701a      	strb	r2, [r3, #0]
  /* <<<DD_IO004_API_2>>> */
  if(Pin < 4U)
10002a90:	1c3b      	adds	r3, r7, #0
10002a92:	330f      	adds	r3, #15
10002a94:	781b      	ldrb	r3, [r3, #0]
10002a96:	2b03      	cmp	r3, #3
10002a98:	d824      	bhi.n	10002ae4 <IO004_DisableOutputDriver+0x6c>
  {
    Handle->PortRegs->IOCR0  =  (uint32_t)(Handle->PortRegs->IOCR0 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002a9a:	687b      	ldr	r3, [r7, #4]
10002a9c:	685b      	ldr	r3, [r3, #4]
10002a9e:	687a      	ldr	r2, [r7, #4]
10002aa0:	6852      	ldr	r2, [r2, #4]
10002aa2:	6912      	ldr	r2, [r2, #16]
10002aa4:	1c39      	adds	r1, r7, #0
10002aa6:	310f      	adds	r1, #15
10002aa8:	7809      	ldrb	r1, [r1, #0]
10002aaa:	00c9      	lsls	r1, r1, #3
10002aac:	3103      	adds	r1, #3
10002aae:	201f      	movs	r0, #31
10002ab0:	1c04      	adds	r4, r0, #0
10002ab2:	408c      	lsls	r4, r1
10002ab4:	1c21      	adds	r1, r4, #0
10002ab6:	43c9      	mvns	r1, r1
10002ab8:	400a      	ands	r2, r1
10002aba:	611a      	str	r2, [r3, #16]
    Handle->PortRegs->IOCR0 |= (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002abc:	687b      	ldr	r3, [r7, #4]
10002abe:	685b      	ldr	r3, [r3, #4]
10002ac0:	687a      	ldr	r2, [r7, #4]
10002ac2:	6852      	ldr	r2, [r2, #4]
10002ac4:	6911      	ldr	r1, [r2, #16]
10002ac6:	1cfa      	adds	r2, r7, #3
10002ac8:	7810      	ldrb	r0, [r2, #0]
10002aca:	221f      	movs	r2, #31
10002acc:	4010      	ands	r0, r2
10002ace:	1c3a      	adds	r2, r7, #0
10002ad0:	320f      	adds	r2, #15
10002ad2:	7812      	ldrb	r2, [r2, #0]
10002ad4:	00d2      	lsls	r2, r2, #3
10002ad6:	3203      	adds	r2, #3
10002ad8:	1c04      	adds	r4, r0, #0
10002ada:	4094      	lsls	r4, r2
10002adc:	1c22      	adds	r2, r4, #0
10002ade:	430a      	orrs	r2, r1
10002ae0:	611a      	str	r2, [r3, #16]
10002ae2:	e0a0      	b.n	10002c26 <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 4U) && (Pin <= 7U))
10002ae4:	1c3b      	adds	r3, r7, #0
10002ae6:	330f      	adds	r3, #15
10002ae8:	781b      	ldrb	r3, [r3, #0]
10002aea:	2b03      	cmp	r3, #3
10002aec:	d930      	bls.n	10002b50 <IO004_DisableOutputDriver+0xd8>
10002aee:	1c3b      	adds	r3, r7, #0
10002af0:	330f      	adds	r3, #15
10002af2:	781b      	ldrb	r3, [r3, #0]
10002af4:	2b07      	cmp	r3, #7
10002af6:	d82b      	bhi.n	10002b50 <IO004_DisableOutputDriver+0xd8>
  {
    Pin = Pin - 4U;
10002af8:	1c3b      	adds	r3, r7, #0
10002afa:	330f      	adds	r3, #15
10002afc:	1c3a      	adds	r2, r7, #0
10002afe:	320f      	adds	r2, #15
10002b00:	7812      	ldrb	r2, [r2, #0]
10002b02:	3a04      	subs	r2, #4
10002b04:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR4  =  (uint32_t)(Handle->PortRegs->IOCR4 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002b06:	687b      	ldr	r3, [r7, #4]
10002b08:	685b      	ldr	r3, [r3, #4]
10002b0a:	687a      	ldr	r2, [r7, #4]
10002b0c:	6852      	ldr	r2, [r2, #4]
10002b0e:	6952      	ldr	r2, [r2, #20]
10002b10:	1c39      	adds	r1, r7, #0
10002b12:	310f      	adds	r1, #15
10002b14:	7809      	ldrb	r1, [r1, #0]
10002b16:	00c9      	lsls	r1, r1, #3
10002b18:	3103      	adds	r1, #3
10002b1a:	201f      	movs	r0, #31
10002b1c:	1c04      	adds	r4, r0, #0
10002b1e:	408c      	lsls	r4, r1
10002b20:	1c21      	adds	r1, r4, #0
10002b22:	43c9      	mvns	r1, r1
10002b24:	400a      	ands	r2, r1
10002b26:	615a      	str	r2, [r3, #20]
    Handle->PortRegs->IOCR4 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002b28:	687b      	ldr	r3, [r7, #4]
10002b2a:	685b      	ldr	r3, [r3, #4]
10002b2c:	687a      	ldr	r2, [r7, #4]
10002b2e:	6852      	ldr	r2, [r2, #4]
10002b30:	6951      	ldr	r1, [r2, #20]
10002b32:	1cfa      	adds	r2, r7, #3
10002b34:	7810      	ldrb	r0, [r2, #0]
10002b36:	221f      	movs	r2, #31
10002b38:	4010      	ands	r0, r2
10002b3a:	1c3a      	adds	r2, r7, #0
10002b3c:	320f      	adds	r2, #15
10002b3e:	7812      	ldrb	r2, [r2, #0]
10002b40:	00d2      	lsls	r2, r2, #3
10002b42:	3203      	adds	r2, #3
10002b44:	1c04      	adds	r4, r0, #0
10002b46:	4094      	lsls	r4, r2
10002b48:	1c22      	adds	r2, r4, #0
10002b4a:	430a      	orrs	r2, r1
10002b4c:	615a      	str	r2, [r3, #20]
10002b4e:	e06a      	b.n	10002c26 <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 8U) && (Pin <= 11U))
10002b50:	1c3b      	adds	r3, r7, #0
10002b52:	330f      	adds	r3, #15
10002b54:	781b      	ldrb	r3, [r3, #0]
10002b56:	2b07      	cmp	r3, #7
10002b58:	d930      	bls.n	10002bbc <IO004_DisableOutputDriver+0x144>
10002b5a:	1c3b      	adds	r3, r7, #0
10002b5c:	330f      	adds	r3, #15
10002b5e:	781b      	ldrb	r3, [r3, #0]
10002b60:	2b0b      	cmp	r3, #11
10002b62:	d82b      	bhi.n	10002bbc <IO004_DisableOutputDriver+0x144>
  {
    Pin = Pin - 8U;
10002b64:	1c3b      	adds	r3, r7, #0
10002b66:	330f      	adds	r3, #15
10002b68:	1c3a      	adds	r2, r7, #0
10002b6a:	320f      	adds	r2, #15
10002b6c:	7812      	ldrb	r2, [r2, #0]
10002b6e:	3a08      	subs	r2, #8
10002b70:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR8  =  (uint32_t)(Handle->PortRegs->IOCR8 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002b72:	687b      	ldr	r3, [r7, #4]
10002b74:	685b      	ldr	r3, [r3, #4]
10002b76:	687a      	ldr	r2, [r7, #4]
10002b78:	6852      	ldr	r2, [r2, #4]
10002b7a:	6992      	ldr	r2, [r2, #24]
10002b7c:	1c39      	adds	r1, r7, #0
10002b7e:	310f      	adds	r1, #15
10002b80:	7809      	ldrb	r1, [r1, #0]
10002b82:	00c9      	lsls	r1, r1, #3
10002b84:	3103      	adds	r1, #3
10002b86:	201f      	movs	r0, #31
10002b88:	1c04      	adds	r4, r0, #0
10002b8a:	408c      	lsls	r4, r1
10002b8c:	1c21      	adds	r1, r4, #0
10002b8e:	43c9      	mvns	r1, r1
10002b90:	400a      	ands	r2, r1
10002b92:	619a      	str	r2, [r3, #24]
    Handle->PortRegs->IOCR8 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002b94:	687b      	ldr	r3, [r7, #4]
10002b96:	685b      	ldr	r3, [r3, #4]
10002b98:	687a      	ldr	r2, [r7, #4]
10002b9a:	6852      	ldr	r2, [r2, #4]
10002b9c:	6991      	ldr	r1, [r2, #24]
10002b9e:	1cfa      	adds	r2, r7, #3
10002ba0:	7810      	ldrb	r0, [r2, #0]
10002ba2:	221f      	movs	r2, #31
10002ba4:	4010      	ands	r0, r2
10002ba6:	1c3a      	adds	r2, r7, #0
10002ba8:	320f      	adds	r2, #15
10002baa:	7812      	ldrb	r2, [r2, #0]
10002bac:	00d2      	lsls	r2, r2, #3
10002bae:	3203      	adds	r2, #3
10002bb0:	1c04      	adds	r4, r0, #0
10002bb2:	4094      	lsls	r4, r2
10002bb4:	1c22      	adds	r2, r4, #0
10002bb6:	430a      	orrs	r2, r1
10002bb8:	619a      	str	r2, [r3, #24]
10002bba:	e034      	b.n	10002c26 <IO004_DisableOutputDriver+0x1ae>
  } else if ((Pin >= 12U) && (Pin <= 15U))
10002bbc:	1c3b      	adds	r3, r7, #0
10002bbe:	330f      	adds	r3, #15
10002bc0:	781b      	ldrb	r3, [r3, #0]
10002bc2:	2b0b      	cmp	r3, #11
10002bc4:	d92f      	bls.n	10002c26 <IO004_DisableOutputDriver+0x1ae>
10002bc6:	1c3b      	adds	r3, r7, #0
10002bc8:	330f      	adds	r3, #15
10002bca:	781b      	ldrb	r3, [r3, #0]
10002bcc:	2b0f      	cmp	r3, #15
10002bce:	d82a      	bhi.n	10002c26 <IO004_DisableOutputDriver+0x1ae>
  {
    Pin = Pin - 12U;
10002bd0:	1c3b      	adds	r3, r7, #0
10002bd2:	330f      	adds	r3, #15
10002bd4:	1c3a      	adds	r2, r7, #0
10002bd6:	320f      	adds	r2, #15
10002bd8:	7812      	ldrb	r2, [r2, #0]
10002bda:	3a0c      	subs	r2, #12
10002bdc:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR12  =  (uint32_t)(Handle->PortRegs->IOCR12 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002bde:	687b      	ldr	r3, [r7, #4]
10002be0:	685b      	ldr	r3, [r3, #4]
10002be2:	687a      	ldr	r2, [r7, #4]
10002be4:	6852      	ldr	r2, [r2, #4]
10002be6:	69d2      	ldr	r2, [r2, #28]
10002be8:	1c39      	adds	r1, r7, #0
10002bea:	310f      	adds	r1, #15
10002bec:	7809      	ldrb	r1, [r1, #0]
10002bee:	00c9      	lsls	r1, r1, #3
10002bf0:	3103      	adds	r1, #3
10002bf2:	201f      	movs	r0, #31
10002bf4:	1c04      	adds	r4, r0, #0
10002bf6:	408c      	lsls	r4, r1
10002bf8:	1c21      	adds	r1, r4, #0
10002bfa:	43c9      	mvns	r1, r1
10002bfc:	400a      	ands	r2, r1
10002bfe:	61da      	str	r2, [r3, #28]
    Handle->PortRegs->IOCR12 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002c00:	687b      	ldr	r3, [r7, #4]
10002c02:	685b      	ldr	r3, [r3, #4]
10002c04:	687a      	ldr	r2, [r7, #4]
10002c06:	6852      	ldr	r2, [r2, #4]
10002c08:	69d1      	ldr	r1, [r2, #28]
10002c0a:	1cfa      	adds	r2, r7, #3
10002c0c:	7810      	ldrb	r0, [r2, #0]
10002c0e:	221f      	movs	r2, #31
10002c10:	4010      	ands	r0, r2
10002c12:	1c3a      	adds	r2, r7, #0
10002c14:	320f      	adds	r2, #15
10002c16:	7812      	ldrb	r2, [r2, #0]
10002c18:	00d2      	lsls	r2, r2, #3
10002c1a:	3203      	adds	r2, #3
10002c1c:	1c04      	adds	r4, r0, #0
10002c1e:	4094      	lsls	r4, r2
10002c20:	1c22      	adds	r2, r4, #0
10002c22:	430a      	orrs	r2, r1
10002c24:	61da      	str	r2, [r3, #28]
  else
  {
	  /*Not supposed to be here */
  }

}
10002c26:	46bd      	mov	sp, r7
10002c28:	b005      	add	sp, #20
10002c2a:	bd90      	pop	{r4, r7, pc}

10002c2c <IO004_EnableOutputDriver>:

void IO004_EnableOutputDriver(const IO004_HandleType* Handle,IO004_OutputModeType Mode)
{
10002c2c:	b590      	push	{r4, r7, lr}
10002c2e:	b085      	sub	sp, #20
10002c30:	af00      	add	r7, sp, #0
10002c32:	6078      	str	r0, [r7, #4]
10002c34:	1c0a      	adds	r2, r1, #0
10002c36:	1cfb      	adds	r3, r7, #3
10002c38:	701a      	strb	r2, [r3, #0]

  uint8_t Pin = Handle->PortPin;
10002c3a:	1c3b      	adds	r3, r7, #0
10002c3c:	330f      	adds	r3, #15
10002c3e:	687a      	ldr	r2, [r7, #4]
10002c40:	7852      	ldrb	r2, [r2, #1]
10002c42:	701a      	strb	r2, [r3, #0]
  /* <<<DD_IO004_API_2>>> */
  if(Pin < 4U)
10002c44:	1c3b      	adds	r3, r7, #0
10002c46:	330f      	adds	r3, #15
10002c48:	781b      	ldrb	r3, [r3, #0]
10002c4a:	2b03      	cmp	r3, #3
10002c4c:	d824      	bhi.n	10002c98 <IO004_EnableOutputDriver+0x6c>
  {
    Handle->PortRegs->IOCR0  =  (uint32_t)(Handle->PortRegs->IOCR0 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002c4e:	687b      	ldr	r3, [r7, #4]
10002c50:	685b      	ldr	r3, [r3, #4]
10002c52:	687a      	ldr	r2, [r7, #4]
10002c54:	6852      	ldr	r2, [r2, #4]
10002c56:	6912      	ldr	r2, [r2, #16]
10002c58:	1c39      	adds	r1, r7, #0
10002c5a:	310f      	adds	r1, #15
10002c5c:	7809      	ldrb	r1, [r1, #0]
10002c5e:	00c9      	lsls	r1, r1, #3
10002c60:	3103      	adds	r1, #3
10002c62:	201f      	movs	r0, #31
10002c64:	1c04      	adds	r4, r0, #0
10002c66:	408c      	lsls	r4, r1
10002c68:	1c21      	adds	r1, r4, #0
10002c6a:	43c9      	mvns	r1, r1
10002c6c:	400a      	ands	r2, r1
10002c6e:	611a      	str	r2, [r3, #16]
    Handle->PortRegs->IOCR0 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002c70:	687b      	ldr	r3, [r7, #4]
10002c72:	685b      	ldr	r3, [r3, #4]
10002c74:	687a      	ldr	r2, [r7, #4]
10002c76:	6852      	ldr	r2, [r2, #4]
10002c78:	6911      	ldr	r1, [r2, #16]
10002c7a:	1cfa      	adds	r2, r7, #3
10002c7c:	7810      	ldrb	r0, [r2, #0]
10002c7e:	221f      	movs	r2, #31
10002c80:	4010      	ands	r0, r2
10002c82:	1c3a      	adds	r2, r7, #0
10002c84:	320f      	adds	r2, #15
10002c86:	7812      	ldrb	r2, [r2, #0]
10002c88:	00d2      	lsls	r2, r2, #3
10002c8a:	3203      	adds	r2, #3
10002c8c:	1c04      	adds	r4, r0, #0
10002c8e:	4094      	lsls	r4, r2
10002c90:	1c22      	adds	r2, r4, #0
10002c92:	430a      	orrs	r2, r1
10002c94:	611a      	str	r2, [r3, #16]
10002c96:	e0a0      	b.n	10002dda <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 4U) && (Pin <= 7U))
10002c98:	1c3b      	adds	r3, r7, #0
10002c9a:	330f      	adds	r3, #15
10002c9c:	781b      	ldrb	r3, [r3, #0]
10002c9e:	2b03      	cmp	r3, #3
10002ca0:	d930      	bls.n	10002d04 <IO004_EnableOutputDriver+0xd8>
10002ca2:	1c3b      	adds	r3, r7, #0
10002ca4:	330f      	adds	r3, #15
10002ca6:	781b      	ldrb	r3, [r3, #0]
10002ca8:	2b07      	cmp	r3, #7
10002caa:	d82b      	bhi.n	10002d04 <IO004_EnableOutputDriver+0xd8>
  {
    Pin = Pin - 4U;
10002cac:	1c3b      	adds	r3, r7, #0
10002cae:	330f      	adds	r3, #15
10002cb0:	1c3a      	adds	r2, r7, #0
10002cb2:	320f      	adds	r2, #15
10002cb4:	7812      	ldrb	r2, [r2, #0]
10002cb6:	3a04      	subs	r2, #4
10002cb8:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR4  =  (uint32_t)(Handle->PortRegs->IOCR4 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002cba:	687b      	ldr	r3, [r7, #4]
10002cbc:	685b      	ldr	r3, [r3, #4]
10002cbe:	687a      	ldr	r2, [r7, #4]
10002cc0:	6852      	ldr	r2, [r2, #4]
10002cc2:	6952      	ldr	r2, [r2, #20]
10002cc4:	1c39      	adds	r1, r7, #0
10002cc6:	310f      	adds	r1, #15
10002cc8:	7809      	ldrb	r1, [r1, #0]
10002cca:	00c9      	lsls	r1, r1, #3
10002ccc:	3103      	adds	r1, #3
10002cce:	201f      	movs	r0, #31
10002cd0:	1c04      	adds	r4, r0, #0
10002cd2:	408c      	lsls	r4, r1
10002cd4:	1c21      	adds	r1, r4, #0
10002cd6:	43c9      	mvns	r1, r1
10002cd8:	400a      	ands	r2, r1
10002cda:	615a      	str	r2, [r3, #20]
    Handle->PortRegs->IOCR4 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002cdc:	687b      	ldr	r3, [r7, #4]
10002cde:	685b      	ldr	r3, [r3, #4]
10002ce0:	687a      	ldr	r2, [r7, #4]
10002ce2:	6852      	ldr	r2, [r2, #4]
10002ce4:	6951      	ldr	r1, [r2, #20]
10002ce6:	1cfa      	adds	r2, r7, #3
10002ce8:	7810      	ldrb	r0, [r2, #0]
10002cea:	221f      	movs	r2, #31
10002cec:	4010      	ands	r0, r2
10002cee:	1c3a      	adds	r2, r7, #0
10002cf0:	320f      	adds	r2, #15
10002cf2:	7812      	ldrb	r2, [r2, #0]
10002cf4:	00d2      	lsls	r2, r2, #3
10002cf6:	3203      	adds	r2, #3
10002cf8:	1c04      	adds	r4, r0, #0
10002cfa:	4094      	lsls	r4, r2
10002cfc:	1c22      	adds	r2, r4, #0
10002cfe:	430a      	orrs	r2, r1
10002d00:	615a      	str	r2, [r3, #20]
10002d02:	e06a      	b.n	10002dda <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 8U) && (Pin <= 11U))
10002d04:	1c3b      	adds	r3, r7, #0
10002d06:	330f      	adds	r3, #15
10002d08:	781b      	ldrb	r3, [r3, #0]
10002d0a:	2b07      	cmp	r3, #7
10002d0c:	d930      	bls.n	10002d70 <IO004_EnableOutputDriver+0x144>
10002d0e:	1c3b      	adds	r3, r7, #0
10002d10:	330f      	adds	r3, #15
10002d12:	781b      	ldrb	r3, [r3, #0]
10002d14:	2b0b      	cmp	r3, #11
10002d16:	d82b      	bhi.n	10002d70 <IO004_EnableOutputDriver+0x144>
  {
    Pin = Pin - 8U;
10002d18:	1c3b      	adds	r3, r7, #0
10002d1a:	330f      	adds	r3, #15
10002d1c:	1c3a      	adds	r2, r7, #0
10002d1e:	320f      	adds	r2, #15
10002d20:	7812      	ldrb	r2, [r2, #0]
10002d22:	3a08      	subs	r2, #8
10002d24:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR8  =  (uint32_t)(Handle->PortRegs->IOCR8 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002d26:	687b      	ldr	r3, [r7, #4]
10002d28:	685b      	ldr	r3, [r3, #4]
10002d2a:	687a      	ldr	r2, [r7, #4]
10002d2c:	6852      	ldr	r2, [r2, #4]
10002d2e:	6992      	ldr	r2, [r2, #24]
10002d30:	1c39      	adds	r1, r7, #0
10002d32:	310f      	adds	r1, #15
10002d34:	7809      	ldrb	r1, [r1, #0]
10002d36:	00c9      	lsls	r1, r1, #3
10002d38:	3103      	adds	r1, #3
10002d3a:	201f      	movs	r0, #31
10002d3c:	1c04      	adds	r4, r0, #0
10002d3e:	408c      	lsls	r4, r1
10002d40:	1c21      	adds	r1, r4, #0
10002d42:	43c9      	mvns	r1, r1
10002d44:	400a      	ands	r2, r1
10002d46:	619a      	str	r2, [r3, #24]
    Handle->PortRegs->IOCR8 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002d48:	687b      	ldr	r3, [r7, #4]
10002d4a:	685b      	ldr	r3, [r3, #4]
10002d4c:	687a      	ldr	r2, [r7, #4]
10002d4e:	6852      	ldr	r2, [r2, #4]
10002d50:	6991      	ldr	r1, [r2, #24]
10002d52:	1cfa      	adds	r2, r7, #3
10002d54:	7810      	ldrb	r0, [r2, #0]
10002d56:	221f      	movs	r2, #31
10002d58:	4010      	ands	r0, r2
10002d5a:	1c3a      	adds	r2, r7, #0
10002d5c:	320f      	adds	r2, #15
10002d5e:	7812      	ldrb	r2, [r2, #0]
10002d60:	00d2      	lsls	r2, r2, #3
10002d62:	3203      	adds	r2, #3
10002d64:	1c04      	adds	r4, r0, #0
10002d66:	4094      	lsls	r4, r2
10002d68:	1c22      	adds	r2, r4, #0
10002d6a:	430a      	orrs	r2, r1
10002d6c:	619a      	str	r2, [r3, #24]
10002d6e:	e034      	b.n	10002dda <IO004_EnableOutputDriver+0x1ae>
  } else if ((Pin >= 12U) && (Pin <= 15U))
10002d70:	1c3b      	adds	r3, r7, #0
10002d72:	330f      	adds	r3, #15
10002d74:	781b      	ldrb	r3, [r3, #0]
10002d76:	2b0b      	cmp	r3, #11
10002d78:	d92f      	bls.n	10002dda <IO004_EnableOutputDriver+0x1ae>
10002d7a:	1c3b      	adds	r3, r7, #0
10002d7c:	330f      	adds	r3, #15
10002d7e:	781b      	ldrb	r3, [r3, #0]
10002d80:	2b0f      	cmp	r3, #15
10002d82:	d82a      	bhi.n	10002dda <IO004_EnableOutputDriver+0x1ae>
  {
    Pin = Pin - 12U;
10002d84:	1c3b      	adds	r3, r7, #0
10002d86:	330f      	adds	r3, #15
10002d88:	1c3a      	adds	r2, r7, #0
10002d8a:	320f      	adds	r2, #15
10002d8c:	7812      	ldrb	r2, [r2, #0]
10002d8e:	3a0c      	subs	r2, #12
10002d90:	701a      	strb	r2, [r3, #0]
    Handle->PortRegs->IOCR12  =  (uint32_t)(Handle->PortRegs->IOCR12 & ~(0x0000001FUL << (3U+(Pin*8U))));
10002d92:	687b      	ldr	r3, [r7, #4]
10002d94:	685b      	ldr	r3, [r3, #4]
10002d96:	687a      	ldr	r2, [r7, #4]
10002d98:	6852      	ldr	r2, [r2, #4]
10002d9a:	69d2      	ldr	r2, [r2, #28]
10002d9c:	1c39      	adds	r1, r7, #0
10002d9e:	310f      	adds	r1, #15
10002da0:	7809      	ldrb	r1, [r1, #0]
10002da2:	00c9      	lsls	r1, r1, #3
10002da4:	3103      	adds	r1, #3
10002da6:	201f      	movs	r0, #31
10002da8:	1c04      	adds	r4, r0, #0
10002daa:	408c      	lsls	r4, r1
10002dac:	1c21      	adds	r1, r4, #0
10002dae:	43c9      	mvns	r1, r1
10002db0:	400a      	ands	r2, r1
10002db2:	61da      	str	r2, [r3, #28]
    Handle->PortRegs->IOCR12 |=  (uint32_t)(((uint32_t)Mode & 0x1FUL) << (3U+(Pin*8U)));
10002db4:	687b      	ldr	r3, [r7, #4]
10002db6:	685b      	ldr	r3, [r3, #4]
10002db8:	687a      	ldr	r2, [r7, #4]
10002dba:	6852      	ldr	r2, [r2, #4]
10002dbc:	69d1      	ldr	r1, [r2, #28]
10002dbe:	1cfa      	adds	r2, r7, #3
10002dc0:	7810      	ldrb	r0, [r2, #0]
10002dc2:	221f      	movs	r2, #31
10002dc4:	4010      	ands	r0, r2
10002dc6:	1c3a      	adds	r2, r7, #0
10002dc8:	320f      	adds	r2, #15
10002dca:	7812      	ldrb	r2, [r2, #0]
10002dcc:	00d2      	lsls	r2, r2, #3
10002dce:	3203      	adds	r2, #3
10002dd0:	1c04      	adds	r4, r0, #0
10002dd2:	4094      	lsls	r4, r2
10002dd4:	1c22      	adds	r2, r4, #0
10002dd6:	430a      	orrs	r2, r1
10002dd8:	61da      	str	r2, [r3, #28]
  }
  else
  {
	  /*Not supposed to be here */
  }
}
10002dda:	46bd      	mov	sp, r7
10002ddc:	b005      	add	sp, #20
10002dde:	bd90      	pop	{r4, r7, pc}

10002de0 <DAVE_Init>:
// @Parameters    None
//
//****************************************************************************

void DAVE_Init(void)
{
10002de0:	b580      	push	{r7, lr}
10002de2:	af00      	add	r7, sp, #0

//****************************************************************************
// @Initialization of APPs Init Functions
//****************************************************************************
	//  MUX configurations
	DAVE_MUX_PreInit(); 
10002de4:	f000 f88e 	bl	10002f04 <DAVE_MUX_PreInit>
	//  Initialization of app 'CLK002'		     
	CLK002_Init();
10002de8:	f000 f89a 	bl	10002f20 <CLK002_Init>
	 
	//  Initialization of app 'UART001'		     
	UART001_Init();
10002dec:	f7ff f83a 	bl	10001e64 <UART001_Init>
	 
	//  Initialization of app 'IO004'		     
	IO004_Init();
10002df0:	f7ff fe26 	bl	10002a40 <IO004_Init>
	 
	//  Initialization of app 'SYSTM001'		     
	SYSTM001_Init();
10002df4:	f7ff fc8a 	bl	1000270c <SYSTM001_Init>
	
      
	//  MUX configurations
	DAVE_MUX_Init();	
10002df8:	f000 f802 	bl	10002e00 <DAVE_MUX_Init>
} //  End of function DAVE_Init
10002dfc:	46bd      	mov	sp, r7
10002dfe:	bd80      	pop	{r7, pc}

10002e00 <DAVE_MUX_Init>:
** Description      : This is the Mux configuration                           **
**                                                                            **
*******************************************************************************/
           
void DAVE_MUX_Init(void)
{  
10002e00:	b580      	push	{r7, lr}
10002e02:	b086      	sub	sp, #24
10002e04:	af00      	add	r7, sp, #0
//********* MODULE USIC CONFIGURATIONS *************************	        
        
           
   /* Disable mode before configuring all USIC registers to avoid unintended edges */   
      /* Variable to store the CCR_MODE values for various USIC channels */ 
      uint32_t UsicCcrMode[6] = {0};
10002e06:	1c3b      	adds	r3, r7, #0
10002e08:	2200      	movs	r2, #0
10002e0a:	601a      	str	r2, [r3, #0]
10002e0c:	3304      	adds	r3, #4
10002e0e:	2200      	movs	r2, #0
10002e10:	601a      	str	r2, [r3, #0]
10002e12:	3304      	adds	r3, #4
10002e14:	2200      	movs	r2, #0
10002e16:	601a      	str	r2, [r3, #0]
10002e18:	3304      	adds	r3, #4
10002e1a:	2200      	movs	r2, #0
10002e1c:	601a      	str	r2, [r3, #0]
10002e1e:	3304      	adds	r3, #4
10002e20:	2200      	movs	r2, #0
10002e22:	601a      	str	r2, [r3, #0]
10002e24:	3304      	adds	r3, #4
10002e26:	2200      	movs	r2, #0
10002e28:	601a      	str	r2, [r3, #0]
10002e2a:	3304      	adds	r3, #4
                
    UsicCcrMode[1] |= (uint32_t) RD_REG(USIC0_CH1->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos); 
10002e2c:	1c3b      	adds	r3, r7, #0
10002e2e:	685a      	ldr	r2, [r3, #4]
10002e30:	4b2e      	ldr	r3, [pc, #184]	; (10002eec <DAVE_MUX_Init+0xec>)
10002e32:	6c19      	ldr	r1, [r3, #64]	; 0x40
10002e34:	230f      	movs	r3, #15
10002e36:	400b      	ands	r3, r1
10002e38:	431a      	orrs	r2, r3
10002e3a:	1c3b      	adds	r3, r7, #0
10002e3c:	605a      	str	r2, [r3, #4]
    WR_REG(USIC0_CH1->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos,0);   
10002e3e:	4b2b      	ldr	r3, [pc, #172]	; (10002eec <DAVE_MUX_Init+0xec>)
10002e40:	4a2a      	ldr	r2, [pc, #168]	; (10002eec <DAVE_MUX_Init+0xec>)
10002e42:	6c12      	ldr	r2, [r2, #64]	; 0x40
10002e44:	210f      	movs	r1, #15
10002e46:	438a      	bics	r2, r1
10002e48:	641a      	str	r2, [r3, #64]	; 0x40
      
    						
   /*USIC 0 Channel 0 Mux Related SFR/Bitfields Configurations*/ 									  					 				 				 		       				              				  					    					 					   				  					 				 				       				  										 									 					 					  									      					              					  						    					      
       						
   /*USIC 0 Channel 1 Mux Related SFR/Bitfields Configurations*/ 						         
 WR_REG(USIC0_CH1->DX0CR, USIC_CH_DX0CR_DSEL_Msk, USIC_CH_DX0CR_DSEL_Pos,6); 
10002e4a:	4b28      	ldr	r3, [pc, #160]	; (10002eec <DAVE_MUX_Init+0xec>)
10002e4c:	4a27      	ldr	r2, [pc, #156]	; (10002eec <DAVE_MUX_Init+0xec>)
10002e4e:	69d2      	ldr	r2, [r2, #28]
10002e50:	2107      	movs	r1, #7
10002e52:	438a      	bics	r2, r1
10002e54:	2106      	movs	r1, #6
10002e56:	430a      	orrs	r2, r1
10002e58:	61da      	str	r2, [r3, #28]
  			  					 				   
 WR_REG(USIC0_CH1->DX3CR, USIC_CH_DX3CR_DSEL_Msk, USIC_CH_DX3CR_DSEL_Pos,1);
10002e5a:	4b24      	ldr	r3, [pc, #144]	; (10002eec <DAVE_MUX_Init+0xec>)
10002e5c:	4a23      	ldr	r2, [pc, #140]	; (10002eec <DAVE_MUX_Init+0xec>)
10002e5e:	6a92      	ldr	r2, [r2, #40]	; 0x28
10002e60:	2107      	movs	r1, #7
10002e62:	438a      	bics	r2, r1
10002e64:	2101      	movs	r1, #1
10002e66:	430a      	orrs	r2, r1
10002e68:	629a      	str	r2, [r3, #40]	; 0x28
    				 		       				              				  					    					 					   				  					 				 				       				  										 									 					 					  									      					              					  						    					      
                 
   // Data Pointer & Buffer Size for Transmitter Buffer Control  
 WR_REG(USIC0_CH1->TBCTR, USIC_CH_TBCTR_DPTRSIZE_Msk, USIC_CH_TBCTR_DPTRSIZE_Pos,0x01000002);		/*    DPTR = 2,  SIZE = 1 */ 
10002e6a:	4a20      	ldr	r2, [pc, #128]	; (10002eec <DAVE_MUX_Init+0xec>)
10002e6c:	491f      	ldr	r1, [pc, #124]	; (10002eec <DAVE_MUX_Init+0xec>)
10002e6e:	2384      	movs	r3, #132	; 0x84
10002e70:	005b      	lsls	r3, r3, #1
10002e72:	58c9      	ldr	r1, [r1, r3]
10002e74:	4b1e      	ldr	r3, [pc, #120]	; (10002ef0 <DAVE_MUX_Init+0xf0>)
10002e76:	400b      	ands	r3, r1
10002e78:	491e      	ldr	r1, [pc, #120]	; (10002ef4 <DAVE_MUX_Init+0xf4>)
10002e7a:	4319      	orrs	r1, r3
10002e7c:	2384      	movs	r3, #132	; 0x84
10002e7e:	005b      	lsls	r3, r3, #1
10002e80:	50d1      	str	r1, [r2, r3]
         
  // Data Pointer & Buffer Size for Receiver Buffer Control  
 WR_REG(USIC0_CH1->RBCTR, USIC_CH_RBCTR_DPTRSIZE_Msk, USIC_CH_RBCTR_DPTRSIZE_Pos,0x01000000);		/*    DPTR = 0,  SIZE = 1 */ 
10002e82:	4a1a      	ldr	r2, [pc, #104]	; (10002eec <DAVE_MUX_Init+0xec>)
10002e84:	4919      	ldr	r1, [pc, #100]	; (10002eec <DAVE_MUX_Init+0xec>)
10002e86:	2386      	movs	r3, #134	; 0x86
10002e88:	005b      	lsls	r3, r3, #1
10002e8a:	58c9      	ldr	r1, [r1, r3]
10002e8c:	4b18      	ldr	r3, [pc, #96]	; (10002ef0 <DAVE_MUX_Init+0xf0>)
10002e8e:	400b      	ands	r3, r1
10002e90:	2180      	movs	r1, #128	; 0x80
10002e92:	0449      	lsls	r1, r1, #17
10002e94:	4319      	orrs	r1, r3
10002e96:	2386      	movs	r3, #134	; 0x86
10002e98:	005b      	lsls	r3, r3, #1
10002e9a:	50d1      	str	r1, [r2, r3]
   /*USIC 2 Channel 1 Mux Related SFR/Bitfields Configurations*/ 									  					 				 				 		       				              				  					    					 					   				  					 				 				       				  										 									 					 					  									      					              					  						    					      
         
  
  /* Enable mode after configuring all USIC registers to avoid unintended edges */  
             
   WR_REG(USIC0_CH1->CCR, USIC_CH_CCR_MODE_Msk, USIC_CH_CCR_MODE_Pos,UsicCcrMode[1]);   
10002e9c:	4b13      	ldr	r3, [pc, #76]	; (10002eec <DAVE_MUX_Init+0xec>)
10002e9e:	1c3a      	adds	r2, r7, #0
10002ea0:	6851      	ldr	r1, [r2, #4]
10002ea2:	220f      	movs	r2, #15
10002ea4:	4011      	ands	r1, r2
10002ea6:	4a11      	ldr	r2, [pc, #68]	; (10002eec <DAVE_MUX_Init+0xec>)
10002ea8:	6c12      	ldr	r2, [r2, #64]	; 0x40
10002eaa:	200f      	movs	r0, #15
10002eac:	4382      	bics	r2, r0
10002eae:	430a      	orrs	r2, r1
10002eb0:	641a      	str	r2, [r3, #64]	; 0x40
   	 
            	         
                                                 

/*        PORT Macro definitions for IOCR_OE, IOCR_PCR & HWSEL_HW     */                                      
  WR_REG(PORT1->IOCR0, PORT_IOCR_PC0_OE_Msk, PORT_IOCR_PC0_OE_Pos, PORT_IOCR_OE1);                /*    P1.0 : PORT1_IOCR0_PC0_OE */					   
10002eb2:	4b11      	ldr	r3, [pc, #68]	; (10002ef8 <DAVE_MUX_Init+0xf8>)
10002eb4:	4a10      	ldr	r2, [pc, #64]	; (10002ef8 <DAVE_MUX_Init+0xf8>)
10002eb6:	6912      	ldr	r2, [r2, #16]
10002eb8:	2180      	movs	r1, #128	; 0x80
10002eba:	430a      	orrs	r2, r1
10002ebc:	611a      	str	r2, [r3, #16]
					                         
  WR_REG(PORT1->IOCR0, PORT_IOCR_PC1_OE_Msk, PORT_IOCR_PC1_OE_Pos, PORT_IOCR_OE1);                /*    P1.1 : PORT1_IOCR0_PC1_OE */					   
10002ebe:	4b0e      	ldr	r3, [pc, #56]	; (10002ef8 <DAVE_MUX_Init+0xf8>)
10002ec0:	4a0d      	ldr	r2, [pc, #52]	; (10002ef8 <DAVE_MUX_Init+0xf8>)
10002ec2:	6912      	ldr	r2, [r2, #16]
10002ec4:	2180      	movs	r1, #128	; 0x80
10002ec6:	0209      	lsls	r1, r1, #8
10002ec8:	430a      	orrs	r2, r1
10002eca:	611a      	str	r2, [r3, #16]
					  
           
  WR_REG(PORT2->PDISC, PORT2_PDISC_PDIS10_Msk, PORT2_PDISC_PDIS10_Pos, PORT_PDISC_PDIS0);            /*    P2.10 : PORT2_PDISC_PDIS10 */                       
10002ecc:	4b0b      	ldr	r3, [pc, #44]	; (10002efc <DAVE_MUX_Init+0xfc>)
10002ece:	4a0b      	ldr	r2, [pc, #44]	; (10002efc <DAVE_MUX_Init+0xfc>)
10002ed0:	6e11      	ldr	r1, [r2, #96]	; 0x60
10002ed2:	4a0b      	ldr	r2, [pc, #44]	; (10002f00 <DAVE_MUX_Init+0x100>)
10002ed4:	400a      	ands	r2, r1
10002ed6:	661a      	str	r2, [r3, #96]	; 0x60
  WR_REG(PORT2->IOCR8, 0xb80000U, PORT_IOCR_PC2_PCR_Pos, 0x17U);                /*P2.10 : PORT2_IOCR8_PC10_PCR and PORT2_IOCR8_PC10_OE */					   
10002ed8:	4b08      	ldr	r3, [pc, #32]	; (10002efc <DAVE_MUX_Init+0xfc>)
10002eda:	4a08      	ldr	r2, [pc, #32]	; (10002efc <DAVE_MUX_Init+0xfc>)
10002edc:	6992      	ldr	r2, [r2, #24]
10002ede:	21b8      	movs	r1, #184	; 0xb8
10002ee0:	0409      	lsls	r1, r1, #16
10002ee2:	430a      	orrs	r2, r1
10002ee4:	619a      	str	r2, [r3, #24]
					      
}
10002ee6:	46bd      	mov	sp, r7
10002ee8:	b006      	add	sp, #24
10002eea:	bd80      	pop	{r7, pc}
10002eec:	48000200 	.word	0x48000200
10002ef0:	f8ffffc0 	.word	0xf8ffffc0
10002ef4:	01000002 	.word	0x01000002
10002ef8:	40040100 	.word	0x40040100
10002efc:	40040200 	.word	0x40040200
10002f00:	fffffbff 	.word	0xfffffbff

10002f04 <DAVE_MUX_PreInit>:
** Description      : This is the Mux configuration                           **
**                                                                            **
*******************************************************************************/
 
void DAVE_MUX_PreInit(void)
{            
10002f04:	b580      	push	{r7, lr}
10002f06:	af00      	add	r7, sp, #0

/*        PORT Macro definitions for IOCR_OE, IOCR_PCR & HWSEL_HW     */               
           
  WR_REG(PORT2->PDISC, PORT2_PDISC_PDIS9_Msk, PORT2_PDISC_PDIS9_Pos, PORT_PDISC_PDIS0);            /*    P2.9 : PORT2_PDISC_PDIS9 */    
10002f08:	4b03      	ldr	r3, [pc, #12]	; (10002f18 <DAVE_MUX_PreInit+0x14>)
10002f0a:	4a03      	ldr	r2, [pc, #12]	; (10002f18 <DAVE_MUX_PreInit+0x14>)
10002f0c:	6e11      	ldr	r1, [r2, #96]	; 0x60
10002f0e:	4a03      	ldr	r2, [pc, #12]	; (10002f1c <DAVE_MUX_PreInit+0x18>)
10002f10:	400a      	ands	r2, r1
10002f12:	661a      	str	r2, [r3, #96]	; 0x60
}
10002f14:	46bd      	mov	sp, r7
10002f16:	bd80      	pop	{r7, pc}
10002f18:	40040200 	.word	0x40040200
10002f1c:	fffffdff 	.word	0xfffffdff

10002f20 <CLK002_Init>:
  * @note   -
  * @param  None
  * @retval None
  */
void CLK002_Init(void)
{
10002f20:	b580      	push	{r7, lr}
10002f22:	af00      	add	r7, sp, #0
    /* Open the lock that protects privileged bits. */
    SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_ALLOW;
10002f24:	4b0a      	ldr	r3, [pc, #40]	; (10002f50 <CLK002_Init+0x30>)
10002f26:	22c0      	movs	r2, #192	; 0xc0
10002f28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Loop until protection is removed. */
    while(((SCU_GENERAL->PASSWD)&SCU_GENERAL_PASSWD_PROTS_Msk))
10002f2a:	46c0      	nop			; (mov r8, r8)
10002f2c:	4b08      	ldr	r3, [pc, #32]	; (10002f50 <CLK002_Init+0x30>)
10002f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10002f30:	2304      	movs	r3, #4
10002f32:	4013      	ands	r3, r2
10002f34:	d1fa      	bne.n	10002f2c <CLK002_Init+0xc>
    {
	    ;
    }

    /* Update PCLK selection mux. */
    SCU_CLK->CLKCR|=(((uint32_t)CLK002_CLKCR_PCLKSEL<<\
10002f36:	4b07      	ldr	r3, [pc, #28]	; (10002f54 <CLK002_Init+0x34>)
10002f38:	4a06      	ldr	r2, [pc, #24]	; (10002f54 <CLK002_Init+0x34>)
10002f3a:	6812      	ldr	r2, [r2, #0]
10002f3c:	601a      	str	r2, [r3, #0]
	             (uint32_t)SCU_CLK_CLKCR_PCLKSEL_Pos)&SCU_CLK_CLKCR_PCLKSEL_Msk);

    CLK002_lDivUpdate();
10002f3e:	f000 f811 	bl	10002f64 <CLK002_lDivUpdate>

    /*Close the lock opened above. */
    SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_DISALLOW;
10002f42:	4b03      	ldr	r3, [pc, #12]	; (10002f50 <CLK002_Init+0x30>)
10002f44:	22c3      	movs	r2, #195	; 0xc3
10002f46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update the clock variable */
    SystemCoreClockUpdate();
10002f48:	f7fe fa8e 	bl	10001468 <SystemCoreClockUpdate>
}
10002f4c:	46bd      	mov	sp, r7
10002f4e:	bd80      	pop	{r7, pc}
10002f50:	40010000 	.word	0x40010000
10002f54:	40010300 	.word	0x40010300

10002f58 <AllowClkInitByStartup>:
*         proceeds with program  loading. Return 0 to disallow CStart from
*         performing clock tree setup.
*/

uint32_t AllowClkInitByStartup(void)
{
10002f58:	b580      	push	{r7, lr}
10002f5a:	af00      	add	r7, sp, #0
    /* Return FALSE - Do not allow any initialisation by startup code. */
    return ((uint32_t)0);
10002f5c:	2300      	movs	r3, #0
}
10002f5e:	1c18      	adds	r0, r3, #0
10002f60:	46bd      	mov	sp, r7
10002f62:	bd80      	pop	{r7, pc}

10002f64 <CLK002_lDivUpdate>:
  * @note   -
  * @param  None
  * @retval None
  */
static void CLK002_lDivUpdate(void)
{
10002f64:	b580      	push	{r7, lr}
10002f66:	b084      	sub	sp, #16
10002f68:	af00      	add	r7, sp, #0
 /*  Find out current and target value of idiv */
 uint32_t lCurrIdiv= (uint32_t) 0;      /* Current idiv. */
10002f6a:	2300      	movs	r3, #0
10002f6c:	60fb      	str	r3, [r7, #12]
 uint32_t lTargetidiv= (uint32_t) 0;    /* Target idiv. */
10002f6e:	2300      	movs	r3, #0
10002f70:	60bb      	str	r3, [r7, #8]
 uint32_t lCLKCR;
 lCurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
10002f72:	4b18      	ldr	r3, [pc, #96]	; (10002fd4 <CLK002_lDivUpdate+0x70>)
10002f74:	681a      	ldr	r2, [r3, #0]
10002f76:	23ff      	movs	r3, #255	; 0xff
10002f78:	021b      	lsls	r3, r3, #8
10002f7a:	4013      	ands	r3, r2
10002f7c:	0a1b      	lsrs	r3, r3, #8
10002f7e:	60fb      	str	r3, [r7, #12]
 lTargetidiv = CLK002_CLKCR_IDIV;
10002f80:	2304      	movs	r3, #4
10002f82:	60bb      	str	r3, [r7, #8]

 /* Update FDIV here, unconditionally. */

  lCLKCR = SCU_CLK->CLKCR;
10002f84:	4b13      	ldr	r3, [pc, #76]	; (10002fd4 <CLK002_lDivUpdate+0x70>)
10002f86:	681b      	ldr	r3, [r3, #0]
10002f88:	607b      	str	r3, [r7, #4]
  WR_REG(lCLKCR, SCU_CLK_CLKCR_FDIV_Msk, SCU_CLK_CLKCR_FDIV_Pos,CLK002_CLKCR_FDIV);
10002f8a:	687b      	ldr	r3, [r7, #4]
10002f8c:	22ff      	movs	r2, #255	; 0xff
10002f8e:	4393      	bics	r3, r2
10002f90:	607b      	str	r3, [r7, #4]
  SCU_CLK->CLKCR = lCLKCR;
10002f92:	4b10      	ldr	r3, [pc, #64]	; (10002fd4 <CLK002_lDivUpdate+0x70>)
10002f94:	687a      	ldr	r2, [r7, #4]
10002f96:	601a      	str	r2, [r3, #0]

     /* Delay, till frequency stable, appox. 15us. */


  WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10002f98:	4b0e      	ldr	r3, [pc, #56]	; (10002fd4 <CLK002_lDivUpdate+0x70>)
10002f9a:	4a0e      	ldr	r2, [pc, #56]	; (10002fd4 <CLK002_lDivUpdate+0x70>)
10002f9c:	6812      	ldr	r2, [r2, #0]
10002f9e:	490e      	ldr	r1, [pc, #56]	; (10002fd8 <CLK002_lDivUpdate+0x74>)
10002fa0:	430a      	orrs	r2, r1
10002fa2:	601a      	str	r2, [r3, #0]
  while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10002fa4:	46c0      	nop			; (mov r8, r8)
10002fa6:	4b0b      	ldr	r3, [pc, #44]	; (10002fd4 <CLK002_lDivUpdate+0x70>)
10002fa8:	681a      	ldr	r2, [r3, #0]
10002faa:	2380      	movs	r3, #128	; 0x80
10002fac:	05db      	lsls	r3, r3, #23
10002fae:	4013      	ands	r3, r2
10002fb0:	d1f9      	bne.n	10002fa6 <CLK002_lDivUpdate+0x42>
    ;
  }


    /* Find out current value of direction in which idiv has to update. */
 if (lCurrIdiv==lTargetidiv)
10002fb2:	68fa      	ldr	r2, [r7, #12]
10002fb4:	68bb      	ldr	r3, [r7, #8]
10002fb6:	429a      	cmp	r2, r3
10002fb8:	d008      	beq.n	10002fcc <CLK002_lDivUpdate+0x68>
  {
   /*No change in IDIV. */
  }
 else if(lCurrIdiv < lTargetidiv)
10002fba:	68fa      	ldr	r2, [r7, #12]
10002fbc:	68bb      	ldr	r3, [r7, #8]
10002fbe:	429a      	cmp	r2, r3
10002fc0:	d202      	bcs.n	10002fc8 <CLK002_lDivUpdate+0x64>
  {
    CLK002_lFrequencyDownScaling();
10002fc2:	f000 f869 	bl	10003098 <CLK002_lFrequencyDownScaling>
10002fc6:	e001      	b.n	10002fcc <CLK002_lDivUpdate+0x68>
  }
  else
   {
     CLK002_lFrequencyUpScaling();
10002fc8:	f000 f808 	bl	10002fdc <CLK002_lFrequencyUpScaling>
   }

}
10002fcc:	46bd      	mov	sp, r7
10002fce:	b004      	add	sp, #16
10002fd0:	bd80      	pop	{r7, pc}
10002fd2:	46c0      	nop			; (mov r8, r8)
10002fd4:	40010300 	.word	0x40010300
10002fd8:	3ff00000 	.word	0x3ff00000

10002fdc <CLK002_lFrequencyUpScaling>:
  * @note   -
  * @param  None
  * @retval None
  */
static void     CLK002_lFrequencyUpScaling()
{
10002fdc:	b580      	push	{r7, lr}
10002fde:	b084      	sub	sp, #16
10002fe0:	af00      	add	r7, sp, #0
  uint32_t CurrIdiv;
  uint32_t TargetIdiv;
  uint32_t lCLKCR;
  CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
10002fe2:	4b2a      	ldr	r3, [pc, #168]	; (1000308c <CLK002_lFrequencyUpScaling+0xb0>)
10002fe4:	681a      	ldr	r2, [r3, #0]
10002fe6:	23ff      	movs	r3, #255	; 0xff
10002fe8:	021b      	lsls	r3, r3, #8
10002fea:	4013      	ands	r3, r2
10002fec:	0a1b      	lsrs	r3, r3, #8
10002fee:	60fb      	str	r3, [r7, #12]
  TargetIdiv = CLK002_CLKCR_IDIV;
10002ff0:	2304      	movs	r3, #4
10002ff2:	60bb      	str	r3, [r7, #8]
  while(1)
  {
    if(CurrIdiv > (TargetIdiv * 4UL))
10002ff4:	68bb      	ldr	r3, [r7, #8]
10002ff6:	009a      	lsls	r2, r3, #2
10002ff8:	68fb      	ldr	r3, [r7, #12]
10002ffa:	429a      	cmp	r2, r3
10002ffc:	d224      	bcs.n	10003048 <CLK002_lFrequencyUpScaling+0x6c>
    {
        CurrIdiv = (CurrIdiv & 0xFFFFFFFCU) + 4U;
10002ffe:	68fb      	ldr	r3, [r7, #12]
10003000:	2203      	movs	r2, #3
10003002:	4393      	bics	r3, r2
10003004:	3304      	adds	r3, #4
10003006:	60fb      	str	r3, [r7, #12]
        CurrIdiv  = CurrIdiv >> 2;   /* Divide by 4. */
10003008:	68fb      	ldr	r3, [r7, #12]
1000300a:	089b      	lsrs	r3, r3, #2
1000300c:	60fb      	str	r3, [r7, #12]
        /* Program interim value of IDIV. */

        lCLKCR = SCU_CLK->CLKCR;
1000300e:	4b1f      	ldr	r3, [pc, #124]	; (1000308c <CLK002_lFrequencyUpScaling+0xb0>)
10003010:	681b      	ldr	r3, [r3, #0]
10003012:	607b      	str	r3, [r7, #4]
        WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
10003014:	68fb      	ldr	r3, [r7, #12]
10003016:	021b      	lsls	r3, r3, #8
10003018:	041b      	lsls	r3, r3, #16
1000301a:	0c1a      	lsrs	r2, r3, #16
1000301c:	6879      	ldr	r1, [r7, #4]
1000301e:	4b1c      	ldr	r3, [pc, #112]	; (10003090 <CLK002_lFrequencyUpScaling+0xb4>)
10003020:	400b      	ands	r3, r1
10003022:	4313      	orrs	r3, r2
10003024:	607b      	str	r3, [r7, #4]
        SCU_CLK->CLKCR = lCLKCR;
10003026:	4b19      	ldr	r3, [pc, #100]	; (1000308c <CLK002_lFrequencyUpScaling+0xb0>)
10003028:	687a      	ldr	r2, [r7, #4]
1000302a:	601a      	str	r2, [r3, #0]

        /* Wait till frequency stable. */
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
1000302c:	4b17      	ldr	r3, [pc, #92]	; (1000308c <CLK002_lFrequencyUpScaling+0xb0>)
1000302e:	4a17      	ldr	r2, [pc, #92]	; (1000308c <CLK002_lFrequencyUpScaling+0xb0>)
10003030:	6812      	ldr	r2, [r2, #0]
10003032:	4918      	ldr	r1, [pc, #96]	; (10003094 <CLK002_lFrequencyUpScaling+0xb8>)
10003034:	430a      	orrs	r2, r1
10003036:	601a      	str	r2, [r3, #0]
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10003038:	46c0      	nop			; (mov r8, r8)
1000303a:	4b14      	ldr	r3, [pc, #80]	; (1000308c <CLK002_lFrequencyUpScaling+0xb0>)
1000303c:	681a      	ldr	r2, [r3, #0]
1000303e:	2380      	movs	r3, #128	; 0x80
10003040:	05db      	lsls	r3, r3, #23
10003042:	4013      	ands	r3, r2
10003044:	d1f9      	bne.n	1000303a <CLK002_lFrequencyUpScaling+0x5e>
10003046:	e01c      	b.n	10003082 <CLK002_lFrequencyUpScaling+0xa6>
        }
    }
    else
    {
        /* Program TargetIDiv into IDIV bitfield of CLKCR. */
        lCLKCR = SCU_CLK->CLKCR;
10003048:	4b10      	ldr	r3, [pc, #64]	; (1000308c <CLK002_lFrequencyUpScaling+0xb0>)
1000304a:	681b      	ldr	r3, [r3, #0]
1000304c:	607b      	str	r3, [r7, #4]
        WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
1000304e:	68bb      	ldr	r3, [r7, #8]
10003050:	021b      	lsls	r3, r3, #8
10003052:	041b      	lsls	r3, r3, #16
10003054:	0c1a      	lsrs	r2, r3, #16
10003056:	6879      	ldr	r1, [r7, #4]
10003058:	4b0d      	ldr	r3, [pc, #52]	; (10003090 <CLK002_lFrequencyUpScaling+0xb4>)
1000305a:	400b      	ands	r3, r1
1000305c:	4313      	orrs	r3, r2
1000305e:	607b      	str	r3, [r7, #4]
        SCU_CLK->CLKCR = lCLKCR;
10003060:	4b0a      	ldr	r3, [pc, #40]	; (1000308c <CLK002_lFrequencyUpScaling+0xb0>)
10003062:	687a      	ldr	r2, [r7, #4]
10003064:	601a      	str	r2, [r3, #0]
        /* Wait till frequency stable. */
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10003066:	4b09      	ldr	r3, [pc, #36]	; (1000308c <CLK002_lFrequencyUpScaling+0xb0>)
10003068:	4a08      	ldr	r2, [pc, #32]	; (1000308c <CLK002_lFrequencyUpScaling+0xb0>)
1000306a:	6812      	ldr	r2, [r2, #0]
1000306c:	4909      	ldr	r1, [pc, #36]	; (10003094 <CLK002_lFrequencyUpScaling+0xb8>)
1000306e:	430a      	orrs	r2, r1
10003070:	601a      	str	r2, [r3, #0]
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10003072:	46c0      	nop			; (mov r8, r8)
10003074:	4b05      	ldr	r3, [pc, #20]	; (1000308c <CLK002_lFrequencyUpScaling+0xb0>)
10003076:	681a      	ldr	r2, [r3, #0]
10003078:	2380      	movs	r3, #128	; 0x80
1000307a:	05db      	lsls	r3, r3, #23
1000307c:	4013      	ands	r3, r2
1000307e:	d1f9      	bne.n	10003074 <CLK002_lFrequencyUpScaling+0x98>
        {
            ;
        }
        break;
10003080:	e000      	b.n	10003084 <CLK002_lFrequencyUpScaling+0xa8>
    }

  }
10003082:	e7b7      	b.n	10002ff4 <CLK002_lFrequencyUpScaling+0x18>

}
10003084:	46bd      	mov	sp, r7
10003086:	b004      	add	sp, #16
10003088:	bd80      	pop	{r7, pc}
1000308a:	46c0      	nop			; (mov r8, r8)
1000308c:	40010300 	.word	0x40010300
10003090:	ffff00ff 	.word	0xffff00ff
10003094:	3ff00000 	.word	0x3ff00000

10003098 <CLK002_lFrequencyDownScaling>:
  * @note   -
  * @param  None
  * @retval None
  */
static void     CLK002_lFrequencyDownScaling()
{
10003098:	b580      	push	{r7, lr}
1000309a:	b084      	sub	sp, #16
1000309c:	af00      	add	r7, sp, #0
    uint32_t CurrIdiv;
    uint32_t TargetIdiv;
    uint32_t lCLKCR;
    CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
1000309e:	4b27      	ldr	r3, [pc, #156]	; (1000313c <CLK002_lFrequencyDownScaling+0xa4>)
100030a0:	681a      	ldr	r2, [r3, #0]
100030a2:	23ff      	movs	r3, #255	; 0xff
100030a4:	021b      	lsls	r3, r3, #8
100030a6:	4013      	ands	r3, r2
100030a8:	0a1b      	lsrs	r3, r3, #8
100030aa:	60fb      	str	r3, [r7, #12]
    TargetIdiv = CLK002_CLKCR_IDIV;
100030ac:	2304      	movs	r3, #4
100030ae:	60bb      	str	r3, [r7, #8]
    while(1)
    {
        if((CurrIdiv * 4UL) < TargetIdiv )
100030b0:	68fb      	ldr	r3, [r7, #12]
100030b2:	009a      	lsls	r2, r3, #2
100030b4:	68bb      	ldr	r3, [r7, #8]
100030b6:	429a      	cmp	r2, r3
100030b8:	d21f      	bcs.n	100030fa <CLK002_lFrequencyDownScaling+0x62>
        {
            CurrIdiv  = CurrIdiv << 2;   /* Multiply by 4. */
100030ba:	68fb      	ldr	r3, [r7, #12]
100030bc:	009b      	lsls	r3, r3, #2
100030be:	60fb      	str	r3, [r7, #12]
            /* Program interim value of IDIV */
            lCLKCR = SCU_CLK->CLKCR;
100030c0:	4b1e      	ldr	r3, [pc, #120]	; (1000313c <CLK002_lFrequencyDownScaling+0xa4>)
100030c2:	681b      	ldr	r3, [r3, #0]
100030c4:	607b      	str	r3, [r7, #4]
            WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
100030c6:	68fb      	ldr	r3, [r7, #12]
100030c8:	021b      	lsls	r3, r3, #8
100030ca:	041b      	lsls	r3, r3, #16
100030cc:	0c1a      	lsrs	r2, r3, #16
100030ce:	6879      	ldr	r1, [r7, #4]
100030d0:	4b1b      	ldr	r3, [pc, #108]	; (10003140 <CLK002_lFrequencyDownScaling+0xa8>)
100030d2:	400b      	ands	r3, r1
100030d4:	4313      	orrs	r3, r2
100030d6:	607b      	str	r3, [r7, #4]
            SCU_CLK->CLKCR = lCLKCR;
100030d8:	4b18      	ldr	r3, [pc, #96]	; (1000313c <CLK002_lFrequencyDownScaling+0xa4>)
100030da:	687a      	ldr	r2, [r7, #4]
100030dc:	601a      	str	r2, [r3, #0]
            /* Wait till frequency stable. */
            WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
100030de:	4b17      	ldr	r3, [pc, #92]	; (1000313c <CLK002_lFrequencyDownScaling+0xa4>)
100030e0:	4a16      	ldr	r2, [pc, #88]	; (1000313c <CLK002_lFrequencyDownScaling+0xa4>)
100030e2:	6812      	ldr	r2, [r2, #0]
100030e4:	4917      	ldr	r1, [pc, #92]	; (10003144 <CLK002_lFrequencyDownScaling+0xac>)
100030e6:	430a      	orrs	r2, r1
100030e8:	601a      	str	r2, [r3, #0]
            while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
100030ea:	46c0      	nop			; (mov r8, r8)
100030ec:	4b13      	ldr	r3, [pc, #76]	; (1000313c <CLK002_lFrequencyDownScaling+0xa4>)
100030ee:	681a      	ldr	r2, [r3, #0]
100030f0:	2380      	movs	r3, #128	; 0x80
100030f2:	05db      	lsls	r3, r3, #23
100030f4:	4013      	ands	r3, r2
100030f6:	d1f9      	bne.n	100030ec <CLK002_lFrequencyDownScaling+0x54>
100030f8:	e01c      	b.n	10003134 <CLK002_lFrequencyDownScaling+0x9c>
            }
        }
        else
        {
            /* Program TargetIDiv into IDIV bitfield of CLKCR */
            lCLKCR = SCU_CLK->CLKCR;
100030fa:	4b10      	ldr	r3, [pc, #64]	; (1000313c <CLK002_lFrequencyDownScaling+0xa4>)
100030fc:	681b      	ldr	r3, [r3, #0]
100030fe:	607b      	str	r3, [r7, #4]
            WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
10003100:	68bb      	ldr	r3, [r7, #8]
10003102:	021b      	lsls	r3, r3, #8
10003104:	041b      	lsls	r3, r3, #16
10003106:	0c1a      	lsrs	r2, r3, #16
10003108:	6879      	ldr	r1, [r7, #4]
1000310a:	4b0d      	ldr	r3, [pc, #52]	; (10003140 <CLK002_lFrequencyDownScaling+0xa8>)
1000310c:	400b      	ands	r3, r1
1000310e:	4313      	orrs	r3, r2
10003110:	607b      	str	r3, [r7, #4]
            SCU_CLK->CLKCR = lCLKCR;
10003112:	4b0a      	ldr	r3, [pc, #40]	; (1000313c <CLK002_lFrequencyDownScaling+0xa4>)
10003114:	687a      	ldr	r2, [r7, #4]
10003116:	601a      	str	r2, [r3, #0]
            /* Wait till frequency stable. */
           
            WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10003118:	4b08      	ldr	r3, [pc, #32]	; (1000313c <CLK002_lFrequencyDownScaling+0xa4>)
1000311a:	4a08      	ldr	r2, [pc, #32]	; (1000313c <CLK002_lFrequencyDownScaling+0xa4>)
1000311c:	6812      	ldr	r2, [r2, #0]
1000311e:	4909      	ldr	r1, [pc, #36]	; (10003144 <CLK002_lFrequencyDownScaling+0xac>)
10003120:	430a      	orrs	r2, r1
10003122:	601a      	str	r2, [r3, #0]
            while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10003124:	46c0      	nop			; (mov r8, r8)
10003126:	4b05      	ldr	r3, [pc, #20]	; (1000313c <CLK002_lFrequencyDownScaling+0xa4>)
10003128:	681a      	ldr	r2, [r3, #0]
1000312a:	2380      	movs	r3, #128	; 0x80
1000312c:	05db      	lsls	r3, r3, #23
1000312e:	4013      	ands	r3, r2
10003130:	d1f9      	bne.n	10003126 <CLK002_lFrequencyDownScaling+0x8e>
            {
                ;
            }
             break;
10003132:	e000      	b.n	10003136 <CLK002_lFrequencyDownScaling+0x9e>
        }

	  }
10003134:	e7bc      	b.n	100030b0 <CLK002_lFrequencyDownScaling+0x18>
}
10003136:	46bd      	mov	sp, r7
10003138:	b004      	add	sp, #16
1000313a:	bd80      	pop	{r7, pc}
1000313c:	40010300 	.word	0x40010300
10003140:	ffff00ff 	.word	0xffff00ff
10003144:	3ff00000 	.word	0x3ff00000

10003148 <__aeabi_uidiv>:
10003148:	2900      	cmp	r1, #0
1000314a:	d034      	beq.n	100031b6 <.udivsi3_skip_div0_test+0x6a>

1000314c <.udivsi3_skip_div0_test>:
1000314c:	2301      	movs	r3, #1
1000314e:	2200      	movs	r2, #0
10003150:	b410      	push	{r4}
10003152:	4288      	cmp	r0, r1
10003154:	d32c      	bcc.n	100031b0 <.udivsi3_skip_div0_test+0x64>
10003156:	2401      	movs	r4, #1
10003158:	0724      	lsls	r4, r4, #28
1000315a:	42a1      	cmp	r1, r4
1000315c:	d204      	bcs.n	10003168 <.udivsi3_skip_div0_test+0x1c>
1000315e:	4281      	cmp	r1, r0
10003160:	d202      	bcs.n	10003168 <.udivsi3_skip_div0_test+0x1c>
10003162:	0109      	lsls	r1, r1, #4
10003164:	011b      	lsls	r3, r3, #4
10003166:	e7f8      	b.n	1000315a <.udivsi3_skip_div0_test+0xe>
10003168:	00e4      	lsls	r4, r4, #3
1000316a:	42a1      	cmp	r1, r4
1000316c:	d204      	bcs.n	10003178 <.udivsi3_skip_div0_test+0x2c>
1000316e:	4281      	cmp	r1, r0
10003170:	d202      	bcs.n	10003178 <.udivsi3_skip_div0_test+0x2c>
10003172:	0049      	lsls	r1, r1, #1
10003174:	005b      	lsls	r3, r3, #1
10003176:	e7f8      	b.n	1000316a <.udivsi3_skip_div0_test+0x1e>
10003178:	4288      	cmp	r0, r1
1000317a:	d301      	bcc.n	10003180 <.udivsi3_skip_div0_test+0x34>
1000317c:	1a40      	subs	r0, r0, r1
1000317e:	431a      	orrs	r2, r3
10003180:	084c      	lsrs	r4, r1, #1
10003182:	42a0      	cmp	r0, r4
10003184:	d302      	bcc.n	1000318c <.udivsi3_skip_div0_test+0x40>
10003186:	1b00      	subs	r0, r0, r4
10003188:	085c      	lsrs	r4, r3, #1
1000318a:	4322      	orrs	r2, r4
1000318c:	088c      	lsrs	r4, r1, #2
1000318e:	42a0      	cmp	r0, r4
10003190:	d302      	bcc.n	10003198 <.udivsi3_skip_div0_test+0x4c>
10003192:	1b00      	subs	r0, r0, r4
10003194:	089c      	lsrs	r4, r3, #2
10003196:	4322      	orrs	r2, r4
10003198:	08cc      	lsrs	r4, r1, #3
1000319a:	42a0      	cmp	r0, r4
1000319c:	d302      	bcc.n	100031a4 <.udivsi3_skip_div0_test+0x58>
1000319e:	1b00      	subs	r0, r0, r4
100031a0:	08dc      	lsrs	r4, r3, #3
100031a2:	4322      	orrs	r2, r4
100031a4:	2800      	cmp	r0, #0
100031a6:	d003      	beq.n	100031b0 <.udivsi3_skip_div0_test+0x64>
100031a8:	091b      	lsrs	r3, r3, #4
100031aa:	d001      	beq.n	100031b0 <.udivsi3_skip_div0_test+0x64>
100031ac:	0909      	lsrs	r1, r1, #4
100031ae:	e7e3      	b.n	10003178 <.udivsi3_skip_div0_test+0x2c>
100031b0:	1c10      	adds	r0, r2, #0
100031b2:	bc10      	pop	{r4}
100031b4:	4770      	bx	lr
100031b6:	2800      	cmp	r0, #0
100031b8:	d001      	beq.n	100031be <.udivsi3_skip_div0_test+0x72>
100031ba:	2000      	movs	r0, #0
100031bc:	43c0      	mvns	r0, r0
100031be:	b407      	push	{r0, r1, r2}
100031c0:	4802      	ldr	r0, [pc, #8]	; (100031cc <.udivsi3_skip_div0_test+0x80>)
100031c2:	a102      	add	r1, pc, #8	; (adr r1, 100031cc <.udivsi3_skip_div0_test+0x80>)
100031c4:	1840      	adds	r0, r0, r1
100031c6:	9002      	str	r0, [sp, #8]
100031c8:	bd03      	pop	{r0, r1, pc}
100031ca:	46c0      	nop			; (mov r8, r8)
100031cc:	00000019 	.word	0x00000019

100031d0 <__aeabi_uidivmod>:
100031d0:	2900      	cmp	r1, #0
100031d2:	d0f0      	beq.n	100031b6 <.udivsi3_skip_div0_test+0x6a>
100031d4:	b503      	push	{r0, r1, lr}
100031d6:	f7ff ffb9 	bl	1000314c <.udivsi3_skip_div0_test>
100031da:	bc0e      	pop	{r1, r2, r3}
100031dc:	4342      	muls	r2, r0
100031de:	1a89      	subs	r1, r1, r2
100031e0:	4718      	bx	r3
100031e2:	46c0      	nop			; (mov r8, r8)

100031e4 <__aeabi_idiv0>:
100031e4:	4770      	bx	lr
100031e6:	46c0      	nop			; (mov r8, r8)

100031e8 <__aeabi_cfrcmple>:
100031e8:	4684      	mov	ip, r0
100031ea:	1c08      	adds	r0, r1, #0
100031ec:	4661      	mov	r1, ip
100031ee:	e7ff      	b.n	100031f0 <__aeabi_cfcmpeq>

100031f0 <__aeabi_cfcmpeq>:
100031f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100031f2:	f000 f9ff 	bl	100035f4 <__lesf2>
100031f6:	2800      	cmp	r0, #0
100031f8:	d401      	bmi.n	100031fe <__aeabi_cfcmpeq+0xe>
100031fa:	2100      	movs	r1, #0
100031fc:	42c8      	cmn	r0, r1
100031fe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10003200 <__aeabi_fcmpeq>:
10003200:	b510      	push	{r4, lr}
10003202:	f000 f987 	bl	10003514 <__eqsf2>
10003206:	4240      	negs	r0, r0
10003208:	3001      	adds	r0, #1
1000320a:	bd10      	pop	{r4, pc}

1000320c <__aeabi_fcmplt>:
1000320c:	b510      	push	{r4, lr}
1000320e:	f000 f9f1 	bl	100035f4 <__lesf2>
10003212:	2800      	cmp	r0, #0
10003214:	db01      	blt.n	1000321a <__aeabi_fcmplt+0xe>
10003216:	2000      	movs	r0, #0
10003218:	bd10      	pop	{r4, pc}
1000321a:	2001      	movs	r0, #1
1000321c:	bd10      	pop	{r4, pc}
1000321e:	46c0      	nop			; (mov r8, r8)

10003220 <__aeabi_fcmple>:
10003220:	b510      	push	{r4, lr}
10003222:	f000 f9e7 	bl	100035f4 <__lesf2>
10003226:	2800      	cmp	r0, #0
10003228:	dd01      	ble.n	1000322e <__aeabi_fcmple+0xe>
1000322a:	2000      	movs	r0, #0
1000322c:	bd10      	pop	{r4, pc}
1000322e:	2001      	movs	r0, #1
10003230:	bd10      	pop	{r4, pc}
10003232:	46c0      	nop			; (mov r8, r8)

10003234 <__aeabi_fcmpgt>:
10003234:	b510      	push	{r4, lr}
10003236:	f000 f995 	bl	10003564 <__gesf2>
1000323a:	2800      	cmp	r0, #0
1000323c:	dc01      	bgt.n	10003242 <__aeabi_fcmpgt+0xe>
1000323e:	2000      	movs	r0, #0
10003240:	bd10      	pop	{r4, pc}
10003242:	2001      	movs	r0, #1
10003244:	bd10      	pop	{r4, pc}
10003246:	46c0      	nop			; (mov r8, r8)

10003248 <__aeabi_fcmpge>:
10003248:	b510      	push	{r4, lr}
1000324a:	f000 f98b 	bl	10003564 <__gesf2>
1000324e:	2800      	cmp	r0, #0
10003250:	da01      	bge.n	10003256 <__aeabi_fcmpge+0xe>
10003252:	2000      	movs	r0, #0
10003254:	bd10      	pop	{r4, pc}
10003256:	2001      	movs	r0, #1
10003258:	bd10      	pop	{r4, pc}
1000325a:	46c0      	nop			; (mov r8, r8)
1000325c:	0000      	movs	r0, r0
	...

10003260 <__aeabi_d2uiz>:
10003260:	b538      	push	{r3, r4, r5, lr}
10003262:	4b0e      	ldr	r3, [pc, #56]	; (1000329c <__aeabi_d2uiz+0x3c>)
10003264:	4a0c      	ldr	r2, [pc, #48]	; (10003298 <__aeabi_d2uiz+0x38>)
10003266:	1c04      	adds	r4, r0, #0
10003268:	1c0d      	adds	r5, r1, #0
1000326a:	f001 fac7 	bl	100047fc <__aeabi_dcmpge>
1000326e:	2800      	cmp	r0, #0
10003270:	d104      	bne.n	1000327c <__aeabi_d2uiz+0x1c>
10003272:	1c20      	adds	r0, r4, #0
10003274:	1c29      	adds	r1, r5, #0
10003276:	f001 fa27 	bl	100046c8 <__aeabi_d2iz>
1000327a:	bd38      	pop	{r3, r4, r5, pc}
1000327c:	4b07      	ldr	r3, [pc, #28]	; (1000329c <__aeabi_d2uiz+0x3c>)
1000327e:	4a06      	ldr	r2, [pc, #24]	; (10003298 <__aeabi_d2uiz+0x38>)
10003280:	1c20      	adds	r0, r4, #0
10003282:	1c29      	adds	r1, r5, #0
10003284:	f000 fe9e 	bl	10003fc4 <__aeabi_dsub>
10003288:	f001 fa1e 	bl	100046c8 <__aeabi_d2iz>
1000328c:	2380      	movs	r3, #128	; 0x80
1000328e:	0619      	lsls	r1, r3, #24
10003290:	1840      	adds	r0, r0, r1
10003292:	e7f2      	b.n	1000327a <__aeabi_d2uiz+0x1a>
10003294:	46c0      	nop			; (mov r8, r8)
10003296:	46c0      	nop			; (mov r8, r8)
10003298:	00000000 	.word	0x00000000
1000329c:	41e00000 	.word	0x41e00000

100032a0 <__aeabi_fdiv>:
100032a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100032a2:	465f      	mov	r7, fp
100032a4:	4656      	mov	r6, sl
100032a6:	464d      	mov	r5, r9
100032a8:	4644      	mov	r4, r8
100032aa:	b4f0      	push	{r4, r5, r6, r7}
100032ac:	0245      	lsls	r5, r0, #9
100032ae:	0044      	lsls	r4, r0, #1
100032b0:	b083      	sub	sp, #12
100032b2:	1c0e      	adds	r6, r1, #0
100032b4:	0a6d      	lsrs	r5, r5, #9
100032b6:	0e24      	lsrs	r4, r4, #24
100032b8:	0fc7      	lsrs	r7, r0, #31
100032ba:	2c00      	cmp	r4, #0
100032bc:	d107      	bne.n	100032ce <__aeabi_fdiv+0x2e>
100032be:	2d00      	cmp	r5, #0
100032c0:	d000      	beq.n	100032c4 <__aeabi_fdiv+0x24>
100032c2:	e091      	b.n	100033e8 <__aeabi_fdiv+0x148>
100032c4:	2104      	movs	r1, #4
100032c6:	2201      	movs	r2, #1
100032c8:	4688      	mov	r8, r1
100032ca:	4692      	mov	sl, r2
100032cc:	e009      	b.n	100032e2 <__aeabi_fdiv+0x42>
100032ce:	2cff      	cmp	r4, #255	; 0xff
100032d0:	d055      	beq.n	1000337e <__aeabi_fdiv+0xde>
100032d2:	2380      	movs	r3, #128	; 0x80
100032d4:	0418      	lsls	r0, r3, #16
100032d6:	2100      	movs	r1, #0
100032d8:	4305      	orrs	r5, r0
100032da:	00ed      	lsls	r5, r5, #3
100032dc:	3c7f      	subs	r4, #127	; 0x7f
100032de:	4688      	mov	r8, r1
100032e0:	468a      	mov	sl, r1
100032e2:	1c33      	adds	r3, r6, #0
100032e4:	0058      	lsls	r0, r3, #1
100032e6:	0276      	lsls	r6, r6, #9
100032e8:	0fd9      	lsrs	r1, r3, #31
100032ea:	0a76      	lsrs	r6, r6, #9
100032ec:	0e00      	lsrs	r0, r0, #24
100032ee:	468b      	mov	fp, r1
100032f0:	d14c      	bne.n	1000338c <__aeabi_fdiv+0xec>
100032f2:	2201      	movs	r2, #1
100032f4:	4694      	mov	ip, r2
100032f6:	2e00      	cmp	r6, #0
100032f8:	d000      	beq.n	100032fc <__aeabi_fdiv+0x5c>
100032fa:	e081      	b.n	10003400 <__aeabi_fdiv+0x160>
100032fc:	465b      	mov	r3, fp
100032fe:	407b      	eors	r3, r7
10003300:	4662      	mov	r2, ip
10003302:	4641      	mov	r1, r8
10003304:	9301      	str	r3, [sp, #4]
10003306:	430a      	orrs	r2, r1
10003308:	2a0f      	cmp	r2, #15
1000330a:	d950      	bls.n	100033ae <__aeabi_fdiv+0x10e>
1000330c:	1a20      	subs	r0, r4, r0
1000330e:	0169      	lsls	r1, r5, #5
10003310:	4681      	mov	r9, r0
10003312:	0175      	lsls	r5, r6, #5
10003314:	42a9      	cmp	r1, r5
10003316:	d300      	bcc.n	1000331a <__aeabi_fdiv+0x7a>
10003318:	e0b3      	b.n	10003482 <__aeabi_fdiv+0x1e2>
1000331a:	2201      	movs	r2, #1
1000331c:	4253      	negs	r3, r2
1000331e:	4499      	add	r9, r3
10003320:	241b      	movs	r4, #27
10003322:	2600      	movs	r6, #0
10003324:	2701      	movs	r7, #1
10003326:	1e62      	subs	r2, r4, #1
10003328:	1c38      	adds	r0, r7, #0
1000332a:	4010      	ands	r0, r2
1000332c:	004b      	lsls	r3, r1, #1
1000332e:	0076      	lsls	r6, r6, #1
10003330:	2900      	cmp	r1, #0
10003332:	da00      	bge.n	10003336 <__aeabi_fdiv+0x96>
10003334:	e0a9      	b.n	1000348a <__aeabi_fdiv+0x1ea>
10003336:	429d      	cmp	r5, r3
10003338:	d800      	bhi.n	1000333c <__aeabi_fdiv+0x9c>
1000333a:	e0a6      	b.n	1000348a <__aeabi_fdiv+0x1ea>
1000333c:	3c01      	subs	r4, #1
1000333e:	2c00      	cmp	r4, #0
10003340:	dc00      	bgt.n	10003344 <__aeabi_fdiv+0xa4>
10003342:	e0ab      	b.n	1000349c <__aeabi_fdiv+0x1fc>
10003344:	2800      	cmp	r0, #0
10003346:	d00c      	beq.n	10003362 <__aeabi_fdiv+0xc2>
10003348:	1c19      	adds	r1, r3, #0
1000334a:	0076      	lsls	r6, r6, #1
1000334c:	005b      	lsls	r3, r3, #1
1000334e:	2900      	cmp	r1, #0
10003350:	db01      	blt.n	10003356 <__aeabi_fdiv+0xb6>
10003352:	429d      	cmp	r5, r3
10003354:	d801      	bhi.n	1000335a <__aeabi_fdiv+0xba>
10003356:	1b5b      	subs	r3, r3, r5
10003358:	433e      	orrs	r6, r7
1000335a:	3c01      	subs	r4, #1
1000335c:	2c00      	cmp	r4, #0
1000335e:	dc00      	bgt.n	10003362 <__aeabi_fdiv+0xc2>
10003360:	e09c      	b.n	1000349c <__aeabi_fdiv+0x1fc>
10003362:	0059      	lsls	r1, r3, #1
10003364:	0072      	lsls	r2, r6, #1
10003366:	2b00      	cmp	r3, #0
10003368:	db01      	blt.n	1000336e <__aeabi_fdiv+0xce>
1000336a:	428d      	cmp	r5, r1
1000336c:	d801      	bhi.n	10003372 <__aeabi_fdiv+0xd2>
1000336e:	1b49      	subs	r1, r1, r5
10003370:	433a      	orrs	r2, r7
10003372:	3c01      	subs	r4, #1
10003374:	004b      	lsls	r3, r1, #1
10003376:	0056      	lsls	r6, r2, #1
10003378:	2900      	cmp	r1, #0
1000337a:	daea      	bge.n	10003352 <__aeabi_fdiv+0xb2>
1000337c:	e7eb      	b.n	10003356 <__aeabi_fdiv+0xb6>
1000337e:	2d00      	cmp	r5, #0
10003380:	d12d      	bne.n	100033de <__aeabi_fdiv+0x13e>
10003382:	2008      	movs	r0, #8
10003384:	2102      	movs	r1, #2
10003386:	4680      	mov	r8, r0
10003388:	468a      	mov	sl, r1
1000338a:	e7aa      	b.n	100032e2 <__aeabi_fdiv+0x42>
1000338c:	28ff      	cmp	r0, #255	; 0xff
1000338e:	d020      	beq.n	100033d2 <__aeabi_fdiv+0x132>
10003390:	2280      	movs	r2, #128	; 0x80
10003392:	0413      	lsls	r3, r2, #16
10003394:	2100      	movs	r1, #0
10003396:	431e      	orrs	r6, r3
10003398:	468c      	mov	ip, r1
1000339a:	465b      	mov	r3, fp
1000339c:	407b      	eors	r3, r7
1000339e:	4662      	mov	r2, ip
100033a0:	4641      	mov	r1, r8
100033a2:	00f6      	lsls	r6, r6, #3
100033a4:	387f      	subs	r0, #127	; 0x7f
100033a6:	9301      	str	r3, [sp, #4]
100033a8:	430a      	orrs	r2, r1
100033aa:	2a0f      	cmp	r2, #15
100033ac:	d8ae      	bhi.n	1000330c <__aeabi_fdiv+0x6c>
100033ae:	4956      	ldr	r1, [pc, #344]	; (10003508 <__aeabi_fdiv+0x268>)
100033b0:	0092      	lsls	r2, r2, #2
100033b2:	588a      	ldr	r2, [r1, r2]
100033b4:	4697      	mov	pc, r2
100033b6:	9b01      	ldr	r3, [sp, #4]
100033b8:	26ff      	movs	r6, #255	; 0xff
100033ba:	2500      	movs	r5, #0
100033bc:	05f0      	lsls	r0, r6, #23
100033be:	4328      	orrs	r0, r5
100033c0:	07de      	lsls	r6, r3, #31
100033c2:	4330      	orrs	r0, r6
100033c4:	b003      	add	sp, #12
100033c6:	bc3c      	pop	{r2, r3, r4, r5}
100033c8:	4690      	mov	r8, r2
100033ca:	4699      	mov	r9, r3
100033cc:	46a2      	mov	sl, r4
100033ce:	46ab      	mov	fp, r5
100033d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100033d2:	1c33      	adds	r3, r6, #0
100033d4:	1e5a      	subs	r2, r3, #1
100033d6:	4193      	sbcs	r3, r2
100033d8:	3302      	adds	r3, #2
100033da:	469c      	mov	ip, r3
100033dc:	e78e      	b.n	100032fc <__aeabi_fdiv+0x5c>
100033de:	220c      	movs	r2, #12
100033e0:	2303      	movs	r3, #3
100033e2:	4690      	mov	r8, r2
100033e4:	469a      	mov	sl, r3
100033e6:	e77c      	b.n	100032e2 <__aeabi_fdiv+0x42>
100033e8:	1c28      	adds	r0, r5, #0
100033ea:	f001 fa11 	bl	10004810 <__clzsi2>
100033ee:	2276      	movs	r2, #118	; 0x76
100033f0:	1f44      	subs	r4, r0, #5
100033f2:	4253      	negs	r3, r2
100033f4:	40a5      	lsls	r5, r4
100033f6:	1a1c      	subs	r4, r3, r0
100033f8:	2000      	movs	r0, #0
100033fa:	4680      	mov	r8, r0
100033fc:	4682      	mov	sl, r0
100033fe:	e770      	b.n	100032e2 <__aeabi_fdiv+0x42>
10003400:	1c30      	adds	r0, r6, #0
10003402:	f001 fa05 	bl	10004810 <__clzsi2>
10003406:	2376      	movs	r3, #118	; 0x76
10003408:	1f41      	subs	r1, r0, #5
1000340a:	408e      	lsls	r6, r1
1000340c:	425a      	negs	r2, r3
1000340e:	2100      	movs	r1, #0
10003410:	1a10      	subs	r0, r2, r0
10003412:	468c      	mov	ip, r1
10003414:	e772      	b.n	100032fc <__aeabi_fdiv+0x5c>
10003416:	2300      	movs	r3, #0
10003418:	4d3c      	ldr	r5, [pc, #240]	; (1000350c <__aeabi_fdiv+0x26c>)
1000341a:	26ff      	movs	r6, #255	; 0xff
1000341c:	e7ce      	b.n	100033bc <__aeabi_fdiv+0x11c>
1000341e:	465f      	mov	r7, fp
10003420:	1c35      	adds	r5, r6, #0
10003422:	9701      	str	r7, [sp, #4]
10003424:	4663      	mov	r3, ip
10003426:	2b02      	cmp	r3, #2
10003428:	d0c5      	beq.n	100033b6 <__aeabi_fdiv+0x116>
1000342a:	2b03      	cmp	r3, #3
1000342c:	d063      	beq.n	100034f6 <__aeabi_fdiv+0x256>
1000342e:	2b01      	cmp	r3, #1
10003430:	d043      	beq.n	100034ba <__aeabi_fdiv+0x21a>
10003432:	4649      	mov	r1, r9
10003434:	317f      	adds	r1, #127	; 0x7f
10003436:	2900      	cmp	r1, #0
10003438:	dd35      	ble.n	100034a6 <__aeabi_fdiv+0x206>
1000343a:	270f      	movs	r7, #15
1000343c:	402f      	ands	r7, r5
1000343e:	2f04      	cmp	r7, #4
10003440:	d000      	beq.n	10003444 <__aeabi_fdiv+0x1a4>
10003442:	3504      	adds	r5, #4
10003444:	012b      	lsls	r3, r5, #4
10003446:	d503      	bpl.n	10003450 <__aeabi_fdiv+0x1b0>
10003448:	4a31      	ldr	r2, [pc, #196]	; (10003510 <__aeabi_fdiv+0x270>)
1000344a:	4649      	mov	r1, r9
1000344c:	4015      	ands	r5, r2
1000344e:	3180      	adds	r1, #128	; 0x80
10003450:	29fe      	cmp	r1, #254	; 0xfe
10003452:	dcb0      	bgt.n	100033b6 <__aeabi_fdiv+0x116>
10003454:	01a8      	lsls	r0, r5, #6
10003456:	0a45      	lsrs	r5, r0, #9
10003458:	b2ce      	uxtb	r6, r1
1000345a:	9b01      	ldr	r3, [sp, #4]
1000345c:	e7ae      	b.n	100033bc <__aeabi_fdiv+0x11c>
1000345e:	2600      	movs	r6, #0
10003460:	2500      	movs	r5, #0
10003462:	e7ab      	b.n	100033bc <__aeabi_fdiv+0x11c>
10003464:	2080      	movs	r0, #128	; 0x80
10003466:	03c1      	lsls	r1, r0, #15
10003468:	420d      	tst	r5, r1
1000346a:	d011      	beq.n	10003490 <__aeabi_fdiv+0x1f0>
1000346c:	420e      	tst	r6, r1
1000346e:	d10f      	bne.n	10003490 <__aeabi_fdiv+0x1f0>
10003470:	430e      	orrs	r6, r1
10003472:	0273      	lsls	r3, r6, #9
10003474:	0a5d      	lsrs	r5, r3, #9
10003476:	26ff      	movs	r6, #255	; 0xff
10003478:	465b      	mov	r3, fp
1000347a:	e79f      	b.n	100033bc <__aeabi_fdiv+0x11c>
1000347c:	9701      	str	r7, [sp, #4]
1000347e:	4653      	mov	r3, sl
10003480:	e7d1      	b.n	10003426 <__aeabi_fdiv+0x186>
10003482:	1b49      	subs	r1, r1, r5
10003484:	241a      	movs	r4, #26
10003486:	2601      	movs	r6, #1
10003488:	e74c      	b.n	10003324 <__aeabi_fdiv+0x84>
1000348a:	1b5b      	subs	r3, r3, r5
1000348c:	433e      	orrs	r6, r7
1000348e:	e755      	b.n	1000333c <__aeabi_fdiv+0x9c>
10003490:	430d      	orrs	r5, r1
10003492:	026a      	lsls	r2, r5, #9
10003494:	0a55      	lsrs	r5, r2, #9
10003496:	1c3b      	adds	r3, r7, #0
10003498:	26ff      	movs	r6, #255	; 0xff
1000349a:	e78f      	b.n	100033bc <__aeabi_fdiv+0x11c>
1000349c:	1c1d      	adds	r5, r3, #0
1000349e:	1e6b      	subs	r3, r5, #1
100034a0:	419d      	sbcs	r5, r3
100034a2:	4335      	orrs	r5, r6
100034a4:	e7c5      	b.n	10003432 <__aeabi_fdiv+0x192>
100034a6:	247e      	movs	r4, #126	; 0x7e
100034a8:	4267      	negs	r7, r4
100034aa:	464a      	mov	r2, r9
100034ac:	1ab9      	subs	r1, r7, r2
100034ae:	291b      	cmp	r1, #27
100034b0:	dd08      	ble.n	100034c4 <__aeabi_fdiv+0x224>
100034b2:	9b01      	ldr	r3, [sp, #4]
100034b4:	2600      	movs	r6, #0
100034b6:	2500      	movs	r5, #0
100034b8:	e780      	b.n	100033bc <__aeabi_fdiv+0x11c>
100034ba:	9d01      	ldr	r5, [sp, #4]
100034bc:	2600      	movs	r6, #0
100034be:	402b      	ands	r3, r5
100034c0:	2500      	movs	r5, #0
100034c2:	e77b      	b.n	100033bc <__aeabi_fdiv+0x11c>
100034c4:	464e      	mov	r6, r9
100034c6:	369e      	adds	r6, #158	; 0x9e
100034c8:	1c28      	adds	r0, r5, #0
100034ca:	40b5      	lsls	r5, r6
100034cc:	1c2b      	adds	r3, r5, #0
100034ce:	1e5d      	subs	r5, r3, #1
100034d0:	41ab      	sbcs	r3, r5
100034d2:	40c8      	lsrs	r0, r1
100034d4:	4303      	orrs	r3, r0
100034d6:	250f      	movs	r5, #15
100034d8:	401d      	ands	r5, r3
100034da:	2d04      	cmp	r5, #4
100034dc:	d000      	beq.n	100034e0 <__aeabi_fdiv+0x240>
100034de:	3304      	adds	r3, #4
100034e0:	015a      	lsls	r2, r3, #5
100034e2:	d503      	bpl.n	100034ec <__aeabi_fdiv+0x24c>
100034e4:	9b01      	ldr	r3, [sp, #4]
100034e6:	2601      	movs	r6, #1
100034e8:	2500      	movs	r5, #0
100034ea:	e767      	b.n	100033bc <__aeabi_fdiv+0x11c>
100034ec:	019c      	lsls	r4, r3, #6
100034ee:	0a65      	lsrs	r5, r4, #9
100034f0:	9b01      	ldr	r3, [sp, #4]
100034f2:	2600      	movs	r6, #0
100034f4:	e762      	b.n	100033bc <__aeabi_fdiv+0x11c>
100034f6:	2780      	movs	r7, #128	; 0x80
100034f8:	03fc      	lsls	r4, r7, #15
100034fa:	4325      	orrs	r5, r4
100034fc:	026e      	lsls	r6, r5, #9
100034fe:	0a75      	lsrs	r5, r6, #9
10003500:	9b01      	ldr	r3, [sp, #4]
10003502:	26ff      	movs	r6, #255	; 0xff
10003504:	e75a      	b.n	100033bc <__aeabi_fdiv+0x11c>
10003506:	46c0      	nop			; (mov r8, r8)
10003508:	10004d40 	.word	0x10004d40
1000350c:	007fffff 	.word	0x007fffff
10003510:	f7ffffff 	.word	0xf7ffffff

10003514 <__eqsf2>:
10003514:	0243      	lsls	r3, r0, #9
10003516:	0042      	lsls	r2, r0, #1
10003518:	b570      	push	{r4, r5, r6, lr}
1000351a:	0a5c      	lsrs	r4, r3, #9
1000351c:	0fc6      	lsrs	r6, r0, #31
1000351e:	0e13      	lsrs	r3, r2, #24
10003520:	0248      	lsls	r0, r1, #9
10003522:	004a      	lsls	r2, r1, #1
10003524:	0a45      	lsrs	r5, r0, #9
10003526:	0e12      	lsrs	r2, r2, #24
10003528:	0fc9      	lsrs	r1, r1, #31
1000352a:	2bff      	cmp	r3, #255	; 0xff
1000352c:	d005      	beq.n	1000353a <__eqsf2+0x26>
1000352e:	2aff      	cmp	r2, #255	; 0xff
10003530:	d008      	beq.n	10003544 <__eqsf2+0x30>
10003532:	2001      	movs	r0, #1
10003534:	4293      	cmp	r3, r2
10003536:	d00b      	beq.n	10003550 <__eqsf2+0x3c>
10003538:	bd70      	pop	{r4, r5, r6, pc}
1000353a:	2001      	movs	r0, #1
1000353c:	2c00      	cmp	r4, #0
1000353e:	d1fb      	bne.n	10003538 <__eqsf2+0x24>
10003540:	2aff      	cmp	r2, #255	; 0xff
10003542:	d1f6      	bne.n	10003532 <__eqsf2+0x1e>
10003544:	2001      	movs	r0, #1
10003546:	2d00      	cmp	r5, #0
10003548:	d1f6      	bne.n	10003538 <__eqsf2+0x24>
1000354a:	2001      	movs	r0, #1
1000354c:	4293      	cmp	r3, r2
1000354e:	d1f3      	bne.n	10003538 <__eqsf2+0x24>
10003550:	42ac      	cmp	r4, r5
10003552:	d1f1      	bne.n	10003538 <__eqsf2+0x24>
10003554:	428e      	cmp	r6, r1
10003556:	d003      	beq.n	10003560 <__eqsf2+0x4c>
10003558:	2b00      	cmp	r3, #0
1000355a:	d1ed      	bne.n	10003538 <__eqsf2+0x24>
1000355c:	2c00      	cmp	r4, #0
1000355e:	d1eb      	bne.n	10003538 <__eqsf2+0x24>
10003560:	2000      	movs	r0, #0
10003562:	e7e9      	b.n	10003538 <__eqsf2+0x24>

10003564 <__gesf2>:
10003564:	b5f0      	push	{r4, r5, r6, r7, lr}
10003566:	0243      	lsls	r3, r0, #9
10003568:	0042      	lsls	r2, r0, #1
1000356a:	004f      	lsls	r7, r1, #1
1000356c:	0fc6      	lsrs	r6, r0, #31
1000356e:	0248      	lsls	r0, r1, #9
10003570:	0a5c      	lsrs	r4, r3, #9
10003572:	0a45      	lsrs	r5, r0, #9
10003574:	0e13      	lsrs	r3, r2, #24
10003576:	0fc9      	lsrs	r1, r1, #31
10003578:	0e3a      	lsrs	r2, r7, #24
1000357a:	2bff      	cmp	r3, #255	; 0xff
1000357c:	d026      	beq.n	100035cc <__gesf2+0x68>
1000357e:	2aff      	cmp	r2, #255	; 0xff
10003580:	d029      	beq.n	100035d6 <__gesf2+0x72>
10003582:	2b00      	cmp	r3, #0
10003584:	d10c      	bne.n	100035a0 <__gesf2+0x3c>
10003586:	4260      	negs	r0, r4
10003588:	4160      	adcs	r0, r4
1000358a:	4684      	mov	ip, r0
1000358c:	2a00      	cmp	r2, #0
1000358e:	d00a      	beq.n	100035a6 <__gesf2+0x42>
10003590:	2800      	cmp	r0, #0
10003592:	d116      	bne.n	100035c2 <__gesf2+0x5e>
10003594:	428e      	cmp	r6, r1
10003596:	d021      	beq.n	100035dc <__gesf2+0x78>
10003598:	2e00      	cmp	r6, #0
1000359a:	d114      	bne.n	100035c6 <__gesf2+0x62>
1000359c:	2001      	movs	r0, #1
1000359e:	e014      	b.n	100035ca <__gesf2+0x66>
100035a0:	2a00      	cmp	r2, #0
100035a2:	d1f7      	bne.n	10003594 <__gesf2+0x30>
100035a4:	4694      	mov	ip, r2
100035a6:	426f      	negs	r7, r5
100035a8:	416f      	adcs	r7, r5
100035aa:	4660      	mov	r0, ip
100035ac:	2800      	cmp	r0, #0
100035ae:	d105      	bne.n	100035bc <__gesf2+0x58>
100035b0:	2f00      	cmp	r7, #0
100035b2:	d0ef      	beq.n	10003594 <__gesf2+0x30>
100035b4:	2001      	movs	r0, #1
100035b6:	2e00      	cmp	r6, #0
100035b8:	d007      	beq.n	100035ca <__gesf2+0x66>
100035ba:	e004      	b.n	100035c6 <__gesf2+0x62>
100035bc:	2000      	movs	r0, #0
100035be:	2f00      	cmp	r7, #0
100035c0:	d103      	bne.n	100035ca <__gesf2+0x66>
100035c2:	2900      	cmp	r1, #0
100035c4:	d1ea      	bne.n	1000359c <__gesf2+0x38>
100035c6:	2101      	movs	r1, #1
100035c8:	4248      	negs	r0, r1
100035ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
100035cc:	2c00      	cmp	r4, #0
100035ce:	d0d6      	beq.n	1000357e <__gesf2+0x1a>
100035d0:	2202      	movs	r2, #2
100035d2:	4250      	negs	r0, r2
100035d4:	e7f9      	b.n	100035ca <__gesf2+0x66>
100035d6:	2d00      	cmp	r5, #0
100035d8:	d0d3      	beq.n	10003582 <__gesf2+0x1e>
100035da:	e7f9      	b.n	100035d0 <__gesf2+0x6c>
100035dc:	4293      	cmp	r3, r2
100035de:	dcdb      	bgt.n	10003598 <__gesf2+0x34>
100035e0:	db04      	blt.n	100035ec <__gesf2+0x88>
100035e2:	42ac      	cmp	r4, r5
100035e4:	d8d8      	bhi.n	10003598 <__gesf2+0x34>
100035e6:	2000      	movs	r0, #0
100035e8:	42ac      	cmp	r4, r5
100035ea:	d2ee      	bcs.n	100035ca <__gesf2+0x66>
100035ec:	2e00      	cmp	r6, #0
100035ee:	d0ea      	beq.n	100035c6 <__gesf2+0x62>
100035f0:	2001      	movs	r0, #1
100035f2:	e7ea      	b.n	100035ca <__gesf2+0x66>

100035f4 <__lesf2>:
100035f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100035f6:	0243      	lsls	r3, r0, #9
100035f8:	0042      	lsls	r2, r0, #1
100035fa:	004f      	lsls	r7, r1, #1
100035fc:	0fc6      	lsrs	r6, r0, #31
100035fe:	0248      	lsls	r0, r1, #9
10003600:	0a5c      	lsrs	r4, r3, #9
10003602:	0a45      	lsrs	r5, r0, #9
10003604:	0e13      	lsrs	r3, r2, #24
10003606:	0fc9      	lsrs	r1, r1, #31
10003608:	0e3a      	lsrs	r2, r7, #24
1000360a:	2bff      	cmp	r3, #255	; 0xff
1000360c:	d026      	beq.n	1000365c <__lesf2+0x68>
1000360e:	2aff      	cmp	r2, #255	; 0xff
10003610:	d028      	beq.n	10003664 <__lesf2+0x70>
10003612:	2b00      	cmp	r3, #0
10003614:	d00f      	beq.n	10003636 <__lesf2+0x42>
10003616:	2a00      	cmp	r2, #0
10003618:	d114      	bne.n	10003644 <__lesf2+0x50>
1000361a:	4694      	mov	ip, r2
1000361c:	426f      	negs	r7, r5
1000361e:	416f      	adcs	r7, r5
10003620:	4660      	mov	r0, ip
10003622:	2800      	cmp	r0, #0
10003624:	d014      	beq.n	10003650 <__lesf2+0x5c>
10003626:	2000      	movs	r0, #0
10003628:	2f00      	cmp	r7, #0
1000362a:	d103      	bne.n	10003634 <__lesf2+0x40>
1000362c:	2900      	cmp	r1, #0
1000362e:	d10d      	bne.n	1000364c <__lesf2+0x58>
10003630:	2101      	movs	r1, #1
10003632:	4248      	negs	r0, r1
10003634:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003636:	4260      	negs	r0, r4
10003638:	4160      	adcs	r0, r4
1000363a:	4684      	mov	ip, r0
1000363c:	2a00      	cmp	r2, #0
1000363e:	d0ed      	beq.n	1000361c <__lesf2+0x28>
10003640:	2800      	cmp	r0, #0
10003642:	d1f3      	bne.n	1000362c <__lesf2+0x38>
10003644:	428e      	cmp	r6, r1
10003646:	d011      	beq.n	1000366c <__lesf2+0x78>
10003648:	2e00      	cmp	r6, #0
1000364a:	d1f1      	bne.n	10003630 <__lesf2+0x3c>
1000364c:	2001      	movs	r0, #1
1000364e:	e7f1      	b.n	10003634 <__lesf2+0x40>
10003650:	2f00      	cmp	r7, #0
10003652:	d0f7      	beq.n	10003644 <__lesf2+0x50>
10003654:	2001      	movs	r0, #1
10003656:	2e00      	cmp	r6, #0
10003658:	d0ec      	beq.n	10003634 <__lesf2+0x40>
1000365a:	e7e9      	b.n	10003630 <__lesf2+0x3c>
1000365c:	2002      	movs	r0, #2
1000365e:	2c00      	cmp	r4, #0
10003660:	d1e8      	bne.n	10003634 <__lesf2+0x40>
10003662:	e7d4      	b.n	1000360e <__lesf2+0x1a>
10003664:	2002      	movs	r0, #2
10003666:	2d00      	cmp	r5, #0
10003668:	d1e4      	bne.n	10003634 <__lesf2+0x40>
1000366a:	e7d2      	b.n	10003612 <__lesf2+0x1e>
1000366c:	4293      	cmp	r3, r2
1000366e:	dceb      	bgt.n	10003648 <__lesf2+0x54>
10003670:	db04      	blt.n	1000367c <__lesf2+0x88>
10003672:	42ac      	cmp	r4, r5
10003674:	d8e8      	bhi.n	10003648 <__lesf2+0x54>
10003676:	2000      	movs	r0, #0
10003678:	42ac      	cmp	r4, r5
1000367a:	d2db      	bcs.n	10003634 <__lesf2+0x40>
1000367c:	2e00      	cmp	r6, #0
1000367e:	d0d7      	beq.n	10003630 <__lesf2+0x3c>
10003680:	2001      	movs	r0, #1
10003682:	e7d7      	b.n	10003634 <__lesf2+0x40>

10003684 <__aeabi_fsub>:
10003684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003686:	0243      	lsls	r3, r0, #9
10003688:	0045      	lsls	r5, r0, #1
1000368a:	024f      	lsls	r7, r1, #9
1000368c:	004c      	lsls	r4, r1, #1
1000368e:	0fc2      	lsrs	r2, r0, #31
10003690:	0998      	lsrs	r0, r3, #6
10003692:	4684      	mov	ip, r0
10003694:	0e2d      	lsrs	r5, r5, #24
10003696:	0e20      	lsrs	r0, r4, #24
10003698:	0fc9      	lsrs	r1, r1, #31
1000369a:	09bf      	lsrs	r7, r7, #6
1000369c:	28ff      	cmp	r0, #255	; 0xff
1000369e:	d054      	beq.n	1000374a <__aeabi_fsub+0xc6>
100036a0:	2601      	movs	r6, #1
100036a2:	4071      	eors	r1, r6
100036a4:	428a      	cmp	r2, r1
100036a6:	d03b      	beq.n	10003720 <__aeabi_fsub+0x9c>
100036a8:	1a2c      	subs	r4, r5, r0
100036aa:	2c00      	cmp	r4, #0
100036ac:	dc00      	bgt.n	100036b0 <__aeabi_fsub+0x2c>
100036ae:	e089      	b.n	100037c4 <__aeabi_fsub+0x140>
100036b0:	2800      	cmp	r0, #0
100036b2:	d125      	bne.n	10003700 <__aeabi_fsub+0x7c>
100036b4:	2f00      	cmp	r7, #0
100036b6:	d14b      	bne.n	10003750 <__aeabi_fsub+0xcc>
100036b8:	1c6e      	adds	r6, r5, #1
100036ba:	1c2c      	adds	r4, r5, #0
100036bc:	4663      	mov	r3, ip
100036be:	1c15      	adds	r5, r2, #0
100036c0:	220f      	movs	r2, #15
100036c2:	401a      	ands	r2, r3
100036c4:	2a04      	cmp	r2, #4
100036c6:	d000      	beq.n	100036ca <__aeabi_fsub+0x46>
100036c8:	3304      	adds	r3, #4
100036ca:	2780      	movs	r7, #128	; 0x80
100036cc:	04f9      	lsls	r1, r7, #19
100036ce:	2201      	movs	r2, #1
100036d0:	4019      	ands	r1, r3
100036d2:	402a      	ands	r2, r5
100036d4:	2900      	cmp	r1, #0
100036d6:	d006      	beq.n	100036e6 <__aeabi_fsub+0x62>
100036d8:	2eff      	cmp	r6, #255	; 0xff
100036da:	d100      	bne.n	100036de <__aeabi_fsub+0x5a>
100036dc:	e081      	b.n	100037e2 <__aeabi_fsub+0x15e>
100036de:	4db1      	ldr	r5, [pc, #708]	; (100039a4 <__aeabi_fsub+0x320>)
100036e0:	1c34      	adds	r4, r6, #0
100036e2:	402b      	ands	r3, r5
100036e4:	3601      	adds	r6, #1
100036e6:	b2f6      	uxtb	r6, r6
100036e8:	08dd      	lsrs	r5, r3, #3
100036ea:	2e01      	cmp	r6, #1
100036ec:	dd62      	ble.n	100037b4 <__aeabi_fsub+0x130>
100036ee:	026b      	lsls	r3, r5, #9
100036f0:	0a5d      	lsrs	r5, r3, #9
100036f2:	b2e4      	uxtb	r4, r4
100036f4:	05e4      	lsls	r4, r4, #23
100036f6:	4325      	orrs	r5, r4
100036f8:	1c28      	adds	r0, r5, #0
100036fa:	07d2      	lsls	r2, r2, #31
100036fc:	4310      	orrs	r0, r2
100036fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10003700:	2dff      	cmp	r5, #255	; 0xff
10003702:	d051      	beq.n	100037a8 <__aeabi_fsub+0x124>
10003704:	2180      	movs	r1, #128	; 0x80
10003706:	04cb      	lsls	r3, r1, #19
10003708:	431f      	orrs	r7, r3
1000370a:	2601      	movs	r6, #1
1000370c:	2c1b      	cmp	r4, #27
1000370e:	dd70      	ble.n	100037f2 <__aeabi_fsub+0x16e>
10003710:	4667      	mov	r7, ip
10003712:	1c2c      	adds	r4, r5, #0
10003714:	1bbb      	subs	r3, r7, r6
10003716:	1c15      	adds	r5, r2, #0
10003718:	0158      	lsls	r0, r3, #5
1000371a:	d422      	bmi.n	10003762 <__aeabi_fsub+0xde>
1000371c:	1c66      	adds	r6, r4, #1
1000371e:	e7cf      	b.n	100036c0 <__aeabi_fsub+0x3c>
10003720:	1a2e      	subs	r6, r5, r0
10003722:	2e00      	cmp	r6, #0
10003724:	dd76      	ble.n	10003814 <__aeabi_fsub+0x190>
10003726:	2800      	cmp	r0, #0
10003728:	d032      	beq.n	10003790 <__aeabi_fsub+0x10c>
1000372a:	2dff      	cmp	r5, #255	; 0xff
1000372c:	d03c      	beq.n	100037a8 <__aeabi_fsub+0x124>
1000372e:	2480      	movs	r4, #128	; 0x80
10003730:	04e1      	lsls	r1, r4, #19
10003732:	430f      	orrs	r7, r1
10003734:	2301      	movs	r3, #1
10003736:	2e1b      	cmp	r6, #27
10003738:	dc00      	bgt.n	1000373c <__aeabi_fsub+0xb8>
1000373a:	e0d1      	b.n	100038e0 <__aeabi_fsub+0x25c>
1000373c:	4463      	add	r3, ip
1000373e:	1c2c      	adds	r4, r5, #0
10003740:	0158      	lsls	r0, r3, #5
10003742:	d47a      	bmi.n	1000383a <__aeabi_fsub+0x1b6>
10003744:	1c66      	adds	r6, r4, #1
10003746:	1c15      	adds	r5, r2, #0
10003748:	e7ba      	b.n	100036c0 <__aeabi_fsub+0x3c>
1000374a:	2f00      	cmp	r7, #0
1000374c:	d1aa      	bne.n	100036a4 <__aeabi_fsub+0x20>
1000374e:	e7a7      	b.n	100036a0 <__aeabi_fsub+0x1c>
10003750:	3c01      	subs	r4, #1
10003752:	2c00      	cmp	r4, #0
10003754:	d16d      	bne.n	10003832 <__aeabi_fsub+0x1ae>
10003756:	4663      	mov	r3, ip
10003758:	1c2c      	adds	r4, r5, #0
1000375a:	1bdb      	subs	r3, r3, r7
1000375c:	1c15      	adds	r5, r2, #0
1000375e:	0158      	lsls	r0, r3, #5
10003760:	d5dc      	bpl.n	1000371c <__aeabi_fsub+0x98>
10003762:	019a      	lsls	r2, r3, #6
10003764:	0996      	lsrs	r6, r2, #6
10003766:	1c30      	adds	r0, r6, #0
10003768:	f001 f852 	bl	10004810 <__clzsi2>
1000376c:	3805      	subs	r0, #5
1000376e:	4086      	lsls	r6, r0
10003770:	4284      	cmp	r4, r0
10003772:	dc39      	bgt.n	100037e8 <__aeabi_fsub+0x164>
10003774:	1b00      	subs	r0, r0, r4
10003776:	231f      	movs	r3, #31
10003778:	1a1a      	subs	r2, r3, r0
1000377a:	1c33      	adds	r3, r6, #0
1000377c:	1c31      	adds	r1, r6, #0
1000377e:	1c44      	adds	r4, r0, #1
10003780:	4093      	lsls	r3, r2
10003782:	40e1      	lsrs	r1, r4
10003784:	1e5e      	subs	r6, r3, #1
10003786:	41b3      	sbcs	r3, r6
10003788:	430b      	orrs	r3, r1
1000378a:	2601      	movs	r6, #1
1000378c:	2400      	movs	r4, #0
1000378e:	e797      	b.n	100036c0 <__aeabi_fsub+0x3c>
10003790:	2f00      	cmp	r7, #0
10003792:	d100      	bne.n	10003796 <__aeabi_fsub+0x112>
10003794:	e790      	b.n	100036b8 <__aeabi_fsub+0x34>
10003796:	3e01      	subs	r6, #1
10003798:	2e00      	cmp	r6, #0
1000379a:	d103      	bne.n	100037a4 <__aeabi_fsub+0x120>
1000379c:	4664      	mov	r4, ip
1000379e:	193b      	adds	r3, r7, r4
100037a0:	1c2c      	adds	r4, r5, #0
100037a2:	e7cd      	b.n	10003740 <__aeabi_fsub+0xbc>
100037a4:	2dff      	cmp	r5, #255	; 0xff
100037a6:	d1c5      	bne.n	10003734 <__aeabi_fsub+0xb0>
100037a8:	1c15      	adds	r5, r2, #0
100037aa:	2280      	movs	r2, #128	; 0x80
100037ac:	4663      	mov	r3, ip
100037ae:	0056      	lsls	r6, r2, #1
100037b0:	24ff      	movs	r4, #255	; 0xff
100037b2:	e785      	b.n	100036c0 <__aeabi_fsub+0x3c>
100037b4:	2d00      	cmp	r5, #0
100037b6:	d09c      	beq.n	100036f2 <__aeabi_fsub+0x6e>
100037b8:	2c00      	cmp	r4, #0
100037ba:	d028      	beq.n	1000380e <__aeabi_fsub+0x18a>
100037bc:	2080      	movs	r0, #128	; 0x80
100037be:	03c7      	lsls	r7, r0, #15
100037c0:	433d      	orrs	r5, r7
100037c2:	e794      	b.n	100036ee <__aeabi_fsub+0x6a>
100037c4:	2c00      	cmp	r4, #0
100037c6:	d145      	bne.n	10003854 <__aeabi_fsub+0x1d0>
100037c8:	1c6b      	adds	r3, r5, #1
100037ca:	b2d8      	uxtb	r0, r3
100037cc:	2801      	cmp	r0, #1
100037ce:	dc00      	bgt.n	100037d2 <__aeabi_fsub+0x14e>
100037d0:	e090      	b.n	100038f4 <__aeabi_fsub+0x270>
100037d2:	4664      	mov	r4, ip
100037d4:	1be6      	subs	r6, r4, r7
100037d6:	0173      	lsls	r3, r6, #5
100037d8:	d557      	bpl.n	1000388a <__aeabi_fsub+0x206>
100037da:	1b3e      	subs	r6, r7, r4
100037dc:	1c2c      	adds	r4, r5, #0
100037de:	1c0d      	adds	r5, r1, #0
100037e0:	e7c1      	b.n	10003766 <__aeabi_fsub+0xe2>
100037e2:	24ff      	movs	r4, #255	; 0xff
100037e4:	2500      	movs	r5, #0
100037e6:	e785      	b.n	100036f4 <__aeabi_fsub+0x70>
100037e8:	4b6e      	ldr	r3, [pc, #440]	; (100039a4 <__aeabi_fsub+0x320>)
100037ea:	1a24      	subs	r4, r4, r0
100037ec:	4033      	ands	r3, r6
100037ee:	1c66      	adds	r6, r4, #1
100037f0:	e766      	b.n	100036c0 <__aeabi_fsub+0x3c>
100037f2:	1c38      	adds	r0, r7, #0
100037f4:	2120      	movs	r1, #32
100037f6:	40e0      	lsrs	r0, r4
100037f8:	1b0c      	subs	r4, r1, r4
100037fa:	40a7      	lsls	r7, r4
100037fc:	1c3e      	adds	r6, r7, #0
100037fe:	1e77      	subs	r7, r6, #1
10003800:	41be      	sbcs	r6, r7
10003802:	4306      	orrs	r6, r0
10003804:	4667      	mov	r7, ip
10003806:	1c2c      	adds	r4, r5, #0
10003808:	1bbb      	subs	r3, r7, r6
1000380a:	1c15      	adds	r5, r2, #0
1000380c:	e784      	b.n	10003718 <__aeabi_fsub+0x94>
1000380e:	0269      	lsls	r1, r5, #9
10003810:	0a4d      	lsrs	r5, r1, #9
10003812:	e76f      	b.n	100036f4 <__aeabi_fsub+0x70>
10003814:	2e00      	cmp	r6, #0
10003816:	d179      	bne.n	1000390c <__aeabi_fsub+0x288>
10003818:	1c6c      	adds	r4, r5, #1
1000381a:	b2e0      	uxtb	r0, r4
1000381c:	2801      	cmp	r0, #1
1000381e:	dd4b      	ble.n	100038b8 <__aeabi_fsub+0x234>
10003820:	2cff      	cmp	r4, #255	; 0xff
10003822:	d100      	bne.n	10003826 <__aeabi_fsub+0x1a2>
10003824:	e098      	b.n	10003958 <__aeabi_fsub+0x2d4>
10003826:	4661      	mov	r1, ip
10003828:	187f      	adds	r7, r7, r1
1000382a:	1cae      	adds	r6, r5, #2
1000382c:	087b      	lsrs	r3, r7, #1
1000382e:	1c15      	adds	r5, r2, #0
10003830:	e746      	b.n	100036c0 <__aeabi_fsub+0x3c>
10003832:	2dff      	cmp	r5, #255	; 0xff
10003834:	d000      	beq.n	10003838 <__aeabi_fsub+0x1b4>
10003836:	e768      	b.n	1000370a <__aeabi_fsub+0x86>
10003838:	e7b6      	b.n	100037a8 <__aeabi_fsub+0x124>
1000383a:	1c67      	adds	r7, r4, #1
1000383c:	2fff      	cmp	r7, #255	; 0xff
1000383e:	d036      	beq.n	100038ae <__aeabi_fsub+0x22a>
10003840:	4858      	ldr	r0, [pc, #352]	; (100039a4 <__aeabi_fsub+0x320>)
10003842:	2101      	movs	r1, #1
10003844:	4019      	ands	r1, r3
10003846:	4003      	ands	r3, r0
10003848:	085b      	lsrs	r3, r3, #1
1000384a:	1ca6      	adds	r6, r4, #2
1000384c:	430b      	orrs	r3, r1
1000384e:	1c3c      	adds	r4, r7, #0
10003850:	1c15      	adds	r5, r2, #0
10003852:	e735      	b.n	100036c0 <__aeabi_fsub+0x3c>
10003854:	4266      	negs	r6, r4
10003856:	2d00      	cmp	r5, #0
10003858:	d01e      	beq.n	10003898 <__aeabi_fsub+0x214>
1000385a:	28ff      	cmp	r0, #255	; 0xff
1000385c:	d06f      	beq.n	1000393e <__aeabi_fsub+0x2ba>
1000385e:	2580      	movs	r5, #128	; 0x80
10003860:	4662      	mov	r2, ip
10003862:	04eb      	lsls	r3, r5, #19
10003864:	431a      	orrs	r2, r3
10003866:	4694      	mov	ip, r2
10003868:	2501      	movs	r5, #1
1000386a:	2e1b      	cmp	r6, #27
1000386c:	dc09      	bgt.n	10003882 <__aeabi_fsub+0x1fe>
1000386e:	4662      	mov	r2, ip
10003870:	2320      	movs	r3, #32
10003872:	40f2      	lsrs	r2, r6
10003874:	4664      	mov	r4, ip
10003876:	1b9e      	subs	r6, r3, r6
10003878:	40b4      	lsls	r4, r6
1000387a:	1c25      	adds	r5, r4, #0
1000387c:	1e6c      	subs	r4, r5, #1
1000387e:	41a5      	sbcs	r5, r4
10003880:	4315      	orrs	r5, r2
10003882:	1b7b      	subs	r3, r7, r5
10003884:	1c04      	adds	r4, r0, #0
10003886:	1c0d      	adds	r5, r1, #0
10003888:	e769      	b.n	1000375e <__aeabi_fsub+0xda>
1000388a:	2e00      	cmp	r6, #0
1000388c:	d10c      	bne.n	100038a8 <__aeabi_fsub+0x224>
1000388e:	2200      	movs	r2, #0
10003890:	2601      	movs	r6, #1
10003892:	2304      	movs	r3, #4
10003894:	2400      	movs	r4, #0
10003896:	e726      	b.n	100036e6 <__aeabi_fsub+0x62>
10003898:	4664      	mov	r4, ip
1000389a:	2c00      	cmp	r4, #0
1000389c:	d155      	bne.n	1000394a <__aeabi_fsub+0x2c6>
1000389e:	1c46      	adds	r6, r0, #1
100038a0:	1c3b      	adds	r3, r7, #0
100038a2:	1c04      	adds	r4, r0, #0
100038a4:	1c0d      	adds	r5, r1, #0
100038a6:	e70b      	b.n	100036c0 <__aeabi_fsub+0x3c>
100038a8:	1c2c      	adds	r4, r5, #0
100038aa:	1c15      	adds	r5, r2, #0
100038ac:	e75b      	b.n	10003766 <__aeabi_fsub+0xe2>
100038ae:	2380      	movs	r3, #128	; 0x80
100038b0:	005e      	lsls	r6, r3, #1
100038b2:	24ff      	movs	r4, #255	; 0xff
100038b4:	2304      	movs	r3, #4
100038b6:	e716      	b.n	100036e6 <__aeabi_fsub+0x62>
100038b8:	2d00      	cmp	r5, #0
100038ba:	d000      	beq.n	100038be <__aeabi_fsub+0x23a>
100038bc:	e08d      	b.n	100039da <__aeabi_fsub+0x356>
100038be:	4665      	mov	r5, ip
100038c0:	2d00      	cmp	r5, #0
100038c2:	d100      	bne.n	100038c6 <__aeabi_fsub+0x242>
100038c4:	e0ad      	b.n	10003a22 <__aeabi_fsub+0x39e>
100038c6:	2f00      	cmp	r7, #0
100038c8:	d100      	bne.n	100038cc <__aeabi_fsub+0x248>
100038ca:	e081      	b.n	100039d0 <__aeabi_fsub+0x34c>
100038cc:	197b      	adds	r3, r7, r5
100038ce:	015c      	lsls	r4, r3, #5
100038d0:	d400      	bmi.n	100038d4 <__aeabi_fsub+0x250>
100038d2:	e07e      	b.n	100039d2 <__aeabi_fsub+0x34e>
100038d4:	4f33      	ldr	r7, [pc, #204]	; (100039a4 <__aeabi_fsub+0x320>)
100038d6:	1c15      	adds	r5, r2, #0
100038d8:	403b      	ands	r3, r7
100038da:	2602      	movs	r6, #2
100038dc:	2401      	movs	r4, #1
100038de:	e6ef      	b.n	100036c0 <__aeabi_fsub+0x3c>
100038e0:	1c38      	adds	r0, r7, #0
100038e2:	2320      	movs	r3, #32
100038e4:	40f0      	lsrs	r0, r6
100038e6:	1b9e      	subs	r6, r3, r6
100038e8:	40b7      	lsls	r7, r6
100038ea:	1c3b      	adds	r3, r7, #0
100038ec:	1e5f      	subs	r7, r3, #1
100038ee:	41bb      	sbcs	r3, r7
100038f0:	4303      	orrs	r3, r0
100038f2:	e723      	b.n	1000373c <__aeabi_fsub+0xb8>
100038f4:	2d00      	cmp	r5, #0
100038f6:	d115      	bne.n	10003924 <__aeabi_fsub+0x2a0>
100038f8:	4665      	mov	r5, ip
100038fa:	2d00      	cmp	r5, #0
100038fc:	d147      	bne.n	1000398e <__aeabi_fsub+0x30a>
100038fe:	2f00      	cmp	r7, #0
10003900:	d0c5      	beq.n	1000388e <__aeabi_fsub+0x20a>
10003902:	1c3b      	adds	r3, r7, #0
10003904:	1c0d      	adds	r5, r1, #0
10003906:	2601      	movs	r6, #1
10003908:	2400      	movs	r4, #0
1000390a:	e6d9      	b.n	100036c0 <__aeabi_fsub+0x3c>
1000390c:	4276      	negs	r6, r6
1000390e:	2d00      	cmp	r5, #0
10003910:	d126      	bne.n	10003960 <__aeabi_fsub+0x2dc>
10003912:	4665      	mov	r5, ip
10003914:	2d00      	cmp	r5, #0
10003916:	d000      	beq.n	1000391a <__aeabi_fsub+0x296>
10003918:	e07d      	b.n	10003a16 <__aeabi_fsub+0x392>
1000391a:	1c46      	adds	r6, r0, #1
1000391c:	1c3b      	adds	r3, r7, #0
1000391e:	1c04      	adds	r4, r0, #0
10003920:	1c15      	adds	r5, r2, #0
10003922:	e6cd      	b.n	100036c0 <__aeabi_fsub+0x3c>
10003924:	4665      	mov	r5, ip
10003926:	2d00      	cmp	r5, #0
10003928:	d140      	bne.n	100039ac <__aeabi_fsub+0x328>
1000392a:	2f00      	cmp	r7, #0
1000392c:	d107      	bne.n	1000393e <__aeabi_fsub+0x2ba>
1000392e:	2180      	movs	r1, #128	; 0x80
10003930:	2200      	movs	r2, #0
10003932:	004e      	lsls	r6, r1, #1
10003934:	4b1c      	ldr	r3, [pc, #112]	; (100039a8 <__aeabi_fsub+0x324>)
10003936:	24ff      	movs	r4, #255	; 0xff
10003938:	e6d5      	b.n	100036e6 <__aeabi_fsub+0x62>
1000393a:	28ff      	cmp	r0, #255	; 0xff
1000393c:	d194      	bne.n	10003868 <__aeabi_fsub+0x1e4>
1000393e:	2080      	movs	r0, #128	; 0x80
10003940:	1c3b      	adds	r3, r7, #0
10003942:	1c0d      	adds	r5, r1, #0
10003944:	0046      	lsls	r6, r0, #1
10003946:	24ff      	movs	r4, #255	; 0xff
10003948:	e6ba      	b.n	100036c0 <__aeabi_fsub+0x3c>
1000394a:	3e01      	subs	r6, #1
1000394c:	2e00      	cmp	r6, #0
1000394e:	d1f4      	bne.n	1000393a <__aeabi_fsub+0x2b6>
10003950:	1b3b      	subs	r3, r7, r4
10003952:	1c0d      	adds	r5, r1, #0
10003954:	1c04      	adds	r4, r0, #0
10003956:	e702      	b.n	1000375e <__aeabi_fsub+0xda>
10003958:	2580      	movs	r5, #128	; 0x80
1000395a:	006e      	lsls	r6, r5, #1
1000395c:	2304      	movs	r3, #4
1000395e:	e6c2      	b.n	100036e6 <__aeabi_fsub+0x62>
10003960:	28ff      	cmp	r0, #255	; 0xff
10003962:	d052      	beq.n	10003a0a <__aeabi_fsub+0x386>
10003964:	2480      	movs	r4, #128	; 0x80
10003966:	4661      	mov	r1, ip
10003968:	04e3      	lsls	r3, r4, #19
1000396a:	4319      	orrs	r1, r3
1000396c:	468c      	mov	ip, r1
1000396e:	2301      	movs	r3, #1
10003970:	2e1b      	cmp	r6, #27
10003972:	dc09      	bgt.n	10003988 <__aeabi_fsub+0x304>
10003974:	2120      	movs	r1, #32
10003976:	4664      	mov	r4, ip
10003978:	40f4      	lsrs	r4, r6
1000397a:	4665      	mov	r5, ip
1000397c:	1b8e      	subs	r6, r1, r6
1000397e:	40b5      	lsls	r5, r6
10003980:	1c2b      	adds	r3, r5, #0
10003982:	1e59      	subs	r1, r3, #1
10003984:	418b      	sbcs	r3, r1
10003986:	4323      	orrs	r3, r4
10003988:	19db      	adds	r3, r3, r7
1000398a:	1c04      	adds	r4, r0, #0
1000398c:	e6d8      	b.n	10003740 <__aeabi_fsub+0xbc>
1000398e:	2f00      	cmp	r7, #0
10003990:	d01e      	beq.n	100039d0 <__aeabi_fsub+0x34c>
10003992:	1beb      	subs	r3, r5, r7
10003994:	0158      	lsls	r0, r3, #5
10003996:	d54b      	bpl.n	10003a30 <__aeabi_fsub+0x3ac>
10003998:	1b7b      	subs	r3, r7, r5
1000399a:	2601      	movs	r6, #1
1000399c:	1c0d      	adds	r5, r1, #0
1000399e:	2400      	movs	r4, #0
100039a0:	e68e      	b.n	100036c0 <__aeabi_fsub+0x3c>
100039a2:	46c0      	nop			; (mov r8, r8)
100039a4:	fbffffff 	.word	0xfbffffff
100039a8:	03fffffc 	.word	0x03fffffc
100039ac:	2f00      	cmp	r7, #0
100039ae:	d100      	bne.n	100039b2 <__aeabi_fsub+0x32e>
100039b0:	e6fa      	b.n	100037a8 <__aeabi_fsub+0x124>
100039b2:	2080      	movs	r0, #128	; 0x80
100039b4:	08eb      	lsrs	r3, r5, #3
100039b6:	03c4      	lsls	r4, r0, #15
100039b8:	4223      	tst	r3, r4
100039ba:	d037      	beq.n	10003a2c <__aeabi_fsub+0x3a8>
100039bc:	08ff      	lsrs	r7, r7, #3
100039be:	4227      	tst	r7, r4
100039c0:	d134      	bne.n	10003a2c <__aeabi_fsub+0x3a8>
100039c2:	1c3b      	adds	r3, r7, #0
100039c4:	1c0d      	adds	r5, r1, #0
100039c6:	2280      	movs	r2, #128	; 0x80
100039c8:	00db      	lsls	r3, r3, #3
100039ca:	0056      	lsls	r6, r2, #1
100039cc:	24ff      	movs	r4, #255	; 0xff
100039ce:	e677      	b.n	100036c0 <__aeabi_fsub+0x3c>
100039d0:	4663      	mov	r3, ip
100039d2:	1c15      	adds	r5, r2, #0
100039d4:	2601      	movs	r6, #1
100039d6:	2400      	movs	r4, #0
100039d8:	e672      	b.n	100036c0 <__aeabi_fsub+0x3c>
100039da:	4664      	mov	r4, ip
100039dc:	2c00      	cmp	r4, #0
100039de:	d014      	beq.n	10003a0a <__aeabi_fsub+0x386>
100039e0:	2f00      	cmp	r7, #0
100039e2:	d100      	bne.n	100039e6 <__aeabi_fsub+0x362>
100039e4:	e6e0      	b.n	100037a8 <__aeabi_fsub+0x124>
100039e6:	2380      	movs	r3, #128	; 0x80
100039e8:	08e6      	lsrs	r6, r4, #3
100039ea:	03d8      	lsls	r0, r3, #15
100039ec:	1c31      	adds	r1, r6, #0
100039ee:	4206      	tst	r6, r0
100039f0:	d003      	beq.n	100039fa <__aeabi_fsub+0x376>
100039f2:	08f9      	lsrs	r1, r7, #3
100039f4:	4201      	tst	r1, r0
100039f6:	d000      	beq.n	100039fa <__aeabi_fsub+0x376>
100039f8:	1c31      	adds	r1, r6, #0
100039fa:	1c15      	adds	r5, r2, #0
100039fc:	2280      	movs	r2, #128	; 0x80
100039fe:	00cb      	lsls	r3, r1, #3
10003a00:	0056      	lsls	r6, r2, #1
10003a02:	24ff      	movs	r4, #255	; 0xff
10003a04:	e65c      	b.n	100036c0 <__aeabi_fsub+0x3c>
10003a06:	28ff      	cmp	r0, #255	; 0xff
10003a08:	d1b1      	bne.n	1000396e <__aeabi_fsub+0x2ea>
10003a0a:	2080      	movs	r0, #128	; 0x80
10003a0c:	1c3b      	adds	r3, r7, #0
10003a0e:	1c15      	adds	r5, r2, #0
10003a10:	0046      	lsls	r6, r0, #1
10003a12:	24ff      	movs	r4, #255	; 0xff
10003a14:	e654      	b.n	100036c0 <__aeabi_fsub+0x3c>
10003a16:	3e01      	subs	r6, #1
10003a18:	2e00      	cmp	r6, #0
10003a1a:	d1f4      	bne.n	10003a06 <__aeabi_fsub+0x382>
10003a1c:	197b      	adds	r3, r7, r5
10003a1e:	1c04      	adds	r4, r0, #0
10003a20:	e68e      	b.n	10003740 <__aeabi_fsub+0xbc>
10003a22:	1c3b      	adds	r3, r7, #0
10003a24:	1c15      	adds	r5, r2, #0
10003a26:	2601      	movs	r6, #1
10003a28:	2400      	movs	r4, #0
10003a2a:	e649      	b.n	100036c0 <__aeabi_fsub+0x3c>
10003a2c:	1c15      	adds	r5, r2, #0
10003a2e:	e7ca      	b.n	100039c6 <__aeabi_fsub+0x342>
10003a30:	2b00      	cmp	r3, #0
10003a32:	d100      	bne.n	10003a36 <__aeabi_fsub+0x3b2>
10003a34:	e72b      	b.n	1000388e <__aeabi_fsub+0x20a>
10003a36:	e7cc      	b.n	100039d2 <__aeabi_fsub+0x34e>

10003a38 <__aeabi_ui2f>:
10003a38:	b510      	push	{r4, lr}
10003a3a:	1e04      	subs	r4, r0, #0
10003a3c:	d034      	beq.n	10003aa8 <__aeabi_ui2f+0x70>
10003a3e:	f000 fee7 	bl	10004810 <__clzsi2>
10003a42:	239e      	movs	r3, #158	; 0x9e
10003a44:	1a1b      	subs	r3, r3, r0
10003a46:	2b96      	cmp	r3, #150	; 0x96
10003a48:	dc07      	bgt.n	10003a5a <__aeabi_ui2f+0x22>
10003a4a:	3808      	subs	r0, #8
10003a4c:	4084      	lsls	r4, r0
10003a4e:	0264      	lsls	r4, r4, #9
10003a50:	0a61      	lsrs	r1, r4, #9
10003a52:	b2db      	uxtb	r3, r3
10003a54:	05d8      	lsls	r0, r3, #23
10003a56:	4308      	orrs	r0, r1
10003a58:	bd10      	pop	{r4, pc}
10003a5a:	2b99      	cmp	r3, #153	; 0x99
10003a5c:	dd0a      	ble.n	10003a74 <__aeabi_ui2f+0x3c>
10003a5e:	1c02      	adds	r2, r0, #0
10003a60:	321b      	adds	r2, #27
10003a62:	1c21      	adds	r1, r4, #0
10003a64:	4091      	lsls	r1, r2
10003a66:	1c0a      	adds	r2, r1, #0
10003a68:	1e51      	subs	r1, r2, #1
10003a6a:	418a      	sbcs	r2, r1
10003a6c:	2105      	movs	r1, #5
10003a6e:	1a09      	subs	r1, r1, r0
10003a70:	40cc      	lsrs	r4, r1
10003a72:	4314      	orrs	r4, r2
10003a74:	2805      	cmp	r0, #5
10003a76:	dc1a      	bgt.n	10003aae <__aeabi_ui2f+0x76>
10003a78:	4a18      	ldr	r2, [pc, #96]	; (10003adc <__aeabi_ui2f+0xa4>)
10003a7a:	210f      	movs	r1, #15
10003a7c:	4022      	ands	r2, r4
10003a7e:	400c      	ands	r4, r1
10003a80:	2c04      	cmp	r4, #4
10003a82:	d000      	beq.n	10003a86 <__aeabi_ui2f+0x4e>
10003a84:	3204      	adds	r2, #4
10003a86:	0151      	lsls	r1, r2, #5
10003a88:	d505      	bpl.n	10003a96 <__aeabi_ui2f+0x5e>
10003a8a:	249f      	movs	r4, #159	; 0x9f
10003a8c:	1a23      	subs	r3, r4, r0
10003a8e:	2bff      	cmp	r3, #255	; 0xff
10003a90:	d021      	beq.n	10003ad6 <__aeabi_ui2f+0x9e>
10003a92:	4812      	ldr	r0, [pc, #72]	; (10003adc <__aeabi_ui2f+0xa4>)
10003a94:	4002      	ands	r2, r0
10003a96:	1c59      	adds	r1, r3, #1
10003a98:	b2cc      	uxtb	r4, r1
10003a9a:	08d2      	lsrs	r2, r2, #3
10003a9c:	2c01      	cmp	r4, #1
10003a9e:	dd09      	ble.n	10003ab4 <__aeabi_ui2f+0x7c>
10003aa0:	0250      	lsls	r0, r2, #9
10003aa2:	0a41      	lsrs	r1, r0, #9
10003aa4:	b2db      	uxtb	r3, r3
10003aa6:	e7d5      	b.n	10003a54 <__aeabi_ui2f+0x1c>
10003aa8:	2300      	movs	r3, #0
10003aaa:	2100      	movs	r1, #0
10003aac:	e7d2      	b.n	10003a54 <__aeabi_ui2f+0x1c>
10003aae:	1f42      	subs	r2, r0, #5
10003ab0:	4094      	lsls	r4, r2
10003ab2:	e7e1      	b.n	10003a78 <__aeabi_ui2f+0x40>
10003ab4:	2a00      	cmp	r2, #0
10003ab6:	d00b      	beq.n	10003ad0 <__aeabi_ui2f+0x98>
10003ab8:	2b00      	cmp	r3, #0
10003aba:	d006      	beq.n	10003aca <__aeabi_ui2f+0x92>
10003abc:	2180      	movs	r1, #128	; 0x80
10003abe:	03cc      	lsls	r4, r1, #15
10003ac0:	4322      	orrs	r2, r4
10003ac2:	0252      	lsls	r2, r2, #9
10003ac4:	0a51      	lsrs	r1, r2, #9
10003ac6:	b2db      	uxtb	r3, r3
10003ac8:	e7c4      	b.n	10003a54 <__aeabi_ui2f+0x1c>
10003aca:	0250      	lsls	r0, r2, #9
10003acc:	0a41      	lsrs	r1, r0, #9
10003ace:	e7c1      	b.n	10003a54 <__aeabi_ui2f+0x1c>
10003ad0:	b2db      	uxtb	r3, r3
10003ad2:	2100      	movs	r1, #0
10003ad4:	e7be      	b.n	10003a54 <__aeabi_ui2f+0x1c>
10003ad6:	23ff      	movs	r3, #255	; 0xff
10003ad8:	2100      	movs	r1, #0
10003ada:	e7bb      	b.n	10003a54 <__aeabi_ui2f+0x1c>
10003adc:	fbffffff 	.word	0xfbffffff

10003ae0 <__aeabi_dmul>:
10003ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
10003ae2:	4656      	mov	r6, sl
10003ae4:	4644      	mov	r4, r8
10003ae6:	465f      	mov	r7, fp
10003ae8:	464d      	mov	r5, r9
10003aea:	b4f0      	push	{r4, r5, r6, r7}
10003aec:	004f      	lsls	r7, r1, #1
10003aee:	1c1d      	adds	r5, r3, #0
10003af0:	030b      	lsls	r3, r1, #12
10003af2:	1c14      	adds	r4, r2, #0
10003af4:	0b1a      	lsrs	r2, r3, #12
10003af6:	0d7b      	lsrs	r3, r7, #21
10003af8:	b087      	sub	sp, #28
10003afa:	1c06      	adds	r6, r0, #0
10003afc:	4692      	mov	sl, r2
10003afe:	4698      	mov	r8, r3
10003b00:	0fcf      	lsrs	r7, r1, #31
10003b02:	2b00      	cmp	r3, #0
10003b04:	d121      	bne.n	10003b4a <__aeabi_dmul+0x6a>
10003b06:	4302      	orrs	r2, r0
10003b08:	d100      	bne.n	10003b0c <__aeabi_dmul+0x2c>
10003b0a:	e149      	b.n	10003da0 <__aeabi_dmul+0x2c0>
10003b0c:	4653      	mov	r3, sl
10003b0e:	2b00      	cmp	r3, #0
10003b10:	d100      	bne.n	10003b14 <__aeabi_dmul+0x34>
10003b12:	e1e4      	b.n	10003ede <__aeabi_dmul+0x3fe>
10003b14:	4650      	mov	r0, sl
10003b16:	f000 fe7b 	bl	10004810 <__clzsi2>
10003b1a:	1e03      	subs	r3, r0, #0
10003b1c:	2b27      	cmp	r3, #39	; 0x27
10003b1e:	dd00      	ble.n	10003b22 <__aeabi_dmul+0x42>
10003b20:	e1d8      	b.n	10003ed4 <__aeabi_dmul+0x3f4>
10003b22:	3b08      	subs	r3, #8
10003b24:	4651      	mov	r1, sl
10003b26:	4099      	lsls	r1, r3
10003b28:	2228      	movs	r2, #40	; 0x28
10003b2a:	4688      	mov	r8, r1
10003b2c:	1a11      	subs	r1, r2, r0
10003b2e:	1c32      	adds	r2, r6, #0
10003b30:	40ca      	lsrs	r2, r1
10003b32:	4641      	mov	r1, r8
10003b34:	430a      	orrs	r2, r1
10003b36:	4692      	mov	sl, r2
10003b38:	409e      	lsls	r6, r3
10003b3a:	4bd8      	ldr	r3, [pc, #864]	; (10003e9c <__aeabi_dmul+0x3bc>)
10003b3c:	2200      	movs	r2, #0
10003b3e:	1a18      	subs	r0, r3, r0
10003b40:	2100      	movs	r1, #0
10003b42:	4680      	mov	r8, r0
10003b44:	4691      	mov	r9, r2
10003b46:	9103      	str	r1, [sp, #12]
10003b48:	e011      	b.n	10003b6e <__aeabi_dmul+0x8e>
10003b4a:	48d5      	ldr	r0, [pc, #852]	; (10003ea0 <__aeabi_dmul+0x3c0>)
10003b4c:	4283      	cmp	r3, r0
10003b4e:	d03e      	beq.n	10003bce <__aeabi_dmul+0xee>
10003b50:	2180      	movs	r1, #128	; 0x80
10003b52:	4653      	mov	r3, sl
10003b54:	034a      	lsls	r2, r1, #13
10003b56:	431a      	orrs	r2, r3
10003b58:	00d0      	lsls	r0, r2, #3
10003b5a:	0f71      	lsrs	r1, r6, #29
10003b5c:	4308      	orrs	r0, r1
10003b5e:	4ad1      	ldr	r2, [pc, #836]	; (10003ea4 <__aeabi_dmul+0x3c4>)
10003b60:	4682      	mov	sl, r0
10003b62:	2300      	movs	r3, #0
10003b64:	2000      	movs	r0, #0
10003b66:	00f6      	lsls	r6, r6, #3
10003b68:	4490      	add	r8, r2
10003b6a:	4699      	mov	r9, r3
10003b6c:	9003      	str	r0, [sp, #12]
10003b6e:	1c29      	adds	r1, r5, #0
10003b70:	1c20      	adds	r0, r4, #0
10003b72:	1c25      	adds	r5, r4, #0
10003b74:	004a      	lsls	r2, r1, #1
10003b76:	030c      	lsls	r4, r1, #12
10003b78:	0fcb      	lsrs	r3, r1, #31
10003b7a:	0b24      	lsrs	r4, r4, #12
10003b7c:	0d52      	lsrs	r2, r2, #21
10003b7e:	469b      	mov	fp, r3
10003b80:	d131      	bne.n	10003be6 <__aeabi_dmul+0x106>
10003b82:	1c21      	adds	r1, r4, #0
10003b84:	4301      	orrs	r1, r0
10003b86:	d100      	bne.n	10003b8a <__aeabi_dmul+0xaa>
10003b88:	e112      	b.n	10003db0 <__aeabi_dmul+0x2d0>
10003b8a:	2c00      	cmp	r4, #0
10003b8c:	d100      	bne.n	10003b90 <__aeabi_dmul+0xb0>
10003b8e:	e19d      	b.n	10003ecc <__aeabi_dmul+0x3ec>
10003b90:	1c20      	adds	r0, r4, #0
10003b92:	f000 fe3d 	bl	10004810 <__clzsi2>
10003b96:	2827      	cmp	r0, #39	; 0x27
10003b98:	dd00      	ble.n	10003b9c <__aeabi_dmul+0xbc>
10003b9a:	e191      	b.n	10003ec0 <__aeabi_dmul+0x3e0>
10003b9c:	1c03      	adds	r3, r0, #0
10003b9e:	2228      	movs	r2, #40	; 0x28
10003ba0:	3b08      	subs	r3, #8
10003ba2:	1c29      	adds	r1, r5, #0
10003ba4:	1a12      	subs	r2, r2, r0
10003ba6:	409c      	lsls	r4, r3
10003ba8:	40d1      	lsrs	r1, r2
10003baa:	430c      	orrs	r4, r1
10003bac:	409d      	lsls	r5, r3
10003bae:	4bbb      	ldr	r3, [pc, #748]	; (10003e9c <__aeabi_dmul+0x3bc>)
10003bb0:	4659      	mov	r1, fp
10003bb2:	1a1a      	subs	r2, r3, r0
10003bb4:	4079      	eors	r1, r7
10003bb6:	2000      	movs	r0, #0
10003bb8:	464b      	mov	r3, r9
10003bba:	9101      	str	r1, [sp, #4]
10003bbc:	4303      	orrs	r3, r0
10003bbe:	2b0f      	cmp	r3, #15
10003bc0:	d826      	bhi.n	10003c10 <__aeabi_dmul+0x130>
10003bc2:	0099      	lsls	r1, r3, #2
10003bc4:	4bb8      	ldr	r3, [pc, #736]	; (10003ea8 <__aeabi_dmul+0x3c8>)
10003bc6:	468c      	mov	ip, r1
10003bc8:	4463      	add	r3, ip
10003bca:	6819      	ldr	r1, [r3, #0]
10003bcc:	468f      	mov	pc, r1
10003bce:	1c11      	adds	r1, r2, #0
10003bd0:	4331      	orrs	r1, r6
10003bd2:	d000      	beq.n	10003bd6 <__aeabi_dmul+0xf6>
10003bd4:	e0df      	b.n	10003d96 <__aeabi_dmul+0x2b6>
10003bd6:	2608      	movs	r6, #8
10003bd8:	2000      	movs	r0, #0
10003bda:	2102      	movs	r1, #2
10003bdc:	46b1      	mov	r9, r6
10003bde:	4682      	mov	sl, r0
10003be0:	2600      	movs	r6, #0
10003be2:	9103      	str	r1, [sp, #12]
10003be4:	e7c3      	b.n	10003b6e <__aeabi_dmul+0x8e>
10003be6:	48ae      	ldr	r0, [pc, #696]	; (10003ea0 <__aeabi_dmul+0x3c0>)
10003be8:	4282      	cmp	r2, r0
10003bea:	d100      	bne.n	10003bee <__aeabi_dmul+0x10e>
10003bec:	e0c9      	b.n	10003d82 <__aeabi_dmul+0x2a2>
10003bee:	2180      	movs	r1, #128	; 0x80
10003bf0:	034b      	lsls	r3, r1, #13
10003bf2:	431c      	orrs	r4, r3
10003bf4:	49ab      	ldr	r1, [pc, #684]	; (10003ea4 <__aeabi_dmul+0x3c4>)
10003bf6:	0f68      	lsrs	r0, r5, #29
10003bf8:	00e4      	lsls	r4, r4, #3
10003bfa:	4304      	orrs	r4, r0
10003bfc:	00ed      	lsls	r5, r5, #3
10003bfe:	1852      	adds	r2, r2, r1
10003c00:	2000      	movs	r0, #0
10003c02:	4659      	mov	r1, fp
10003c04:	4079      	eors	r1, r7
10003c06:	464b      	mov	r3, r9
10003c08:	9101      	str	r1, [sp, #4]
10003c0a:	4303      	orrs	r3, r0
10003c0c:	2b0f      	cmp	r3, #15
10003c0e:	d9d8      	bls.n	10003bc2 <__aeabi_dmul+0xe2>
10003c10:	4442      	add	r2, r8
10003c12:	0433      	lsls	r3, r6, #16
10003c14:	0429      	lsls	r1, r5, #16
10003c16:	9204      	str	r2, [sp, #16]
10003c18:	0c1a      	lsrs	r2, r3, #16
10003c1a:	0c0f      	lsrs	r7, r1, #16
10003c1c:	1c10      	adds	r0, r2, #0
10003c1e:	4378      	muls	r0, r7
10003c20:	0c36      	lsrs	r6, r6, #16
10003c22:	1c33      	adds	r3, r6, #0
10003c24:	4680      	mov	r8, r0
10003c26:	0c2d      	lsrs	r5, r5, #16
10003c28:	437b      	muls	r3, r7
10003c2a:	1c30      	adds	r0, r6, #0
10003c2c:	4368      	muls	r0, r5
10003c2e:	1c11      	adds	r1, r2, #0
10003c30:	4369      	muls	r1, r5
10003c32:	469c      	mov	ip, r3
10003c34:	4643      	mov	r3, r8
10003c36:	4683      	mov	fp, r0
10003c38:	0c18      	lsrs	r0, r3, #16
10003c3a:	1808      	adds	r0, r1, r0
10003c3c:	4460      	add	r0, ip
10003c3e:	4584      	cmp	ip, r0
10003c40:	d900      	bls.n	10003c44 <__aeabi_dmul+0x164>
10003c42:	e11f      	b.n	10003e84 <__aeabi_dmul+0x3a4>
10003c44:	0c01      	lsrs	r1, r0, #16
10003c46:	4643      	mov	r3, r8
10003c48:	9103      	str	r1, [sp, #12]
10003c4a:	0419      	lsls	r1, r3, #16
10003c4c:	0c0b      	lsrs	r3, r1, #16
10003c4e:	0400      	lsls	r0, r0, #16
10003c50:	18c0      	adds	r0, r0, r3
10003c52:	0421      	lsls	r1, r4, #16
10003c54:	0c24      	lsrs	r4, r4, #16
10003c56:	9005      	str	r0, [sp, #20]
10003c58:	1c10      	adds	r0, r2, #0
10003c5a:	4362      	muls	r2, r4
10003c5c:	0c09      	lsrs	r1, r1, #16
10003c5e:	9202      	str	r2, [sp, #8]
10003c60:	4348      	muls	r0, r1
10003c62:	1c32      	adds	r2, r6, #0
10003c64:	4366      	muls	r6, r4
10003c66:	434a      	muls	r2, r1
10003c68:	9b02      	ldr	r3, [sp, #8]
10003c6a:	46b1      	mov	r9, r6
10003c6c:	0c06      	lsrs	r6, r0, #16
10003c6e:	4690      	mov	r8, r2
10003c70:	46b4      	mov	ip, r6
10003c72:	1c1a      	adds	r2, r3, #0
10003c74:	4462      	add	r2, ip
10003c76:	4442      	add	r2, r8
10003c78:	4590      	cmp	r8, r2
10003c7a:	d902      	bls.n	10003c82 <__aeabi_dmul+0x1a2>
10003c7c:	2680      	movs	r6, #128	; 0x80
10003c7e:	0273      	lsls	r3, r6, #9
10003c80:	4499      	add	r9, r3
10003c82:	0c16      	lsrs	r6, r2, #16
10003c84:	46b0      	mov	r8, r6
10003c86:	44c1      	add	r9, r8
10003c88:	0400      	lsls	r0, r0, #16
10003c8a:	464b      	mov	r3, r9
10003c8c:	0c06      	lsrs	r6, r0, #16
10003c8e:	0412      	lsls	r2, r2, #16
10003c90:	9302      	str	r3, [sp, #8]
10003c92:	1993      	adds	r3, r2, r6
10003c94:	4656      	mov	r6, sl
10003c96:	0432      	lsls	r2, r6, #16
10003c98:	0c10      	lsrs	r0, r2, #16
10003c9a:	1c02      	adds	r2, r0, #0
10003c9c:	436a      	muls	r2, r5
10003c9e:	469c      	mov	ip, r3
10003ca0:	1c03      	adds	r3, r0, #0
10003ca2:	437b      	muls	r3, r7
10003ca4:	4691      	mov	r9, r2
10003ca6:	0c32      	lsrs	r2, r6, #16
10003ca8:	4357      	muls	r7, r2
10003caa:	4698      	mov	r8, r3
10003cac:	0c1b      	lsrs	r3, r3, #16
10003cae:	469a      	mov	sl, r3
10003cb0:	44d1      	add	r9, sl
10003cb2:	44b9      	add	r9, r7
10003cb4:	4355      	muls	r5, r2
10003cb6:	454f      	cmp	r7, r9
10003cb8:	d902      	bls.n	10003cc0 <__aeabi_dmul+0x1e0>
10003cba:	2780      	movs	r7, #128	; 0x80
10003cbc:	027e      	lsls	r6, r7, #9
10003cbe:	19ad      	adds	r5, r5, r6
10003cc0:	464b      	mov	r3, r9
10003cc2:	0c1f      	lsrs	r7, r3, #16
10003cc4:	4646      	mov	r6, r8
10003cc6:	19ed      	adds	r5, r5, r7
10003cc8:	041f      	lsls	r7, r3, #16
10003cca:	0433      	lsls	r3, r6, #16
10003ccc:	0c1e      	lsrs	r6, r3, #16
10003cce:	1c03      	adds	r3, r0, #0
10003cd0:	434b      	muls	r3, r1
10003cd2:	4360      	muls	r0, r4
10003cd4:	4351      	muls	r1, r2
10003cd6:	4354      	muls	r4, r2
10003cd8:	0c1a      	lsrs	r2, r3, #16
10003cda:	1880      	adds	r0, r0, r2
10003cdc:	46b0      	mov	r8, r6
10003cde:	1840      	adds	r0, r0, r1
10003ce0:	4447      	add	r7, r8
10003ce2:	469a      	mov	sl, r3
10003ce4:	4281      	cmp	r1, r0
10003ce6:	d902      	bls.n	10003cee <__aeabi_dmul+0x20e>
10003ce8:	2180      	movs	r1, #128	; 0x80
10003cea:	024e      	lsls	r6, r1, #9
10003cec:	19a4      	adds	r4, r4, r6
10003cee:	9b03      	ldr	r3, [sp, #12]
10003cf0:	1c1a      	adds	r2, r3, #0
10003cf2:	4462      	add	r2, ip
10003cf4:	445a      	add	r2, fp
10003cf6:	4562      	cmp	r2, ip
10003cf8:	4189      	sbcs	r1, r1
10003cfa:	424e      	negs	r6, r1
10003cfc:	4651      	mov	r1, sl
10003cfe:	46b3      	mov	fp, r6
10003d00:	0403      	lsls	r3, r0, #16
10003d02:	040e      	lsls	r6, r1, #16
10003d04:	469c      	mov	ip, r3
10003d06:	9902      	ldr	r1, [sp, #8]
10003d08:	0c33      	lsrs	r3, r6, #16
10003d0a:	4463      	add	r3, ip
10003d0c:	18ce      	adds	r6, r1, r3
10003d0e:	46b0      	mov	r8, r6
10003d10:	46c2      	mov	sl, r8
10003d12:	44da      	add	sl, fp
10003d14:	19d2      	adds	r2, r2, r7
10003d16:	42ba      	cmp	r2, r7
10003d18:	41bf      	sbcs	r7, r7
10003d1a:	4651      	mov	r1, sl
10003d1c:	427b      	negs	r3, r7
10003d1e:	186f      	adds	r7, r5, r1
10003d20:	18f9      	adds	r1, r7, r3
10003d22:	4699      	mov	r9, r3
10003d24:	45da      	cmp	sl, fp
10003d26:	419b      	sbcs	r3, r3
10003d28:	425e      	negs	r6, r3
10003d2a:	9b02      	ldr	r3, [sp, #8]
10003d2c:	46b3      	mov	fp, r6
10003d2e:	4598      	cmp	r8, r3
10003d30:	41b6      	sbcs	r6, r6
10003d32:	4276      	negs	r6, r6
10003d34:	465b      	mov	r3, fp
10003d36:	431e      	orrs	r6, r3
10003d38:	0c00      	lsrs	r0, r0, #16
10003d3a:	4549      	cmp	r1, r9
10003d3c:	419b      	sbcs	r3, r3
10003d3e:	42af      	cmp	r7, r5
10003d40:	41ad      	sbcs	r5, r5
10003d42:	1836      	adds	r6, r6, r0
10003d44:	426f      	negs	r7, r5
10003d46:	4258      	negs	r0, r3
10003d48:	4338      	orrs	r0, r7
10003d4a:	1836      	adds	r6, r6, r0
10003d4c:	9805      	ldr	r0, [sp, #20]
10003d4e:	1934      	adds	r4, r6, r4
10003d50:	0256      	lsls	r6, r2, #9
10003d52:	4306      	orrs	r6, r0
10003d54:	0dcb      	lsrs	r3, r1, #23
10003d56:	0264      	lsls	r4, r4, #9
10003d58:	1e70      	subs	r0, r6, #1
10003d5a:	4186      	sbcs	r6, r0
10003d5c:	0dd2      	lsrs	r2, r2, #23
10003d5e:	4316      	orrs	r6, r2
10003d60:	0249      	lsls	r1, r1, #9
10003d62:	431c      	orrs	r4, r3
10003d64:	430e      	orrs	r6, r1
10003d66:	01e0      	lsls	r0, r4, #7
10003d68:	d52f      	bpl.n	10003dca <__aeabi_dmul+0x2ea>
10003d6a:	2701      	movs	r7, #1
10003d6c:	9d04      	ldr	r5, [sp, #16]
10003d6e:	4037      	ands	r7, r6
10003d70:	0873      	lsrs	r3, r6, #1
10003d72:	1c3e      	adds	r6, r7, #0
10003d74:	07e0      	lsls	r0, r4, #31
10003d76:	3501      	adds	r5, #1
10003d78:	431e      	orrs	r6, r3
10003d7a:	9504      	str	r5, [sp, #16]
10003d7c:	4306      	orrs	r6, r0
10003d7e:	0864      	lsrs	r4, r4, #1
10003d80:	e023      	b.n	10003dca <__aeabi_dmul+0x2ea>
10003d82:	1c23      	adds	r3, r4, #0
10003d84:	432b      	orrs	r3, r5
10003d86:	2003      	movs	r0, #3
10003d88:	2b00      	cmp	r3, #0
10003d8a:	d000      	beq.n	10003d8e <__aeabi_dmul+0x2ae>
10003d8c:	e739      	b.n	10003c02 <__aeabi_dmul+0x122>
10003d8e:	2400      	movs	r4, #0
10003d90:	2500      	movs	r5, #0
10003d92:	2002      	movs	r0, #2
10003d94:	e735      	b.n	10003c02 <__aeabi_dmul+0x122>
10003d96:	220c      	movs	r2, #12
10003d98:	2303      	movs	r3, #3
10003d9a:	4691      	mov	r9, r2
10003d9c:	9303      	str	r3, [sp, #12]
10003d9e:	e6e6      	b.n	10003b6e <__aeabi_dmul+0x8e>
10003da0:	2604      	movs	r6, #4
10003da2:	2300      	movs	r3, #0
10003da4:	2001      	movs	r0, #1
10003da6:	46b1      	mov	r9, r6
10003da8:	469a      	mov	sl, r3
10003daa:	2600      	movs	r6, #0
10003dac:	9003      	str	r0, [sp, #12]
10003dae:	e6de      	b.n	10003b6e <__aeabi_dmul+0x8e>
10003db0:	2400      	movs	r4, #0
10003db2:	2500      	movs	r5, #0
10003db4:	2001      	movs	r0, #1
10003db6:	e724      	b.n	10003c02 <__aeabi_dmul+0x122>
10003db8:	9803      	ldr	r0, [sp, #12]
10003dba:	4654      	mov	r4, sl
10003dbc:	2802      	cmp	r0, #2
10003dbe:	d044      	beq.n	10003e4a <__aeabi_dmul+0x36a>
10003dc0:	2803      	cmp	r0, #3
10003dc2:	d100      	bne.n	10003dc6 <__aeabi_dmul+0x2e6>
10003dc4:	e0ea      	b.n	10003f9c <__aeabi_dmul+0x4bc>
10003dc6:	2801      	cmp	r0, #1
10003dc8:	d060      	beq.n	10003e8c <__aeabi_dmul+0x3ac>
10003dca:	9a04      	ldr	r2, [sp, #16]
10003dcc:	4937      	ldr	r1, [pc, #220]	; (10003eac <__aeabi_dmul+0x3cc>)
10003dce:	1850      	adds	r0, r2, r1
10003dd0:	2800      	cmp	r0, #0
10003dd2:	dc00      	bgt.n	10003dd6 <__aeabi_dmul+0x2f6>
10003dd4:	e095      	b.n	10003f02 <__aeabi_dmul+0x422>
10003dd6:	270f      	movs	r7, #15
10003dd8:	4037      	ands	r7, r6
10003dda:	2f04      	cmp	r7, #4
10003ddc:	d005      	beq.n	10003dea <__aeabi_dmul+0x30a>
10003dde:	1d31      	adds	r1, r6, #4
10003de0:	42b1      	cmp	r1, r6
10003de2:	41b6      	sbcs	r6, r6
10003de4:	4275      	negs	r5, r6
10003de6:	1964      	adds	r4, r4, r5
10003de8:	1c0e      	adds	r6, r1, #0
10003dea:	01e1      	lsls	r1, r4, #7
10003dec:	d505      	bpl.n	10003dfa <__aeabi_dmul+0x31a>
10003dee:	4830      	ldr	r0, [pc, #192]	; (10003eb0 <__aeabi_dmul+0x3d0>)
10003df0:	9a04      	ldr	r2, [sp, #16]
10003df2:	2380      	movs	r3, #128	; 0x80
10003df4:	00df      	lsls	r7, r3, #3
10003df6:	4004      	ands	r4, r0
10003df8:	19d0      	adds	r0, r2, r7
10003dfa:	492e      	ldr	r1, [pc, #184]	; (10003eb4 <__aeabi_dmul+0x3d4>)
10003dfc:	4288      	cmp	r0, r1
10003dfe:	dc24      	bgt.n	10003e4a <__aeabi_dmul+0x36a>
10003e00:	9b01      	ldr	r3, [sp, #4]
10003e02:	0765      	lsls	r5, r4, #29
10003e04:	08f6      	lsrs	r6, r6, #3
10003e06:	0264      	lsls	r4, r4, #9
10003e08:	0542      	lsls	r2, r0, #21
10003e0a:	2701      	movs	r7, #1
10003e0c:	432e      	orrs	r6, r5
10003e0e:	0b24      	lsrs	r4, r4, #12
10003e10:	0d52      	lsrs	r2, r2, #21
10003e12:	401f      	ands	r7, r3
10003e14:	2000      	movs	r0, #0
10003e16:	2100      	movs	r1, #0
10003e18:	0d09      	lsrs	r1, r1, #20
10003e1a:	050d      	lsls	r5, r1, #20
10003e1c:	4325      	orrs	r5, r4
10003e1e:	4c26      	ldr	r4, [pc, #152]	; (10003eb8 <__aeabi_dmul+0x3d8>)
10003e20:	0512      	lsls	r2, r2, #20
10003e22:	402c      	ands	r4, r5
10003e24:	4314      	orrs	r4, r2
10003e26:	0063      	lsls	r3, r4, #1
10003e28:	1c30      	adds	r0, r6, #0
10003e2a:	085e      	lsrs	r6, r3, #1
10003e2c:	07ff      	lsls	r7, r7, #31
10003e2e:	1c31      	adds	r1, r6, #0
10003e30:	4339      	orrs	r1, r7
10003e32:	b007      	add	sp, #28
10003e34:	bc3c      	pop	{r2, r3, r4, r5}
10003e36:	4690      	mov	r8, r2
10003e38:	4699      	mov	r9, r3
10003e3a:	46a2      	mov	sl, r4
10003e3c:	46ab      	mov	fp, r5
10003e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003e40:	465a      	mov	r2, fp
10003e42:	1c2e      	adds	r6, r5, #0
10003e44:	9201      	str	r2, [sp, #4]
10003e46:	2802      	cmp	r0, #2
10003e48:	d1ba      	bne.n	10003dc0 <__aeabi_dmul+0x2e0>
10003e4a:	9e01      	ldr	r6, [sp, #4]
10003e4c:	2701      	movs	r7, #1
10003e4e:	4037      	ands	r7, r6
10003e50:	4a13      	ldr	r2, [pc, #76]	; (10003ea0 <__aeabi_dmul+0x3c0>)
10003e52:	2400      	movs	r4, #0
10003e54:	2600      	movs	r6, #0
10003e56:	e7dd      	b.n	10003e14 <__aeabi_dmul+0x334>
10003e58:	4654      	mov	r4, sl
10003e5a:	9701      	str	r7, [sp, #4]
10003e5c:	9803      	ldr	r0, [sp, #12]
10003e5e:	e7ad      	b.n	10003dbc <__aeabi_dmul+0x2dc>
10003e60:	2601      	movs	r6, #1
10003e62:	2700      	movs	r7, #0
10003e64:	4c15      	ldr	r4, [pc, #84]	; (10003ebc <__aeabi_dmul+0x3dc>)
10003e66:	4276      	negs	r6, r6
10003e68:	4a0d      	ldr	r2, [pc, #52]	; (10003ea0 <__aeabi_dmul+0x3c0>)
10003e6a:	e7d3      	b.n	10003e14 <__aeabi_dmul+0x334>
10003e6c:	1c2e      	adds	r6, r5, #0
10003e6e:	e7a5      	b.n	10003dbc <__aeabi_dmul+0x2dc>
10003e70:	2280      	movs	r2, #128	; 0x80
10003e72:	0313      	lsls	r3, r2, #12
10003e74:	4651      	mov	r1, sl
10003e76:	4219      	tst	r1, r3
10003e78:	d135      	bne.n	10003ee6 <__aeabi_dmul+0x406>
10003e7a:	430b      	orrs	r3, r1
10003e7c:	031d      	lsls	r5, r3, #12
10003e7e:	0b2c      	lsrs	r4, r5, #12
10003e80:	4a07      	ldr	r2, [pc, #28]	; (10003ea0 <__aeabi_dmul+0x3c0>)
10003e82:	e7c7      	b.n	10003e14 <__aeabi_dmul+0x334>
10003e84:	2180      	movs	r1, #128	; 0x80
10003e86:	024b      	lsls	r3, r1, #9
10003e88:	449b      	add	fp, r3
10003e8a:	e6db      	b.n	10003c44 <__aeabi_dmul+0x164>
10003e8c:	9b01      	ldr	r3, [sp, #4]
10003e8e:	2200      	movs	r2, #0
10003e90:	4018      	ands	r0, r3
10003e92:	b2c7      	uxtb	r7, r0
10003e94:	2400      	movs	r4, #0
10003e96:	2600      	movs	r6, #0
10003e98:	e7bc      	b.n	10003e14 <__aeabi_dmul+0x334>
10003e9a:	46c0      	nop			; (mov r8, r8)
10003e9c:	fffffc0d 	.word	0xfffffc0d
10003ea0:	000007ff 	.word	0x000007ff
10003ea4:	fffffc01 	.word	0xfffffc01
10003ea8:	10004d80 	.word	0x10004d80
10003eac:	000003ff 	.word	0x000003ff
10003eb0:	feffffff 	.word	0xfeffffff
10003eb4:	000007fe 	.word	0x000007fe
10003eb8:	800fffff 	.word	0x800fffff
10003ebc:	000fffff 	.word	0x000fffff
10003ec0:	1c04      	adds	r4, r0, #0
10003ec2:	3c28      	subs	r4, #40	; 0x28
10003ec4:	40a5      	lsls	r5, r4
10003ec6:	1c2c      	adds	r4, r5, #0
10003ec8:	2500      	movs	r5, #0
10003eca:	e670      	b.n	10003bae <__aeabi_dmul+0xce>
10003ecc:	f000 fca0 	bl	10004810 <__clzsi2>
10003ed0:	3020      	adds	r0, #32
10003ed2:	e660      	b.n	10003b96 <__aeabi_dmul+0xb6>
10003ed4:	3b28      	subs	r3, #40	; 0x28
10003ed6:	409e      	lsls	r6, r3
10003ed8:	46b2      	mov	sl, r6
10003eda:	2600      	movs	r6, #0
10003edc:	e62d      	b.n	10003b3a <__aeabi_dmul+0x5a>
10003ede:	f000 fc97 	bl	10004810 <__clzsi2>
10003ee2:	3020      	adds	r0, #32
10003ee4:	e619      	b.n	10003b1a <__aeabi_dmul+0x3a>
10003ee6:	421c      	tst	r4, r3
10003ee8:	d106      	bne.n	10003ef8 <__aeabi_dmul+0x418>
10003eea:	431c      	orrs	r4, r3
10003eec:	0326      	lsls	r6, r4, #12
10003eee:	0b34      	lsrs	r4, r6, #12
10003ef0:	465f      	mov	r7, fp
10003ef2:	1c2e      	adds	r6, r5, #0
10003ef4:	4a2e      	ldr	r2, [pc, #184]	; (10003fb0 <__aeabi_dmul+0x4d0>)
10003ef6:	e78d      	b.n	10003e14 <__aeabi_dmul+0x334>
10003ef8:	430b      	orrs	r3, r1
10003efa:	0318      	lsls	r0, r3, #12
10003efc:	0b04      	lsrs	r4, r0, #12
10003efe:	4a2c      	ldr	r2, [pc, #176]	; (10003fb0 <__aeabi_dmul+0x4d0>)
10003f00:	e788      	b.n	10003e14 <__aeabi_dmul+0x334>
10003f02:	4f2c      	ldr	r7, [pc, #176]	; (10003fb4 <__aeabi_dmul+0x4d4>)
10003f04:	9d04      	ldr	r5, [sp, #16]
10003f06:	1b7b      	subs	r3, r7, r5
10003f08:	2b38      	cmp	r3, #56	; 0x38
10003f0a:	dd06      	ble.n	10003f1a <__aeabi_dmul+0x43a>
10003f0c:	9e01      	ldr	r6, [sp, #4]
10003f0e:	2701      	movs	r7, #1
10003f10:	4037      	ands	r7, r6
10003f12:	2200      	movs	r2, #0
10003f14:	2400      	movs	r4, #0
10003f16:	2600      	movs	r6, #0
10003f18:	e77c      	b.n	10003e14 <__aeabi_dmul+0x334>
10003f1a:	2b1f      	cmp	r3, #31
10003f1c:	dc21      	bgt.n	10003f62 <__aeabi_dmul+0x482>
10003f1e:	9a04      	ldr	r2, [sp, #16]
10003f20:	4f25      	ldr	r7, [pc, #148]	; (10003fb8 <__aeabi_dmul+0x4d8>)
10003f22:	1c35      	adds	r5, r6, #0
10003f24:	19d1      	adds	r1, r2, r7
10003f26:	1c20      	adds	r0, r4, #0
10003f28:	408e      	lsls	r6, r1
10003f2a:	40dd      	lsrs	r5, r3
10003f2c:	4088      	lsls	r0, r1
10003f2e:	1c32      	adds	r2, r6, #0
10003f30:	4328      	orrs	r0, r5
10003f32:	1e56      	subs	r6, r2, #1
10003f34:	41b2      	sbcs	r2, r6
10003f36:	1c06      	adds	r6, r0, #0
10003f38:	4316      	orrs	r6, r2
10003f3a:	40dc      	lsrs	r4, r3
10003f3c:	230f      	movs	r3, #15
10003f3e:	4033      	ands	r3, r6
10003f40:	2b04      	cmp	r3, #4
10003f42:	d005      	beq.n	10003f50 <__aeabi_dmul+0x470>
10003f44:	1d37      	adds	r7, r6, #4
10003f46:	42b7      	cmp	r7, r6
10003f48:	41b6      	sbcs	r6, r6
10003f4a:	4271      	negs	r1, r6
10003f4c:	1864      	adds	r4, r4, r1
10003f4e:	1c3e      	adds	r6, r7, #0
10003f50:	0225      	lsls	r5, r4, #8
10003f52:	d517      	bpl.n	10003f84 <__aeabi_dmul+0x4a4>
10003f54:	9b01      	ldr	r3, [sp, #4]
10003f56:	2701      	movs	r7, #1
10003f58:	401f      	ands	r7, r3
10003f5a:	2201      	movs	r2, #1
10003f5c:	2400      	movs	r4, #0
10003f5e:	2600      	movs	r6, #0
10003f60:	e758      	b.n	10003e14 <__aeabi_dmul+0x334>
10003f62:	4816      	ldr	r0, [pc, #88]	; (10003fbc <__aeabi_dmul+0x4dc>)
10003f64:	9a04      	ldr	r2, [sp, #16]
10003f66:	1c21      	adds	r1, r4, #0
10003f68:	1a87      	subs	r7, r0, r2
10003f6a:	40f9      	lsrs	r1, r7
10003f6c:	1c0d      	adds	r5, r1, #0
10003f6e:	2b20      	cmp	r3, #32
10003f70:	d012      	beq.n	10003f98 <__aeabi_dmul+0x4b8>
10003f72:	4b13      	ldr	r3, [pc, #76]	; (10003fc0 <__aeabi_dmul+0x4e0>)
10003f74:	18d0      	adds	r0, r2, r3
10003f76:	4084      	lsls	r4, r0
10003f78:	4326      	orrs	r6, r4
10003f7a:	1e72      	subs	r2, r6, #1
10003f7c:	4196      	sbcs	r6, r2
10003f7e:	432e      	orrs	r6, r5
10003f80:	2400      	movs	r4, #0
10003f82:	e7db      	b.n	10003f3c <__aeabi_dmul+0x45c>
10003f84:	9a01      	ldr	r2, [sp, #4]
10003f86:	0765      	lsls	r5, r4, #29
10003f88:	08f6      	lsrs	r6, r6, #3
10003f8a:	0260      	lsls	r0, r4, #9
10003f8c:	2701      	movs	r7, #1
10003f8e:	4017      	ands	r7, r2
10003f90:	432e      	orrs	r6, r5
10003f92:	0b04      	lsrs	r4, r0, #12
10003f94:	2200      	movs	r2, #0
10003f96:	e73d      	b.n	10003e14 <__aeabi_dmul+0x334>
10003f98:	2400      	movs	r4, #0
10003f9a:	e7ed      	b.n	10003f78 <__aeabi_dmul+0x498>
10003f9c:	2180      	movs	r1, #128	; 0x80
10003f9e:	030f      	lsls	r7, r1, #12
10003fa0:	433c      	orrs	r4, r7
10003fa2:	9801      	ldr	r0, [sp, #4]
10003fa4:	0324      	lsls	r4, r4, #12
10003fa6:	2701      	movs	r7, #1
10003fa8:	0b24      	lsrs	r4, r4, #12
10003faa:	4007      	ands	r7, r0
10003fac:	4a00      	ldr	r2, [pc, #0]	; (10003fb0 <__aeabi_dmul+0x4d0>)
10003fae:	e731      	b.n	10003e14 <__aeabi_dmul+0x334>
10003fb0:	000007ff 	.word	0x000007ff
10003fb4:	fffffc02 	.word	0xfffffc02
10003fb8:	0000041e 	.word	0x0000041e
10003fbc:	fffffbe2 	.word	0xfffffbe2
10003fc0:	0000043e 	.word	0x0000043e

10003fc4 <__aeabi_dsub>:
10003fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
10003fc6:	4657      	mov	r7, sl
10003fc8:	464e      	mov	r6, r9
10003fca:	4645      	mov	r5, r8
10003fcc:	b4e0      	push	{r5, r6, r7}
10003fce:	1c07      	adds	r7, r0, #0
10003fd0:	030d      	lsls	r5, r1, #12
10003fd2:	004e      	lsls	r6, r1, #1
10003fd4:	0a68      	lsrs	r0, r5, #9
10003fd6:	0fcc      	lsrs	r4, r1, #31
10003fd8:	0f79      	lsrs	r1, r7, #29
10003fda:	4308      	orrs	r0, r1
10003fdc:	4684      	mov	ip, r0
10003fde:	1c11      	adds	r1, r2, #0
10003fe0:	0318      	lsls	r0, r3, #12
10003fe2:	005a      	lsls	r2, r3, #1
10003fe4:	00fd      	lsls	r5, r7, #3
10003fe6:	0a40      	lsrs	r0, r0, #9
10003fe8:	0fdf      	lsrs	r7, r3, #31
10003fea:	0f4b      	lsrs	r3, r1, #29
10003fec:	4318      	orrs	r0, r3
10003fee:	4bca      	ldr	r3, [pc, #808]	; (10004318 <__aeabi_dsub+0x354>)
10003ff0:	00c9      	lsls	r1, r1, #3
10003ff2:	0d76      	lsrs	r6, r6, #21
10003ff4:	0d52      	lsrs	r2, r2, #21
10003ff6:	468a      	mov	sl, r1
10003ff8:	429a      	cmp	r2, r3
10003ffa:	d100      	bne.n	10003ffe <__aeabi_dsub+0x3a>
10003ffc:	e0e0      	b.n	100041c0 <__aeabi_dsub+0x1fc>
10003ffe:	2301      	movs	r3, #1
10004000:	405f      	eors	r7, r3
10004002:	46b9      	mov	r9, r7
10004004:	42bc      	cmp	r4, r7
10004006:	d100      	bne.n	1000400a <__aeabi_dsub+0x46>
10004008:	e0a8      	b.n	1000415c <__aeabi_dsub+0x198>
1000400a:	1ab7      	subs	r7, r6, r2
1000400c:	2f00      	cmp	r7, #0
1000400e:	dc00      	bgt.n	10004012 <__aeabi_dsub+0x4e>
10004010:	e110      	b.n	10004234 <__aeabi_dsub+0x270>
10004012:	2a00      	cmp	r2, #0
10004014:	d112      	bne.n	1000403c <__aeabi_dsub+0x78>
10004016:	4652      	mov	r2, sl
10004018:	4302      	orrs	r2, r0
1000401a:	d100      	bne.n	1000401e <__aeabi_dsub+0x5a>
1000401c:	e0d4      	b.n	100041c8 <__aeabi_dsub+0x204>
1000401e:	3f01      	subs	r7, #1
10004020:	2f00      	cmp	r7, #0
10004022:	d000      	beq.n	10004026 <__aeabi_dsub+0x62>
10004024:	e160      	b.n	100042e8 <__aeabi_dsub+0x324>
10004026:	4651      	mov	r1, sl
10004028:	1a6f      	subs	r7, r5, r1
1000402a:	42bd      	cmp	r5, r7
1000402c:	41ad      	sbcs	r5, r5
1000402e:	4662      	mov	r2, ip
10004030:	426b      	negs	r3, r5
10004032:	1a10      	subs	r0, r2, r0
10004034:	1c3d      	adds	r5, r7, #0
10004036:	1ac3      	subs	r3, r0, r3
10004038:	1c37      	adds	r7, r6, #0
1000403a:	e024      	b.n	10004086 <__aeabi_dsub+0xc2>
1000403c:	4ab6      	ldr	r2, [pc, #728]	; (10004318 <__aeabi_dsub+0x354>)
1000403e:	4296      	cmp	r6, r2
10004040:	d100      	bne.n	10004044 <__aeabi_dsub+0x80>
10004042:	e0e3      	b.n	1000420c <__aeabi_dsub+0x248>
10004044:	2180      	movs	r1, #128	; 0x80
10004046:	040b      	lsls	r3, r1, #16
10004048:	4318      	orrs	r0, r3
1000404a:	2f38      	cmp	r7, #56	; 0x38
1000404c:	dd00      	ble.n	10004050 <__aeabi_dsub+0x8c>
1000404e:	e123      	b.n	10004298 <__aeabi_dsub+0x2d4>
10004050:	2f1f      	cmp	r7, #31
10004052:	dd00      	ble.n	10004056 <__aeabi_dsub+0x92>
10004054:	e166      	b.n	10004324 <__aeabi_dsub+0x360>
10004056:	2120      	movs	r1, #32
10004058:	1bc9      	subs	r1, r1, r7
1000405a:	1c02      	adds	r2, r0, #0
1000405c:	4653      	mov	r3, sl
1000405e:	408a      	lsls	r2, r1
10004060:	40fb      	lsrs	r3, r7
10004062:	431a      	orrs	r2, r3
10004064:	4653      	mov	r3, sl
10004066:	408b      	lsls	r3, r1
10004068:	1c19      	adds	r1, r3, #0
1000406a:	1e4b      	subs	r3, r1, #1
1000406c:	4199      	sbcs	r1, r3
1000406e:	1c03      	adds	r3, r0, #0
10004070:	430a      	orrs	r2, r1
10004072:	40fb      	lsrs	r3, r7
10004074:	1aaa      	subs	r2, r5, r2
10004076:	4667      	mov	r7, ip
10004078:	4295      	cmp	r5, r2
1000407a:	41ad      	sbcs	r5, r5
1000407c:	1af8      	subs	r0, r7, r3
1000407e:	426b      	negs	r3, r5
10004080:	1ac3      	subs	r3, r0, r3
10004082:	1c15      	adds	r5, r2, #0
10004084:	1c37      	adds	r7, r6, #0
10004086:	021a      	lsls	r2, r3, #8
10004088:	d400      	bmi.n	1000408c <__aeabi_dsub+0xc8>
1000408a:	e0c7      	b.n	1000421c <__aeabi_dsub+0x258>
1000408c:	025e      	lsls	r6, r3, #9
1000408e:	0a71      	lsrs	r1, r6, #9
10004090:	4688      	mov	r8, r1
10004092:	4642      	mov	r2, r8
10004094:	2a00      	cmp	r2, #0
10004096:	d100      	bne.n	1000409a <__aeabi_dsub+0xd6>
10004098:	e0f0      	b.n	1000427c <__aeabi_dsub+0x2b8>
1000409a:	4640      	mov	r0, r8
1000409c:	f000 fbb8 	bl	10004810 <__clzsi2>
100040a0:	1c02      	adds	r2, r0, #0
100040a2:	3a08      	subs	r2, #8
100040a4:	2a1f      	cmp	r2, #31
100040a6:	dd00      	ble.n	100040aa <__aeabi_dsub+0xe6>
100040a8:	e0f1      	b.n	1000428e <__aeabi_dsub+0x2ca>
100040aa:	2328      	movs	r3, #40	; 0x28
100040ac:	1a18      	subs	r0, r3, r0
100040ae:	1c2e      	adds	r6, r5, #0
100040b0:	4641      	mov	r1, r8
100040b2:	40c6      	lsrs	r6, r0
100040b4:	4091      	lsls	r1, r2
100040b6:	1c33      	adds	r3, r6, #0
100040b8:	430b      	orrs	r3, r1
100040ba:	4095      	lsls	r5, r2
100040bc:	4297      	cmp	r7, r2
100040be:	dd00      	ble.n	100040c2 <__aeabi_dsub+0xfe>
100040c0:	e0a9      	b.n	10004216 <__aeabi_dsub+0x252>
100040c2:	1bd0      	subs	r0, r2, r7
100040c4:	1c41      	adds	r1, r0, #1
100040c6:	291f      	cmp	r1, #31
100040c8:	dd00      	ble.n	100040cc <__aeabi_dsub+0x108>
100040ca:	e112      	b.n	100042f2 <__aeabi_dsub+0x32e>
100040cc:	271f      	movs	r7, #31
100040ce:	1a3a      	subs	r2, r7, r0
100040d0:	1c2e      	adds	r6, r5, #0
100040d2:	1c18      	adds	r0, r3, #0
100040d4:	40ce      	lsrs	r6, r1
100040d6:	4090      	lsls	r0, r2
100040d8:	4095      	lsls	r5, r2
100040da:	4330      	orrs	r0, r6
100040dc:	1e6a      	subs	r2, r5, #1
100040de:	4195      	sbcs	r5, r2
100040e0:	40cb      	lsrs	r3, r1
100040e2:	4305      	orrs	r5, r0
100040e4:	2101      	movs	r1, #1
100040e6:	2700      	movs	r7, #0
100040e8:	260f      	movs	r6, #15
100040ea:	402e      	ands	r6, r5
100040ec:	2e04      	cmp	r6, #4
100040ee:	d100      	bne.n	100040f2 <__aeabi_dsub+0x12e>
100040f0:	e072      	b.n	100041d8 <__aeabi_dsub+0x214>
100040f2:	1d2e      	adds	r6, r5, #4
100040f4:	42ae      	cmp	r6, r5
100040f6:	41ad      	sbcs	r5, r5
100040f8:	4268      	negs	r0, r5
100040fa:	2280      	movs	r2, #128	; 0x80
100040fc:	181b      	adds	r3, r3, r0
100040fe:	2501      	movs	r5, #1
10004100:	0410      	lsls	r0, r2, #16
10004102:	4018      	ands	r0, r3
10004104:	402c      	ands	r4, r5
10004106:	2800      	cmp	r0, #0
10004108:	d007      	beq.n	1000411a <__aeabi_dsub+0x156>
1000410a:	4f83      	ldr	r7, [pc, #524]	; (10004318 <__aeabi_dsub+0x354>)
1000410c:	42b9      	cmp	r1, r7
1000410e:	d100      	bne.n	10004112 <__aeabi_dsub+0x14e>
10004110:	e0b0      	b.n	10004274 <__aeabi_dsub+0x2b0>
10004112:	4a82      	ldr	r2, [pc, #520]	; (1000431c <__aeabi_dsub+0x358>)
10004114:	1c0f      	adds	r7, r1, #0
10004116:	4013      	ands	r3, r2
10004118:	3101      	adds	r1, #1
1000411a:	08f2      	lsrs	r2, r6, #3
1000411c:	0549      	lsls	r1, r1, #21
1000411e:	075e      	lsls	r6, r3, #29
10004120:	4332      	orrs	r2, r6
10004122:	08db      	lsrs	r3, r3, #3
10004124:	0d48      	lsrs	r0, r1, #21
10004126:	2801      	cmp	r0, #1
10004128:	dc00      	bgt.n	1000412c <__aeabi_dsub+0x168>
1000412a:	e079      	b.n	10004220 <__aeabi_dsub+0x25c>
1000412c:	031b      	lsls	r3, r3, #12
1000412e:	0578      	lsls	r0, r7, #21
10004130:	0b1e      	lsrs	r6, r3, #12
10004132:	0d47      	lsrs	r7, r0, #21
10004134:	2000      	movs	r0, #0
10004136:	2100      	movs	r1, #0
10004138:	0d09      	lsrs	r1, r1, #20
1000413a:	057d      	lsls	r5, r7, #21
1000413c:	050b      	lsls	r3, r1, #20
1000413e:	4f78      	ldr	r7, [pc, #480]	; (10004320 <__aeabi_dsub+0x35c>)
10004140:	431e      	orrs	r6, r3
10004142:	1c10      	adds	r0, r2, #0
10004144:	4037      	ands	r7, r6
10004146:	086a      	lsrs	r2, r5, #1
10004148:	4317      	orrs	r7, r2
1000414a:	007e      	lsls	r6, r7, #1
1000414c:	0871      	lsrs	r1, r6, #1
1000414e:	07e4      	lsls	r4, r4, #31
10004150:	4321      	orrs	r1, r4
10004152:	bc1c      	pop	{r2, r3, r4}
10004154:	4690      	mov	r8, r2
10004156:	4699      	mov	r9, r3
10004158:	46a2      	mov	sl, r4
1000415a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000415c:	1ab3      	subs	r3, r6, r2
1000415e:	2b00      	cmp	r3, #0
10004160:	dc00      	bgt.n	10004164 <__aeabi_dsub+0x1a0>
10004162:	e0a6      	b.n	100042b2 <__aeabi_dsub+0x2ee>
10004164:	2a00      	cmp	r2, #0
10004166:	d03e      	beq.n	100041e6 <__aeabi_dsub+0x222>
10004168:	4a6b      	ldr	r2, [pc, #428]	; (10004318 <__aeabi_dsub+0x354>)
1000416a:	4296      	cmp	r6, r2
1000416c:	d04e      	beq.n	1000420c <__aeabi_dsub+0x248>
1000416e:	2180      	movs	r1, #128	; 0x80
10004170:	040f      	lsls	r7, r1, #16
10004172:	4338      	orrs	r0, r7
10004174:	2b38      	cmp	r3, #56	; 0x38
10004176:	dc00      	bgt.n	1000417a <__aeabi_dsub+0x1b6>
10004178:	e118      	b.n	100043ac <__aeabi_dsub+0x3e8>
1000417a:	4653      	mov	r3, sl
1000417c:	4318      	orrs	r0, r3
1000417e:	2700      	movs	r7, #0
10004180:	2200      	movs	r2, #0
10004182:	2800      	cmp	r0, #0
10004184:	d000      	beq.n	10004188 <__aeabi_dsub+0x1c4>
10004186:	2201      	movs	r2, #1
10004188:	1952      	adds	r2, r2, r5
1000418a:	42aa      	cmp	r2, r5
1000418c:	41ad      	sbcs	r5, r5
1000418e:	4467      	add	r7, ip
10004190:	426b      	negs	r3, r5
10004192:	18fb      	adds	r3, r7, r3
10004194:	1c15      	adds	r5, r2, #0
10004196:	1c37      	adds	r7, r6, #0
10004198:	021e      	lsls	r6, r3, #8
1000419a:	d53f      	bpl.n	1000421c <__aeabi_dsub+0x258>
1000419c:	485e      	ldr	r0, [pc, #376]	; (10004318 <__aeabi_dsub+0x354>)
1000419e:	1c7e      	adds	r6, r7, #1
100041a0:	4286      	cmp	r6, r0
100041a2:	d100      	bne.n	100041a6 <__aeabi_dsub+0x1e2>
100041a4:	e17b      	b.n	1000449e <__aeabi_dsub+0x4da>
100041a6:	495d      	ldr	r1, [pc, #372]	; (1000431c <__aeabi_dsub+0x358>)
100041a8:	2201      	movs	r2, #1
100041aa:	402a      	ands	r2, r5
100041ac:	400b      	ands	r3, r1
100041ae:	0868      	lsrs	r0, r5, #1
100041b0:	1c15      	adds	r5, r2, #0
100041b2:	07d9      	lsls	r1, r3, #31
100041b4:	4305      	orrs	r5, r0
100041b6:	430d      	orrs	r5, r1
100041b8:	085b      	lsrs	r3, r3, #1
100041ba:	1cb9      	adds	r1, r7, #2
100041bc:	1c37      	adds	r7, r6, #0
100041be:	e793      	b.n	100040e8 <__aeabi_dsub+0x124>
100041c0:	4301      	orrs	r1, r0
100041c2:	d100      	bne.n	100041c6 <__aeabi_dsub+0x202>
100041c4:	e71b      	b.n	10003ffe <__aeabi_dsub+0x3a>
100041c6:	e71c      	b.n	10004002 <__aeabi_dsub+0x3e>
100041c8:	1c71      	adds	r1, r6, #1
100041ca:	1c37      	adds	r7, r6, #0
100041cc:	260f      	movs	r6, #15
100041ce:	4663      	mov	r3, ip
100041d0:	402e      	ands	r6, r5
100041d2:	2e04      	cmp	r6, #4
100041d4:	d000      	beq.n	100041d8 <__aeabi_dsub+0x214>
100041d6:	e78c      	b.n	100040f2 <__aeabi_dsub+0x12e>
100041d8:	2280      	movs	r2, #128	; 0x80
100041da:	2601      	movs	r6, #1
100041dc:	0410      	lsls	r0, r2, #16
100041de:	4034      	ands	r4, r6
100041e0:	4018      	ands	r0, r3
100041e2:	1c2e      	adds	r6, r5, #0
100041e4:	e78f      	b.n	10004106 <__aeabi_dsub+0x142>
100041e6:	4652      	mov	r2, sl
100041e8:	4302      	orrs	r2, r0
100041ea:	d0ed      	beq.n	100041c8 <__aeabi_dsub+0x204>
100041ec:	3b01      	subs	r3, #1
100041ee:	2b00      	cmp	r3, #0
100041f0:	d109      	bne.n	10004206 <__aeabi_dsub+0x242>
100041f2:	4657      	mov	r7, sl
100041f4:	1979      	adds	r1, r7, r5
100041f6:	42a9      	cmp	r1, r5
100041f8:	4192      	sbcs	r2, r2
100041fa:	4255      	negs	r5, r2
100041fc:	4460      	add	r0, ip
100041fe:	1943      	adds	r3, r0, r5
10004200:	1c37      	adds	r7, r6, #0
10004202:	1c0d      	adds	r5, r1, #0
10004204:	e7c8      	b.n	10004198 <__aeabi_dsub+0x1d4>
10004206:	4944      	ldr	r1, [pc, #272]	; (10004318 <__aeabi_dsub+0x354>)
10004208:	428e      	cmp	r6, r1
1000420a:	d1b3      	bne.n	10004174 <__aeabi_dsub+0x1b0>
1000420c:	2080      	movs	r0, #128	; 0x80
1000420e:	4663      	mov	r3, ip
10004210:	0101      	lsls	r1, r0, #4
10004212:	1c37      	adds	r7, r6, #0
10004214:	e768      	b.n	100040e8 <__aeabi_dsub+0x124>
10004216:	1abf      	subs	r7, r7, r2
10004218:	4a40      	ldr	r2, [pc, #256]	; (1000431c <__aeabi_dsub+0x358>)
1000421a:	4013      	ands	r3, r2
1000421c:	1c79      	adds	r1, r7, #1
1000421e:	e763      	b.n	100040e8 <__aeabi_dsub+0x124>
10004220:	1c15      	adds	r5, r2, #0
10004222:	431d      	orrs	r5, r3
10004224:	d100      	bne.n	10004228 <__aeabi_dsub+0x264>
10004226:	e221      	b.n	1000466c <__aeabi_dsub+0x6a8>
10004228:	2f00      	cmp	r7, #0
1000422a:	d03e      	beq.n	100042aa <__aeabi_dsub+0x2e6>
1000422c:	2680      	movs	r6, #128	; 0x80
1000422e:	0331      	lsls	r1, r6, #12
10004230:	430b      	orrs	r3, r1
10004232:	e77b      	b.n	1000412c <__aeabi_dsub+0x168>
10004234:	2f00      	cmp	r7, #0
10004236:	d000      	beq.n	1000423a <__aeabi_dsub+0x276>
10004238:	e086      	b.n	10004348 <__aeabi_dsub+0x384>
1000423a:	1c72      	adds	r2, r6, #1
1000423c:	0551      	lsls	r1, r2, #21
1000423e:	0d4b      	lsrs	r3, r1, #21
10004240:	2b01      	cmp	r3, #1
10004242:	dc00      	bgt.n	10004246 <__aeabi_dsub+0x282>
10004244:	e0f0      	b.n	10004428 <__aeabi_dsub+0x464>
10004246:	4657      	mov	r7, sl
10004248:	1bea      	subs	r2, r5, r7
1000424a:	4295      	cmp	r5, r2
1000424c:	419b      	sbcs	r3, r3
1000424e:	4667      	mov	r7, ip
10004250:	1a39      	subs	r1, r7, r0
10004252:	425b      	negs	r3, r3
10004254:	1ac9      	subs	r1, r1, r3
10004256:	4688      	mov	r8, r1
10004258:	020b      	lsls	r3, r1, #8
1000425a:	d400      	bmi.n	1000425e <__aeabi_dsub+0x29a>
1000425c:	e09d      	b.n	1000439a <__aeabi_dsub+0x3d6>
1000425e:	4654      	mov	r4, sl
10004260:	1b65      	subs	r5, r4, r5
10004262:	45aa      	cmp	sl, r5
10004264:	4192      	sbcs	r2, r2
10004266:	1bc0      	subs	r0, r0, r7
10004268:	4257      	negs	r7, r2
1000426a:	1bc3      	subs	r3, r0, r7
1000426c:	4698      	mov	r8, r3
1000426e:	1c37      	adds	r7, r6, #0
10004270:	464c      	mov	r4, r9
10004272:	e70e      	b.n	10004092 <__aeabi_dsub+0xce>
10004274:	1c0f      	adds	r7, r1, #0
10004276:	2600      	movs	r6, #0
10004278:	2200      	movs	r2, #0
1000427a:	e75b      	b.n	10004134 <__aeabi_dsub+0x170>
1000427c:	1c28      	adds	r0, r5, #0
1000427e:	f000 fac7 	bl	10004810 <__clzsi2>
10004282:	3020      	adds	r0, #32
10004284:	1c02      	adds	r2, r0, #0
10004286:	3a08      	subs	r2, #8
10004288:	2a1f      	cmp	r2, #31
1000428a:	dc00      	bgt.n	1000428e <__aeabi_dsub+0x2ca>
1000428c:	e70d      	b.n	100040aa <__aeabi_dsub+0xe6>
1000428e:	3828      	subs	r0, #40	; 0x28
10004290:	4085      	lsls	r5, r0
10004292:	1c2b      	adds	r3, r5, #0
10004294:	2500      	movs	r5, #0
10004296:	e711      	b.n	100040bc <__aeabi_dsub+0xf8>
10004298:	4657      	mov	r7, sl
1000429a:	4338      	orrs	r0, r7
1000429c:	2300      	movs	r3, #0
1000429e:	2200      	movs	r2, #0
100042a0:	2800      	cmp	r0, #0
100042a2:	d100      	bne.n	100042a6 <__aeabi_dsub+0x2e2>
100042a4:	e6e6      	b.n	10004074 <__aeabi_dsub+0xb0>
100042a6:	2201      	movs	r2, #1
100042a8:	e6e4      	b.n	10004074 <__aeabi_dsub+0xb0>
100042aa:	031d      	lsls	r5, r3, #12
100042ac:	0b2e      	lsrs	r6, r5, #12
100042ae:	2700      	movs	r7, #0
100042b0:	e740      	b.n	10004134 <__aeabi_dsub+0x170>
100042b2:	2b00      	cmp	r3, #0
100042b4:	d000      	beq.n	100042b8 <__aeabi_dsub+0x2f4>
100042b6:	e0d9      	b.n	1000446c <__aeabi_dsub+0x4a8>
100042b8:	1c77      	adds	r7, r6, #1
100042ba:	0579      	lsls	r1, r7, #21
100042bc:	0d4a      	lsrs	r2, r1, #21
100042be:	2a01      	cmp	r2, #1
100042c0:	dc00      	bgt.n	100042c4 <__aeabi_dsub+0x300>
100042c2:	e095      	b.n	100043f0 <__aeabi_dsub+0x42c>
100042c4:	4b14      	ldr	r3, [pc, #80]	; (10004318 <__aeabi_dsub+0x354>)
100042c6:	429f      	cmp	r7, r3
100042c8:	d100      	bne.n	100042cc <__aeabi_dsub+0x308>
100042ca:	e0fe      	b.n	100044ca <__aeabi_dsub+0x506>
100042cc:	4651      	mov	r1, sl
100042ce:	1949      	adds	r1, r1, r5
100042d0:	42a9      	cmp	r1, r5
100042d2:	41ad      	sbcs	r5, r5
100042d4:	4662      	mov	r2, ip
100042d6:	426b      	negs	r3, r5
100042d8:	1880      	adds	r0, r0, r2
100042da:	18c2      	adds	r2, r0, r3
100042dc:	0849      	lsrs	r1, r1, #1
100042de:	07d5      	lsls	r5, r2, #31
100042e0:	430d      	orrs	r5, r1
100042e2:	0853      	lsrs	r3, r2, #1
100042e4:	1cb1      	adds	r1, r6, #2
100042e6:	e6ff      	b.n	100040e8 <__aeabi_dsub+0x124>
100042e8:	490b      	ldr	r1, [pc, #44]	; (10004318 <__aeabi_dsub+0x354>)
100042ea:	428e      	cmp	r6, r1
100042ec:	d000      	beq.n	100042f0 <__aeabi_dsub+0x32c>
100042ee:	e6ac      	b.n	1000404a <__aeabi_dsub+0x86>
100042f0:	e78c      	b.n	1000420c <__aeabi_dsub+0x248>
100042f2:	1c06      	adds	r6, r0, #0
100042f4:	3e1f      	subs	r6, #31
100042f6:	1c1f      	adds	r7, r3, #0
100042f8:	40f7      	lsrs	r7, r6
100042fa:	1c3e      	adds	r6, r7, #0
100042fc:	2920      	cmp	r1, #32
100042fe:	d073      	beq.n	100043e8 <__aeabi_dsub+0x424>
10004300:	223f      	movs	r2, #63	; 0x3f
10004302:	1a10      	subs	r0, r2, r0
10004304:	4083      	lsls	r3, r0
10004306:	431d      	orrs	r5, r3
10004308:	1e6b      	subs	r3, r5, #1
1000430a:	419d      	sbcs	r5, r3
1000430c:	4335      	orrs	r5, r6
1000430e:	2101      	movs	r1, #1
10004310:	2300      	movs	r3, #0
10004312:	2700      	movs	r7, #0
10004314:	e6e8      	b.n	100040e8 <__aeabi_dsub+0x124>
10004316:	46c0      	nop			; (mov r8, r8)
10004318:	000007ff 	.word	0x000007ff
1000431c:	ff7fffff 	.word	0xff7fffff
10004320:	800fffff 	.word	0x800fffff
10004324:	1c3b      	adds	r3, r7, #0
10004326:	3b20      	subs	r3, #32
10004328:	1c01      	adds	r1, r0, #0
1000432a:	40d9      	lsrs	r1, r3
1000432c:	1c0b      	adds	r3, r1, #0
1000432e:	2f20      	cmp	r7, #32
10004330:	d05c      	beq.n	100043ec <__aeabi_dsub+0x428>
10004332:	2240      	movs	r2, #64	; 0x40
10004334:	1bd7      	subs	r7, r2, r7
10004336:	40b8      	lsls	r0, r7
10004338:	1c02      	adds	r2, r0, #0
1000433a:	4650      	mov	r0, sl
1000433c:	4302      	orrs	r2, r0
1000433e:	1e51      	subs	r1, r2, #1
10004340:	418a      	sbcs	r2, r1
10004342:	431a      	orrs	r2, r3
10004344:	2300      	movs	r3, #0
10004346:	e695      	b.n	10004074 <__aeabi_dsub+0xb0>
10004348:	427f      	negs	r7, r7
1000434a:	2e00      	cmp	r6, #0
1000434c:	d040      	beq.n	100043d0 <__aeabi_dsub+0x40c>
1000434e:	4cca      	ldr	r4, [pc, #808]	; (10004678 <__aeabi_dsub+0x6b4>)
10004350:	42a2      	cmp	r2, r4
10004352:	d100      	bne.n	10004356 <__aeabi_dsub+0x392>
10004354:	e11f      	b.n	10004596 <__aeabi_dsub+0x5d2>
10004356:	2180      	movs	r1, #128	; 0x80
10004358:	4666      	mov	r6, ip
1000435a:	040b      	lsls	r3, r1, #16
1000435c:	431e      	orrs	r6, r3
1000435e:	46b4      	mov	ip, r6
10004360:	2f38      	cmp	r7, #56	; 0x38
10004362:	dd00      	ble.n	10004366 <__aeabi_dsub+0x3a2>
10004364:	e0a9      	b.n	100044ba <__aeabi_dsub+0x4f6>
10004366:	2f1f      	cmp	r7, #31
10004368:	dd00      	ble.n	1000436c <__aeabi_dsub+0x3a8>
1000436a:	e13d      	b.n	100045e8 <__aeabi_dsub+0x624>
1000436c:	2320      	movs	r3, #32
1000436e:	1bde      	subs	r6, r3, r7
10004370:	1c29      	adds	r1, r5, #0
10004372:	4664      	mov	r4, ip
10004374:	40b4      	lsls	r4, r6
10004376:	40f9      	lsrs	r1, r7
10004378:	40b5      	lsls	r5, r6
1000437a:	1e6b      	subs	r3, r5, #1
1000437c:	419d      	sbcs	r5, r3
1000437e:	4321      	orrs	r1, r4
10004380:	4663      	mov	r3, ip
10004382:	430d      	orrs	r5, r1
10004384:	40fb      	lsrs	r3, r7
10004386:	4657      	mov	r7, sl
10004388:	1b7d      	subs	r5, r7, r5
1000438a:	1ac0      	subs	r0, r0, r3
1000438c:	45aa      	cmp	sl, r5
1000438e:	419b      	sbcs	r3, r3
10004390:	425f      	negs	r7, r3
10004392:	1bc3      	subs	r3, r0, r7
10004394:	464c      	mov	r4, r9
10004396:	1c17      	adds	r7, r2, #0
10004398:	e675      	b.n	10004086 <__aeabi_dsub+0xc2>
1000439a:	1c0d      	adds	r5, r1, #0
1000439c:	4315      	orrs	r5, r2
1000439e:	d120      	bne.n	100043e2 <__aeabi_dsub+0x41e>
100043a0:	2400      	movs	r4, #0
100043a2:	2101      	movs	r1, #1
100043a4:	2300      	movs	r3, #0
100043a6:	2604      	movs	r6, #4
100043a8:	2700      	movs	r7, #0
100043aa:	e6b6      	b.n	1000411a <__aeabi_dsub+0x156>
100043ac:	2b1f      	cmp	r3, #31
100043ae:	dc4a      	bgt.n	10004446 <__aeabi_dsub+0x482>
100043b0:	2120      	movs	r1, #32
100043b2:	1ac9      	subs	r1, r1, r3
100043b4:	1c07      	adds	r7, r0, #0
100043b6:	4652      	mov	r2, sl
100043b8:	408f      	lsls	r7, r1
100043ba:	40da      	lsrs	r2, r3
100043bc:	433a      	orrs	r2, r7
100043be:	4657      	mov	r7, sl
100043c0:	408f      	lsls	r7, r1
100043c2:	1c39      	adds	r1, r7, #0
100043c4:	1e4f      	subs	r7, r1, #1
100043c6:	41b9      	sbcs	r1, r7
100043c8:	40d8      	lsrs	r0, r3
100043ca:	430a      	orrs	r2, r1
100043cc:	1c07      	adds	r7, r0, #0
100043ce:	e6db      	b.n	10004188 <__aeabi_dsub+0x1c4>
100043d0:	4664      	mov	r4, ip
100043d2:	432c      	orrs	r4, r5
100043d4:	d169      	bne.n	100044aa <__aeabi_dsub+0x4e6>
100043d6:	1c51      	adds	r1, r2, #1
100043d8:	1c03      	adds	r3, r0, #0
100043da:	4655      	mov	r5, sl
100043dc:	1c17      	adds	r7, r2, #0
100043de:	464c      	mov	r4, r9
100043e0:	e682      	b.n	100040e8 <__aeabi_dsub+0x124>
100043e2:	1c15      	adds	r5, r2, #0
100043e4:	1c37      	adds	r7, r6, #0
100043e6:	e654      	b.n	10004092 <__aeabi_dsub+0xce>
100043e8:	2300      	movs	r3, #0
100043ea:	e78c      	b.n	10004306 <__aeabi_dsub+0x342>
100043ec:	2200      	movs	r2, #0
100043ee:	e7a4      	b.n	1000433a <__aeabi_dsub+0x376>
100043f0:	4667      	mov	r7, ip
100043f2:	432f      	orrs	r7, r5
100043f4:	2e00      	cmp	r6, #0
100043f6:	d000      	beq.n	100043fa <__aeabi_dsub+0x436>
100043f8:	e0d4      	b.n	100045a4 <__aeabi_dsub+0x5e0>
100043fa:	2f00      	cmp	r7, #0
100043fc:	d100      	bne.n	10004400 <__aeabi_dsub+0x43c>
100043fe:	e126      	b.n	1000464e <__aeabi_dsub+0x68a>
10004400:	4653      	mov	r3, sl
10004402:	4303      	orrs	r3, r0
10004404:	d100      	bne.n	10004408 <__aeabi_dsub+0x444>
10004406:	e0e4      	b.n	100045d2 <__aeabi_dsub+0x60e>
10004408:	4651      	mov	r1, sl
1000440a:	194f      	adds	r7, r1, r5
1000440c:	42af      	cmp	r7, r5
1000440e:	41ad      	sbcs	r5, r5
10004410:	4460      	add	r0, ip
10004412:	426e      	negs	r6, r5
10004414:	1983      	adds	r3, r0, r6
10004416:	021e      	lsls	r6, r3, #8
10004418:	d400      	bmi.n	1000441c <__aeabi_dsub+0x458>
1000441a:	e14e      	b.n	100046ba <__aeabi_dsub+0x6f6>
1000441c:	4897      	ldr	r0, [pc, #604]	; (1000467c <__aeabi_dsub+0x6b8>)
1000441e:	1c3d      	adds	r5, r7, #0
10004420:	4003      	ands	r3, r0
10004422:	2102      	movs	r1, #2
10004424:	2701      	movs	r7, #1
10004426:	e65f      	b.n	100040e8 <__aeabi_dsub+0x124>
10004428:	4661      	mov	r1, ip
1000442a:	4329      	orrs	r1, r5
1000442c:	2e00      	cmp	r6, #0
1000442e:	d129      	bne.n	10004484 <__aeabi_dsub+0x4c0>
10004430:	2900      	cmp	r1, #0
10004432:	d176      	bne.n	10004522 <__aeabi_dsub+0x55e>
10004434:	4651      	mov	r1, sl
10004436:	4301      	orrs	r1, r0
10004438:	d0b2      	beq.n	100043a0 <__aeabi_dsub+0x3dc>
1000443a:	1c03      	adds	r3, r0, #0
1000443c:	4655      	mov	r5, sl
1000443e:	464c      	mov	r4, r9
10004440:	2101      	movs	r1, #1
10004442:	2700      	movs	r7, #0
10004444:	e650      	b.n	100040e8 <__aeabi_dsub+0x124>
10004446:	1c1f      	adds	r7, r3, #0
10004448:	3f20      	subs	r7, #32
1000444a:	1c01      	adds	r1, r0, #0
1000444c:	40f9      	lsrs	r1, r7
1000444e:	1c0f      	adds	r7, r1, #0
10004450:	2b20      	cmp	r3, #32
10004452:	d100      	bne.n	10004456 <__aeabi_dsub+0x492>
10004454:	e0c6      	b.n	100045e4 <__aeabi_dsub+0x620>
10004456:	2240      	movs	r2, #64	; 0x40
10004458:	1ad3      	subs	r3, r2, r3
1000445a:	4098      	lsls	r0, r3
1000445c:	1c02      	adds	r2, r0, #0
1000445e:	4650      	mov	r0, sl
10004460:	4302      	orrs	r2, r0
10004462:	1e53      	subs	r3, r2, #1
10004464:	419a      	sbcs	r2, r3
10004466:	433a      	orrs	r2, r7
10004468:	2700      	movs	r7, #0
1000446a:	e68d      	b.n	10004188 <__aeabi_dsub+0x1c4>
1000446c:	425b      	negs	r3, r3
1000446e:	2e00      	cmp	r6, #0
10004470:	d130      	bne.n	100044d4 <__aeabi_dsub+0x510>
10004472:	4667      	mov	r7, ip
10004474:	432f      	orrs	r7, r5
10004476:	d000      	beq.n	1000447a <__aeabi_dsub+0x4b6>
10004478:	e0c8      	b.n	1000460c <__aeabi_dsub+0x648>
1000447a:	1c51      	adds	r1, r2, #1
1000447c:	1c03      	adds	r3, r0, #0
1000447e:	4655      	mov	r5, sl
10004480:	1c17      	adds	r7, r2, #0
10004482:	e631      	b.n	100040e8 <__aeabi_dsub+0x124>
10004484:	2900      	cmp	r1, #0
10004486:	d165      	bne.n	10004554 <__aeabi_dsub+0x590>
10004488:	4657      	mov	r7, sl
1000448a:	4307      	orrs	r7, r0
1000448c:	d100      	bne.n	10004490 <__aeabi_dsub+0x4cc>
1000448e:	e0c8      	b.n	10004622 <__aeabi_dsub+0x65e>
10004490:	1c03      	adds	r3, r0, #0
10004492:	2080      	movs	r0, #128	; 0x80
10004494:	4655      	mov	r5, sl
10004496:	464c      	mov	r4, r9
10004498:	0101      	lsls	r1, r0, #4
1000449a:	4f77      	ldr	r7, [pc, #476]	; (10004678 <__aeabi_dsub+0x6b4>)
1000449c:	e624      	b.n	100040e8 <__aeabi_dsub+0x124>
1000449e:	2380      	movs	r3, #128	; 0x80
100044a0:	1c37      	adds	r7, r6, #0
100044a2:	0119      	lsls	r1, r3, #4
100044a4:	2604      	movs	r6, #4
100044a6:	2300      	movs	r3, #0
100044a8:	e637      	b.n	1000411a <__aeabi_dsub+0x156>
100044aa:	3f01      	subs	r7, #1
100044ac:	2f00      	cmp	r7, #0
100044ae:	d16e      	bne.n	1000458e <__aeabi_dsub+0x5ca>
100044b0:	4654      	mov	r4, sl
100044b2:	4661      	mov	r1, ip
100044b4:	1b65      	subs	r5, r4, r5
100044b6:	1a40      	subs	r0, r0, r1
100044b8:	e768      	b.n	1000438c <__aeabi_dsub+0x3c8>
100044ba:	4667      	mov	r7, ip
100044bc:	433d      	orrs	r5, r7
100044be:	2300      	movs	r3, #0
100044c0:	2d00      	cmp	r5, #0
100044c2:	d100      	bne.n	100044c6 <__aeabi_dsub+0x502>
100044c4:	e75f      	b.n	10004386 <__aeabi_dsub+0x3c2>
100044c6:	2501      	movs	r5, #1
100044c8:	e75d      	b.n	10004386 <__aeabi_dsub+0x3c2>
100044ca:	2680      	movs	r6, #128	; 0x80
100044cc:	0131      	lsls	r1, r6, #4
100044ce:	2300      	movs	r3, #0
100044d0:	2604      	movs	r6, #4
100044d2:	e622      	b.n	1000411a <__aeabi_dsub+0x156>
100044d4:	4968      	ldr	r1, [pc, #416]	; (10004678 <__aeabi_dsub+0x6b4>)
100044d6:	428a      	cmp	r2, r1
100044d8:	d100      	bne.n	100044dc <__aeabi_dsub+0x518>
100044da:	e0c1      	b.n	10004660 <__aeabi_dsub+0x69c>
100044dc:	2780      	movs	r7, #128	; 0x80
100044de:	4666      	mov	r6, ip
100044e0:	0439      	lsls	r1, r7, #16
100044e2:	430e      	orrs	r6, r1
100044e4:	46b4      	mov	ip, r6
100044e6:	2b38      	cmp	r3, #56	; 0x38
100044e8:	dd00      	ble.n	100044ec <__aeabi_dsub+0x528>
100044ea:	e0a2      	b.n	10004632 <__aeabi_dsub+0x66e>
100044ec:	2b1f      	cmp	r3, #31
100044ee:	dd00      	ble.n	100044f2 <__aeabi_dsub+0x52e>
100044f0:	e0d0      	b.n	10004694 <__aeabi_dsub+0x6d0>
100044f2:	2120      	movs	r1, #32
100044f4:	1ac9      	subs	r1, r1, r3
100044f6:	1c2e      	adds	r6, r5, #0
100044f8:	4667      	mov	r7, ip
100044fa:	408f      	lsls	r7, r1
100044fc:	408d      	lsls	r5, r1
100044fe:	40de      	lsrs	r6, r3
10004500:	433e      	orrs	r6, r7
10004502:	1c29      	adds	r1, r5, #0
10004504:	4667      	mov	r7, ip
10004506:	1e4d      	subs	r5, r1, #1
10004508:	41a9      	sbcs	r1, r5
1000450a:	40df      	lsrs	r7, r3
1000450c:	1c35      	adds	r5, r6, #0
1000450e:	430d      	orrs	r5, r1
10004510:	1c3e      	adds	r6, r7, #0
10004512:	4455      	add	r5, sl
10004514:	4555      	cmp	r5, sl
10004516:	419b      	sbcs	r3, r3
10004518:	1830      	adds	r0, r6, r0
1000451a:	425e      	negs	r6, r3
1000451c:	1983      	adds	r3, r0, r6
1000451e:	1c17      	adds	r7, r2, #0
10004520:	e63a      	b.n	10004198 <__aeabi_dsub+0x1d4>
10004522:	4656      	mov	r6, sl
10004524:	4306      	orrs	r6, r0
10004526:	d054      	beq.n	100045d2 <__aeabi_dsub+0x60e>
10004528:	4657      	mov	r7, sl
1000452a:	1bea      	subs	r2, r5, r7
1000452c:	4663      	mov	r3, ip
1000452e:	4295      	cmp	r5, r2
10004530:	41b6      	sbcs	r6, r6
10004532:	1a19      	subs	r1, r3, r0
10004534:	4273      	negs	r3, r6
10004536:	1acb      	subs	r3, r1, r3
10004538:	021e      	lsls	r6, r3, #8
1000453a:	d400      	bmi.n	1000453e <__aeabi_dsub+0x57a>
1000453c:	e0a2      	b.n	10004684 <__aeabi_dsub+0x6c0>
1000453e:	1b7d      	subs	r5, r7, r5
10004540:	4664      	mov	r4, ip
10004542:	45aa      	cmp	sl, r5
10004544:	41bf      	sbcs	r7, r7
10004546:	1b00      	subs	r0, r0, r4
10004548:	427a      	negs	r2, r7
1000454a:	1a83      	subs	r3, r0, r2
1000454c:	464c      	mov	r4, r9
1000454e:	2101      	movs	r1, #1
10004550:	2700      	movs	r7, #0
10004552:	e5c9      	b.n	100040e8 <__aeabi_dsub+0x124>
10004554:	4656      	mov	r6, sl
10004556:	4306      	orrs	r6, r0
10004558:	d03f      	beq.n	100045da <__aeabi_dsub+0x616>
1000455a:	4662      	mov	r2, ip
1000455c:	2180      	movs	r1, #128	; 0x80
1000455e:	0757      	lsls	r7, r2, #29
10004560:	08ed      	lsrs	r5, r5, #3
10004562:	08d3      	lsrs	r3, r2, #3
10004564:	030a      	lsls	r2, r1, #12
10004566:	433d      	orrs	r5, r7
10004568:	4213      	tst	r3, r2
1000456a:	d008      	beq.n	1000457e <__aeabi_dsub+0x5ba>
1000456c:	08c6      	lsrs	r6, r0, #3
1000456e:	4216      	tst	r6, r2
10004570:	d105      	bne.n	1000457e <__aeabi_dsub+0x5ba>
10004572:	4655      	mov	r5, sl
10004574:	08ec      	lsrs	r4, r5, #3
10004576:	0745      	lsls	r5, r0, #29
10004578:	4325      	orrs	r5, r4
1000457a:	1c33      	adds	r3, r6, #0
1000457c:	464c      	mov	r4, r9
1000457e:	0f68      	lsrs	r0, r5, #29
10004580:	00db      	lsls	r3, r3, #3
10004582:	2680      	movs	r6, #128	; 0x80
10004584:	4303      	orrs	r3, r0
10004586:	00ed      	lsls	r5, r5, #3
10004588:	0131      	lsls	r1, r6, #4
1000458a:	4f3b      	ldr	r7, [pc, #236]	; (10004678 <__aeabi_dsub+0x6b4>)
1000458c:	e5ac      	b.n	100040e8 <__aeabi_dsub+0x124>
1000458e:	493a      	ldr	r1, [pc, #232]	; (10004678 <__aeabi_dsub+0x6b4>)
10004590:	428a      	cmp	r2, r1
10004592:	d000      	beq.n	10004596 <__aeabi_dsub+0x5d2>
10004594:	e6e4      	b.n	10004360 <__aeabi_dsub+0x39c>
10004596:	2680      	movs	r6, #128	; 0x80
10004598:	1c03      	adds	r3, r0, #0
1000459a:	4655      	mov	r5, sl
1000459c:	464c      	mov	r4, r9
1000459e:	0131      	lsls	r1, r6, #4
100045a0:	1c17      	adds	r7, r2, #0
100045a2:	e5a1      	b.n	100040e8 <__aeabi_dsub+0x124>
100045a4:	2f00      	cmp	r7, #0
100045a6:	d04c      	beq.n	10004642 <__aeabi_dsub+0x67e>
100045a8:	4653      	mov	r3, sl
100045aa:	4303      	orrs	r3, r0
100045ac:	d015      	beq.n	100045da <__aeabi_dsub+0x616>
100045ae:	4662      	mov	r2, ip
100045b0:	2680      	movs	r6, #128	; 0x80
100045b2:	08ed      	lsrs	r5, r5, #3
100045b4:	0751      	lsls	r1, r2, #29
100045b6:	08d3      	lsrs	r3, r2, #3
100045b8:	0337      	lsls	r7, r6, #12
100045ba:	430d      	orrs	r5, r1
100045bc:	423b      	tst	r3, r7
100045be:	d0de      	beq.n	1000457e <__aeabi_dsub+0x5ba>
100045c0:	08c2      	lsrs	r2, r0, #3
100045c2:	423a      	tst	r2, r7
100045c4:	d1db      	bne.n	1000457e <__aeabi_dsub+0x5ba>
100045c6:	4655      	mov	r5, sl
100045c8:	08e9      	lsrs	r1, r5, #3
100045ca:	0745      	lsls	r5, r0, #29
100045cc:	1c13      	adds	r3, r2, #0
100045ce:	430d      	orrs	r5, r1
100045d0:	e7d5      	b.n	1000457e <__aeabi_dsub+0x5ba>
100045d2:	4663      	mov	r3, ip
100045d4:	2101      	movs	r1, #1
100045d6:	2700      	movs	r7, #0
100045d8:	e586      	b.n	100040e8 <__aeabi_dsub+0x124>
100045da:	2780      	movs	r7, #128	; 0x80
100045dc:	0139      	lsls	r1, r7, #4
100045de:	4663      	mov	r3, ip
100045e0:	4f25      	ldr	r7, [pc, #148]	; (10004678 <__aeabi_dsub+0x6b4>)
100045e2:	e581      	b.n	100040e8 <__aeabi_dsub+0x124>
100045e4:	2200      	movs	r2, #0
100045e6:	e73a      	b.n	1000445e <__aeabi_dsub+0x49a>
100045e8:	1c3c      	adds	r4, r7, #0
100045ea:	3c20      	subs	r4, #32
100045ec:	4666      	mov	r6, ip
100045ee:	40e6      	lsrs	r6, r4
100045f0:	1c33      	adds	r3, r6, #0
100045f2:	2f20      	cmp	r7, #32
100045f4:	d05f      	beq.n	100046b6 <__aeabi_dsub+0x6f2>
100045f6:	2440      	movs	r4, #64	; 0x40
100045f8:	1be7      	subs	r7, r4, r7
100045fa:	4666      	mov	r6, ip
100045fc:	40be      	lsls	r6, r7
100045fe:	1c31      	adds	r1, r6, #0
10004600:	430d      	orrs	r5, r1
10004602:	1e69      	subs	r1, r5, #1
10004604:	418d      	sbcs	r5, r1
10004606:	431d      	orrs	r5, r3
10004608:	2300      	movs	r3, #0
1000460a:	e6bc      	b.n	10004386 <__aeabi_dsub+0x3c2>
1000460c:	3b01      	subs	r3, #1
1000460e:	2b00      	cmp	r3, #0
10004610:	d122      	bne.n	10004658 <__aeabi_dsub+0x694>
10004612:	4455      	add	r5, sl
10004614:	4555      	cmp	r5, sl
10004616:	41bf      	sbcs	r7, r7
10004618:	427b      	negs	r3, r7
1000461a:	4460      	add	r0, ip
1000461c:	18c3      	adds	r3, r0, r3
1000461e:	1c17      	adds	r7, r2, #0
10004620:	e5ba      	b.n	10004198 <__aeabi_dsub+0x1d4>
10004622:	2180      	movs	r1, #128	; 0x80
10004624:	2204      	movs	r2, #4
10004626:	2400      	movs	r4, #0
10004628:	0109      	lsls	r1, r1, #4
1000462a:	4b15      	ldr	r3, [pc, #84]	; (10004680 <__aeabi_dsub+0x6bc>)
1000462c:	4256      	negs	r6, r2
1000462e:	4f12      	ldr	r7, [pc, #72]	; (10004678 <__aeabi_dsub+0x6b4>)
10004630:	e573      	b.n	1000411a <__aeabi_dsub+0x156>
10004632:	4663      	mov	r3, ip
10004634:	431d      	orrs	r5, r3
10004636:	2600      	movs	r6, #0
10004638:	2d00      	cmp	r5, #0
1000463a:	d100      	bne.n	1000463e <__aeabi_dsub+0x67a>
1000463c:	e769      	b.n	10004512 <__aeabi_dsub+0x54e>
1000463e:	2501      	movs	r5, #1
10004640:	e767      	b.n	10004512 <__aeabi_dsub+0x54e>
10004642:	2280      	movs	r2, #128	; 0x80
10004644:	1c03      	adds	r3, r0, #0
10004646:	4655      	mov	r5, sl
10004648:	0111      	lsls	r1, r2, #4
1000464a:	4f0b      	ldr	r7, [pc, #44]	; (10004678 <__aeabi_dsub+0x6b4>)
1000464c:	e54c      	b.n	100040e8 <__aeabi_dsub+0x124>
1000464e:	1c03      	adds	r3, r0, #0
10004650:	4655      	mov	r5, sl
10004652:	2101      	movs	r1, #1
10004654:	2700      	movs	r7, #0
10004656:	e547      	b.n	100040e8 <__aeabi_dsub+0x124>
10004658:	4907      	ldr	r1, [pc, #28]	; (10004678 <__aeabi_dsub+0x6b4>)
1000465a:	428a      	cmp	r2, r1
1000465c:	d000      	beq.n	10004660 <__aeabi_dsub+0x69c>
1000465e:	e742      	b.n	100044e6 <__aeabi_dsub+0x522>
10004660:	2180      	movs	r1, #128	; 0x80
10004662:	1c03      	adds	r3, r0, #0
10004664:	4655      	mov	r5, sl
10004666:	0109      	lsls	r1, r1, #4
10004668:	1c17      	adds	r7, r2, #0
1000466a:	e53d      	b.n	100040e8 <__aeabi_dsub+0x124>
1000466c:	057f      	lsls	r7, r7, #21
1000466e:	0d7f      	lsrs	r7, r7, #21
10004670:	2600      	movs	r6, #0
10004672:	2200      	movs	r2, #0
10004674:	e55e      	b.n	10004134 <__aeabi_dsub+0x170>
10004676:	46c0      	nop			; (mov r8, r8)
10004678:	000007ff 	.word	0x000007ff
1000467c:	ff7fffff 	.word	0xff7fffff
10004680:	007fffff 	.word	0x007fffff
10004684:	1c1d      	adds	r5, r3, #0
10004686:	4315      	orrs	r5, r2
10004688:	d100      	bne.n	1000468c <__aeabi_dsub+0x6c8>
1000468a:	e689      	b.n	100043a0 <__aeabi_dsub+0x3dc>
1000468c:	1c15      	adds	r5, r2, #0
1000468e:	2101      	movs	r1, #1
10004690:	2700      	movs	r7, #0
10004692:	e529      	b.n	100040e8 <__aeabi_dsub+0x124>
10004694:	1c1f      	adds	r7, r3, #0
10004696:	3f20      	subs	r7, #32
10004698:	4661      	mov	r1, ip
1000469a:	40f9      	lsrs	r1, r7
1000469c:	2b20      	cmp	r3, #32
1000469e:	d010      	beq.n	100046c2 <__aeabi_dsub+0x6fe>
100046a0:	2640      	movs	r6, #64	; 0x40
100046a2:	1af3      	subs	r3, r6, r3
100046a4:	4667      	mov	r7, ip
100046a6:	409f      	lsls	r7, r3
100046a8:	1c3b      	adds	r3, r7, #0
100046aa:	431d      	orrs	r5, r3
100046ac:	1e6b      	subs	r3, r5, #1
100046ae:	419d      	sbcs	r5, r3
100046b0:	430d      	orrs	r5, r1
100046b2:	2600      	movs	r6, #0
100046b4:	e72d      	b.n	10004512 <__aeabi_dsub+0x54e>
100046b6:	2100      	movs	r1, #0
100046b8:	e7a2      	b.n	10004600 <__aeabi_dsub+0x63c>
100046ba:	1c3d      	adds	r5, r7, #0
100046bc:	2101      	movs	r1, #1
100046be:	2700      	movs	r7, #0
100046c0:	e512      	b.n	100040e8 <__aeabi_dsub+0x124>
100046c2:	2300      	movs	r3, #0
100046c4:	e7f1      	b.n	100046aa <__aeabi_dsub+0x6e6>
100046c6:	46c0      	nop			; (mov r8, r8)

100046c8 <__aeabi_d2iz>:
100046c8:	4a13      	ldr	r2, [pc, #76]	; (10004718 <__aeabi_d2iz+0x50>)
100046ca:	030b      	lsls	r3, r1, #12
100046cc:	b530      	push	{r4, r5, lr}
100046ce:	1c05      	adds	r5, r0, #0
100046d0:	0048      	lsls	r0, r1, #1
100046d2:	0b1c      	lsrs	r4, r3, #12
100046d4:	0fc9      	lsrs	r1, r1, #31
100046d6:	0d43      	lsrs	r3, r0, #21
100046d8:	2000      	movs	r0, #0
100046da:	4293      	cmp	r3, r2
100046dc:	dd11      	ble.n	10004702 <__aeabi_d2iz+0x3a>
100046de:	480f      	ldr	r0, [pc, #60]	; (1000471c <__aeabi_d2iz+0x54>)
100046e0:	4283      	cmp	r3, r0
100046e2:	dc0f      	bgt.n	10004704 <__aeabi_d2iz+0x3c>
100046e4:	2280      	movs	r2, #128	; 0x80
100046e6:	0350      	lsls	r0, r2, #13
100046e8:	4a0d      	ldr	r2, [pc, #52]	; (10004720 <__aeabi_d2iz+0x58>)
100046ea:	4304      	orrs	r4, r0
100046ec:	1ad0      	subs	r0, r2, r3
100046ee:	281f      	cmp	r0, #31
100046f0:	dd0b      	ble.n	1000470a <__aeabi_d2iz+0x42>
100046f2:	4d0c      	ldr	r5, [pc, #48]	; (10004724 <__aeabi_d2iz+0x5c>)
100046f4:	1aeb      	subs	r3, r5, r3
100046f6:	40dc      	lsrs	r4, r3
100046f8:	1c22      	adds	r2, r4, #0
100046fa:	4250      	negs	r0, r2
100046fc:	2900      	cmp	r1, #0
100046fe:	d100      	bne.n	10004702 <__aeabi_d2iz+0x3a>
10004700:	1c10      	adds	r0, r2, #0
10004702:	bd30      	pop	{r4, r5, pc}
10004704:	4c08      	ldr	r4, [pc, #32]	; (10004728 <__aeabi_d2iz+0x60>)
10004706:	1908      	adds	r0, r1, r4
10004708:	e7fb      	b.n	10004702 <__aeabi_d2iz+0x3a>
1000470a:	40c5      	lsrs	r5, r0
1000470c:	4807      	ldr	r0, [pc, #28]	; (1000472c <__aeabi_d2iz+0x64>)
1000470e:	1c2a      	adds	r2, r5, #0
10004710:	181d      	adds	r5, r3, r0
10004712:	40ac      	lsls	r4, r5
10004714:	4322      	orrs	r2, r4
10004716:	e7f0      	b.n	100046fa <__aeabi_d2iz+0x32>
10004718:	000003fe 	.word	0x000003fe
1000471c:	0000041d 	.word	0x0000041d
10004720:	00000433 	.word	0x00000433
10004724:	00000413 	.word	0x00000413
10004728:	7fffffff 	.word	0x7fffffff
1000472c:	fffffbed 	.word	0xfffffbed

10004730 <__aeabi_ui2d>:
10004730:	b570      	push	{r4, r5, r6, lr}
10004732:	1e04      	subs	r4, r0, #0
10004734:	d026      	beq.n	10004784 <__aeabi_ui2d+0x54>
10004736:	f000 f86b 	bl	10004810 <__clzsi2>
1000473a:	4914      	ldr	r1, [pc, #80]	; (1000478c <__aeabi_ui2d+0x5c>)
1000473c:	1a0a      	subs	r2, r1, r0
1000473e:	280a      	cmp	r0, #10
10004740:	dd13      	ble.n	1000476a <__aeabi_ui2d+0x3a>
10004742:	380b      	subs	r0, #11
10004744:	4084      	lsls	r4, r0
10004746:	0556      	lsls	r6, r2, #21
10004748:	0324      	lsls	r4, r4, #12
1000474a:	0d72      	lsrs	r2, r6, #21
1000474c:	0b25      	lsrs	r5, r4, #12
1000474e:	2600      	movs	r6, #0
10004750:	2000      	movs	r0, #0
10004752:	2100      	movs	r1, #0
10004754:	1c30      	adds	r0, r6, #0
10004756:	0d0e      	lsrs	r6, r1, #20
10004758:	0533      	lsls	r3, r6, #20
1000475a:	4c0d      	ldr	r4, [pc, #52]	; (10004790 <__aeabi_ui2d+0x60>)
1000475c:	432b      	orrs	r3, r5
1000475e:	0511      	lsls	r1, r2, #20
10004760:	401c      	ands	r4, r3
10004762:	430c      	orrs	r4, r1
10004764:	0065      	lsls	r5, r4, #1
10004766:	0869      	lsrs	r1, r5, #1
10004768:	bd70      	pop	{r4, r5, r6, pc}
1000476a:	230b      	movs	r3, #11
1000476c:	1c05      	adds	r5, r0, #0
1000476e:	1a18      	subs	r0, r3, r0
10004770:	3515      	adds	r5, #21
10004772:	1c21      	adds	r1, r4, #0
10004774:	40c4      	lsrs	r4, r0
10004776:	40a9      	lsls	r1, r5
10004778:	0552      	lsls	r2, r2, #21
1000477a:	0325      	lsls	r5, r4, #12
1000477c:	1c0e      	adds	r6, r1, #0
1000477e:	0b2d      	lsrs	r5, r5, #12
10004780:	0d52      	lsrs	r2, r2, #21
10004782:	e7e5      	b.n	10004750 <__aeabi_ui2d+0x20>
10004784:	2200      	movs	r2, #0
10004786:	2500      	movs	r5, #0
10004788:	2600      	movs	r6, #0
1000478a:	e7e1      	b.n	10004750 <__aeabi_ui2d+0x20>
1000478c:	0000041e 	.word	0x0000041e
10004790:	800fffff 	.word	0x800fffff

10004794 <__aeabi_cdrcmple>:
10004794:	4684      	mov	ip, r0
10004796:	1c10      	adds	r0, r2, #0
10004798:	4662      	mov	r2, ip
1000479a:	468c      	mov	ip, r1
1000479c:	1c19      	adds	r1, r3, #0
1000479e:	4663      	mov	r3, ip
100047a0:	e000      	b.n	100047a4 <__aeabi_cdcmpeq>
100047a2:	46c0      	nop			; (mov r8, r8)

100047a4 <__aeabi_cdcmpeq>:
100047a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100047a6:	f000 f903 	bl	100049b0 <__ledf2>
100047aa:	2800      	cmp	r0, #0
100047ac:	d401      	bmi.n	100047b2 <__aeabi_cdcmpeq+0xe>
100047ae:	2100      	movs	r1, #0
100047b0:	42c8      	cmn	r0, r1
100047b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100047b4 <__aeabi_dcmpeq>:
100047b4:	b510      	push	{r4, lr}
100047b6:	f000 f849 	bl	1000484c <__eqdf2>
100047ba:	4240      	negs	r0, r0
100047bc:	3001      	adds	r0, #1
100047be:	bd10      	pop	{r4, pc}

100047c0 <__aeabi_dcmplt>:
100047c0:	b510      	push	{r4, lr}
100047c2:	f000 f8f5 	bl	100049b0 <__ledf2>
100047c6:	2800      	cmp	r0, #0
100047c8:	db01      	blt.n	100047ce <__aeabi_dcmplt+0xe>
100047ca:	2000      	movs	r0, #0
100047cc:	bd10      	pop	{r4, pc}
100047ce:	2001      	movs	r0, #1
100047d0:	bd10      	pop	{r4, pc}
100047d2:	46c0      	nop			; (mov r8, r8)

100047d4 <__aeabi_dcmple>:
100047d4:	b510      	push	{r4, lr}
100047d6:	f000 f8eb 	bl	100049b0 <__ledf2>
100047da:	2800      	cmp	r0, #0
100047dc:	dd01      	ble.n	100047e2 <__aeabi_dcmple+0xe>
100047de:	2000      	movs	r0, #0
100047e0:	bd10      	pop	{r4, pc}
100047e2:	2001      	movs	r0, #1
100047e4:	bd10      	pop	{r4, pc}
100047e6:	46c0      	nop			; (mov r8, r8)

100047e8 <__aeabi_dcmpgt>:
100047e8:	b510      	push	{r4, lr}
100047ea:	f000 f86d 	bl	100048c8 <__gedf2>
100047ee:	2800      	cmp	r0, #0
100047f0:	dc01      	bgt.n	100047f6 <__aeabi_dcmpgt+0xe>
100047f2:	2000      	movs	r0, #0
100047f4:	bd10      	pop	{r4, pc}
100047f6:	2001      	movs	r0, #1
100047f8:	bd10      	pop	{r4, pc}
100047fa:	46c0      	nop			; (mov r8, r8)

100047fc <__aeabi_dcmpge>:
100047fc:	b510      	push	{r4, lr}
100047fe:	f000 f863 	bl	100048c8 <__gedf2>
10004802:	2800      	cmp	r0, #0
10004804:	da01      	bge.n	1000480a <__aeabi_dcmpge+0xe>
10004806:	2000      	movs	r0, #0
10004808:	bd10      	pop	{r4, pc}
1000480a:	2001      	movs	r0, #1
1000480c:	bd10      	pop	{r4, pc}
1000480e:	46c0      	nop			; (mov r8, r8)

10004810 <__clzsi2>:
10004810:	211c      	movs	r1, #28
10004812:	2301      	movs	r3, #1
10004814:	041b      	lsls	r3, r3, #16
10004816:	4298      	cmp	r0, r3
10004818:	d301      	bcc.n	1000481e <__clzsi2+0xe>
1000481a:	0c00      	lsrs	r0, r0, #16
1000481c:	3910      	subs	r1, #16
1000481e:	0a1b      	lsrs	r3, r3, #8
10004820:	4298      	cmp	r0, r3
10004822:	d301      	bcc.n	10004828 <__clzsi2+0x18>
10004824:	0a00      	lsrs	r0, r0, #8
10004826:	3908      	subs	r1, #8
10004828:	091b      	lsrs	r3, r3, #4
1000482a:	4298      	cmp	r0, r3
1000482c:	d301      	bcc.n	10004832 <__clzsi2+0x22>
1000482e:	0900      	lsrs	r0, r0, #4
10004830:	3904      	subs	r1, #4
10004832:	a202      	add	r2, pc, #8	; (adr r2, 1000483c <__clzsi2+0x2c>)
10004834:	5c10      	ldrb	r0, [r2, r0]
10004836:	1840      	adds	r0, r0, r1
10004838:	4770      	bx	lr
1000483a:	46c0      	nop			; (mov r8, r8)
1000483c:	02020304 	.word	0x02020304
10004840:	01010101 	.word	0x01010101
	...

1000484c <__eqdf2>:
1000484c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000484e:	4694      	mov	ip, r2
10004850:	4647      	mov	r7, r8
10004852:	031a      	lsls	r2, r3, #12
10004854:	1c06      	adds	r6, r0, #0
10004856:	0058      	lsls	r0, r3, #1
10004858:	b480      	push	{r7}
1000485a:	0b17      	lsrs	r7, r2, #12
1000485c:	0d42      	lsrs	r2, r0, #21
1000485e:	4819      	ldr	r0, [pc, #100]	; (100048c4 <__eqdf2+0x78>)
10004860:	030d      	lsls	r5, r1, #12
10004862:	004c      	lsls	r4, r1, #1
10004864:	0fdb      	lsrs	r3, r3, #31
10004866:	0b2d      	lsrs	r5, r5, #12
10004868:	0d64      	lsrs	r4, r4, #21
1000486a:	0fc9      	lsrs	r1, r1, #31
1000486c:	4698      	mov	r8, r3
1000486e:	4284      	cmp	r4, r0
10004870:	d008      	beq.n	10004884 <__eqdf2+0x38>
10004872:	4814      	ldr	r0, [pc, #80]	; (100048c4 <__eqdf2+0x78>)
10004874:	4282      	cmp	r2, r0
10004876:	d00d      	beq.n	10004894 <__eqdf2+0x48>
10004878:	2001      	movs	r0, #1
1000487a:	4294      	cmp	r4, r2
1000487c:	d012      	beq.n	100048a4 <__eqdf2+0x58>
1000487e:	bc04      	pop	{r2}
10004880:	4690      	mov	r8, r2
10004882:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004884:	1c2b      	adds	r3, r5, #0
10004886:	4333      	orrs	r3, r6
10004888:	2001      	movs	r0, #1
1000488a:	2b00      	cmp	r3, #0
1000488c:	d1f7      	bne.n	1000487e <__eqdf2+0x32>
1000488e:	480d      	ldr	r0, [pc, #52]	; (100048c4 <__eqdf2+0x78>)
10004890:	4282      	cmp	r2, r0
10004892:	d1f1      	bne.n	10004878 <__eqdf2+0x2c>
10004894:	4663      	mov	r3, ip
10004896:	433b      	orrs	r3, r7
10004898:	2001      	movs	r0, #1
1000489a:	2b00      	cmp	r3, #0
1000489c:	d1ef      	bne.n	1000487e <__eqdf2+0x32>
1000489e:	2001      	movs	r0, #1
100048a0:	4294      	cmp	r4, r2
100048a2:	d1ec      	bne.n	1000487e <__eqdf2+0x32>
100048a4:	42bd      	cmp	r5, r7
100048a6:	d1ea      	bne.n	1000487e <__eqdf2+0x32>
100048a8:	4566      	cmp	r6, ip
100048aa:	d1e8      	bne.n	1000487e <__eqdf2+0x32>
100048ac:	4541      	cmp	r1, r8
100048ae:	d006      	beq.n	100048be <__eqdf2+0x72>
100048b0:	2c00      	cmp	r4, #0
100048b2:	d1e4      	bne.n	1000487e <__eqdf2+0x32>
100048b4:	1c28      	adds	r0, r5, #0
100048b6:	4330      	orrs	r0, r6
100048b8:	1e45      	subs	r5, r0, #1
100048ba:	41a8      	sbcs	r0, r5
100048bc:	e7df      	b.n	1000487e <__eqdf2+0x32>
100048be:	2000      	movs	r0, #0
100048c0:	e7dd      	b.n	1000487e <__eqdf2+0x32>
100048c2:	46c0      	nop			; (mov r8, r8)
100048c4:	000007ff 	.word	0x000007ff

100048c8 <__gedf2>:
100048c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100048ca:	4657      	mov	r7, sl
100048cc:	464e      	mov	r6, r9
100048ce:	4645      	mov	r5, r8
100048d0:	b4e0      	push	{r5, r6, r7}
100048d2:	1c04      	adds	r4, r0, #0
100048d4:	004e      	lsls	r6, r1, #1
100048d6:	0308      	lsls	r0, r1, #12
100048d8:	0fc9      	lsrs	r1, r1, #31
100048da:	468a      	mov	sl, r1
100048dc:	1c17      	adds	r7, r2, #0
100048de:	0059      	lsls	r1, r3, #1
100048e0:	031a      	lsls	r2, r3, #12
100048e2:	0b05      	lsrs	r5, r0, #12
100048e4:	0d70      	lsrs	r0, r6, #21
100048e6:	0b16      	lsrs	r6, r2, #12
100048e8:	0d4a      	lsrs	r2, r1, #21
100048ea:	4930      	ldr	r1, [pc, #192]	; (100049ac <__gedf2+0xe4>)
100048ec:	0fdb      	lsrs	r3, r3, #31
100048ee:	469c      	mov	ip, r3
100048f0:	4288      	cmp	r0, r1
100048f2:	d032      	beq.n	1000495a <__gedf2+0x92>
100048f4:	492d      	ldr	r1, [pc, #180]	; (100049ac <__gedf2+0xe4>)
100048f6:	428a      	cmp	r2, r1
100048f8:	d035      	beq.n	10004966 <__gedf2+0x9e>
100048fa:	2800      	cmp	r0, #0
100048fc:	d10f      	bne.n	1000491e <__gedf2+0x56>
100048fe:	1c29      	adds	r1, r5, #0
10004900:	4321      	orrs	r1, r4
10004902:	424b      	negs	r3, r1
10004904:	414b      	adcs	r3, r1
10004906:	4698      	mov	r8, r3
10004908:	2a00      	cmp	r2, #0
1000490a:	d00b      	beq.n	10004924 <__gedf2+0x5c>
1000490c:	2b00      	cmp	r3, #0
1000490e:	d11a      	bne.n	10004946 <__gedf2+0x7e>
10004910:	45e2      	cmp	sl, ip
10004912:	d02c      	beq.n	1000496e <__gedf2+0xa6>
10004914:	4655      	mov	r5, sl
10004916:	2d00      	cmp	r5, #0
10004918:	d118      	bne.n	1000494c <__gedf2+0x84>
1000491a:	2001      	movs	r0, #1
1000491c:	e018      	b.n	10004950 <__gedf2+0x88>
1000491e:	2a00      	cmp	r2, #0
10004920:	d1f6      	bne.n	10004910 <__gedf2+0x48>
10004922:	4690      	mov	r8, r2
10004924:	1c31      	adds	r1, r6, #0
10004926:	4339      	orrs	r1, r7
10004928:	424b      	negs	r3, r1
1000492a:	414b      	adcs	r3, r1
1000492c:	4641      	mov	r1, r8
1000492e:	2900      	cmp	r1, #0
10004930:	d106      	bne.n	10004940 <__gedf2+0x78>
10004932:	2b00      	cmp	r3, #0
10004934:	d0ec      	beq.n	10004910 <__gedf2+0x48>
10004936:	4656      	mov	r6, sl
10004938:	2001      	movs	r0, #1
1000493a:	2e00      	cmp	r6, #0
1000493c:	d008      	beq.n	10004950 <__gedf2+0x88>
1000493e:	e005      	b.n	1000494c <__gedf2+0x84>
10004940:	2000      	movs	r0, #0
10004942:	2b00      	cmp	r3, #0
10004944:	d104      	bne.n	10004950 <__gedf2+0x88>
10004946:	4667      	mov	r7, ip
10004948:	2f00      	cmp	r7, #0
1000494a:	d1e6      	bne.n	1000491a <__gedf2+0x52>
1000494c:	2301      	movs	r3, #1
1000494e:	4258      	negs	r0, r3
10004950:	bc1c      	pop	{r2, r3, r4}
10004952:	4690      	mov	r8, r2
10004954:	4699      	mov	r9, r3
10004956:	46a2      	mov	sl, r4
10004958:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000495a:	1c2b      	adds	r3, r5, #0
1000495c:	4323      	orrs	r3, r4
1000495e:	d0c9      	beq.n	100048f4 <__gedf2+0x2c>
10004960:	2102      	movs	r1, #2
10004962:	4248      	negs	r0, r1
10004964:	e7f4      	b.n	10004950 <__gedf2+0x88>
10004966:	1c33      	adds	r3, r6, #0
10004968:	433b      	orrs	r3, r7
1000496a:	d0c6      	beq.n	100048fa <__gedf2+0x32>
1000496c:	e7f8      	b.n	10004960 <__gedf2+0x98>
1000496e:	4290      	cmp	r0, r2
10004970:	dc05      	bgt.n	1000497e <__gedf2+0xb6>
10004972:	da09      	bge.n	10004988 <__gedf2+0xc0>
10004974:	4652      	mov	r2, sl
10004976:	2a00      	cmp	r2, #0
10004978:	d0e8      	beq.n	1000494c <__gedf2+0x84>
1000497a:	2001      	movs	r0, #1
1000497c:	e7e8      	b.n	10004950 <__gedf2+0x88>
1000497e:	4654      	mov	r4, sl
10004980:	2c00      	cmp	r4, #0
10004982:	d1e3      	bne.n	1000494c <__gedf2+0x84>
10004984:	2001      	movs	r0, #1
10004986:	e7e3      	b.n	10004950 <__gedf2+0x88>
10004988:	42b5      	cmp	r5, r6
1000498a:	d8c3      	bhi.n	10004914 <__gedf2+0x4c>
1000498c:	d007      	beq.n	1000499e <__gedf2+0xd6>
1000498e:	2000      	movs	r0, #0
10004990:	42b5      	cmp	r5, r6
10004992:	d2dd      	bcs.n	10004950 <__gedf2+0x88>
10004994:	4650      	mov	r0, sl
10004996:	2800      	cmp	r0, #0
10004998:	d0d8      	beq.n	1000494c <__gedf2+0x84>
1000499a:	2001      	movs	r0, #1
1000499c:	e7d8      	b.n	10004950 <__gedf2+0x88>
1000499e:	42bc      	cmp	r4, r7
100049a0:	d8b8      	bhi.n	10004914 <__gedf2+0x4c>
100049a2:	2000      	movs	r0, #0
100049a4:	42bc      	cmp	r4, r7
100049a6:	d3f5      	bcc.n	10004994 <__gedf2+0xcc>
100049a8:	e7d2      	b.n	10004950 <__gedf2+0x88>
100049aa:	46c0      	nop			; (mov r8, r8)
100049ac:	000007ff 	.word	0x000007ff

100049b0 <__ledf2>:
100049b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100049b2:	4644      	mov	r4, r8
100049b4:	465f      	mov	r7, fp
100049b6:	4656      	mov	r6, sl
100049b8:	464d      	mov	r5, r9
100049ba:	b4f0      	push	{r4, r5, r6, r7}
100049bc:	4694      	mov	ip, r2
100049be:	1c06      	adds	r6, r0, #0
100049c0:	031a      	lsls	r2, r3, #12
100049c2:	0058      	lsls	r0, r3, #1
100049c4:	0b17      	lsrs	r7, r2, #12
100049c6:	0d42      	lsrs	r2, r0, #21
100049c8:	482e      	ldr	r0, [pc, #184]	; (10004a84 <__ledf2+0xd4>)
100049ca:	030d      	lsls	r5, r1, #12
100049cc:	004c      	lsls	r4, r1, #1
100049ce:	0fdb      	lsrs	r3, r3, #31
100049d0:	0b2d      	lsrs	r5, r5, #12
100049d2:	0d64      	lsrs	r4, r4, #21
100049d4:	0fc9      	lsrs	r1, r1, #31
100049d6:	4698      	mov	r8, r3
100049d8:	4284      	cmp	r4, r0
100049da:	d033      	beq.n	10004a44 <__ledf2+0x94>
100049dc:	4829      	ldr	r0, [pc, #164]	; (10004a84 <__ledf2+0xd4>)
100049de:	4282      	cmp	r2, r0
100049e0:	d036      	beq.n	10004a50 <__ledf2+0xa0>
100049e2:	2c00      	cmp	r4, #0
100049e4:	d019      	beq.n	10004a1a <__ledf2+0x6a>
100049e6:	2a00      	cmp	r2, #0
100049e8:	d120      	bne.n	10004a2c <__ledf2+0x7c>
100049ea:	4693      	mov	fp, r2
100049ec:	4663      	mov	r3, ip
100049ee:	433b      	orrs	r3, r7
100049f0:	4258      	negs	r0, r3
100049f2:	4158      	adcs	r0, r3
100049f4:	465b      	mov	r3, fp
100049f6:	4682      	mov	sl, r0
100049f8:	2b00      	cmp	r3, #0
100049fa:	d01d      	beq.n	10004a38 <__ledf2+0x88>
100049fc:	4651      	mov	r1, sl
100049fe:	2000      	movs	r0, #0
10004a00:	2900      	cmp	r1, #0
10004a02:	d104      	bne.n	10004a0e <__ledf2+0x5e>
10004a04:	4642      	mov	r2, r8
10004a06:	2a00      	cmp	r2, #0
10004a08:	d114      	bne.n	10004a34 <__ledf2+0x84>
10004a0a:	2401      	movs	r4, #1
10004a0c:	4260      	negs	r0, r4
10004a0e:	bc3c      	pop	{r2, r3, r4, r5}
10004a10:	4690      	mov	r8, r2
10004a12:	4699      	mov	r9, r3
10004a14:	46a2      	mov	sl, r4
10004a16:	46ab      	mov	fp, r5
10004a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004a1a:	1c2b      	adds	r3, r5, #0
10004a1c:	4333      	orrs	r3, r6
10004a1e:	4258      	negs	r0, r3
10004a20:	4143      	adcs	r3, r0
10004a22:	469b      	mov	fp, r3
10004a24:	2a00      	cmp	r2, #0
10004a26:	d0e1      	beq.n	100049ec <__ledf2+0x3c>
10004a28:	2b00      	cmp	r3, #0
10004a2a:	d1eb      	bne.n	10004a04 <__ledf2+0x54>
10004a2c:	4541      	cmp	r1, r8
10004a2e:	d015      	beq.n	10004a5c <__ledf2+0xac>
10004a30:	2900      	cmp	r1, #0
10004a32:	d1ea      	bne.n	10004a0a <__ledf2+0x5a>
10004a34:	2001      	movs	r0, #1
10004a36:	e7ea      	b.n	10004a0e <__ledf2+0x5e>
10004a38:	2800      	cmp	r0, #0
10004a3a:	d0f7      	beq.n	10004a2c <__ledf2+0x7c>
10004a3c:	2001      	movs	r0, #1
10004a3e:	2900      	cmp	r1, #0
10004a40:	d0e5      	beq.n	10004a0e <__ledf2+0x5e>
10004a42:	e7e2      	b.n	10004a0a <__ledf2+0x5a>
10004a44:	1c2b      	adds	r3, r5, #0
10004a46:	4333      	orrs	r3, r6
10004a48:	2002      	movs	r0, #2
10004a4a:	2b00      	cmp	r3, #0
10004a4c:	d1df      	bne.n	10004a0e <__ledf2+0x5e>
10004a4e:	e7c5      	b.n	100049dc <__ledf2+0x2c>
10004a50:	4663      	mov	r3, ip
10004a52:	433b      	orrs	r3, r7
10004a54:	2002      	movs	r0, #2
10004a56:	2b00      	cmp	r3, #0
10004a58:	d1d9      	bne.n	10004a0e <__ledf2+0x5e>
10004a5a:	e7c2      	b.n	100049e2 <__ledf2+0x32>
10004a5c:	4294      	cmp	r4, r2
10004a5e:	dce7      	bgt.n	10004a30 <__ledf2+0x80>
10004a60:	db05      	blt.n	10004a6e <__ledf2+0xbe>
10004a62:	42bd      	cmp	r5, r7
10004a64:	d8e4      	bhi.n	10004a30 <__ledf2+0x80>
10004a66:	d006      	beq.n	10004a76 <__ledf2+0xc6>
10004a68:	2000      	movs	r0, #0
10004a6a:	42bd      	cmp	r5, r7
10004a6c:	d2cf      	bcs.n	10004a0e <__ledf2+0x5e>
10004a6e:	2900      	cmp	r1, #0
10004a70:	d0cb      	beq.n	10004a0a <__ledf2+0x5a>
10004a72:	2001      	movs	r0, #1
10004a74:	e7cb      	b.n	10004a0e <__ledf2+0x5e>
10004a76:	4566      	cmp	r6, ip
10004a78:	d8da      	bhi.n	10004a30 <__ledf2+0x80>
10004a7a:	2000      	movs	r0, #0
10004a7c:	4566      	cmp	r6, ip
10004a7e:	d3f6      	bcc.n	10004a6e <__ledf2+0xbe>
10004a80:	e7c5      	b.n	10004a0e <__ledf2+0x5e>
10004a82:	46c0      	nop			; (mov r8, r8)
10004a84:	000007ff 	.word	0x000007ff

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <CCU40_3_Veneer+0x20>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <CCU40_3_Veneer+0x24>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <CCU40_3_Veneer+0x28>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <CCU40_3_Veneer+0x2c>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <CCU40_3_Veneer+0x30>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <CCU40_3_Veneer+0x34>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <CCU40_3_Veneer+0x38>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <CCU40_3_Veneer+0x3c>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <CCU40_3_Veneer+0x40>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <CCU40_3_Veneer+0x44>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <CCU40_3_Veneer+0x48>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0
	...

20000064 <USIC0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4821      	ldr	r0, [pc, #132]	; (200000ec <CCU40_3_Veneer+0x4c>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4821      	ldr	r0, [pc, #132]	; (200000f0 <CCU40_3_Veneer+0x50>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4821      	ldr	r0, [pc, #132]	; (200000f4 <CCU40_3_Veneer+0x54>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4821      	ldr	r0, [pc, #132]	; (200000f8 <CCU40_3_Veneer+0x58>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4821      	ldr	r0, [pc, #132]	; (200000fc <CCU40_3_Veneer+0x5c>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4821      	ldr	r0, [pc, #132]	; (20000100 <CCU40_3_Veneer+0x60>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4821      	ldr	r0, [pc, #132]	; (20000104 <CCU40_3_Veneer+0x64>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4821      	ldr	r0, [pc, #132]	; (20000108 <CCU40_3_Veneer+0x68>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0
	...

20000094 <CCU40_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	481d      	ldr	r0, [pc, #116]	; (2000010c <CCU40_3_Veneer+0x6c>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	481d      	ldr	r0, [pc, #116]	; (20000110 <CCU40_3_Veneer+0x70>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	481d      	ldr	r0, [pc, #116]	; (20000114 <CCU40_3_Veneer+0x74>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	481d      	ldr	r0, [pc, #116]	; (20000118 <CCU40_3_Veneer+0x78>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0
	...

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	1000142f 	.word	0x1000142f
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	10001431 	.word	0x10001431
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	10001433 	.word	0x10001433
    MOV PC,R0
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	100026c5 	.word	0x100026c5
    MOV PC,R0
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	10001437 	.word	0x10001437
    MOV PC,R0
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	10001439 	.word	0x10001439
    MOV PC,R0
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	1000143b 	.word	0x1000143b
    MOV PC,R0
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	1000143d 	.word	0x1000143d
    MOV PC,R0
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	1000143f 	.word	0x1000143f
    MOV PC,R0
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	10001441 	.word	0x10001441
    MOV PC,R0
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	10001443 	.word	0x10001443
    .long 0
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000ec:	10001451 	.word	0x10001451
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f0:	10001453 	.word	0x10001453
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f4:	10001455 	.word	0x10001455
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000f8:	10001457 	.word	0x10001457
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
200000fc:	10001459 	.word	0x10001459
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000100:	1000145b 	.word	0x1000145b
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000104:	10001445 	.word	0x10001445
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000108:	10001447 	.word	0x10001447
    .long 0
    .long 0
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
2000010c:	10001449 	.word	0x10001449
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000110:	1000144b 	.word	0x1000144b
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000114:	1000144d 	.word	0x1000144d
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
20000118:	1000144f 	.word	0x1000144f
