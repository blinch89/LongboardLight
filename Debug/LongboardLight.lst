
LongboardLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020f8  10001000  10001000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000010  100030f8  100030f8  000030f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata       000002a4  10003108  10003108  00003108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .VENEER_Code  00000110  2000000c  100033b0  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .GUARD_Band   00000004  2000011c  00000000  0000011c  2**0
                  ALLOC
  5 Stack         00000800  20000120  00000000  00000120  2**0
                  ALLOC
  6 .bss          00000164  20000920  20000920  00008920  2**2
                  ALLOC
  7 .debug_aranges 00000298  00000000  00000000  00008120  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001be5  00000000  00000000  000083b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000093f  00000000  00000000  00009f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002a5c  00000000  00000000  0000a8dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000830  00000000  00000000  0000d338  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00025456  00000000  00000000  0000db68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000009f2  00000000  00000000  00032fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000200  00000000  00000000  000339b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .build_attributes 000003b2  00000000  00000000  00033bb0  2**0
                  CONTENTS, READONLY
 16 .debug_macro  00007511  00000000  00000000  00033f62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10001000 <__Xmc1100_interrupt_vector_cortex_m>:
10001000:	20 09 00 20 19 10 00 10 95 14 00 10 97 14 00 10      .. ............
10001010:	00 04 00 00 00 00 00 00                             ........

10001018 <__Xmc1100_reset_cortex_m>:
__Xmc1100_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1100_stack
10001018:	4802      	ldr	r0, [pc, #8]	; (10001024 <__Xmc1100_reset_cortex_m+0xc>)
    MOV SP,R0
1000101a:	4685      	mov	sp, r0
    
    /* Launch custom pre-program loading startup procedure */
    LDR R0,=hardware_init_hook
1000101c:	4802      	ldr	r0, [pc, #8]	; (10001028 <__Xmc1100_reset_cortex_m+0x10>)
    BLX R0
1000101e:	4780      	blx	r0

    /* Branch to the program loader now */
    B       __Xmc1100_Program_Loader 
10001020:	e012      	b.n	10001048 <__Xmc1100_Program_Loader>
10001022:	0000      	.short	0x0000
__Xmc1100_reset_cortex_m:
    .fnstart

    /* C routines are likely to be called. Setup the stack now */
    /* This is already setup by BootROM,hence this step is optional */ 
    LDR R0,=__Xmc1100_stack
10001024:	20000920 	.word	0x20000920
    MOV SP,R0
    
    /* Launch custom pre-program loading startup procedure */
    LDR R0,=hardware_init_hook
10001028:	100010d1 	.word	0x100010d1

1000102c <__COPY_FLASH2RAM>:
   to C land is given */
   .section .Xmc1100.postreset,"x",%progbits
 __COPY_FLASH2RAM:
   .fnstart:
   /* Is there anything to be copied? */
   CMP R2,#0
1000102c:	2a00      	cmp	r2, #0
   BEQ SKIPCOPY
1000102e:	d00a      	beq.n	10001046 <SKIPCOPY>
   
   /* For bytecount less than 4, at least 1 word must be copied */
   CMP R2,#4
10001030:	2a04      	cmp	r2, #4
   BCS STARTCOPY
10001032:	d200      	bcs.n	10001036 <STARTCOPY>
   
   /* Byte count < 4 ; so bump it up */
   MOVS R2,#4
10001034:	2204      	movs	r2, #4

10001036 <STARTCOPY>:
STARTCOPY:
   /* 
      R2 contains byte count. Change it to word count. It is ensured in the 
      linker script that the length is always word aligned.
   */
   LSRS R2,R2,#2 /* Divide by 4 to obtain word count */
10001036:	0892      	lsrs	r2, r2, #2

10001038 <COPYLOOP>:

   /* The proverbial loop from the schooldays */
COPYLOOP:
   LDR R3,[R0]
10001038:	6803      	ldr	r3, [r0, #0]
   STR R3,[R1]
1000103a:	600b      	str	r3, [r1, #0]
   SUBS R2,#1
1000103c:	3a01      	subs	r2, #1
   BEQ SKIPCOPY
1000103e:	d002      	beq.n	10001046 <SKIPCOPY>
   ADDS R0,#4
10001040:	3004      	adds	r0, #4
   ADDS R1,#4
10001042:	3104      	adds	r1, #4
   B COPYLOOP
10001044:	e7f8      	b.n	10001038 <COPYLOOP>

10001046 <SKIPCOPY>:
    
SKIPCOPY:
   BX LR
10001046:	4770      	bx	lr

10001048 <__Xmc1100_Program_Loader>:
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001048:	4811      	ldr	r0, [pc, #68]	; (10001090 <SKIPCLEAR+0x14>)
   LDR R1, =__Xmc1100_sData
1000104a:	4912      	ldr	r1, [pc, #72]	; (10001094 <SKIPCLEAR+0x18>)
   LDR R2, =__Xmc1100_Data_Size
1000104c:	4a12      	ldr	r2, [pc, #72]	; (10001098 <SKIPCLEAR+0x1c>)
   BL __COPY_FLASH2RAM
1000104e:	f7ff ffed 	bl	1000102c <__COPY_FLASH2RAM>

   /* RAM_CODE COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =__ram_code_load
10001052:	4812      	ldr	r0, [pc, #72]	; (1000109c <SKIPCLEAR+0x20>)
   LDR R1, =__ram_code_start
10001054:	4912      	ldr	r1, [pc, #72]	; (100010a0 <SKIPCLEAR+0x24>)
   LDR R2, =__ram_code_size
10001056:	4a13      	ldr	r2, [pc, #76]	; (100010a4 <SKIPCLEAR+0x28>)
   BL __COPY_FLASH2RAM
10001058:	f7ff ffe8 	bl	1000102c <__COPY_FLASH2RAM>

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
1000105c:	4812      	ldr	r0, [pc, #72]	; (100010a8 <SKIPCLEAR+0x2c>)
   LDR R1, =VeneerStart
1000105e:	4913      	ldr	r1, [pc, #76]	; (100010ac <SKIPCLEAR+0x30>)
   LDR R2, =VeneerSize
10001060:	4a13      	ldr	r2, [pc, #76]	; (100010b0 <SKIPCLEAR+0x34>)
   BL __COPY_FLASH2RAM
10001062:	f7ff ffe3 	bl	1000102c <__COPY_FLASH2RAM>

   /* BSS CLEAR */
   LDR R0, =__Xmc1100_sBSS     /* Start of BSS */
10001066:	4813      	ldr	r0, [pc, #76]	; (100010b4 <SKIPCLEAR+0x38>)
   LDR R1, =__Xmc1100_BSS_Size /* BSS size in bytes */
10001068:	4913      	ldr	r1, [pc, #76]	; (100010b8 <SKIPCLEAR+0x3c>)

   /* Find out if there are items assigned to BSS */   
   CMP R1,#0 
1000106a:	2900      	cmp	r1, #0
   BEQ SKIPCLEAR
1000106c:	d006      	beq.n	1000107c <SKIPCLEAR>

1000106e <STARTCLEAR>:

STARTCLEAR:
   LSRS R1,R1,#2            /* BSS size in words */
1000106e:	0889      	lsrs	r1, r1, #2
   
   MOVS R2,#0
10001070:	2200      	movs	r2, #0

10001072 <CLEARLOOP>:
CLEARLOOP:
   STR R2,[R0]
10001072:	6002      	str	r2, [r0, #0]
   SUBS R1,#1
10001074:	3901      	subs	r1, #1
   BEQ SKIPCLEAR
10001076:	d001      	beq.n	1000107c <SKIPCLEAR>
   ADDS R0,#4
10001078:	3004      	adds	r0, #4
   B CLEARLOOP
1000107a:	e7fa      	b.n	10001072 <CLEARLOOP>

1000107c <SKIPCLEAR>:
    
SKIPCLEAR:

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1100_stack 
1000107c:	480f      	ldr	r0, [pc, #60]	; (100010bc <SKIPCLEAR+0x40>)
   MOV SP,R0
1000107e:	4685      	mov	sp, r0

   /* Perform System Initialization */   
   LDR R0,=SystemInit
10001080:	480f      	ldr	r0, [pc, #60]	; (100010c0 <SKIPCLEAR+0x44>)
   BLX R0
10001082:	4780      	blx	r0

   /* Launch custom post-program loading startup procedure */
   LDR R0,=software_init_hook
10001084:	480f      	ldr	r0, [pc, #60]	; (100010c4 <SKIPCLEAR+0x48>)
   BLX R0
10001086:	4780      	blx	r0

   MOVS R0,#0
10001088:	2000      	movs	r0, #0
   MOVS R1,#0
1000108a:	2100      	movs	r1, #0
   LDR R2, =main
1000108c:	4a0e      	ldr	r2, [pc, #56]	; (100010c8 <SKIPCLEAR+0x4c>)
   MOV PC,R2
1000108e:	4697      	mov	pc, r2
   .fnstart
   /* Memories are accessible now*/
   
   /* DATA COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =DataLoadAddr
10001090:	100034c0 	.word	0x100034c0
   LDR R1, =__Xmc1100_sData
10001094:	20000a90 	.word	0x20000a90
   LDR R2, =__Xmc1100_Data_Size
10001098:	00000000 	.word	0x00000000
   BL __COPY_FLASH2RAM

   /* RAM_CODE COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =__ram_code_load
1000109c:	100034c0 	.word	0x100034c0
   LDR R1, =__ram_code_start
100010a0:	20000a90 	.word	0x20000a90
   LDR R2, =__ram_code_size
100010a4:	00000000 	.word	0x00000000
   BL __COPY_FLASH2RAM

   /* VENEER COPY */
   /* R0 = Start address, R1 = Destination address, R2 = Size */
   LDR R0, =VeneerLoadAddr
100010a8:	100033b0 	.word	0x100033b0
   LDR R1, =VeneerStart
100010ac:	2000000c 	.word	0x2000000c
   LDR R2, =VeneerSize
100010b0:	00000110 	.word	0x00000110
   BL __COPY_FLASH2RAM

   /* BSS CLEAR */
   LDR R0, =__Xmc1100_sBSS     /* Start of BSS */
100010b4:	20000920 	.word	0x20000920
   LDR R1, =__Xmc1100_BSS_Size /* BSS size in bytes */
100010b8:	00000164 	.word	0x00000164
   B CLEARLOOP
    
SKIPCLEAR:

   /* Reset stack pointer before zipping off to user application, Optional */
   LDR R0,=__Xmc1100_stack 
100010bc:	20000920 	.word	0x20000920
   MOV SP,R0

   /* Perform System Initialization */   
   LDR R0,=SystemInit
100010c0:	100014c5 	.word	0x100014c5
   BLX R0

   /* Launch custom post-program loading startup procedure */
   LDR R0,=software_init_hook
100010c4:	100010cd 	.word	0x100010cd
   BLX R0

   MOVS R0,#0
   MOVS R1,#0
   LDR R2, =main
100010c8:	10001371 	.word	0x10001371

100010cc <software_init_hook>:
   has not been started.
 */
     .weak software_init_hook
     .type software_init_hook, %function
software_init_hook:
     NOP
100010cc:	46c0      	nop			; (mov r8, r8)
     BX LR
100010ce:	4770      	bx	lr

100010d0 <hardware_init_hook>:
     .size software_init_hook, . - software_init_hook

     .weak hardware_init_hook
     .type hardware_init_hook, %function
hardware_init_hook:
     NOP
100010d0:	46c0      	nop			; (mov r8, r8)
     BX LR
100010d2:	4770      	bx	lr

100010d4 <updateWS2812LEDs>:
						 BRIGHTNESS,BRIGHTNESS,0x00};



void updateWS2812LEDs(enum colorState state)
{
100010d4:	b580      	push	{r7, lr}
100010d6:	b082      	sub	sp, #8
100010d8:	af00      	add	r7, sp, #0
100010da:	1c02      	adds	r2, r0, #0
100010dc:	1dfb      	adds	r3, r7, #7
100010de:	701a      	strb	r2, [r3, #0]
	switch(state)
100010e0:	1dfb      	adds	r3, r7, #7
100010e2:	781b      	ldrb	r3, [r3, #0]
100010e4:	2b08      	cmp	r3, #8
100010e6:	d83a      	bhi.n	1000115e <updateWS2812LEDs+0x8a>
100010e8:	009a      	lsls	r2, r3, #2
100010ea:	4b1f      	ldr	r3, [pc, #124]	; (10001168 <updateWS2812LEDs+0x94>)
100010ec:	18d3      	adds	r3, r2, r3
100010ee:	681b      	ldr	r3, [r3, #0]
100010f0:	469f      	mov	pc, r3
	{
	case RGB:
		ws2812_sendarray((uint8_t*)rgb, sizeof(rgb));
100010f2:	4b1e      	ldr	r3, [pc, #120]	; (1000116c <updateWS2812LEDs+0x98>)
100010f4:	1c18      	adds	r0, r3, #0
100010f6:	213f      	movs	r1, #63	; 0x3f
100010f8:	f000 f8c0 	bl	1000127c <ws2812_sendarray>
		break;
100010fc:	e030      	b.n	10001160 <updateWS2812LEDs+0x8c>
	case RED:
		ws2812_sendarray((uint8_t*)red, sizeof(red));
100010fe:	4b1c      	ldr	r3, [pc, #112]	; (10001170 <updateWS2812LEDs+0x9c>)
10001100:	1c18      	adds	r0, r3, #0
10001102:	213f      	movs	r1, #63	; 0x3f
10001104:	f000 f8ba 	bl	1000127c <ws2812_sendarray>
		break;
10001108:	e02a      	b.n	10001160 <updateWS2812LEDs+0x8c>
	case GREEN:
		ws2812_sendarray((uint8_t*)green, sizeof(green));
1000110a:	4b1a      	ldr	r3, [pc, #104]	; (10001174 <updateWS2812LEDs+0xa0>)
1000110c:	1c18      	adds	r0, r3, #0
1000110e:	213f      	movs	r1, #63	; 0x3f
10001110:	f000 f8b4 	bl	1000127c <ws2812_sendarray>
		break;
10001114:	e024      	b.n	10001160 <updateWS2812LEDs+0x8c>
	case BLUE:
		ws2812_sendarray((uint8_t*)blue, sizeof(blue));
10001116:	4b18      	ldr	r3, [pc, #96]	; (10001178 <updateWS2812LEDs+0xa4>)
10001118:	1c18      	adds	r0, r3, #0
1000111a:	213f      	movs	r1, #63	; 0x3f
1000111c:	f000 f8ae 	bl	1000127c <ws2812_sendarray>
		break;
10001120:	e01e      	b.n	10001160 <updateWS2812LEDs+0x8c>
	case WHITE:
		ws2812_sendarray((uint8_t*)white, sizeof(white));
10001122:	4b16      	ldr	r3, [pc, #88]	; (1000117c <updateWS2812LEDs+0xa8>)
10001124:	1c18      	adds	r0, r3, #0
10001126:	213f      	movs	r1, #63	; 0x3f
10001128:	f000 f8a8 	bl	1000127c <ws2812_sendarray>
		break;
1000112c:	e018      	b.n	10001160 <updateWS2812LEDs+0x8c>
	case YELLOW:
		ws2812_sendarray((uint8_t*)yello, sizeof(yello));
1000112e:	4b14      	ldr	r3, [pc, #80]	; (10001180 <updateWS2812LEDs+0xac>)
10001130:	1c18      	adds	r0, r3, #0
10001132:	213f      	movs	r1, #63	; 0x3f
10001134:	f000 f8a2 	bl	1000127c <ws2812_sendarray>
		break;
10001138:	e012      	b.n	10001160 <updateWS2812LEDs+0x8c>
	case PURPLE:
		ws2812_sendarray((uint8_t*)purpl, sizeof(purpl));
1000113a:	4b12      	ldr	r3, [pc, #72]	; (10001184 <updateWS2812LEDs+0xb0>)
1000113c:	1c18      	adds	r0, r3, #0
1000113e:	213f      	movs	r1, #63	; 0x3f
10001140:	f000 f89c 	bl	1000127c <ws2812_sendarray>
		break;
10001144:	e00c      	b.n	10001160 <updateWS2812LEDs+0x8c>
	case CYAN:
		ws2812_sendarray((uint8_t*)cyan, sizeof(cyan));;
10001146:	4b10      	ldr	r3, [pc, #64]	; (10001188 <updateWS2812LEDs+0xb4>)
10001148:	1c18      	adds	r0, r3, #0
1000114a:	213f      	movs	r1, #63	; 0x3f
1000114c:	f000 f896 	bl	1000127c <ws2812_sendarray>
		break;
10001150:	e006      	b.n	10001160 <updateWS2812LEDs+0x8c>
	case OFF:
		ws2812_sendarray((uint8_t*)off, sizeof(off));
10001152:	4b0e      	ldr	r3, [pc, #56]	; (1000118c <updateWS2812LEDs+0xb8>)
10001154:	1c18      	adds	r0, r3, #0
10001156:	213f      	movs	r1, #63	; 0x3f
10001158:	f000 f890 	bl	1000127c <ws2812_sendarray>
		break;
1000115c:	e000      	b.n	10001160 <updateWS2812LEDs+0x8c>
	default:
		break;
1000115e:	46c0      	nop			; (mov r8, r8)
	}
}
10001160:	46bd      	mov	sp, r7
10001162:	b002      	add	sp, #8
10001164:	bd80      	pop	{r7, pc}
10001166:	46c0      	nop			; (mov r8, r8)
10001168:	10003348 	.word	0x10003348
1000116c:	10003108 	.word	0x10003108
10001170:	10003148 	.word	0x10003148
10001174:	10003188 	.word	0x10003188
10001178:	100031c8 	.word	0x100031c8
1000117c:	10003208 	.word	0x10003208
10001180:	10003308 	.word	0x10003308
10001184:	10003288 	.word	0x10003288
10001188:	100032c8 	.word	0x100032c8
1000118c:	10003248 	.word	0x10003248

10001190 <redDotOnBlueLine>:




void redDotOnBlueLine(void *ptr)
{
10001190:	b580      	push	{r7, lr}
10001192:	b084      	sub	sp, #16
10001194:	af00      	add	r7, sp, #0
10001196:	6078      	str	r0, [r7, #4]
	uint8_t *leds = ptr;
10001198:	687b      	ldr	r3, [r7, #4]
1000119a:	60fb      	str	r3, [r7, #12]
	static uint8_t redPosition = 0;
	static uint8_t bluePosition = 0;

	if(redPosition >= 3 || redPosition < bluePosition)
1000119c:	4b35      	ldr	r3, [pc, #212]	; (10001274 <redDotOnBlueLine+0xe4>)
1000119e:	781b      	ldrb	r3, [r3, #0]
100011a0:	2b02      	cmp	r3, #2
100011a2:	d805      	bhi.n	100011b0 <redDotOnBlueLine+0x20>
100011a4:	4b33      	ldr	r3, [pc, #204]	; (10001274 <redDotOnBlueLine+0xe4>)
100011a6:	781a      	ldrb	r2, [r3, #0]
100011a8:	4b33      	ldr	r3, [pc, #204]	; (10001278 <redDotOnBlueLine+0xe8>)
100011aa:	781b      	ldrb	r3, [r3, #0]
100011ac:	429a      	cmp	r2, r3
100011ae:	d225      	bcs.n	100011fc <redDotOnBlueLine+0x6c>
	{
		//delete oldest red dot, turn him blue
		leds[3*bluePosition  ] = 0x00;
100011b0:	4b31      	ldr	r3, [pc, #196]	; (10001278 <redDotOnBlueLine+0xe8>)
100011b2:	781b      	ldrb	r3, [r3, #0]
100011b4:	1c1a      	adds	r2, r3, #0
100011b6:	1c13      	adds	r3, r2, #0
100011b8:	005b      	lsls	r3, r3, #1
100011ba:	189b      	adds	r3, r3, r2
100011bc:	68fa      	ldr	r2, [r7, #12]
100011be:	18d3      	adds	r3, r2, r3
100011c0:	2200      	movs	r2, #0
100011c2:	701a      	strb	r2, [r3, #0]
		leds[3*bluePosition+1] = 0x00;
100011c4:	4b2c      	ldr	r3, [pc, #176]	; (10001278 <redDotOnBlueLine+0xe8>)
100011c6:	781b      	ldrb	r3, [r3, #0]
100011c8:	1c1a      	adds	r2, r3, #0
100011ca:	1c13      	adds	r3, r2, #0
100011cc:	005b      	lsls	r3, r3, #1
100011ce:	189b      	adds	r3, r3, r2
100011d0:	3301      	adds	r3, #1
100011d2:	68fa      	ldr	r2, [r7, #12]
100011d4:	18d3      	adds	r3, r2, r3
100011d6:	2200      	movs	r2, #0
100011d8:	701a      	strb	r2, [r3, #0]
		leds[3*bluePosition+2] = BRIGHTNESS;
100011da:	4b27      	ldr	r3, [pc, #156]	; (10001278 <redDotOnBlueLine+0xe8>)
100011dc:	781b      	ldrb	r3, [r3, #0]
100011de:	1c1a      	adds	r2, r3, #0
100011e0:	1c13      	adds	r3, r2, #0
100011e2:	005b      	lsls	r3, r3, #1
100011e4:	189b      	adds	r3, r3, r2
100011e6:	3302      	adds	r3, #2
100011e8:	68fa      	ldr	r2, [r7, #12]
100011ea:	18d3      	adds	r3, r2, r3
100011ec:	22ff      	movs	r2, #255	; 0xff
100011ee:	701a      	strb	r2, [r3, #0]
		bluePosition++;
100011f0:	4b21      	ldr	r3, [pc, #132]	; (10001278 <redDotOnBlueLine+0xe8>)
100011f2:	781b      	ldrb	r3, [r3, #0]
100011f4:	3301      	adds	r3, #1
100011f6:	b2da      	uxtb	r2, r3
100011f8:	4b1f      	ldr	r3, [pc, #124]	; (10001278 <redDotOnBlueLine+0xe8>)
100011fa:	701a      	strb	r2, [r3, #0]
	}

	//make new red dot
	leds[3*redPosition  ] = 0x00;
100011fc:	4b1d      	ldr	r3, [pc, #116]	; (10001274 <redDotOnBlueLine+0xe4>)
100011fe:	781b      	ldrb	r3, [r3, #0]
10001200:	1c1a      	adds	r2, r3, #0
10001202:	1c13      	adds	r3, r2, #0
10001204:	005b      	lsls	r3, r3, #1
10001206:	189b      	adds	r3, r3, r2
10001208:	68fa      	ldr	r2, [r7, #12]
1000120a:	18d3      	adds	r3, r2, r3
1000120c:	2200      	movs	r2, #0
1000120e:	701a      	strb	r2, [r3, #0]
	leds[3*redPosition+1] = BRIGHTNESS;
10001210:	4b18      	ldr	r3, [pc, #96]	; (10001274 <redDotOnBlueLine+0xe4>)
10001212:	781b      	ldrb	r3, [r3, #0]
10001214:	1c1a      	adds	r2, r3, #0
10001216:	1c13      	adds	r3, r2, #0
10001218:	005b      	lsls	r3, r3, #1
1000121a:	189b      	adds	r3, r3, r2
1000121c:	3301      	adds	r3, #1
1000121e:	68fa      	ldr	r2, [r7, #12]
10001220:	18d3      	adds	r3, r2, r3
10001222:	22ff      	movs	r2, #255	; 0xff
10001224:	701a      	strb	r2, [r3, #0]
	leds[3*redPosition+2] = 0x00;
10001226:	4b13      	ldr	r3, [pc, #76]	; (10001274 <redDotOnBlueLine+0xe4>)
10001228:	781b      	ldrb	r3, [r3, #0]
1000122a:	1c1a      	adds	r2, r3, #0
1000122c:	1c13      	adds	r3, r2, #0
1000122e:	005b      	lsls	r3, r3, #1
10001230:	189b      	adds	r3, r3, r2
10001232:	3302      	adds	r3, #2
10001234:	68fa      	ldr	r2, [r7, #12]
10001236:	18d3      	adds	r3, r2, r3
10001238:	2200      	movs	r2, #0
1000123a:	701a      	strb	r2, [r3, #0]

	if(++redPosition >= WS2812_QUANTITY) redPosition = 0;
1000123c:	4b0d      	ldr	r3, [pc, #52]	; (10001274 <redDotOnBlueLine+0xe4>)
1000123e:	781b      	ldrb	r3, [r3, #0]
10001240:	3301      	adds	r3, #1
10001242:	b2da      	uxtb	r2, r3
10001244:	4b0b      	ldr	r3, [pc, #44]	; (10001274 <redDotOnBlueLine+0xe4>)
10001246:	701a      	strb	r2, [r3, #0]
10001248:	4b0a      	ldr	r3, [pc, #40]	; (10001274 <redDotOnBlueLine+0xe4>)
1000124a:	781b      	ldrb	r3, [r3, #0]
1000124c:	2b14      	cmp	r3, #20
1000124e:	d902      	bls.n	10001256 <redDotOnBlueLine+0xc6>
10001250:	4b08      	ldr	r3, [pc, #32]	; (10001274 <redDotOnBlueLine+0xe4>)
10001252:	2200      	movs	r2, #0
10001254:	701a      	strb	r2, [r3, #0]
	if(bluePosition >= WS2812_QUANTITY) bluePosition = 0;
10001256:	4b08      	ldr	r3, [pc, #32]	; (10001278 <redDotOnBlueLine+0xe8>)
10001258:	781b      	ldrb	r3, [r3, #0]
1000125a:	2b14      	cmp	r3, #20
1000125c:	d902      	bls.n	10001264 <redDotOnBlueLine+0xd4>
1000125e:	4b06      	ldr	r3, [pc, #24]	; (10001278 <redDotOnBlueLine+0xe8>)
10001260:	2200      	movs	r2, #0
10001262:	701a      	strb	r2, [r3, #0]
	ws2812_sendarray(leds,63); //write new colors to to LEDS:
10001264:	68fb      	ldr	r3, [r7, #12]
10001266:	1c18      	adds	r0, r3, #0
10001268:	213f      	movs	r1, #63	; 0x3f
1000126a:	f000 f807 	bl	1000127c <ws2812_sendarray>
}
1000126e:	46bd      	mov	sp, r7
10001270:	b004      	add	sp, #16
10001272:	bd80      	pop	{r7, pc}
10001274:	20000920 	.word	0x20000920
10001278:	20000921 	.word	0x20000921

1000127c <ws2812_sendarray>:
#define ws2812_DEL8 ws2812_DEL4 ws2812_DEL4
#define ws2812_DEL16 ws2812_DEL8 ws2812_DEL8


void ws2812_sendarray(uint8_t *data,int datlen)
{
1000127c:	b5b0      	push	{r4, r5, r7, lr}
1000127e:	b088      	sub	sp, #32
10001280:	af00      	add	r7, sp, #0
10001282:	6078      	str	r0, [r7, #4]
10001284:	6039      	str	r1, [r7, #0]
	uint32_t maskhi = ws2812_mask_set;
10001286:	2320      	movs	r3, #32
10001288:	61bb      	str	r3, [r7, #24]
	uint32_t masklo = ws2812_mask_clr;
1000128a:	2380      	movs	r3, #128	; 0x80
1000128c:	039b      	lsls	r3, r3, #14
1000128e:	617b      	str	r3, [r7, #20]
	volatile uint32_t *set = ws2812_port_set;
10001290:	4b14      	ldr	r3, [pc, #80]	; (100012e4 <end45+0x1c>)
10001292:	613b      	str	r3, [r7, #16]
	volatile uint32_t *clr = ws2812_port_clr;
10001294:	4b13      	ldr	r3, [pc, #76]	; (100012e4 <end45+0x1c>)
10001296:	60fb      	str	r3, [r7, #12]
	uint32_t i;
	uint32_t curbyte;

	while (datlen--) {
10001298:	e017      	b.n	100012ca <end45+0x2>
		curbyte=*data++;
1000129a:	687b      	ldr	r3, [r7, #4]
1000129c:	781b      	ldrb	r3, [r3, #0]
1000129e:	60bb      	str	r3, [r7, #8]
100012a0:	687b      	ldr	r3, [r7, #4]
100012a2:	3301      	adds	r3, #1
100012a4:	607b      	str	r3, [r7, #4]

	asm volatile(
100012a6:	68bb      	ldr	r3, [r7, #8]
100012a8:	693a      	ldr	r2, [r7, #16]
100012aa:	68f9      	ldr	r1, [r7, #12]
100012ac:	6978      	ldr	r0, [r7, #20]
100012ae:	69bd      	ldr	r5, [r7, #24]
100012b0:	69fc      	ldr	r4, [r7, #28]
100012b2:	061b      	lsls	r3, r3, #24
100012b4:	2408      	movs	r4, #8

100012b6 <ilop45>:
100012b6:	005b      	lsls	r3, r3, #1
100012b8:	6015      	str	r5, [r2, #0]
100012ba:	46c0      	nop			; (mov r8, r8)
100012bc:	d200      	bcs.n	100012c0 <one45>
100012be:	6008      	str	r0, [r1, #0]

100012c0 <one45>:
100012c0:	3c01      	subs	r4, #1
100012c2:	6008      	str	r0, [r1, #0]
100012c4:	d000      	beq.n	100012c8 <end45>
100012c6:	e7f6      	b.n	100012b6 <ilop45>

100012c8 <end45>:
100012c8:	61fc      	str	r4, [r7, #28]
	volatile uint32_t *set = ws2812_port_set;
	volatile uint32_t *clr = ws2812_port_clr;
	uint32_t i;
	uint32_t curbyte;

	while (datlen--) {
100012ca:	683b      	ldr	r3, [r7, #0]
100012cc:	1e5a      	subs	r2, r3, #1
100012ce:	4193      	sbcs	r3, r2
100012d0:	b2db      	uxtb	r3, r3
100012d2:	683a      	ldr	r2, [r7, #0]
100012d4:	3a01      	subs	r2, #1
100012d6:	603a      	str	r2, [r7, #0]
100012d8:	2b00      	cmp	r3, #0
100012da:	d1de      	bne.n	1000129a <ws2812_sendarray+0x1e>
			"end%=:								\n\t"
			:	[ctr] "+r" (i)
			:	[dat] "r" (curbyte), [set] "r" (set), [clr] "r" (clr), [masklo] "r" (masklo), [maskhi] "r" (maskhi)
			);
	}
}
100012dc:	46bd      	mov	sp, r7
100012de:	b008      	add	sp, #32
100012e0:	bdb0      	pop	{r4, r5, r7, pc}
100012e2:	46c0      	nop			; (mov r8, r8)
100012e4:	40040004 	.word	0x40040004

100012e8 <P0_5_set_mode>:

__STATIC_INLINE void P0_4_disable_pps(void){
    PORT0->PPS &= ~0x00000010UL;
}

__STATIC_INLINE void P0_5_set_mode(uint8_t mode){
100012e8:	b580      	push	{r7, lr}
100012ea:	b082      	sub	sp, #8
100012ec:	af00      	add	r7, sp, #0
100012ee:	1c02      	adds	r2, r0, #0
100012f0:	1dfb      	adds	r3, r7, #7
100012f2:	701a      	strb	r2, [r3, #0]
    PORT0->IOCR4 &= ~0x0000f800UL;
100012f4:	4b08      	ldr	r3, [pc, #32]	; (10001318 <P0_5_set_mode+0x30>)
100012f6:	4a08      	ldr	r2, [pc, #32]	; (10001318 <P0_5_set_mode+0x30>)
100012f8:	6951      	ldr	r1, [r2, #20]
100012fa:	4a08      	ldr	r2, [pc, #32]	; (1000131c <P0_5_set_mode+0x34>)
100012fc:	400a      	ands	r2, r1
100012fe:	615a      	str	r2, [r3, #20]
    PORT0->IOCR4 |= mode << 8;
10001300:	4b05      	ldr	r3, [pc, #20]	; (10001318 <P0_5_set_mode+0x30>)
10001302:	4a05      	ldr	r2, [pc, #20]	; (10001318 <P0_5_set_mode+0x30>)
10001304:	6951      	ldr	r1, [r2, #20]
10001306:	1dfa      	adds	r2, r7, #7
10001308:	7812      	ldrb	r2, [r2, #0]
1000130a:	0212      	lsls	r2, r2, #8
1000130c:	430a      	orrs	r2, r1
1000130e:	615a      	str	r2, [r3, #20]
}
10001310:	46bd      	mov	sp, r7
10001312:	b002      	add	sp, #8
10001314:	bd80      	pop	{r7, pc}
10001316:	46c0      	nop			; (mov r8, r8)
10001318:	40040000 	.word	0x40040000
1000131c:	ffff07ff 	.word	0xffff07ff

10001320 <P0_6_set_mode>:

__STATIC_INLINE void P0_5_disable_pps(void){
    PORT0->PPS &= ~0x00000020UL;
}

__STATIC_INLINE void P0_6_set_mode(uint8_t mode){
10001320:	b580      	push	{r7, lr}
10001322:	b082      	sub	sp, #8
10001324:	af00      	add	r7, sp, #0
10001326:	1c02      	adds	r2, r0, #0
10001328:	1dfb      	adds	r3, r7, #7
1000132a:	701a      	strb	r2, [r3, #0]
    PORT0->IOCR4 &= ~0x00f80000UL;
1000132c:	4b08      	ldr	r3, [pc, #32]	; (10001350 <P0_6_set_mode+0x30>)
1000132e:	4a08      	ldr	r2, [pc, #32]	; (10001350 <P0_6_set_mode+0x30>)
10001330:	6951      	ldr	r1, [r2, #20]
10001332:	4a08      	ldr	r2, [pc, #32]	; (10001354 <P0_6_set_mode+0x34>)
10001334:	400a      	ands	r2, r1
10001336:	615a      	str	r2, [r3, #20]
    PORT0->IOCR4 |= mode << 16;
10001338:	4b05      	ldr	r3, [pc, #20]	; (10001350 <P0_6_set_mode+0x30>)
1000133a:	4a05      	ldr	r2, [pc, #20]	; (10001350 <P0_6_set_mode+0x30>)
1000133c:	6951      	ldr	r1, [r2, #20]
1000133e:	1dfa      	adds	r2, r7, #7
10001340:	7812      	ldrb	r2, [r2, #0]
10001342:	0412      	lsls	r2, r2, #16
10001344:	430a      	orrs	r2, r1
10001346:	615a      	str	r2, [r3, #20]
}
10001348:	46bd      	mov	sp, r7
1000134a:	b002      	add	sp, #8
1000134c:	bd80      	pop	{r7, pc}
1000134e:	46c0      	nop			; (mov r8, r8)
10001350:	40040000 	.word	0x40040000
10001354:	ff07ffff 	.word	0xff07ffff

10001358 <P0_6_read>:

__STATIC_INLINE void P0_6_toggle(void){
    PORT0->OMR = 0x00400040UL;
}

__STATIC_INLINE uint32_t P0_6_read(void){
10001358:	b580      	push	{r7, lr}
1000135a:	af00      	add	r7, sp, #0
    return(PORT0->IN & 0x00000040UL);
1000135c:	4b03      	ldr	r3, [pc, #12]	; (1000136c <P0_6_read+0x14>)
1000135e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10001360:	2340      	movs	r3, #64	; 0x40
10001362:	4013      	ands	r3, r2
}
10001364:	1c18      	adds	r0, r3, #0
10001366:	46bd      	mov	sp, r7
10001368:	bd80      	pop	{r7, pc}
1000136a:	46c0      	nop			; (mov r8, r8)
1000136c:	40040000 	.word	0x40040000

10001370 <main>:
void buttonRead(void *ptr);

handle_t animationTimer;

int main(void)
{
10001370:	b580      	push	{r7, lr}
10001372:	b094      	sub	sp, #80	; 0x50
10001374:	af00      	add	r7, sp, #0
	uint8_t stripe[WS2812_QUANTITY*3];
	enum colorState state = OFF;	//this should be volatile, I think
10001376:	1dfb      	adds	r3, r7, #7
10001378:	2200      	movs	r2, #0
1000137a:	701a      	strb	r2, [r3, #0]
//	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)

	//init stripe array for an animation to blue color, all leds
	for(uint8_t i=0 ; i<(sizeof(stripe)/3) ; i++)
1000137c:	1c3b      	adds	r3, r7, #0
1000137e:	334f      	adds	r3, #79	; 0x4f
10001380:	2200      	movs	r2, #0
10001382:	701a      	strb	r2, [r3, #0]
10001384:	e026      	b.n	100013d4 <main+0x64>
	{
		stripe[3*i]   = 0x00;
10001386:	1c3b      	adds	r3, r7, #0
10001388:	334f      	adds	r3, #79	; 0x4f
1000138a:	781a      	ldrb	r2, [r3, #0]
1000138c:	1c13      	adds	r3, r2, #0
1000138e:	005b      	lsls	r3, r3, #1
10001390:	189b      	adds	r3, r3, r2
10001392:	1c3a      	adds	r2, r7, #0
10001394:	3208      	adds	r2, #8
10001396:	2100      	movs	r1, #0
10001398:	54d1      	strb	r1, [r2, r3]
		stripe[3*i+1] = 0x00;
1000139a:	1c3b      	adds	r3, r7, #0
1000139c:	334f      	adds	r3, #79	; 0x4f
1000139e:	781a      	ldrb	r2, [r3, #0]
100013a0:	1c13      	adds	r3, r2, #0
100013a2:	005b      	lsls	r3, r3, #1
100013a4:	189b      	adds	r3, r3, r2
100013a6:	3301      	adds	r3, #1
100013a8:	1c3a      	adds	r2, r7, #0
100013aa:	3208      	adds	r2, #8
100013ac:	2100      	movs	r1, #0
100013ae:	54d1      	strb	r1, [r2, r3]
		stripe[3*i+2] = BRIGHTNESS;
100013b0:	1c3b      	adds	r3, r7, #0
100013b2:	334f      	adds	r3, #79	; 0x4f
100013b4:	781a      	ldrb	r2, [r3, #0]
100013b6:	1c13      	adds	r3, r2, #0
100013b8:	005b      	lsls	r3, r3, #1
100013ba:	189b      	adds	r3, r3, r2
100013bc:	3302      	adds	r3, #2
100013be:	1c3a      	adds	r2, r7, #0
100013c0:	3208      	adds	r2, #8
100013c2:	21ff      	movs	r1, #255	; 0xff
100013c4:	54d1      	strb	r1, [r2, r3]
	uint8_t stripe[WS2812_QUANTITY*3];
	enum colorState state = OFF;	//this should be volatile, I think
//	status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)

	//init stripe array for an animation to blue color, all leds
	for(uint8_t i=0 ; i<(sizeof(stripe)/3) ; i++)
100013c6:	1c3b      	adds	r3, r7, #0
100013c8:	334f      	adds	r3, #79	; 0x4f
100013ca:	1c3a      	adds	r2, r7, #0
100013cc:	324f      	adds	r2, #79	; 0x4f
100013ce:	7812      	ldrb	r2, [r2, #0]
100013d0:	3201      	adds	r2, #1
100013d2:	701a      	strb	r2, [r3, #0]
100013d4:	1c3b      	adds	r3, r7, #0
100013d6:	334f      	adds	r3, #79	; 0x4f
100013d8:	781b      	ldrb	r3, [r3, #0]
100013da:	2b14      	cmp	r3, #20
100013dc:	d9d3      	bls.n	10001386 <main+0x16>
		stripe[3*i]   = 0x00;
		stripe[3*i+1] = 0x00;
		stripe[3*i+2] = BRIGHTNESS;
	}

	DAVE_Init();			// Initialization of DAVE Apps
100013de:	f000 fd1f 	bl	10001e20 <DAVE_Init>
	handle_t timer;
	P0_5_set_mode(OUTPUT_PP_GP); 	//WS2812 data pin
100013e2:	2080      	movs	r0, #128	; 0x80
100013e4:	f7ff ff80 	bl	100012e8 <P0_5_set_mode>
	P0_6_set_mode(INPUT_PU);     	//button;
100013e8:	2010      	movs	r0, #16
100013ea:	f7ff ff99 	bl	10001320 <P0_6_set_mode>
	timer=SYSTM001_CreateTimer(400,SYSTM001_PERIODIC,buttonRead,&state);
100013ee:	23c8      	movs	r3, #200	; 0xc8
100013f0:	0059      	lsls	r1, r3, #1
100013f2:	4a0b      	ldr	r2, [pc, #44]	; (10001420 <main+0xb0>)
100013f4:	1dfb      	adds	r3, r7, #7
100013f6:	1c08      	adds	r0, r1, #0
100013f8:	2101      	movs	r1, #1
100013fa:	f000 fb99 	bl	10001b30 <SYSTM001_CreateTimer>
100013fe:	1c03      	adds	r3, r0, #0
10001400:	64bb      	str	r3, [r7, #72]	; 0x48
	SYSTM001_StartTimer(timer);
10001402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10001404:	1c18      	adds	r0, r3, #0
10001406:	f000 fc25 	bl	10001c54 <SYSTM001_StartTimer>
	animationTimer=SYSTM001_CreateTimer(10,SYSTM001_PERIODIC,redDotOnBlueLine,stripe);
1000140a:	4a06      	ldr	r2, [pc, #24]	; (10001424 <main+0xb4>)
1000140c:	1c3b      	adds	r3, r7, #0
1000140e:	3308      	adds	r3, #8
10001410:	200a      	movs	r0, #10
10001412:	2101      	movs	r1, #1
10001414:	f000 fb8c 	bl	10001b30 <SYSTM001_CreateTimer>
10001418:	1c02      	adds	r2, r0, #0
1000141a:	4b03      	ldr	r3, [pc, #12]	; (10001428 <main+0xb8>)
1000141c:	601a      	str	r2, [r3, #0]
	while(1){}
1000141e:	e7fe      	b.n	1000141e <main+0xae>
10001420:	1000142d 	.word	0x1000142d
10001424:	10001191 	.word	0x10001191
10001428:	2000093c 	.word	0x2000093c

1000142c <buttonRead>:
	return 0;
}

void buttonRead(void *ptr)
{
1000142c:	b580      	push	{r7, lr}
1000142e:	b084      	sub	sp, #16
10001430:	af00      	add	r7, sp, #0
10001432:	6078      	str	r0, [r7, #4]
	if(!P0_6_read()) //button pressed?
10001434:	f7ff ff90 	bl	10001358 <P0_6_read>
10001438:	1c03      	adds	r3, r0, #0
1000143a:	2b00      	cmp	r3, #0
1000143c:	d125      	bne.n	1000148a <buttonRead+0x5e>
	{
		enum colorState *lightState = ptr;
1000143e:	687b      	ldr	r3, [r7, #4]
10001440:	60fb      	str	r3, [r7, #12]

		if(*lightState == REDDOT)
10001442:	68fb      	ldr	r3, [r7, #12]
10001444:	781b      	ldrb	r3, [r3, #0]
10001446:	2b09      	cmp	r3, #9
10001448:	d108      	bne.n	1000145c <buttonRead+0x30>
		{
			SYSTM001_StopTimer(animationTimer);
1000144a:	4b11      	ldr	r3, [pc, #68]	; (10001490 <buttonRead+0x64>)
1000144c:	681b      	ldr	r3, [r3, #0]
1000144e:	1c18      	adds	r0, r3, #0
10001450:	f000 fc40 	bl	10001cd4 <SYSTM001_StopTimer>
			*lightState = OFF; //REDDOT is last Value of enum
10001454:	68fb      	ldr	r3, [r7, #12]
10001456:	2200      	movs	r2, #0
10001458:	701a      	strb	r2, [r3, #0]
1000145a:	e005      	b.n	10001468 <buttonRead+0x3c>
		}
		else (*lightState)++;
1000145c:	68fb      	ldr	r3, [r7, #12]
1000145e:	781b      	ldrb	r3, [r3, #0]
10001460:	3301      	adds	r3, #1
10001462:	b2da      	uxtb	r2, r3
10001464:	68fb      	ldr	r3, [r7, #12]
10001466:	701a      	strb	r2, [r3, #0]

		if(*lightState == REDDOT)
10001468:	68fb      	ldr	r3, [r7, #12]
1000146a:	781b      	ldrb	r3, [r3, #0]
1000146c:	2b09      	cmp	r3, #9
1000146e:	d105      	bne.n	1000147c <buttonRead+0x50>
			SYSTM001_StartTimer(animationTimer);
10001470:	4b07      	ldr	r3, [pc, #28]	; (10001490 <buttonRead+0x64>)
10001472:	681b      	ldr	r3, [r3, #0]
10001474:	1c18      	adds	r0, r3, #0
10001476:	f000 fbed 	bl	10001c54 <SYSTM001_StartTimer>
1000147a:	e006      	b.n	1000148a <buttonRead+0x5e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1000147c:	b672      	cpsid	i
		else
		{
			__disable_irq();
			updateWS2812LEDs(*lightState);
1000147e:	68fb      	ldr	r3, [r7, #12]
10001480:	781b      	ldrb	r3, [r3, #0]
10001482:	1c18      	adds	r0, r3, #0
10001484:	f7ff fe26 	bl	100010d4 <updateWS2812LEDs>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
10001488:	b662      	cpsie	i
			__enable_irq();
		}
	}
}
1000148a:	46bd      	mov	sp, r7
1000148c:	b004      	add	sp, #16
1000148e:	bd80      	pop	{r7, pc}
10001490:	2000093c 	.word	0x2000093c

10001494 <NMI_Handler>:
/* Default exception Handlers - Users may override this default functionality by
   defining handlers of the same name in their C code */
    .thumb 
    .text

    Insert_ExceptionHandler NMI_Handler
10001494:	e7fe      	b.n	10001494 <NMI_Handler>

10001496 <HardFault_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler HardFault_Handler
10001496:	e7fe      	b.n	10001496 <HardFault_Handler>

10001498 <SVC_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler SVC_Handler
10001498:	e7fe      	b.n	10001498 <SVC_Handler>

1000149a <PendSV_Handler>:
/* ======================================================================== */
    Insert_ExceptionHandler PendSV_Handler
1000149a:	e7fe      	b.n	1000149a <PendSV_Handler>
/* ======================================================================== */
    Insert_ExceptionHandler SysTick_Handler
1000149c:	e7fe      	b.n	1000149c <PendSV_Handler+0x2>

1000149e <SCU_0_IRQHandler>:
/* ============= END OF EXCEPTION HANDLER DEFINITION ======================== */

/* ============= START OF INTERRUPT HANDLER DEFINITION ====================== */

/* IRQ Handlers */
    Insert_ExceptionHandler SCU_0_IRQHandler
1000149e:	e7fe      	b.n	1000149e <SCU_0_IRQHandler>

100014a0 <SCU_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_1_IRQHandler
100014a0:	e7fe      	b.n	100014a0 <SCU_1_IRQHandler>

100014a2 <SCU_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler SCU_2_IRQHandler
100014a2:	e7fe      	b.n	100014a2 <SCU_2_IRQHandler>

100014a4 <ERU0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_0_IRQHandler
100014a4:	e7fe      	b.n	100014a4 <ERU0_0_IRQHandler>

100014a6 <ERU0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_1_IRQHandler
100014a6:	e7fe      	b.n	100014a6 <ERU0_1_IRQHandler>

100014a8 <ERU0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_2_IRQHandler
100014a8:	e7fe      	b.n	100014a8 <ERU0_2_IRQHandler>

100014aa <ERU0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler ERU0_3_IRQHandler
100014aa:	e7fe      	b.n	100014aa <ERU0_3_IRQHandler>

100014ac <VADC0_C0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_0_IRQHandler
100014ac:	e7fe      	b.n	100014ac <VADC0_C0_0_IRQHandler>

100014ae <VADC0_C0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler VADC0_C0_1_IRQHandler
100014ae:	e7fe      	b.n	100014ae <VADC0_C0_1_IRQHandler>

100014b0 <CCU40_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_0_IRQHandler
100014b0:	e7fe      	b.n	100014b0 <CCU40_0_IRQHandler>

100014b2 <CCU40_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_1_IRQHandler
100014b2:	e7fe      	b.n	100014b2 <CCU40_1_IRQHandler>

100014b4 <CCU40_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_2_IRQHandler
100014b4:	e7fe      	b.n	100014b4 <CCU40_2_IRQHandler>

100014b6 <CCU40_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler CCU40_3_IRQHandler
100014b6:	e7fe      	b.n	100014b6 <CCU40_3_IRQHandler>

100014b8 <USIC0_0_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_0_IRQHandler
100014b8:	e7fe      	b.n	100014b8 <USIC0_0_IRQHandler>

100014ba <USIC0_1_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_1_IRQHandler
100014ba:	e7fe      	b.n	100014ba <USIC0_1_IRQHandler>

100014bc <USIC0_2_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_2_IRQHandler
100014bc:	e7fe      	b.n	100014bc <USIC0_2_IRQHandler>

100014be <USIC0_3_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_3_IRQHandler
100014be:	e7fe      	b.n	100014be <USIC0_3_IRQHandler>

100014c0 <USIC0_4_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_4_IRQHandler
100014c0:	e7fe      	b.n	100014c0 <USIC0_4_IRQHandler>

100014c2 <USIC0_5_IRQHandler>:
/* ======================================================================== */
    Insert_ExceptionHandler USIC0_5_IRQHandler
100014c2:	e7fe      	b.n	100014c2 <USIC0_5_IRQHandler>

100014c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{    
100014c4:	b580      	push	{r7, lr}
100014c6:	af00      	add	r7, sp, #0
   * while((SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk));
   * SCU_GENERAL->PASSWD = 0x000000C3UL; // enable bit protection
   * SystemCoreClockUpdate();
   *
   */
  SystemCoreClockUpdate();
100014c8:	f000 f802 	bl	100014d0 <SystemCoreClockUpdate>
}
100014cc:	46bd      	mov	sp, r7
100014ce:	bd80      	pop	{r7, pc}

100014d0 <SystemCoreClockUpdate>:
  * @note   -  
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
100014d0:	b580      	push	{r7, lr}
100014d2:	b082      	sub	sp, #8
100014d4:	af00      	add	r7, sp, #0
  uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100014d6:	4b11      	ldr	r3, [pc, #68]	; (1000151c <SystemCoreClockUpdate+0x4c>)
100014d8:	681a      	ldr	r2, [r3, #0]
100014da:	23ff      	movs	r3, #255	; 0xff
100014dc:	021b      	lsls	r3, r3, #8
100014de:	4013      	ands	r3, r2
100014e0:	0a1b      	lsrs	r3, r3, #8
100014e2:	607b      	str	r3, [r7, #4]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100014e4:	4b0d      	ldr	r3, [pc, #52]	; (1000151c <SystemCoreClockUpdate+0x4c>)
100014e6:	681a      	ldr	r2, [r3, #0]
100014e8:	23ff      	movs	r3, #255	; 0xff
100014ea:	4013      	ands	r3, r2
100014ec:	603b      	str	r3, [r7, #0]
  
  if(IDIV)
100014ee:	687b      	ldr	r3, [r7, #4]
100014f0:	2b00      	cmp	r3, #0
100014f2:	d00c      	beq.n	1000150e <SystemCoreClockUpdate+0x3e>
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((MCLK_MHZ << 7) / ((IDIV << 8) + FDIV)) << 1;
100014f4:	687b      	ldr	r3, [r7, #4]
100014f6:	021a      	lsls	r2, r3, #8
100014f8:	683b      	ldr	r3, [r7, #0]
100014fa:	18d3      	adds	r3, r2, r3
100014fc:	4808      	ldr	r0, [pc, #32]	; (10001520 <SystemCoreClockUpdate+0x50>)
100014fe:	1c19      	adds	r1, r3, #0
10001500:	f000 fdb6 	bl	10002070 <__aeabi_uidiv>
10001504:	1c03      	adds	r3, r0, #0
10001506:	005a      	lsls	r2, r3, #1
10001508:	4b06      	ldr	r3, [pc, #24]	; (10001524 <SystemCoreClockUpdate+0x54>)
1000150a:	601a      	str	r2, [r3, #0]
1000150c:	e002      	b.n	10001514 <SystemCoreClockUpdate+0x44>
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = MCLK_MHZ;
1000150e:	4b05      	ldr	r3, [pc, #20]	; (10001524 <SystemCoreClockUpdate+0x54>)
10001510:	4a05      	ldr	r2, [pc, #20]	; (10001528 <SystemCoreClockUpdate+0x58>)
10001512:	601a      	str	r2, [r3, #0]
  }
}
10001514:	46bd      	mov	sp, r7
10001516:	b002      	add	sp, #8
10001518:	bd80      	pop	{r7, pc}
1000151a:	46c0      	nop			; (mov r8, r8)
1000151c:	40010300 	.word	0x40010300
10001520:	f4240000 	.word	0xf4240000
10001524:	20000940 	.word	0x20000940
10001528:	01e84800 	.word	0x01e84800

1000152c <_open>:
/* ========================================================================= */
/*
 * File open
 */
__attribute__((weak)) int _open(const char *name, int flags, int mode)
{
1000152c:	b580      	push	{r7, lr}
1000152e:	b084      	sub	sp, #16
10001530:	af00      	add	r7, sp, #0
10001532:	60f8      	str	r0, [r7, #12]
10001534:	60b9      	str	r1, [r7, #8]
10001536:	607a      	str	r2, [r7, #4]
 flags = flags;
 mode = mode;
 return -1;
10001538:	2301      	movs	r3, #1
1000153a:	425b      	negs	r3, r3
}
1000153c:	1c18      	adds	r0, r3, #0
1000153e:	46bd      	mov	sp, r7
10001540:	b004      	add	sp, #16
10001542:	bd80      	pop	{r7, pc}

10001544 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
10001544:	b580      	push	{r7, lr}
10001546:	b084      	sub	sp, #16
10001548:	af00      	add	r7, sp, #0
1000154a:	60f8      	str	r0, [r7, #12]
1000154c:	60b9      	str	r1, [r7, #8]
1000154e:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
10001550:	2301      	movs	r3, #1
10001552:	425b      	negs	r3, r3
}
10001554:	1c18      	adds	r0, r3, #0
10001556:	46bd      	mov	sp, r7
10001558:	b004      	add	sp, #16
1000155a:	bd80      	pop	{r7, pc}

1000155c <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
1000155c:	b580      	push	{r7, lr}
1000155e:	b084      	sub	sp, #16
10001560:	af00      	add	r7, sp, #0
10001562:	60f8      	str	r0, [r7, #12]
10001564:	60b9      	str	r1, [r7, #8]
10001566:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
10001568:	2300      	movs	r3, #0
}
1000156a:	1c18      	adds	r0, r3, #0
1000156c:	46bd      	mov	sp, r7
1000156e:	b004      	add	sp, #16
10001570:	bd80      	pop	{r7, pc}
10001572:	46c0      	nop			; (mov r8, r8)

10001574 <_write>:

/*
 * File write
 */
__attribute__((weak)) int _write(int file, char *buf, int nbytes)
{
10001574:	b580      	push	{r7, lr}
10001576:	b084      	sub	sp, #16
10001578:	af00      	add	r7, sp, #0
1000157a:	60f8      	str	r0, [r7, #12]
1000157c:	60b9      	str	r1, [r7, #8]
1000157e:	607a      	str	r2, [r7, #4]
 return -1;
10001580:	2301      	movs	r3, #1
10001582:	425b      	negs	r3, r3
}
10001584:	1c18      	adds	r0, r3, #0
10001586:	46bd      	mov	sp, r7
10001588:	b004      	add	sp, #16
1000158a:	bd80      	pop	{r7, pc}

1000158c <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
1000158c:	b580      	push	{r7, lr}
1000158e:	af00      	add	r7, sp, #0
 return -1;
10001590:	2301      	movs	r3, #1
10001592:	425b      	negs	r3, r3
}
10001594:	1c18      	adds	r0, r3, #0
10001596:	46bd      	mov	sp, r7
10001598:	bd80      	pop	{r7, pc}
1000159a:	46c0      	nop			; (mov r8, r8)

1000159c <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
1000159c:	b580      	push	{r7, lr}
1000159e:	b082      	sub	sp, #8
100015a0:	af00      	add	r7, sp, #0
100015a2:	6078      	str	r0, [r7, #4]
100015a4:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
100015a6:	683b      	ldr	r3, [r7, #0]
100015a8:	2b00      	cmp	r3, #0
100015aa:	d002      	beq.n	100015b2 <_fstat+0x16>
  return -1;
100015ac:	2301      	movs	r3, #1
100015ae:	425b      	negs	r3, r3
100015b0:	e001      	b.n	100015b6 <_fstat+0x1a>
 else
  return -2;
100015b2:	2302      	movs	r3, #2
100015b4:	425b      	negs	r3, r3
}
100015b6:	1c18      	adds	r0, r3, #0
100015b8:	46bd      	mov	sp, r7
100015ba:	b002      	add	sp, #8
100015bc:	bd80      	pop	{r7, pc}
100015be:	46c0      	nop			; (mov r8, r8)

100015c0 <_link>:
/*
 * File linking
 */
__attribute__((weak)) int _link (char *old, char *new)
{
100015c0:	b580      	push	{r7, lr}
100015c2:	b082      	sub	sp, #8
100015c4:	af00      	add	r7, sp, #0
100015c6:	6078      	str	r0, [r7, #4]
100015c8:	6039      	str	r1, [r7, #0]
 if (old == new)
100015ca:	687a      	ldr	r2, [r7, #4]
100015cc:	683b      	ldr	r3, [r7, #0]
100015ce:	429a      	cmp	r2, r3
100015d0:	d102      	bne.n	100015d8 <_link+0x18>
  return -1;
100015d2:	2301      	movs	r3, #1
100015d4:	425b      	negs	r3, r3
100015d6:	e001      	b.n	100015dc <_link+0x1c>
 else
  return -2;
100015d8:	2302      	movs	r3, #2
100015da:	425b      	negs	r3, r3
}
100015dc:	1c18      	adds	r0, r3, #0
100015de:	46bd      	mov	sp, r7
100015e0:	b002      	add	sp, #8
100015e2:	bd80      	pop	{r7, pc}

100015e4 <_unlink>:

/*
 * Unlinking directory entry
 */
__attribute__((weak)) int _unlink(char *name)
{
100015e4:	b580      	push	{r7, lr}
100015e6:	b082      	sub	sp, #8
100015e8:	af00      	add	r7, sp, #0
100015ea:	6078      	str	r0, [r7, #4]
 return -1;
100015ec:	2301      	movs	r3, #1
100015ee:	425b      	negs	r3, r3
}
100015f0:	1c18      	adds	r0, r3, #0
100015f2:	46bd      	mov	sp, r7
100015f4:	b002      	add	sp, #8
100015f6:	bd80      	pop	{r7, pc}

100015f8 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
100015f8:	b580      	push	{r7, lr}
100015fa:	b086      	sub	sp, #24
100015fc:	af00      	add	r7, sp, #0
100015fe:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
10001600:	4b14      	ldr	r3, [pc, #80]	; (10001654 <_sbrk+0x5c>)
10001602:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
10001604:	4b14      	ldr	r3, [pc, #80]	; (10001658 <_sbrk+0x60>)
10001606:	681b      	ldr	r3, [r3, #0]
10001608:	2b00      	cmp	r3, #0
1000160a:	d108      	bne.n	1000161e <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
1000160c:	4b12      	ldr	r3, [pc, #72]	; (10001658 <_sbrk+0x60>)
1000160e:	4a13      	ldr	r2, [pc, #76]	; (1000165c <_sbrk+0x64>)
10001610:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
10001612:	4b11      	ldr	r3, [pc, #68]	; (10001658 <_sbrk+0x60>)
10001614:	681a      	ldr	r2, [r3, #0]
10001616:	697b      	ldr	r3, [r7, #20]
10001618:	18d2      	adds	r2, r2, r3
1000161a:	4b11      	ldr	r3, [pc, #68]	; (10001660 <_sbrk+0x68>)
1000161c:	601a      	str	r2, [r3, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
1000161e:	4b0e      	ldr	r3, [pc, #56]	; (10001658 <_sbrk+0x60>)
10001620:	681b      	ldr	r3, [r3, #0]
10001622:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
10001624:	4b0c      	ldr	r3, [pc, #48]	; (10001658 <_sbrk+0x60>)
10001626:	681b      	ldr	r3, [r3, #0]
10001628:	1c1a      	adds	r2, r3, #0
1000162a:	687b      	ldr	r3, [r7, #4]
1000162c:	18d3      	adds	r3, r2, r3
1000162e:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
10001630:	2207      	movs	r2, #7
10001632:	4393      	bics	r3, r2
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
10001634:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
10001636:	4b0a      	ldr	r3, [pc, #40]	; (10001660 <_sbrk+0x68>)
10001638:	681b      	ldr	r3, [r3, #0]
1000163a:	68fa      	ldr	r2, [r7, #12]
1000163c:	429a      	cmp	r2, r3
1000163e:	d301      	bcc.n	10001644 <_sbrk+0x4c>
  return ((unsigned char *)NULL);
10001640:	2300      	movs	r3, #0
10001642:	e003      	b.n	1000164c <_sbrk+0x54>
 else
 {
  heap = NextBreak;
10001644:	4b04      	ldr	r3, [pc, #16]	; (10001658 <_sbrk+0x60>)
10001646:	68fa      	ldr	r2, [r7, #12]
10001648:	601a      	str	r2, [r3, #0]
  return CurrBreak;
1000164a:	693b      	ldr	r3, [r7, #16]
 }
}
1000164c:	1c18      	adds	r0, r3, #0
1000164e:	46bd      	mov	sp, r7
10001650:	b006      	add	sp, #24
10001652:	bd80      	pop	{r7, pc}
10001654:	00003570 	.word	0x00003570
10001658:	20000928 	.word	0x20000928
1000165c:	20000a90 	.word	0x20000a90
10001660:	2000092c 	.word	0x2000092c

10001664 <_times>:
/* ========================================================================= */
/*
 * Process timing information
 */
__attribute__((weak)) int _times(struct tms *buf)
{
10001664:	b580      	push	{r7, lr}
10001666:	b082      	sub	sp, #8
10001668:	af00      	add	r7, sp, #0
1000166a:	6078      	str	r0, [r7, #4]
 return -1;
1000166c:	2301      	movs	r3, #1
1000166e:	425b      	negs	r3, r3
}
10001670:	1c18      	adds	r0, r3, #0
10001672:	46bd      	mov	sp, r7
10001674:	b002      	add	sp, #8
10001676:	bd80      	pop	{r7, pc}

10001678 <_wait>:
/*
 * Waiting for a child process to complete
 */
__attribute__((weak)) int _wait(int *status)
{
10001678:	b580      	push	{r7, lr}
1000167a:	b082      	sub	sp, #8
1000167c:	af00      	add	r7, sp, #0
1000167e:	6078      	str	r0, [r7, #4]
 return -1;
10001680:	2301      	movs	r3, #1
10001682:	425b      	negs	r3, r3
}
10001684:	1c18      	adds	r0, r3, #0
10001686:	46bd      	mov	sp, r7
10001688:	b002      	add	sp, #8
1000168a:	bd80      	pop	{r7, pc}

1000168c <_kill>:

/*
 * Kill a process
 */
__attribute__((weak)) int _kill(int pid,int sig)
{
1000168c:	b580      	push	{r7, lr}
1000168e:	b082      	sub	sp, #8
10001690:	af00      	add	r7, sp, #0
10001692:	6078      	str	r0, [r7, #4]
10001694:	6039      	str	r1, [r7, #0]
 pid = pid;
 sig = sig;
 return -1;
10001696:	2301      	movs	r3, #1
10001698:	425b      	negs	r3, r3
}
1000169a:	1c18      	adds	r0, r3, #0
1000169c:	46bd      	mov	sp, r7
1000169e:	b002      	add	sp, #8
100016a0:	bd80      	pop	{r7, pc}
100016a2:	46c0      	nop			; (mov r8, r8)

100016a4 <_fork>:

/*
 * Forking a child process
 */
__attribute__((weak)) int _fork(void)
{
100016a4:	b580      	push	{r7, lr}
100016a6:	af00      	add	r7, sp, #0
 return -1;
100016a8:	2301      	movs	r3, #1
100016aa:	425b      	negs	r3, r3
}
100016ac:	1c18      	adds	r0, r3, #0
100016ae:	46bd      	mov	sp, r7
100016b0:	bd80      	pop	{r7, pc}
100016b2:	46c0      	nop			; (mov r8, r8)

100016b4 <_getpid>:

/*
 * Process ID
 */
__attribute__((weak)) int _getpid(void)
{
100016b4:	b580      	push	{r7, lr}
100016b6:	af00      	add	r7, sp, #0
 return -1;
100016b8:	2301      	movs	r3, #1
100016ba:	425b      	negs	r3, r3
}
100016bc:	1c18      	adds	r0, r3, #0
100016be:	46bd      	mov	sp, r7
100016c0:	bd80      	pop	{r7, pc}
100016c2:	46c0      	nop			; (mov r8, r8)

100016c4 <_exit>:

/*
 * Program/process exit
 */
__attribute__((weak)) void _exit(int rc)
{
100016c4:	b580      	push	{r7, lr}
100016c6:	b082      	sub	sp, #8
100016c8:	af00      	add	r7, sp, #0
100016ca:	6078      	str	r0, [r7, #4]
 rc = rc;
 while(1){}
100016cc:	e7fe      	b.n	100016cc <_exit+0x8>
100016ce:	46c0      	nop			; (mov r8, r8)

100016d0 <_init>:
}

/* Init */
__attribute__((weak)) void _init(void)
{}
100016d0:	b580      	push	{r7, lr}
100016d2:	af00      	add	r7, sp, #0
100016d4:	46bd      	mov	sp, r7
100016d6:	bd80      	pop	{r7, pc}

100016d8 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
100016d8:	b580      	push	{r7, lr}
100016da:	b082      	sub	sp, #8
100016dc:	af00      	add	r7, sp, #0
100016de:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
100016e0:	2301      	movs	r3, #1
100016e2:	425b      	negs	r3, r3
}
100016e4:	1c18      	adds	r0, r3, #0
100016e6:	46bd      	mov	sp, r7
100016e8:	b002      	add	sp, #8
100016ea:	bd80      	pop	{r7, pc}

100016ec <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100016ec:	b5b0      	push	{r4, r5, r7, lr}
100016ee:	b082      	sub	sp, #8
100016f0:	af00      	add	r7, sp, #0
100016f2:	1c02      	adds	r2, r0, #0
100016f4:	6039      	str	r1, [r7, #0]
100016f6:	1dfb      	adds	r3, r7, #7
100016f8:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
100016fa:	1dfb      	adds	r3, r7, #7
100016fc:	781b      	ldrb	r3, [r3, #0]
100016fe:	2b7f      	cmp	r3, #127	; 0x7f
10001700:	d932      	bls.n	10001768 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10001702:	4930      	ldr	r1, [pc, #192]	; (100017c4 <NVIC_SetPriority+0xd8>)
10001704:	1dfb      	adds	r3, r7, #7
10001706:	781b      	ldrb	r3, [r3, #0]
10001708:	1c1a      	adds	r2, r3, #0
1000170a:	230f      	movs	r3, #15
1000170c:	4013      	ands	r3, r2
1000170e:	3b08      	subs	r3, #8
10001710:	0898      	lsrs	r0, r3, #2
10001712:	4a2c      	ldr	r2, [pc, #176]	; (100017c4 <NVIC_SetPriority+0xd8>)
10001714:	1dfb      	adds	r3, r7, #7
10001716:	781b      	ldrb	r3, [r3, #0]
10001718:	1c1c      	adds	r4, r3, #0
1000171a:	230f      	movs	r3, #15
1000171c:	4023      	ands	r3, r4
1000171e:	3b08      	subs	r3, #8
10001720:	089b      	lsrs	r3, r3, #2
10001722:	3306      	adds	r3, #6
10001724:	009b      	lsls	r3, r3, #2
10001726:	18d3      	adds	r3, r2, r3
10001728:	685b      	ldr	r3, [r3, #4]
1000172a:	1dfa      	adds	r2, r7, #7
1000172c:	7812      	ldrb	r2, [r2, #0]
1000172e:	1c14      	adds	r4, r2, #0
10001730:	2203      	movs	r2, #3
10001732:	4022      	ands	r2, r4
10001734:	00d2      	lsls	r2, r2, #3
10001736:	24ff      	movs	r4, #255	; 0xff
10001738:	1c25      	adds	r5, r4, #0
1000173a:	4095      	lsls	r5, r2
1000173c:	1c2a      	adds	r2, r5, #0
1000173e:	43d2      	mvns	r2, r2
10001740:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
10001742:	683b      	ldr	r3, [r7, #0]
10001744:	019c      	lsls	r4, r3, #6
10001746:	23ff      	movs	r3, #255	; 0xff
10001748:	401c      	ands	r4, r3
1000174a:	1dfb      	adds	r3, r7, #7
1000174c:	781b      	ldrb	r3, [r3, #0]
1000174e:	1c1d      	adds	r5, r3, #0
10001750:	2303      	movs	r3, #3
10001752:	402b      	ands	r3, r5
10001754:	00db      	lsls	r3, r3, #3
10001756:	1c25      	adds	r5, r4, #0
10001758:	409d      	lsls	r5, r3
1000175a:	1c2b      	adds	r3, r5, #0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
1000175c:	431a      	orrs	r2, r3
1000175e:	1d83      	adds	r3, r0, #6
10001760:	009b      	lsls	r3, r3, #2
10001762:	18cb      	adds	r3, r1, r3
10001764:	605a      	str	r2, [r3, #4]
10001766:	e029      	b.n	100017bc <NVIC_SetPriority+0xd0>
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
10001768:	4b17      	ldr	r3, [pc, #92]	; (100017c8 <NVIC_SetPriority+0xdc>)
1000176a:	1dfa      	adds	r2, r7, #7
1000176c:	7812      	ldrb	r2, [r2, #0]
1000176e:	b252      	sxtb	r2, r2
10001770:	0892      	lsrs	r2, r2, #2
10001772:	4915      	ldr	r1, [pc, #84]	; (100017c8 <NVIC_SetPriority+0xdc>)
10001774:	1df8      	adds	r0, r7, #7
10001776:	7800      	ldrb	r0, [r0, #0]
10001778:	b240      	sxtb	r0, r0
1000177a:	0880      	lsrs	r0, r0, #2
1000177c:	30c0      	adds	r0, #192	; 0xc0
1000177e:	0080      	lsls	r0, r0, #2
10001780:	5841      	ldr	r1, [r0, r1]
10001782:	1df8      	adds	r0, r7, #7
10001784:	7800      	ldrb	r0, [r0, #0]
10001786:	1c04      	adds	r4, r0, #0
10001788:	2003      	movs	r0, #3
1000178a:	4020      	ands	r0, r4
1000178c:	00c0      	lsls	r0, r0, #3
1000178e:	24ff      	movs	r4, #255	; 0xff
10001790:	1c25      	adds	r5, r4, #0
10001792:	4085      	lsls	r5, r0
10001794:	1c28      	adds	r0, r5, #0
10001796:	43c0      	mvns	r0, r0
10001798:	4008      	ands	r0, r1
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
1000179a:	6839      	ldr	r1, [r7, #0]
1000179c:	018c      	lsls	r4, r1, #6
1000179e:	21ff      	movs	r1, #255	; 0xff
100017a0:	400c      	ands	r4, r1
100017a2:	1df9      	adds	r1, r7, #7
100017a4:	7809      	ldrb	r1, [r1, #0]
100017a6:	1c0d      	adds	r5, r1, #0
100017a8:	2103      	movs	r1, #3
100017aa:	4029      	ands	r1, r5
100017ac:	00c9      	lsls	r1, r1, #3
100017ae:	1c25      	adds	r5, r4, #0
100017b0:	408d      	lsls	r5, r1
100017b2:	1c29      	adds	r1, r5, #0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
100017b4:	4301      	orrs	r1, r0
100017b6:	32c0      	adds	r2, #192	; 0xc0
100017b8:	0092      	lsls	r2, r2, #2
100017ba:	50d1      	str	r1, [r2, r3]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
100017bc:	46bd      	mov	sp, r7
100017be:	b002      	add	sp, #8
100017c0:	bdb0      	pop	{r4, r5, r7, pc}
100017c2:	46c0      	nop			; (mov r8, r8)
100017c4:	e000ed00 	.word	0xe000ed00
100017c8:	e000e100 	.word	0xe000e100

100017cc <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
100017cc:	b580      	push	{r7, lr}
100017ce:	b082      	sub	sp, #8
100017d0:	af00      	add	r7, sp, #0
100017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
100017d4:	687b      	ldr	r3, [r7, #4]
100017d6:	1e5a      	subs	r2, r3, #1
100017d8:	4b0c      	ldr	r3, [pc, #48]	; (1000180c <SysTick_Config+0x40>)
100017da:	429a      	cmp	r2, r3
100017dc:	d901      	bls.n	100017e2 <SysTick_Config+0x16>
100017de:	2301      	movs	r3, #1
100017e0:	e010      	b.n	10001804 <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
100017e2:	4b0b      	ldr	r3, [pc, #44]	; (10001810 <SysTick_Config+0x44>)
100017e4:	687a      	ldr	r2, [r7, #4]
100017e6:	3a01      	subs	r2, #1
100017e8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
100017ea:	2301      	movs	r3, #1
100017ec:	425b      	negs	r3, r3
100017ee:	1c18      	adds	r0, r3, #0
100017f0:	2103      	movs	r1, #3
100017f2:	f7ff ff7b 	bl	100016ec <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
100017f6:	4b06      	ldr	r3, [pc, #24]	; (10001810 <SysTick_Config+0x44>)
100017f8:	2200      	movs	r2, #0
100017fa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
100017fc:	4b04      	ldr	r3, [pc, #16]	; (10001810 <SysTick_Config+0x44>)
100017fe:	2207      	movs	r2, #7
10001800:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
10001802:	2300      	movs	r3, #0
}
10001804:	1c18      	adds	r0, r3, #0
10001806:	46bd      	mov	sp, r7
10001808:	b002      	add	sp, #8
1000180a:	bd80      	pop	{r7, pc}
1000180c:	00ffffff 	.word	0x00ffffff
10001810:	e000e010 	.word	0xe000e010

10001814 <SYSTM001_lInsertTimerList>:

/*
 * This function is called to insert a timer into the timer list.
 */
static void  SYSTM001_lInsertTimerList (uint32_t Index)
{
10001814:	b580      	push	{r7, lr}
10001816:	b086      	sub	sp, #24
10001818:	af00      	add	r7, sp, #0
1000181a:	6078      	str	r0, [r7, #4]
  SYSTM001_TimerObject* TmrObjPtr;
  int32_t DeltaTicks;
  uint32_t TempTmrCnt;
   /* Get timer time */
  TempTmrCnt = TimerTbl[Index].TimerCount;
1000181c:	4a50      	ldr	r2, [pc, #320]	; (10001960 <SYSTM001_lInsertTimerList+0x14c>)
1000181e:	687b      	ldr	r3, [r7, #4]
10001820:	015b      	lsls	r3, r3, #5
10001822:	18d3      	adds	r3, r2, r3
10001824:	3308      	adds	r3, #8
10001826:	681b      	ldr	r3, [r3, #0]
10001828:	60fb      	str	r3, [r7, #12]
  /* Check if timer count is zero */
  /* <<<DD_SYSTM001_PRIV _API_1>>> */

  /* Check if Timer list is NULL */
  if(TimerList == NULL)
1000182a:	4b4e      	ldr	r3, [pc, #312]	; (10001964 <SYSTM001_lInsertTimerList+0x150>)
1000182c:	681b      	ldr	r3, [r3, #0]
1000182e:	2b00      	cmp	r3, #0
10001830:	d106      	bne.n	10001840 <SYSTM001_lInsertTimerList+0x2c>
  {
      /* Set this as first Timer */
      TimerList = &TimerTbl[Index];
10001832:	687b      	ldr	r3, [r7, #4]
10001834:	015a      	lsls	r2, r3, #5
10001836:	4b4a      	ldr	r3, [pc, #296]	; (10001960 <SYSTM001_lInsertTimerList+0x14c>)
10001838:	18d2      	adds	r2, r2, r3
1000183a:	4b4a      	ldr	r3, [pc, #296]	; (10001964 <SYSTM001_lInsertTimerList+0x150>)
1000183c:	601a      	str	r2, [r3, #0]
1000183e:	e08b      	b.n	10001958 <SYSTM001_lInsertTimerList+0x144>
  }
  /* IF Not, find the correct place ,and insert the specified timer */
  else
  {
    TmrObjPtr = TimerList;
10001840:	4b48      	ldr	r3, [pc, #288]	; (10001964 <SYSTM001_lInsertTimerList+0x150>)
10001842:	681b      	ldr	r3, [r3, #0]
10001844:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    DeltaTicks = (int32_t)TempTmrCnt;
10001846:	68fb      	ldr	r3, [r7, #12]
10001848:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while(TmrObjPtr != NULL)
1000184a:	e081      	b.n	10001950 <SYSTM001_lInsertTimerList+0x13c>
    {
      /* Get timer Count Difference  */
      DeltaTicks -= (int32_t)TmrObjPtr->TimerCount;
1000184c:	697b      	ldr	r3, [r7, #20]
1000184e:	689b      	ldr	r3, [r3, #8]
10001850:	693a      	ldr	r2, [r7, #16]
10001852:	1ad3      	subs	r3, r2, r3
10001854:	613b      	str	r3, [r7, #16]
      /* Is delta ticks<0? */
      if(DeltaTicks < 0)
10001856:	693b      	ldr	r3, [r7, #16]
10001858:	2b00      	cmp	r3, #0
1000185a:	da5a      	bge.n	10001912 <SYSTM001_lInsertTimerList+0xfe>
      {
        /*  Check If head item */
        if(TmrObjPtr->TimerPrev!= NULL)
1000185c:	697b      	ldr	r3, [r7, #20]
1000185e:	69db      	ldr	r3, [r3, #28]
10001860:	2b00      	cmp	r3, #0
10001862:	d01c      	beq.n	1000189e <SYSTM001_lInsertTimerList+0x8a>
        {
          /* If Insert to list */
          TmrObjPtr->TimerPrev->TimerNext = &TimerTbl[Index];
10001864:	697b      	ldr	r3, [r7, #20]
10001866:	69db      	ldr	r3, [r3, #28]
10001868:	687a      	ldr	r2, [r7, #4]
1000186a:	0151      	lsls	r1, r2, #5
1000186c:	4a3c      	ldr	r2, [pc, #240]	; (10001960 <SYSTM001_lInsertTimerList+0x14c>)
1000186e:	188a      	adds	r2, r1, r2
10001870:	619a      	str	r2, [r3, #24]
          TimerTbl[Index].TimerPrev = TmrObjPtr->TimerPrev;
10001872:	697b      	ldr	r3, [r7, #20]
10001874:	69da      	ldr	r2, [r3, #28]
10001876:	493a      	ldr	r1, [pc, #232]	; (10001960 <SYSTM001_lInsertTimerList+0x14c>)
10001878:	687b      	ldr	r3, [r7, #4]
1000187a:	015b      	lsls	r3, r3, #5
1000187c:	18cb      	adds	r3, r1, r3
1000187e:	331c      	adds	r3, #28
10001880:	601a      	str	r2, [r3, #0]
          TimerTbl[Index].TimerNext = TmrObjPtr;
10001882:	4a37      	ldr	r2, [pc, #220]	; (10001960 <SYSTM001_lInsertTimerList+0x14c>)
10001884:	687b      	ldr	r3, [r7, #4]
10001886:	015b      	lsls	r3, r3, #5
10001888:	18d3      	adds	r3, r2, r3
1000188a:	3318      	adds	r3, #24
1000188c:	697a      	ldr	r2, [r7, #20]
1000188e:	601a      	str	r2, [r3, #0]
          TmrObjPtr->TimerPrev = &TimerTbl[Index];
10001890:	687b      	ldr	r3, [r7, #4]
10001892:	015a      	lsls	r2, r3, #5
10001894:	4b32      	ldr	r3, [pc, #200]	; (10001960 <SYSTM001_lInsertTimerList+0x14c>)
10001896:	18d2      	adds	r2, r2, r3
10001898:	697b      	ldr	r3, [r7, #20]
1000189a:	61da      	str	r2, [r3, #28]
1000189c:	e014      	b.n	100018c8 <SYSTM001_lInsertTimerList+0xb4>
        }
        else
        {
          /* Set Timer as first item */
          TimerTbl[Index].TimerNext = TimerList;
1000189e:	4b31      	ldr	r3, [pc, #196]	; (10001964 <SYSTM001_lInsertTimerList+0x150>)
100018a0:	681a      	ldr	r2, [r3, #0]
100018a2:	492f      	ldr	r1, [pc, #188]	; (10001960 <SYSTM001_lInsertTimerList+0x14c>)
100018a4:	687b      	ldr	r3, [r7, #4]
100018a6:	015b      	lsls	r3, r3, #5
100018a8:	18cb      	adds	r3, r1, r3
100018aa:	3318      	adds	r3, #24
100018ac:	601a      	str	r2, [r3, #0]
          TimerList->TimerPrev = &TimerTbl[Index];
100018ae:	4b2d      	ldr	r3, [pc, #180]	; (10001964 <SYSTM001_lInsertTimerList+0x150>)
100018b0:	681b      	ldr	r3, [r3, #0]
100018b2:	687a      	ldr	r2, [r7, #4]
100018b4:	0151      	lsls	r1, r2, #5
100018b6:	4a2a      	ldr	r2, [pc, #168]	; (10001960 <SYSTM001_lInsertTimerList+0x14c>)
100018b8:	188a      	adds	r2, r1, r2
100018ba:	61da      	str	r2, [r3, #28]
          TimerList = &TimerTbl[Index];
100018bc:	687b      	ldr	r3, [r7, #4]
100018be:	015a      	lsls	r2, r3, #5
100018c0:	4b27      	ldr	r3, [pc, #156]	; (10001960 <SYSTM001_lInsertTimerList+0x14c>)
100018c2:	18d2      	adds	r2, r2, r3
100018c4:	4b27      	ldr	r3, [pc, #156]	; (10001964 <SYSTM001_lInsertTimerList+0x150>)
100018c6:	601a      	str	r2, [r3, #0]
        }
        TimerTbl[Index].TimerCount = \
                TimerTbl[Index].TimerNext->TimerCount + (uint32_t)DeltaTicks;
100018c8:	4a25      	ldr	r2, [pc, #148]	; (10001960 <SYSTM001_lInsertTimerList+0x14c>)
100018ca:	687b      	ldr	r3, [r7, #4]
100018cc:	015b      	lsls	r3, r3, #5
100018ce:	18d3      	adds	r3, r2, r3
100018d0:	3318      	adds	r3, #24
100018d2:	681b      	ldr	r3, [r3, #0]
100018d4:	689a      	ldr	r2, [r3, #8]
100018d6:	693b      	ldr	r3, [r7, #16]
100018d8:	18d2      	adds	r2, r2, r3
          /* Set Timer as first item */
          TimerTbl[Index].TimerNext = TimerList;
          TimerList->TimerPrev = &TimerTbl[Index];
          TimerList = &TimerTbl[Index];
        }
        TimerTbl[Index].TimerCount = \
100018da:	4921      	ldr	r1, [pc, #132]	; (10001960 <SYSTM001_lInsertTimerList+0x14c>)
100018dc:	687b      	ldr	r3, [r7, #4]
100018de:	015b      	lsls	r3, r3, #5
100018e0:	18cb      	adds	r3, r1, r3
100018e2:	3308      	adds	r3, #8
100018e4:	601a      	str	r2, [r3, #0]
                TimerTbl[Index].TimerNext->TimerCount + (uint32_t)DeltaTicks;
        TimerTbl[Index].TimerNext->TimerCount  -= TimerTbl[Index].TimerCount;
100018e6:	4a1e      	ldr	r2, [pc, #120]	; (10001960 <SYSTM001_lInsertTimerList+0x14c>)
100018e8:	687b      	ldr	r3, [r7, #4]
100018ea:	015b      	lsls	r3, r3, #5
100018ec:	18d3      	adds	r3, r2, r3
100018ee:	3318      	adds	r3, #24
100018f0:	681b      	ldr	r3, [r3, #0]
100018f2:	491b      	ldr	r1, [pc, #108]	; (10001960 <SYSTM001_lInsertTimerList+0x14c>)
100018f4:	687a      	ldr	r2, [r7, #4]
100018f6:	0152      	lsls	r2, r2, #5
100018f8:	188a      	adds	r2, r1, r2
100018fa:	3218      	adds	r2, #24
100018fc:	6812      	ldr	r2, [r2, #0]
100018fe:	6891      	ldr	r1, [r2, #8]
10001900:	4817      	ldr	r0, [pc, #92]	; (10001960 <SYSTM001_lInsertTimerList+0x14c>)
10001902:	687a      	ldr	r2, [r7, #4]
10001904:	0152      	lsls	r2, r2, #5
10001906:	1882      	adds	r2, r0, r2
10001908:	3208      	adds	r2, #8
1000190a:	6812      	ldr	r2, [r2, #0]
1000190c:	1a8a      	subs	r2, r1, r2
1000190e:	609a      	str	r2, [r3, #8]
        break;
10001910:	e022      	b.n	10001958 <SYSTM001_lInsertTimerList+0x144>
      }
      /* Is last item in list? */
      else
      {
        if((DeltaTicks >= 0) && (TmrObjPtr->TimerNext == NULL))
10001912:	693b      	ldr	r3, [r7, #16]
10001914:	2b00      	cmp	r3, #0
10001916:	db18      	blt.n	1000194a <SYSTM001_lInsertTimerList+0x136>
10001918:	697b      	ldr	r3, [r7, #20]
1000191a:	699b      	ldr	r3, [r3, #24]
1000191c:	2b00      	cmp	r3, #0
1000191e:	d114      	bne.n	1000194a <SYSTM001_lInsertTimerList+0x136>
        {
          /* Yes,insert into */
          TimerTbl[Index].TimerPrev = TmrObjPtr;
10001920:	4a0f      	ldr	r2, [pc, #60]	; (10001960 <SYSTM001_lInsertTimerList+0x14c>)
10001922:	687b      	ldr	r3, [r7, #4]
10001924:	015b      	lsls	r3, r3, #5
10001926:	18d3      	adds	r3, r2, r3
10001928:	331c      	adds	r3, #28
1000192a:	697a      	ldr	r2, [r7, #20]
1000192c:	601a      	str	r2, [r3, #0]
          TmrObjPtr->TimerNext = &TimerTbl[Index];
1000192e:	687b      	ldr	r3, [r7, #4]
10001930:	015a      	lsls	r2, r3, #5
10001932:	4b0b      	ldr	r3, [pc, #44]	; (10001960 <SYSTM001_lInsertTimerList+0x14c>)
10001934:	18d2      	adds	r2, r2, r3
10001936:	697b      	ldr	r3, [r7, #20]
10001938:	619a      	str	r2, [r3, #24]
          TimerTbl[Index].TimerCount = (uint32_t)DeltaTicks;
1000193a:	693a      	ldr	r2, [r7, #16]
1000193c:	4908      	ldr	r1, [pc, #32]	; (10001960 <SYSTM001_lInsertTimerList+0x14c>)
1000193e:	687b      	ldr	r3, [r7, #4]
10001940:	015b      	lsls	r3, r3, #5
10001942:	18cb      	adds	r3, r1, r3
10001944:	3308      	adds	r3, #8
10001946:	601a      	str	r2, [r3, #0]
          break;
10001948:	e006      	b.n	10001958 <SYSTM001_lInsertTimerList+0x144>
        }
      }
      /* Get the next item in timer list    */
      TmrObjPtr = TmrObjPtr->TimerNext;
1000194a:	697b      	ldr	r3, [r7, #20]
1000194c:	699b      	ldr	r3, [r3, #24]
1000194e:	617b      	str	r3, [r7, #20]
  {
    TmrObjPtr = TimerList;
    /* Get timer tick */
    DeltaTicks = (int32_t)TempTmrCnt;
    /* Find correct place for inserting the timer */
    while(TmrObjPtr != NULL)
10001950:	697b      	ldr	r3, [r7, #20]
10001952:	2b00      	cmp	r3, #0
10001954:	d000      	beq.n	10001958 <SYSTM001_lInsertTimerList+0x144>
10001956:	e779      	b.n	1000184c <SYSTM001_lInsertTimerList+0x38>
      }
      /* Get the next item in timer list    */
      TmrObjPtr = TmrObjPtr->TimerNext;
    }
  }
}
10001958:	46bd      	mov	sp, r7
1000195a:	b006      	add	sp, #24
1000195c:	bd80      	pop	{r7, pc}
1000195e:	46c0      	nop			; (mov r8, r8)
10001960:	20000944 	.word	0x20000944
10001964:	20000930 	.word	0x20000930

10001968 <SYSTM001_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void  SYSTM001_lRemoveTimerList(uint32_t Index)
{
10001968:	b580      	push	{r7, lr}
1000196a:	b084      	sub	sp, #16
1000196c:	af00      	add	r7, sp, #0
1000196e:	6078      	str	r0, [r7, #4]
  SYSTM001_TimerObject* TmrObjPtr;
  TmrObjPtr = &TimerTbl[Index];
10001970:	687b      	ldr	r3, [r7, #4]
10001972:	015a      	lsls	r2, r3, #5
10001974:	4b27      	ldr	r3, [pc, #156]	; (10001a14 <SYSTM001_lRemoveTimerList+0xac>)
10001976:	18d3      	adds	r3, r2, r3
10001978:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  /* <<<DD_SYSTM001_PRIV _API_2>>> */
  if((TmrObjPtr->TimerPrev == NULL) && (TmrObjPtr->TimerNext == NULL))
1000197a:	68fb      	ldr	r3, [r7, #12]
1000197c:	69db      	ldr	r3, [r3, #28]
1000197e:	2b00      	cmp	r3, #0
10001980:	d107      	bne.n	10001992 <SYSTM001_lRemoveTimerList+0x2a>
10001982:	68fb      	ldr	r3, [r7, #12]
10001984:	699b      	ldr	r3, [r3, #24]
10001986:	2b00      	cmp	r3, #0
10001988:	d103      	bne.n	10001992 <SYSTM001_lRemoveTimerList+0x2a>
  {
    /* set timer list as NULL */ 
    TimerList = NULL;                 	
1000198a:	4b23      	ldr	r3, [pc, #140]	; (10001a18 <SYSTM001_lRemoveTimerList+0xb0>)
1000198c:	2200      	movs	r2, #0
1000198e:	601a      	str	r2, [r3, #0]
10001990:	e03d      	b.n	10001a0e <SYSTM001_lRemoveTimerList+0xa6>
  }
   /* Check if the first item in timer list   */
  else if(TmrObjPtr->TimerPrev == NULL)     
10001992:	68fb      	ldr	r3, [r7, #12]
10001994:	69db      	ldr	r3, [r3, #28]
10001996:	2b00      	cmp	r3, #0
10001998:	d114      	bne.n	100019c4 <SYSTM001_lRemoveTimerList+0x5c>
  {   
    /* Remove timer from list,and reset timer list */
    TimerList  = TmrObjPtr->TimerNext;
1000199a:	68fb      	ldr	r3, [r7, #12]
1000199c:	699a      	ldr	r2, [r3, #24]
1000199e:	4b1e      	ldr	r3, [pc, #120]	; (10001a18 <SYSTM001_lRemoveTimerList+0xb0>)
100019a0:	601a      	str	r2, [r3, #0]
    TimerList->TimerPrev = NULL;
100019a2:	4b1d      	ldr	r3, [pc, #116]	; (10001a18 <SYSTM001_lRemoveTimerList+0xb0>)
100019a4:	681b      	ldr	r3, [r3, #0]
100019a6:	2200      	movs	r2, #0
100019a8:	61da      	str	r2, [r3, #28]
    TmrObjPtr->TimerNext->TimerCount += TmrObjPtr->TimerCount;
100019aa:	68fb      	ldr	r3, [r7, #12]
100019ac:	699b      	ldr	r3, [r3, #24]
100019ae:	68fa      	ldr	r2, [r7, #12]
100019b0:	6992      	ldr	r2, [r2, #24]
100019b2:	6891      	ldr	r1, [r2, #8]
100019b4:	68fa      	ldr	r2, [r7, #12]
100019b6:	6892      	ldr	r2, [r2, #8]
100019b8:	188a      	adds	r2, r1, r2
100019ba:	609a      	str	r2, [r3, #8]
    TmrObjPtr->TimerNext    = NULL;  
100019bc:	68fb      	ldr	r3, [r7, #12]
100019be:	2200      	movs	r2, #0
100019c0:	619a      	str	r2, [r3, #24]
100019c2:	e024      	b.n	10001a0e <SYSTM001_lRemoveTimerList+0xa6>
  }
  /* Check if the last item in timer list   */
  else if(TmrObjPtr->TimerNext == NULL)      
100019c4:	68fb      	ldr	r3, [r7, #12]
100019c6:	699b      	ldr	r3, [r3, #24]
100019c8:	2b00      	cmp	r3, #0
100019ca:	d107      	bne.n	100019dc <SYSTM001_lRemoveTimerList+0x74>
  {
    /* Remove timer from list */
    TmrObjPtr->TimerPrev->TimerNext = NULL;	
100019cc:	68fb      	ldr	r3, [r7, #12]
100019ce:	69db      	ldr	r3, [r3, #28]
100019d0:	2200      	movs	r2, #0
100019d2:	619a      	str	r2, [r3, #24]
    TmrObjPtr->TimerPrev = NULL;
100019d4:	68fb      	ldr	r3, [r7, #12]
100019d6:	2200      	movs	r2, #0
100019d8:	61da      	str	r2, [r3, #28]
100019da:	e018      	b.n	10001a0e <SYSTM001_lRemoveTimerList+0xa6>
  }
  else                                /*  remove timer from list         */
  {
    /*  Remove timer from list */
    TmrObjPtr->TimerPrev->TimerNext  =  TmrObjPtr->TimerNext;
100019dc:	68fb      	ldr	r3, [r7, #12]
100019de:	69db      	ldr	r3, [r3, #28]
100019e0:	68fa      	ldr	r2, [r7, #12]
100019e2:	6992      	ldr	r2, [r2, #24]
100019e4:	619a      	str	r2, [r3, #24]
    TmrObjPtr->TimerNext->TimerPrev  =  TmrObjPtr->TimerPrev;
100019e6:	68fb      	ldr	r3, [r7, #12]
100019e8:	699b      	ldr	r3, [r3, #24]
100019ea:	68fa      	ldr	r2, [r7, #12]
100019ec:	69d2      	ldr	r2, [r2, #28]
100019ee:	61da      	str	r2, [r3, #28]
    TmrObjPtr->TimerNext->TimerCount  += TmrObjPtr->TimerCount;
100019f0:	68fb      	ldr	r3, [r7, #12]
100019f2:	699b      	ldr	r3, [r3, #24]
100019f4:	68fa      	ldr	r2, [r7, #12]
100019f6:	6992      	ldr	r2, [r2, #24]
100019f8:	6891      	ldr	r1, [r2, #8]
100019fa:	68fa      	ldr	r2, [r7, #12]
100019fc:	6892      	ldr	r2, [r2, #8]
100019fe:	188a      	adds	r2, r1, r2
10001a00:	609a      	str	r2, [r3, #8]
    TmrObjPtr->TimerNext = NULL;
10001a02:	68fb      	ldr	r3, [r7, #12]
10001a04:	2200      	movs	r2, #0
10001a06:	619a      	str	r2, [r3, #24]
    TmrObjPtr->TimerPrev = NULL;
10001a08:	68fb      	ldr	r3, [r7, #12]
10001a0a:	2200      	movs	r2, #0
10001a0c:	61da      	str	r2, [r3, #28]
  }
}
10001a0e:	46bd      	mov	sp, r7
10001a10:	b004      	add	sp, #16
10001a12:	bd80      	pop	{r7, pc}
10001a14:	20000944 	.word	0x20000944
10001a18:	20000930 	.word	0x20000930

10001a1c <SYSTM001_lTimerHandler>:

/*
 * Handler function  called from Systick event handler. 
 */
static void  SYSTM001_lTimerHandler (void)
{
10001a1c:	b580      	push	{r7, lr}
10001a1e:	b082      	sub	sp, #8
10001a20:	af00      	add	r7, sp, #0
  SYSTM001_TimerObject* TmrObjPtr;
   /* Get first item of timer list       */
  TmrObjPtr = TimerList;         
10001a22:	4b1f      	ldr	r3, [pc, #124]	; (10001aa0 <SYSTM001_lTimerHandler+0x84>)
10001a24:	681b      	ldr	r3, [r3, #0]
10001a26:	607b      	str	r3, [r7, #4]
  /* <<<DD_SYSTM001_PRIV _API_3>>> */  
  while((TmrObjPtr != NULL) && (TmrObjPtr->TimerCount == 0UL) )
10001a28:	e02d      	b.n	10001a86 <SYSTM001_lTimerHandler+0x6a>
  {	
    /* Check whether timer is a one shot timer */
    if(TmrObjPtr->TimerType == SYSTM001_ONE_SHOT)
10001a2a:	687b      	ldr	r3, [r7, #4]
10001a2c:	791b      	ldrb	r3, [r3, #4]
10001a2e:	2b00      	cmp	r3, #0
10001a30:	d10e      	bne.n	10001a50 <SYSTM001_lTimerHandler+0x34>
    {
      /* Yes,remove this timer from timer list */
      SYSTM001_lRemoveTimerList(TmrObjPtr->TimerID);
10001a32:	687b      	ldr	r3, [r7, #4]
10001a34:	681b      	ldr	r3, [r3, #0]
10001a36:	1c18      	adds	r0, r3, #0
10001a38:	f7ff ff96 	bl	10001968 <SYSTM001_lRemoveTimerList>
      /* Set timer status as SYSTM001_STATE_STOPPED */
      TmrObjPtr->TimerState = SYSTM001_STATE_STOPPED;
10001a3c:	687b      	ldr	r3, [r7, #4]
10001a3e:	2201      	movs	r2, #1
10001a40:	715a      	strb	r2, [r3, #5]
      /* Call timer callback function */
      (TmrObjPtr->TimerCallBack)(TmrObjPtr->ParamToCallBack);
10001a42:	687b      	ldr	r3, [r7, #4]
10001a44:	691a      	ldr	r2, [r3, #16]
10001a46:	687b      	ldr	r3, [r7, #4]
10001a48:	695b      	ldr	r3, [r3, #20]
10001a4a:	1c18      	adds	r0, r3, #0
10001a4c:	4790      	blx	r2
10001a4e:	e017      	b.n	10001a80 <SYSTM001_lTimerHandler+0x64>
    }
    /* Check whether timer is SYSTM001_PERIODIC */
    else if(TmrObjPtr->TimerType == SYSTM001_PERIODIC)
10001a50:	687b      	ldr	r3, [r7, #4]
10001a52:	791b      	ldrb	r3, [r3, #4]
10001a54:	2b01      	cmp	r3, #1
10001a56:	d11e      	bne.n	10001a96 <SYSTM001_lTimerHandler+0x7a>
    {
      /* Yes,remove this timer from timer list */
      SYSTM001_lRemoveTimerList(TmrObjPtr->TimerID);
10001a58:	687b      	ldr	r3, [r7, #4]
10001a5a:	681b      	ldr	r3, [r3, #0]
10001a5c:	1c18      	adds	r0, r3, #0
10001a5e:	f7ff ff83 	bl	10001968 <SYSTM001_lRemoveTimerList>
      /* Reset timer tick             */
      TmrObjPtr->TimerCount = TmrObjPtr->TimerReload;
10001a62:	687b      	ldr	r3, [r7, #4]
10001a64:	68da      	ldr	r2, [r3, #12]
10001a66:	687b      	ldr	r3, [r7, #4]
10001a68:	609a      	str	r2, [r3, #8]
        /* Insert timer into timer list */
      SYSTM001_lInsertTimerList(TmrObjPtr->TimerID);
10001a6a:	687b      	ldr	r3, [r7, #4]
10001a6c:	681b      	ldr	r3, [r3, #0]
10001a6e:	1c18      	adds	r0, r3, #0
10001a70:	f7ff fed0 	bl	10001814 <SYSTM001_lInsertTimerList>
      /* Call timer callback function */
      (TmrObjPtr->TimerCallBack)(TmrObjPtr->ParamToCallBack);
10001a74:	687b      	ldr	r3, [r7, #4]
10001a76:	691a      	ldr	r2, [r3, #16]
10001a78:	687b      	ldr	r3, [r7, #4]
10001a7a:	695b      	ldr	r3, [r3, #20]
10001a7c:	1c18      	adds	r0, r3, #0
10001a7e:	4790      	blx	r2
    else
    {
      break;
    }
    /* Get first item of timer list */
    TmrObjPtr = TimerList;
10001a80:	4b07      	ldr	r3, [pc, #28]	; (10001aa0 <SYSTM001_lTimerHandler+0x84>)
10001a82:	681b      	ldr	r3, [r3, #0]
10001a84:	607b      	str	r3, [r7, #4]
{
  SYSTM001_TimerObject* TmrObjPtr;
   /* Get first item of timer list       */
  TmrObjPtr = TimerList;         
  /* <<<DD_SYSTM001_PRIV _API_3>>> */  
  while((TmrObjPtr != NULL) && (TmrObjPtr->TimerCount == 0UL) )
10001a86:	687b      	ldr	r3, [r7, #4]
10001a88:	2b00      	cmp	r3, #0
10001a8a:	d005      	beq.n	10001a98 <SYSTM001_lTimerHandler+0x7c>
10001a8c:	687b      	ldr	r3, [r7, #4]
10001a8e:	689b      	ldr	r3, [r3, #8]
10001a90:	2b00      	cmp	r3, #0
10001a92:	d0ca      	beq.n	10001a2a <SYSTM001_lTimerHandler+0xe>
10001a94:	e000      	b.n	10001a98 <SYSTM001_lTimerHandler+0x7c>
      /* Call timer callback function */
      (TmrObjPtr->TimerCallBack)(TmrObjPtr->ParamToCallBack);
    }
    else
    {
      break;
10001a96:	46c0      	nop			; (mov r8, r8)
    }
    /* Get first item of timer list */
    TmrObjPtr = TimerList;
  }
}
10001a98:	46bd      	mov	sp, r7
10001a9a:	b002      	add	sp, #8
10001a9c:	bd80      	pop	{r7, pc}
10001a9e:	46c0      	nop			; (mov r8, r8)
10001aa0:	20000930 	.word	0x20000930

10001aa4 <SysTick_Handler>:

/*
 *  SysTick Event Handler 
 */
void  SysTick_Handler(void)
{ 
10001aa4:	b580      	push	{r7, lr}
10001aa6:	b082      	sub	sp, #8
10001aa8:	af00      	add	r7, sp, #0
  SYSTM001_TimerObject* TmrObjPtr;
  TmrObjPtr = TimerList;
10001aaa:	4b0e      	ldr	r3, [pc, #56]	; (10001ae4 <SysTick_Handler+0x40>)
10001aac:	681b      	ldr	r3, [r3, #0]
10001aae:	607b      	str	r3, [r7, #4]
  /* <<<DD_SYSTM001_PRIV _API_4>>> */
  SysTickCount++;
10001ab0:	4b0d      	ldr	r3, [pc, #52]	; (10001ae8 <SysTick_Handler+0x44>)
10001ab2:	681b      	ldr	r3, [r3, #0]
10001ab4:	1c5a      	adds	r2, r3, #1
10001ab6:	4b0c      	ldr	r3, [pc, #48]	; (10001ae8 <SysTick_Handler+0x44>)
10001ab8:	601a      	str	r2, [r3, #0]
  if(TmrObjPtr == NULL)
10001aba:	687b      	ldr	r3, [r7, #4]
10001abc:	2b00      	cmp	r3, #0
10001abe:	d00e      	beq.n	10001ade <SysTick_Handler+0x3a>
    /* Not supposed to be here */
   ;  
  }
  else
  {
    if(TmrObjPtr->TimerCount > 1UL)
10001ac0:	687b      	ldr	r3, [r7, #4]
10001ac2:	689b      	ldr	r3, [r3, #8]
10001ac4:	2b01      	cmp	r3, #1
10001ac6:	d905      	bls.n	10001ad4 <SysTick_Handler+0x30>
    {
      TmrObjPtr->TimerCount--;
10001ac8:	687b      	ldr	r3, [r7, #4]
10001aca:	689b      	ldr	r3, [r3, #8]
10001acc:	1e5a      	subs	r2, r3, #1
10001ace:	687b      	ldr	r3, [r7, #4]
10001ad0:	609a      	str	r2, [r3, #8]
10001ad2:	e004      	b.n	10001ade <SysTick_Handler+0x3a>
    }
    else
    { 
      TmrObjPtr->TimerCount = 0;
10001ad4:	687b      	ldr	r3, [r7, #4]
10001ad6:	2200      	movs	r2, #0
10001ad8:	609a      	str	r2, [r3, #8]
      SYSTM001_lTimerHandler();
10001ada:	f7ff ff9f 	bl	10001a1c <SYSTM001_lTimerHandler>
    }
  }
}
10001ade:	46bd      	mov	sp, r7
10001ae0:	b002      	add	sp, #8
10001ae2:	bd80      	pop	{r7, pc}
10001ae4:	20000930 	.word	0x20000930
10001ae8:	20000938 	.word	0x20000938

10001aec <SYSTM001_Init>:
/*
 *  Initialization function which initializes the App internal data
 *  structures to default values. 
 */
void  SYSTM001_Init( void)
{
10001aec:	b580      	push	{r7, lr}
10001aee:	b082      	sub	sp, #8
10001af0:	af00      	add	r7, sp, #0
    uint32_t Status = 0UL;
10001af2:	2300      	movs	r3, #0
10001af4:	607b      	str	r3, [r7, #4]

  /** Initialize the header of the list */
  TimerList = NULL;
10001af6:	4b0c      	ldr	r3, [pc, #48]	; (10001b28 <SYSTM001_Init+0x3c>)
10001af8:	2200      	movs	r2, #0
10001afa:	601a      	str	r2, [r3, #0]
  /* Clock Initialization */
  CLK002_Init();
10001afc:	f000 f9a4 	bl	10001e48 <CLK002_Init>
  /**   Initialize timer tracker  */
  Status = SysTick_Config((uint32_t)(SYSTM001_SYSTICK_INTERVAL * SYSTM001_SYS_CORE_CLOCK * 1000U));
10001b00:	23fa      	movs	r3, #250	; 0xfa
10001b02:	015b      	lsls	r3, r3, #5
10001b04:	1c18      	adds	r0, r3, #0
10001b06:	f7ff fe61 	bl	100017cc <SysTick_Config>
10001b0a:	1c03      	adds	r3, r0, #0
10001b0c:	607b      	str	r3, [r7, #4]
  if(Status == 1U)
  {
        DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Status), &Status);
  }
    NVIC_SetPriority(SysTick_IRQn, 1);
10001b0e:	2301      	movs	r3, #1
10001b10:	425b      	negs	r3, r3
10001b12:	1c18      	adds	r0, r3, #0
10001b14:	2101      	movs	r1, #1
10001b16:	f7ff fde9 	bl	100016ec <NVIC_SetPriority>
  TimerTracker = 0UL;
10001b1a:	4b04      	ldr	r3, [pc, #16]	; (10001b2c <SYSTM001_Init+0x40>)
10001b1c:	2200      	movs	r2, #0
10001b1e:	601a      	str	r2, [r3, #0]

}
10001b20:	46bd      	mov	sp, r7
10001b22:	b002      	add	sp, #8
10001b24:	bd80      	pop	{r7, pc}
10001b26:	46c0      	nop			; (mov r8, r8)
10001b28:	20000930 	.word	0x20000930
10001b2c:	20000934 	.word	0x20000934

10001b30 <SYSTM001_CreateTimer>:
  uint32_t Period,
  SYSTM001_TimerType TimerType, 
  SYSTM001_TimerCallBackPtr TimerCallBack, 
  void  * pCallBackArgPtr
)
{
10001b30:	b580      	push	{r7, lr}
10001b32:	b088      	sub	sp, #32
10001b34:	af00      	add	r7, sp, #0
10001b36:	60f8      	str	r0, [r7, #12]
10001b38:	607a      	str	r2, [r7, #4]
10001b3a:	603b      	str	r3, [r7, #0]
10001b3c:	1c3b      	adds	r3, r7, #0
10001b3e:	330b      	adds	r3, #11
10001b40:	1c0a      	adds	r2, r1, #0
10001b42:	701a      	strb	r2, [r3, #0]
  uint32_t TimerID = 0UL;
10001b44:	2300      	movs	r3, #0
10001b46:	61fb      	str	r3, [r7, #28]
  uint32_t Count = 0UL;
10001b48:	2300      	movs	r3, #0
10001b4a:	61bb      	str	r3, [r7, #24]
  uint32_t Error = 0UL;  
10001b4c:	2300      	movs	r3, #0
10001b4e:	617b      	str	r3, [r7, #20]

  /* Check for input parameter */
    if((TimerType != SYSTM001_ONE_SHOT) && (TimerType != SYSTM001_PERIODIC))
10001b50:	1c3b      	adds	r3, r7, #0
10001b52:	330b      	adds	r3, #11
10001b54:	781b      	ldrb	r3, [r3, #0]
10001b56:	2b00      	cmp	r3, #0
10001b58:	d006      	beq.n	10001b68 <SYSTM001_CreateTimer+0x38>
10001b5a:	1c3b      	adds	r3, r7, #0
10001b5c:	330b      	adds	r3, #11
10001b5e:	781b      	ldrb	r3, [r3, #0]
10001b60:	2b01      	cmp	r3, #1
10001b62:	d001      	beq.n	10001b68 <SYSTM001_CreateTimer+0x38>
    {
      Error=(uint32_t)1UL;
10001b64:	2301      	movs	r3, #1
10001b66:	617b      	str	r3, [r7, #20]
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
      
    }
    if(Period < (uint32_t)SYSTM001_SYSTICK_INTERVAL)
10001b68:	68fb      	ldr	r3, [r7, #12]
10001b6a:	2b00      	cmp	r3, #0
10001b6c:	d101      	bne.n	10001b72 <SYSTM001_CreateTimer+0x42>
    {
      Error=(uint32_t)1UL;
10001b6e:	2301      	movs	r3, #1
10001b70:	617b      	str	r3, [r7, #20]
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
    }
    if(Period == 0)          /* Timer with '0' time is not allowed. */
10001b72:	68fb      	ldr	r3, [r7, #12]
10001b74:	2b00      	cmp	r3, #0
10001b76:	d101      	bne.n	10001b7c <SYSTM001_CreateTimer+0x4c>
    {
      Error=(uint32_t)1UL;
10001b78:	2301      	movs	r3, #1
10001b7a:	617b      	str	r3, [r7, #20]
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
    }

    if(TimerCallBack == NULL)
10001b7c:	687b      	ldr	r3, [r7, #4]
10001b7e:	2b00      	cmp	r3, #0
10001b80:	d101      	bne.n	10001b86 <SYSTM001_CreateTimer+0x56>
    {
      Error=(uint32_t)1UL;
10001b82:	2301      	movs	r3, #1
10001b84:	617b      	str	r3, [r7, #20]
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
    }
    if (!Error)	
10001b86:	697b      	ldr	r3, [r7, #20]
10001b88:	2b00      	cmp	r3, #0
10001b8a:	d159      	bne.n	10001c40 <SYSTM001_CreateTimer+0x110>
    {
       for(Count = 0UL; Count < SYSTM001_CFG_MAX_TMR; Count++)
10001b8c:	2300      	movs	r3, #0
10001b8e:	61bb      	str	r3, [r7, #24]
10001b90:	e053      	b.n	10001c3a <SYSTM001_CreateTimer+0x10a>
       {
           /* Check for free timer ID */
           if((TimerTracker & ((uint32_t)1U << Count)) == 0U)
10001b92:	4b2e      	ldr	r3, [pc, #184]	; (10001c4c <SYSTM001_CreateTimer+0x11c>)
10001b94:	681a      	ldr	r2, [r3, #0]
10001b96:	69bb      	ldr	r3, [r7, #24]
10001b98:	40da      	lsrs	r2, r3
10001b9a:	2301      	movs	r3, #1
10001b9c:	4013      	ands	r3, r2
10001b9e:	d149      	bne.n	10001c34 <SYSTM001_CreateTimer+0x104>
           {
               /* If yes,assign ID to this timer      */
               TimerTracker |= ((uint32_t)1U << Count);
10001ba0:	69bb      	ldr	r3, [r7, #24]
10001ba2:	2201      	movs	r2, #1
10001ba4:	409a      	lsls	r2, r3
10001ba6:	4b29      	ldr	r3, [pc, #164]	; (10001c4c <SYSTM001_CreateTimer+0x11c>)
10001ba8:	681b      	ldr	r3, [r3, #0]
10001baa:	431a      	orrs	r2, r3
10001bac:	4b27      	ldr	r3, [pc, #156]	; (10001c4c <SYSTM001_CreateTimer+0x11c>)
10001bae:	601a      	str	r2, [r3, #0]
               /* Initialize timer as per input values */
               TimerTbl[Count].TimerID     = Count;
10001bb0:	4b27      	ldr	r3, [pc, #156]	; (10001c50 <SYSTM001_CreateTimer+0x120>)
10001bb2:	69ba      	ldr	r2, [r7, #24]
10001bb4:	0152      	lsls	r2, r2, #5
10001bb6:	69b9      	ldr	r1, [r7, #24]
10001bb8:	50d1      	str	r1, [r2, r3]
               TimerTbl[Count].TimerType   = TimerType;
10001bba:	4925      	ldr	r1, [pc, #148]	; (10001c50 <SYSTM001_CreateTimer+0x120>)
10001bbc:	69bb      	ldr	r3, [r7, #24]
10001bbe:	015b      	lsls	r3, r3, #5
10001bc0:	1c3a      	adds	r2, r7, #0
10001bc2:	320b      	adds	r2, #11
10001bc4:	18cb      	adds	r3, r1, r3
10001bc6:	7812      	ldrb	r2, [r2, #0]
10001bc8:	711a      	strb	r2, [r3, #4]
               TimerTbl[Count].TimerState  = SYSTM001_STATE_STOPPED;
10001bca:	4a21      	ldr	r2, [pc, #132]	; (10001c50 <SYSTM001_CreateTimer+0x120>)
10001bcc:	69bb      	ldr	r3, [r7, #24]
10001bce:	015b      	lsls	r3, r3, #5
10001bd0:	18d3      	adds	r3, r2, r3
10001bd2:	2201      	movs	r2, #1
10001bd4:	715a      	strb	r2, [r3, #5]
             TimerTbl[Count].TimerCount  = ((Period / SYSTM001_SYSTICK_INTERVAL)\
                                                    +HW_TIMER_ADDITIONAL_CNT);
10001bd6:	68fb      	ldr	r3, [r7, #12]
10001bd8:	1c5a      	adds	r2, r3, #1
               TimerTracker |= ((uint32_t)1U << Count);
               /* Initialize timer as per input values */
               TimerTbl[Count].TimerID     = Count;
               TimerTbl[Count].TimerType   = TimerType;
               TimerTbl[Count].TimerState  = SYSTM001_STATE_STOPPED;
             TimerTbl[Count].TimerCount  = ((Period / SYSTM001_SYSTICK_INTERVAL)\
10001bda:	491d      	ldr	r1, [pc, #116]	; (10001c50 <SYSTM001_CreateTimer+0x120>)
10001bdc:	69bb      	ldr	r3, [r7, #24]
10001bde:	015b      	lsls	r3, r3, #5
10001be0:	18cb      	adds	r3, r1, r3
10001be2:	3308      	adds	r3, #8
10001be4:	601a      	str	r2, [r3, #0]
                                                    +HW_TIMER_ADDITIONAL_CNT);
               TimerTbl[Count].TimerReload	= (Period / SYSTM001_SYSTICK_INTERVAL);
10001be6:	4a1a      	ldr	r2, [pc, #104]	; (10001c50 <SYSTM001_CreateTimer+0x120>)
10001be8:	69bb      	ldr	r3, [r7, #24]
10001bea:	015b      	lsls	r3, r3, #5
10001bec:	18d3      	adds	r3, r2, r3
10001bee:	330c      	adds	r3, #12
10001bf0:	68fa      	ldr	r2, [r7, #12]
10001bf2:	601a      	str	r2, [r3, #0]
               TimerTbl[Count].TimerCallBack = TimerCallBack;
10001bf4:	4a16      	ldr	r2, [pc, #88]	; (10001c50 <SYSTM001_CreateTimer+0x120>)
10001bf6:	69bb      	ldr	r3, [r7, #24]
10001bf8:	015b      	lsls	r3, r3, #5
10001bfa:	18d3      	adds	r3, r2, r3
10001bfc:	3310      	adds	r3, #16
10001bfe:	687a      	ldr	r2, [r7, #4]
10001c00:	601a      	str	r2, [r3, #0]
               TimerTbl[Count].ParamToCallBack = pCallBackArgPtr;
10001c02:	4a13      	ldr	r2, [pc, #76]	; (10001c50 <SYSTM001_CreateTimer+0x120>)
10001c04:	69bb      	ldr	r3, [r7, #24]
10001c06:	015b      	lsls	r3, r3, #5
10001c08:	18d3      	adds	r3, r2, r3
10001c0a:	3314      	adds	r3, #20
10001c0c:	683a      	ldr	r2, [r7, #0]
10001c0e:	601a      	str	r2, [r3, #0]
               TimerTbl[Count].TimerPrev   = NULL;
10001c10:	4a0f      	ldr	r2, [pc, #60]	; (10001c50 <SYSTM001_CreateTimer+0x120>)
10001c12:	69bb      	ldr	r3, [r7, #24]
10001c14:	015b      	lsls	r3, r3, #5
10001c16:	18d3      	adds	r3, r2, r3
10001c18:	331c      	adds	r3, #28
10001c1a:	2200      	movs	r2, #0
10001c1c:	601a      	str	r2, [r3, #0]
               TimerTbl[Count].TimerNext   = NULL;
10001c1e:	4a0c      	ldr	r2, [pc, #48]	; (10001c50 <SYSTM001_CreateTimer+0x120>)
10001c20:	69bb      	ldr	r3, [r7, #24]
10001c22:	015b      	lsls	r3, r3, #5
10001c24:	18d3      	adds	r3, r2, r3
10001c26:	3318      	adds	r3, #24
10001c28:	2200      	movs	r2, #0
10001c2a:	601a      	str	r2, [r3, #0]
               TimerID = Count + 1U;
10001c2c:	69bb      	ldr	r3, [r7, #24]
10001c2e:	3301      	adds	r3, #1
10001c30:	61fb      	str	r3, [r7, #28]
               break;
10001c32:	e005      	b.n	10001c40 <SYSTM001_CreateTimer+0x110>
      Error=(uint32_t)1UL;
      DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
    }
    if (!Error)	
    {
       for(Count = 0UL; Count < SYSTM001_CFG_MAX_TMR; Count++)
10001c34:	69bb      	ldr	r3, [r7, #24]
10001c36:	3301      	adds	r3, #1
10001c38:	61bb      	str	r3, [r7, #24]
10001c3a:	69bb      	ldr	r3, [r7, #24]
10001c3c:	2b09      	cmp	r3, #9
10001c3e:	d9a8      	bls.n	10001b92 <SYSTM001_CreateTimer+0x62>
               break;
            }
        }
    }

  return (handle_t)TimerID;
10001c40:	69fb      	ldr	r3, [r7, #28]
}  
10001c42:	1c18      	adds	r0, r3, #0
10001c44:	46bd      	mov	sp, r7
10001c46:	b008      	add	sp, #32
10001c48:	bd80      	pop	{r7, pc}
10001c4a:	46c0      	nop			; (mov r8, r8)
10001c4c:	20000934 	.word	0x20000934
10001c50:	20000944 	.word	0x20000944

10001c54 <SYSTM001_StartTimer>:

/*
 *  Interface to start the software timer .
 */
status_t SYSTM001_StartTimer(handle_t  Handle) 
{
10001c54:	b580      	push	{r7, lr}
10001c56:	b084      	sub	sp, #16
10001c58:	af00      	add	r7, sp, #0
10001c5a:	6078      	str	r0, [r7, #4]
  status_t Error = (status_t )DAVEApp_SUCCESS;
10001c5c:	2300      	movs	r3, #0
10001c5e:	60fb      	str	r3, [r7, #12]


  /* Check validity of parameter */
  if(Handle > SYSTM001_CFG_MAX_TMR)
10001c60:	687b      	ldr	r3, [r7, #4]
10001c62:	2b0a      	cmp	r3, #10
10001c64:	d901      	bls.n	10001c6a <SYSTM001_StartTimer+0x16>
  {
    Error = (status_t)SYSTM001_INVALID_HANDLE_ERROR;
10001c66:	2301      	movs	r3, #1
10001c68:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  if( (TimerTracker & (1UL << (uint32_t)(Handle - 1U))) == 0UL)
10001c6a:	4b18      	ldr	r3, [pc, #96]	; (10001ccc <SYSTM001_StartTimer+0x78>)
10001c6c:	681a      	ldr	r2, [r3, #0]
10001c6e:	687b      	ldr	r3, [r7, #4]
10001c70:	3b01      	subs	r3, #1
10001c72:	40da      	lsrs	r2, r3
10001c74:	2301      	movs	r3, #1
10001c76:	4013      	ands	r3, r2
10001c78:	d101      	bne.n	10001c7e <SYSTM001_StartTimer+0x2a>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10001c7a:	2301      	movs	r3, #1
10001c7c:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  /* Any timer with time '0', can't start again. */
  if(TimerTbl[Handle - 1U].TimerCount == 0UL)
10001c7e:	687b      	ldr	r3, [r7, #4]
10001c80:	3b01      	subs	r3, #1
10001c82:	4a13      	ldr	r2, [pc, #76]	; (10001cd0 <SYSTM001_StartTimer+0x7c>)
10001c84:	015b      	lsls	r3, r3, #5
10001c86:	18d3      	adds	r3, r2, r3
10001c88:	3308      	adds	r3, #8
10001c8a:	681b      	ldr	r3, [r3, #0]
10001c8c:	2b00      	cmp	r3, #0
10001c8e:	d101      	bne.n	10001c94 <SYSTM001_StartTimer+0x40>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10001c90:	2301      	movs	r3, #1
10001c92:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  
  
  if(Error == (status_t)DAVEApp_SUCCESS)
10001c94:	68fb      	ldr	r3, [r7, #12]
10001c96:	2b00      	cmp	r3, #0
10001c98:	d113      	bne.n	10001cc2 <SYSTM001_StartTimer+0x6e>
  {
    /* Check if timer is running */
    if(TimerTbl[(Handle - 1U)].TimerState != SYSTM001_STATE_RUNNING)
10001c9a:	687b      	ldr	r3, [r7, #4]
10001c9c:	3b01      	subs	r3, #1
10001c9e:	4a0c      	ldr	r2, [pc, #48]	; (10001cd0 <SYSTM001_StartTimer+0x7c>)
10001ca0:	015b      	lsls	r3, r3, #5
10001ca2:	18d3      	adds	r3, r2, r3
10001ca4:	795b      	ldrb	r3, [r3, #5]
10001ca6:	2b00      	cmp	r3, #0
10001ca8:	d00b      	beq.n	10001cc2 <SYSTM001_StartTimer+0x6e>
    {
      /* set timer status as SYSTM001_STATE_RUNNING */
      TimerTbl[(Handle - 1U)].TimerState = SYSTM001_STATE_RUNNING;
10001caa:	687b      	ldr	r3, [r7, #4]
10001cac:	3b01      	subs	r3, #1
10001cae:	4a08      	ldr	r2, [pc, #32]	; (10001cd0 <SYSTM001_StartTimer+0x7c>)
10001cb0:	015b      	lsls	r3, r3, #5
10001cb2:	18d3      	adds	r3, r2, r3
10001cb4:	2200      	movs	r2, #0
10001cb6:	715a      	strb	r2, [r3, #5]
      /* Insert this timer into timer list  */
      SYSTM001_lInsertTimerList((Handle - 1U));
10001cb8:	687b      	ldr	r3, [r7, #4]
10001cba:	3b01      	subs	r3, #1
10001cbc:	1c18      	adds	r0, r3, #0
10001cbe:	f7ff fda9 	bl	10001814 <SYSTM001_lInsertTimerList>
    }
  }

  return Error;
10001cc2:	68fb      	ldr	r3, [r7, #12]
}
10001cc4:	1c18      	adds	r0, r3, #0
10001cc6:	46bd      	mov	sp, r7
10001cc8:	b004      	add	sp, #16
10001cca:	bd80      	pop	{r7, pc}
10001ccc:	20000934 	.word	0x20000934
10001cd0:	20000944 	.word	0x20000944

10001cd4 <SYSTM001_StopTimer>:

/*
 *  Interface to stop the software timer.
 */
status_t SYSTM001_StopTimer(handle_t Handle) 
{
10001cd4:	b580      	push	{r7, lr}
10001cd6:	b084      	sub	sp, #16
10001cd8:	af00      	add	r7, sp, #0
10001cda:	6078      	str	r0, [r7, #4]
  status_t Error = (status_t )DAVEApp_SUCCESS;
10001cdc:	2300      	movs	r3, #0
10001cde:	60fb      	str	r3, [r7, #12]


  /* Check validity of parameter        */
  if(Handle > SYSTM001_CFG_MAX_TMR)
10001ce0:	687b      	ldr	r3, [r7, #4]
10001ce2:	2b0a      	cmp	r3, #10
10001ce4:	d901      	bls.n	10001cea <SYSTM001_StopTimer+0x16>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10001ce6:	2301      	movs	r3, #1
10001ce8:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  if( (TimerTracker & (1UL << (uint32_t)(Handle - 1U))) == 0UL)
10001cea:	4b13      	ldr	r3, [pc, #76]	; (10001d38 <SYSTM001_StopTimer+0x64>)
10001cec:	681a      	ldr	r2, [r3, #0]
10001cee:	687b      	ldr	r3, [r7, #4]
10001cf0:	3b01      	subs	r3, #1
10001cf2:	40da      	lsrs	r2, r3
10001cf4:	2301      	movs	r3, #1
10001cf6:	4013      	ands	r3, r2
10001cf8:	d101      	bne.n	10001cfe <SYSTM001_StopTimer+0x2a>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10001cfa:	2301      	movs	r3, #1
10001cfc:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }

  if(Error == (status_t)DAVEApp_SUCCESS)
10001cfe:	68fb      	ldr	r3, [r7, #12]
10001d00:	2b00      	cmp	r3, #0
10001d02:	d113      	bne.n	10001d2c <SYSTM001_StopTimer+0x58>
  {
    /* Check whether Timer is in Stop state */
    if(TimerTbl[(Handle - 1U)].TimerState != SYSTM001_STATE_STOPPED)
10001d04:	687b      	ldr	r3, [r7, #4]
10001d06:	3b01      	subs	r3, #1
10001d08:	4a0c      	ldr	r2, [pc, #48]	; (10001d3c <SYSTM001_StopTimer+0x68>)
10001d0a:	015b      	lsls	r3, r3, #5
10001d0c:	18d3      	adds	r3, r2, r3
10001d0e:	795b      	ldrb	r3, [r3, #5]
10001d10:	2b01      	cmp	r3, #1
10001d12:	d00b      	beq.n	10001d2c <SYSTM001_StopTimer+0x58>
    {
      /* remove Timer from node list */
      SYSTM001_lRemoveTimerList((Handle - 1U));
10001d14:	687b      	ldr	r3, [r7, #4]
10001d16:	3b01      	subs	r3, #1
10001d18:	1c18      	adds	r0, r3, #0
10001d1a:	f7ff fe25 	bl	10001968 <SYSTM001_lRemoveTimerList>

      /* Set timer status as SYSTM001_STATE_STOPPED  */
      TimerTbl[(Handle - 1U)].TimerState = SYSTM001_STATE_STOPPED;
10001d1e:	687b      	ldr	r3, [r7, #4]
10001d20:	3b01      	subs	r3, #1
10001d22:	4a06      	ldr	r2, [pc, #24]	; (10001d3c <SYSTM001_StopTimer+0x68>)
10001d24:	015b      	lsls	r3, r3, #5
10001d26:	18d3      	adds	r3, r2, r3
10001d28:	2201      	movs	r2, #1
10001d2a:	715a      	strb	r2, [r3, #5]
    }
  }

  return Error;
10001d2c:	68fb      	ldr	r3, [r7, #12]
}
10001d2e:	1c18      	adds	r0, r3, #0
10001d30:	46bd      	mov	sp, r7
10001d32:	b004      	add	sp, #16
10001d34:	bd80      	pop	{r7, pc}
10001d36:	46c0      	nop			; (mov r8, r8)
10001d38:	20000934 	.word	0x20000934
10001d3c:	20000944 	.word	0x20000944

10001d40 <SYSTM001_DeleteTimer>:

/*
 *  Function to delete the Timer instance.
 */
status_t SYSTM001_DeleteTimer(handle_t Handle) 
{
10001d40:	b580      	push	{r7, lr}
10001d42:	b084      	sub	sp, #16
10001d44:	af00      	add	r7, sp, #0
10001d46:	6078      	str	r0, [r7, #4]
  status_t Error = (status_t )DAVEApp_SUCCESS;
10001d48:	2300      	movs	r3, #0
10001d4a:	60fb      	str	r3, [r7, #12]

  /* Check validity of parameter        */
  if(Handle > SYSTM001_CFG_MAX_TMR)
10001d4c:	687b      	ldr	r3, [r7, #4]
10001d4e:	2b0a      	cmp	r3, #10
10001d50:	d901      	bls.n	10001d56 <SYSTM001_DeleteTimer+0x16>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10001d52:	2301      	movs	r3, #1
10001d54:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }
  if( (TimerTracker & (1UL << (uint32_t)(Handle - 1U))) == 0UL)
10001d56:	4b15      	ldr	r3, [pc, #84]	; (10001dac <SYSTM001_DeleteTimer+0x6c>)
10001d58:	681a      	ldr	r2, [r3, #0]
10001d5a:	687b      	ldr	r3, [r7, #4]
10001d5c:	3b01      	subs	r3, #1
10001d5e:	40da      	lsrs	r2, r3
10001d60:	2301      	movs	r3, #1
10001d62:	4013      	ands	r3, r2
10001d64:	d101      	bne.n	10001d6a <SYSTM001_DeleteTimer+0x2a>
  {
    Error = (status_t) SYSTM001_INVALID_HANDLE_ERROR;
10001d66:	2301      	movs	r3, #1
10001d68:	60fb      	str	r3, [r7, #12]
    DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, sizeof(Error), &Error);
  }

  if(Error == (status_t)DAVEApp_SUCCESS)
10001d6a:	68fb      	ldr	r3, [r7, #12]
10001d6c:	2b00      	cmp	r3, #0
10001d6e:	d118      	bne.n	10001da2 <SYSTM001_DeleteTimer+0x62>
  {
    /* Check if timer is running */
    if(TimerTbl[(Handle - 1U)].TimerState == SYSTM001_STATE_RUNNING)
10001d70:	687b      	ldr	r3, [r7, #4]
10001d72:	3b01      	subs	r3, #1
10001d74:	4a0e      	ldr	r2, [pc, #56]	; (10001db0 <SYSTM001_DeleteTimer+0x70>)
10001d76:	015b      	lsls	r3, r3, #5
10001d78:	18d3      	adds	r3, r2, r3
10001d7a:	795b      	ldrb	r3, [r3, #5]
10001d7c:	2b00      	cmp	r3, #0
10001d7e:	d104      	bne.n	10001d8a <SYSTM001_DeleteTimer+0x4a>
    {
      /* Yes,remove this timer from timer list*/
      SYSTM001_lRemoveTimerList((Handle - 1U));
10001d80:	687b      	ldr	r3, [r7, #4]
10001d82:	3b01      	subs	r3, #1
10001d84:	1c18      	adds	r0, r3, #0
10001d86:	f7ff fdef 	bl	10001968 <SYSTM001_lRemoveTimerList>
    }

    /* Release resource that this timer hold*/
    TimerTracker &=~((uint32_t)1U << (Handle - 1U));
10001d8a:	687b      	ldr	r3, [r7, #4]
10001d8c:	3b01      	subs	r3, #1
10001d8e:	2201      	movs	r2, #1
10001d90:	1c11      	adds	r1, r2, #0
10001d92:	4099      	lsls	r1, r3
10001d94:	1c0b      	adds	r3, r1, #0
10001d96:	43da      	mvns	r2, r3
10001d98:	4b04      	ldr	r3, [pc, #16]	; (10001dac <SYSTM001_DeleteTimer+0x6c>)
10001d9a:	681b      	ldr	r3, [r3, #0]
10001d9c:	401a      	ands	r2, r3
10001d9e:	4b03      	ldr	r3, [pc, #12]	; (10001dac <SYSTM001_DeleteTimer+0x6c>)
10001da0:	601a      	str	r2, [r3, #0]
  }

  return Error;
10001da2:	68fb      	ldr	r3, [r7, #12]

}
10001da4:	1c18      	adds	r0, r3, #0
10001da6:	46bd      	mov	sp, r7
10001da8:	b004      	add	sp, #16
10001daa:	bd80      	pop	{r7, pc}
10001dac:	20000934 	.word	0x20000934
10001db0:	20000944 	.word	0x20000944

10001db4 <SYSTM001_GetTime>:

/*
 *  Interface to get the current system time.
 */
uint32_t  SYSTM001_GetTime(void)
{
10001db4:	b580      	push	{r7, lr}
10001db6:	af00      	add	r7, sp, #0
  /* <<<DD_SYSTM001 _API_6>>> */
  return CONVERT_SYSTICK_COUNT_TO_MSEC(SysTickCount);
10001db8:	4b02      	ldr	r3, [pc, #8]	; (10001dc4 <SYSTM001_GetTime+0x10>)
10001dba:	681b      	ldr	r3, [r3, #0]
}
10001dbc:	1c18      	adds	r0, r3, #0
10001dbe:	46bd      	mov	sp, r7
10001dc0:	bd80      	pop	{r7, pc}
10001dc2:	46c0      	nop			; (mov r8, r8)
10001dc4:	20000938 	.word	0x20000938

10001dc8 <SYSTM001_GetSysTickCount>:
/*
 *  Utility function to get the no of system ticks for the 
 *  specified period.
 */
uint32_t  SYSTM001_GetSysTickCount(uint32_t Period ) 
{
10001dc8:	b590      	push	{r4, r7, lr}
10001dca:	b085      	sub	sp, #20
10001dcc:	af00      	add	r7, sp, #0
10001dce:	6078      	str	r0, [r7, #4]
  /* <<<DD_SYSTM001 _API_7>>> */
  uint32_t	Count  = CONVERT_MSEC_TO_SYSICK_COUNT(Period);
10001dd0:	6878      	ldr	r0, [r7, #4]
10001dd2:	f000 ffe5 	bl	10002da0 <__aeabi_ui2d>
10001dd6:	1c03      	adds	r3, r0, #0
10001dd8:	1c0c      	adds	r4, r1, #0
10001dda:	1c18      	adds	r0, r3, #0
10001ddc:	1c21      	adds	r1, r4, #0
10001dde:	4b0d      	ldr	r3, [pc, #52]	; (10001e14 <SYSTM001_GetSysTickCount+0x4c>)
10001de0:	4a0b      	ldr	r2, [pc, #44]	; (10001e10 <SYSTM001_GetSysTickCount+0x48>)
10001de2:	f000 f9b5 	bl	10002150 <__aeabi_dmul>
10001de6:	1c03      	adds	r3, r0, #0
10001de8:	1c0c      	adds	r4, r1, #0
10001dea:	1c18      	adds	r0, r3, #0
10001dec:	1c21      	adds	r1, r4, #0
10001dee:	4a0a      	ldr	r2, [pc, #40]	; (10001e18 <SYSTM001_GetSysTickCount+0x50>)
10001df0:	4b0a      	ldr	r3, [pc, #40]	; (10001e1c <SYSTM001_GetSysTickCount+0x54>)
10001df2:	f000 f9ad 	bl	10002150 <__aeabi_dmul>
10001df6:	1c03      	adds	r3, r0, #0
10001df8:	1c0c      	adds	r4, r1, #0
10001dfa:	1c18      	adds	r0, r3, #0
10001dfc:	1c21      	adds	r1, r4, #0
10001dfe:	f000 f987 	bl	10002110 <__aeabi_d2uiz>
10001e02:	1c03      	adds	r3, r0, #0
10001e04:	60fb      	str	r3, [r7, #12]
  return Count;
10001e06:	68fb      	ldr	r3, [r7, #12]
}
10001e08:	1c18      	adds	r0, r3, #0
10001e0a:	46bd      	mov	sp, r7
10001e0c:	b005      	add	sp, #20
10001e0e:	bd90      	pop	{r4, r7, pc}
10001e10:	00000000 	.word	0x00000000
10001e14:	40200000 	.word	0x40200000
10001e18:	00000000 	.word	0x00000000
10001e1c:	408f4000 	.word	0x408f4000

10001e20 <DAVE_Init>:
// @Parameters    None
//
//****************************************************************************

void DAVE_Init(void)
{
10001e20:	b580      	push	{r7, lr}
10001e22:	af00      	add	r7, sp, #0

//****************************************************************************
// @Initialization of APPs Init Functions
//****************************************************************************
	//  MUX configurations
	DAVE_MUX_PreInit(); 
10001e24:	f000 f80c 	bl	10001e40 <DAVE_MUX_PreInit>
	//  Initialization of app 'CLK002'		     
	CLK002_Init();
10001e28:	f000 f80e 	bl	10001e48 <CLK002_Init>
	 
	//  Initialization of app 'SYSTM001'		     
	SYSTM001_Init();
10001e2c:	f7ff fe5e 	bl	10001aec <SYSTM001_Init>
	
      
	//  MUX configurations
	DAVE_MUX_Init();	
10001e30:	f000 f802 	bl	10001e38 <DAVE_MUX_Init>
} //  End of function DAVE_Init
10001e34:	46bd      	mov	sp, r7
10001e36:	bd80      	pop	{r7, pc}

10001e38 <DAVE_MUX_Init>:
** Description      : This is the Mux configuration                           **
**                                                                            **
*******************************************************************************/
           
void DAVE_MUX_Init(void)
{  
10001e38:	b580      	push	{r7, lr}
10001e3a:	af00      	add	r7, sp, #0
                                     
       /*        SCU Macro definitions     */                  
   	 
            	         
                                                     
}
10001e3c:	46bd      	mov	sp, r7
10001e3e:	bd80      	pop	{r7, pc}

10001e40 <DAVE_MUX_PreInit>:
** Description      : This is the Mux configuration                           **
**                                                                            **
*******************************************************************************/
 
void DAVE_MUX_PreInit(void)
{        
10001e40:	b580      	push	{r7, lr}
10001e42:	af00      	add	r7, sp, #0
}
10001e44:	46bd      	mov	sp, r7
10001e46:	bd80      	pop	{r7, pc}

10001e48 <CLK002_Init>:
  * @note   -
  * @param  None
  * @retval None
  */
void CLK002_Init(void)
{
10001e48:	b580      	push	{r7, lr}
10001e4a:	af00      	add	r7, sp, #0
    /* Open the lock that protects privileged bits. */
    SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_ALLOW;
10001e4c:	4b0a      	ldr	r3, [pc, #40]	; (10001e78 <CLK002_Init+0x30>)
10001e4e:	22c0      	movs	r2, #192	; 0xc0
10001e50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Loop until protection is removed. */
    while(((SCU_GENERAL->PASSWD)&SCU_GENERAL_PASSWD_PROTS_Msk))
10001e52:	46c0      	nop			; (mov r8, r8)
10001e54:	4b08      	ldr	r3, [pc, #32]	; (10001e78 <CLK002_Init+0x30>)
10001e56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10001e58:	2304      	movs	r3, #4
10001e5a:	4013      	ands	r3, r2
10001e5c:	d1fa      	bne.n	10001e54 <CLK002_Init+0xc>
    {
	    ;
    }

    /* Update PCLK selection mux. */
    SCU_CLK->CLKCR|=(((uint32_t)CLK002_CLKCR_PCLKSEL<<\
10001e5e:	4b07      	ldr	r3, [pc, #28]	; (10001e7c <CLK002_Init+0x34>)
10001e60:	4a06      	ldr	r2, [pc, #24]	; (10001e7c <CLK002_Init+0x34>)
10001e62:	6812      	ldr	r2, [r2, #0]
10001e64:	601a      	str	r2, [r3, #0]
	             (uint32_t)SCU_CLK_CLKCR_PCLKSEL_Pos)&SCU_CLK_CLKCR_PCLKSEL_Msk);

    CLK002_lDivUpdate();
10001e66:	f000 f811 	bl	10001e8c <CLK002_lDivUpdate>

    /*Close the lock opened above. */
    SCU_GENERAL->PASSWD = CLK002_DIRECT_ACCESS_DISALLOW;
10001e6a:	4b03      	ldr	r3, [pc, #12]	; (10001e78 <CLK002_Init+0x30>)
10001e6c:	22c3      	movs	r2, #195	; 0xc3
10001e6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update the clock variable */
    SystemCoreClockUpdate();
10001e70:	f7ff fb2e 	bl	100014d0 <SystemCoreClockUpdate>
}
10001e74:	46bd      	mov	sp, r7
10001e76:	bd80      	pop	{r7, pc}
10001e78:	40010000 	.word	0x40010000
10001e7c:	40010300 	.word	0x40010300

10001e80 <AllowClkInitByStartup>:
*         proceeds with program  loading. Return 0 to disallow CStart from
*         performing clock tree setup.
*/

uint32_t AllowClkInitByStartup(void)
{
10001e80:	b580      	push	{r7, lr}
10001e82:	af00      	add	r7, sp, #0
    /* Return FALSE - Do not allow any initialisation by startup code. */
    return ((uint32_t)0);
10001e84:	2300      	movs	r3, #0
}
10001e86:	1c18      	adds	r0, r3, #0
10001e88:	46bd      	mov	sp, r7
10001e8a:	bd80      	pop	{r7, pc}

10001e8c <CLK002_lDivUpdate>:
  * @note   -
  * @param  None
  * @retval None
  */
static void CLK002_lDivUpdate(void)
{
10001e8c:	b580      	push	{r7, lr}
10001e8e:	b084      	sub	sp, #16
10001e90:	af00      	add	r7, sp, #0
 /*  Find out current and target value of idiv */
 uint32_t lCurrIdiv= (uint32_t) 0;      /* Current idiv. */
10001e92:	2300      	movs	r3, #0
10001e94:	60fb      	str	r3, [r7, #12]
 uint32_t lTargetidiv= (uint32_t) 0;    /* Target idiv. */
10001e96:	2300      	movs	r3, #0
10001e98:	60bb      	str	r3, [r7, #8]
 uint32_t lCLKCR;
 lCurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
10001e9a:	4b18      	ldr	r3, [pc, #96]	; (10001efc <CLK002_lDivUpdate+0x70>)
10001e9c:	681a      	ldr	r2, [r3, #0]
10001e9e:	23ff      	movs	r3, #255	; 0xff
10001ea0:	021b      	lsls	r3, r3, #8
10001ea2:	4013      	ands	r3, r2
10001ea4:	0a1b      	lsrs	r3, r3, #8
10001ea6:	60fb      	str	r3, [r7, #12]
 lTargetidiv = CLK002_CLKCR_IDIV;
10001ea8:	2304      	movs	r3, #4
10001eaa:	60bb      	str	r3, [r7, #8]

 /* Update FDIV here, unconditionally. */

  lCLKCR = SCU_CLK->CLKCR;
10001eac:	4b13      	ldr	r3, [pc, #76]	; (10001efc <CLK002_lDivUpdate+0x70>)
10001eae:	681b      	ldr	r3, [r3, #0]
10001eb0:	607b      	str	r3, [r7, #4]
  WR_REG(lCLKCR, SCU_CLK_CLKCR_FDIV_Msk, SCU_CLK_CLKCR_FDIV_Pos,CLK002_CLKCR_FDIV);
10001eb2:	687b      	ldr	r3, [r7, #4]
10001eb4:	22ff      	movs	r2, #255	; 0xff
10001eb6:	4393      	bics	r3, r2
10001eb8:	607b      	str	r3, [r7, #4]
  SCU_CLK->CLKCR = lCLKCR;
10001eba:	4b10      	ldr	r3, [pc, #64]	; (10001efc <CLK002_lDivUpdate+0x70>)
10001ebc:	687a      	ldr	r2, [r7, #4]
10001ebe:	601a      	str	r2, [r3, #0]

     /* Delay, till frequency stable, appox. 15us. */


  WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10001ec0:	4b0e      	ldr	r3, [pc, #56]	; (10001efc <CLK002_lDivUpdate+0x70>)
10001ec2:	4a0e      	ldr	r2, [pc, #56]	; (10001efc <CLK002_lDivUpdate+0x70>)
10001ec4:	6812      	ldr	r2, [r2, #0]
10001ec6:	490e      	ldr	r1, [pc, #56]	; (10001f00 <CLK002_lDivUpdate+0x74>)
10001ec8:	430a      	orrs	r2, r1
10001eca:	601a      	str	r2, [r3, #0]
  while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10001ecc:	46c0      	nop			; (mov r8, r8)
10001ece:	4b0b      	ldr	r3, [pc, #44]	; (10001efc <CLK002_lDivUpdate+0x70>)
10001ed0:	681a      	ldr	r2, [r3, #0]
10001ed2:	2380      	movs	r3, #128	; 0x80
10001ed4:	05db      	lsls	r3, r3, #23
10001ed6:	4013      	ands	r3, r2
10001ed8:	d1f9      	bne.n	10001ece <CLK002_lDivUpdate+0x42>
    ;
  }


    /* Find out current value of direction in which idiv has to update. */
 if (lCurrIdiv==lTargetidiv)
10001eda:	68fa      	ldr	r2, [r7, #12]
10001edc:	68bb      	ldr	r3, [r7, #8]
10001ede:	429a      	cmp	r2, r3
10001ee0:	d008      	beq.n	10001ef4 <CLK002_lDivUpdate+0x68>
  {
   /*No change in IDIV. */
  }
 else if(lCurrIdiv < lTargetidiv)
10001ee2:	68fa      	ldr	r2, [r7, #12]
10001ee4:	68bb      	ldr	r3, [r7, #8]
10001ee6:	429a      	cmp	r2, r3
10001ee8:	d202      	bcs.n	10001ef0 <CLK002_lDivUpdate+0x64>
  {
    CLK002_lFrequencyDownScaling();
10001eea:	f000 f869 	bl	10001fc0 <CLK002_lFrequencyDownScaling>
10001eee:	e001      	b.n	10001ef4 <CLK002_lDivUpdate+0x68>
  }
  else
   {
     CLK002_lFrequencyUpScaling();
10001ef0:	f000 f808 	bl	10001f04 <CLK002_lFrequencyUpScaling>
   }

}
10001ef4:	46bd      	mov	sp, r7
10001ef6:	b004      	add	sp, #16
10001ef8:	bd80      	pop	{r7, pc}
10001efa:	46c0      	nop			; (mov r8, r8)
10001efc:	40010300 	.word	0x40010300
10001f00:	3ff00000 	.word	0x3ff00000

10001f04 <CLK002_lFrequencyUpScaling>:
  * @note   -
  * @param  None
  * @retval None
  */
static void     CLK002_lFrequencyUpScaling()
{
10001f04:	b580      	push	{r7, lr}
10001f06:	b084      	sub	sp, #16
10001f08:	af00      	add	r7, sp, #0
  uint32_t CurrIdiv;
  uint32_t TargetIdiv;
  uint32_t lCLKCR;
  CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
10001f0a:	4b2a      	ldr	r3, [pc, #168]	; (10001fb4 <CLK002_lFrequencyUpScaling+0xb0>)
10001f0c:	681a      	ldr	r2, [r3, #0]
10001f0e:	23ff      	movs	r3, #255	; 0xff
10001f10:	021b      	lsls	r3, r3, #8
10001f12:	4013      	ands	r3, r2
10001f14:	0a1b      	lsrs	r3, r3, #8
10001f16:	60fb      	str	r3, [r7, #12]
  TargetIdiv = CLK002_CLKCR_IDIV;
10001f18:	2304      	movs	r3, #4
10001f1a:	60bb      	str	r3, [r7, #8]
  while(1)
  {
    if(CurrIdiv > (TargetIdiv * 4UL))
10001f1c:	68bb      	ldr	r3, [r7, #8]
10001f1e:	009a      	lsls	r2, r3, #2
10001f20:	68fb      	ldr	r3, [r7, #12]
10001f22:	429a      	cmp	r2, r3
10001f24:	d224      	bcs.n	10001f70 <CLK002_lFrequencyUpScaling+0x6c>
    {
        CurrIdiv = (CurrIdiv & 0xFFFFFFFCU) + 4U;
10001f26:	68fb      	ldr	r3, [r7, #12]
10001f28:	2203      	movs	r2, #3
10001f2a:	4393      	bics	r3, r2
10001f2c:	3304      	adds	r3, #4
10001f2e:	60fb      	str	r3, [r7, #12]
        CurrIdiv  = CurrIdiv >> 2;   /* Divide by 4. */
10001f30:	68fb      	ldr	r3, [r7, #12]
10001f32:	089b      	lsrs	r3, r3, #2
10001f34:	60fb      	str	r3, [r7, #12]
        /* Program interim value of IDIV. */

        lCLKCR = SCU_CLK->CLKCR;
10001f36:	4b1f      	ldr	r3, [pc, #124]	; (10001fb4 <CLK002_lFrequencyUpScaling+0xb0>)
10001f38:	681b      	ldr	r3, [r3, #0]
10001f3a:	607b      	str	r3, [r7, #4]
        WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
10001f3c:	68fb      	ldr	r3, [r7, #12]
10001f3e:	021b      	lsls	r3, r3, #8
10001f40:	041b      	lsls	r3, r3, #16
10001f42:	0c1a      	lsrs	r2, r3, #16
10001f44:	6879      	ldr	r1, [r7, #4]
10001f46:	4b1c      	ldr	r3, [pc, #112]	; (10001fb8 <CLK002_lFrequencyUpScaling+0xb4>)
10001f48:	400b      	ands	r3, r1
10001f4a:	4313      	orrs	r3, r2
10001f4c:	607b      	str	r3, [r7, #4]
        SCU_CLK->CLKCR = lCLKCR;
10001f4e:	4b19      	ldr	r3, [pc, #100]	; (10001fb4 <CLK002_lFrequencyUpScaling+0xb0>)
10001f50:	687a      	ldr	r2, [r7, #4]
10001f52:	601a      	str	r2, [r3, #0]

        /* Wait till frequency stable. */
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10001f54:	4b17      	ldr	r3, [pc, #92]	; (10001fb4 <CLK002_lFrequencyUpScaling+0xb0>)
10001f56:	4a17      	ldr	r2, [pc, #92]	; (10001fb4 <CLK002_lFrequencyUpScaling+0xb0>)
10001f58:	6812      	ldr	r2, [r2, #0]
10001f5a:	4918      	ldr	r1, [pc, #96]	; (10001fbc <CLK002_lFrequencyUpScaling+0xb8>)
10001f5c:	430a      	orrs	r2, r1
10001f5e:	601a      	str	r2, [r3, #0]
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10001f60:	46c0      	nop			; (mov r8, r8)
10001f62:	4b14      	ldr	r3, [pc, #80]	; (10001fb4 <CLK002_lFrequencyUpScaling+0xb0>)
10001f64:	681a      	ldr	r2, [r3, #0]
10001f66:	2380      	movs	r3, #128	; 0x80
10001f68:	05db      	lsls	r3, r3, #23
10001f6a:	4013      	ands	r3, r2
10001f6c:	d1f9      	bne.n	10001f62 <CLK002_lFrequencyUpScaling+0x5e>
10001f6e:	e01c      	b.n	10001faa <CLK002_lFrequencyUpScaling+0xa6>
        }
    }
    else
    {
        /* Program TargetIDiv into IDIV bitfield of CLKCR. */
        lCLKCR = SCU_CLK->CLKCR;
10001f70:	4b10      	ldr	r3, [pc, #64]	; (10001fb4 <CLK002_lFrequencyUpScaling+0xb0>)
10001f72:	681b      	ldr	r3, [r3, #0]
10001f74:	607b      	str	r3, [r7, #4]
        WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
10001f76:	68bb      	ldr	r3, [r7, #8]
10001f78:	021b      	lsls	r3, r3, #8
10001f7a:	041b      	lsls	r3, r3, #16
10001f7c:	0c1a      	lsrs	r2, r3, #16
10001f7e:	6879      	ldr	r1, [r7, #4]
10001f80:	4b0d      	ldr	r3, [pc, #52]	; (10001fb8 <CLK002_lFrequencyUpScaling+0xb4>)
10001f82:	400b      	ands	r3, r1
10001f84:	4313      	orrs	r3, r2
10001f86:	607b      	str	r3, [r7, #4]
        SCU_CLK->CLKCR = lCLKCR;
10001f88:	4b0a      	ldr	r3, [pc, #40]	; (10001fb4 <CLK002_lFrequencyUpScaling+0xb0>)
10001f8a:	687a      	ldr	r2, [r7, #4]
10001f8c:	601a      	str	r2, [r3, #0]
        /* Wait till frequency stable. */
        WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10001f8e:	4b09      	ldr	r3, [pc, #36]	; (10001fb4 <CLK002_lFrequencyUpScaling+0xb0>)
10001f90:	4a08      	ldr	r2, [pc, #32]	; (10001fb4 <CLK002_lFrequencyUpScaling+0xb0>)
10001f92:	6812      	ldr	r2, [r2, #0]
10001f94:	4909      	ldr	r1, [pc, #36]	; (10001fbc <CLK002_lFrequencyUpScaling+0xb8>)
10001f96:	430a      	orrs	r2, r1
10001f98:	601a      	str	r2, [r3, #0]
        while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10001f9a:	46c0      	nop			; (mov r8, r8)
10001f9c:	4b05      	ldr	r3, [pc, #20]	; (10001fb4 <CLK002_lFrequencyUpScaling+0xb0>)
10001f9e:	681a      	ldr	r2, [r3, #0]
10001fa0:	2380      	movs	r3, #128	; 0x80
10001fa2:	05db      	lsls	r3, r3, #23
10001fa4:	4013      	ands	r3, r2
10001fa6:	d1f9      	bne.n	10001f9c <CLK002_lFrequencyUpScaling+0x98>
        {
            ;
        }
        break;
10001fa8:	e000      	b.n	10001fac <CLK002_lFrequencyUpScaling+0xa8>
    }

  }
10001faa:	e7b7      	b.n	10001f1c <CLK002_lFrequencyUpScaling+0x18>

}
10001fac:	46bd      	mov	sp, r7
10001fae:	b004      	add	sp, #16
10001fb0:	bd80      	pop	{r7, pc}
10001fb2:	46c0      	nop			; (mov r8, r8)
10001fb4:	40010300 	.word	0x40010300
10001fb8:	ffff00ff 	.word	0xffff00ff
10001fbc:	3ff00000 	.word	0x3ff00000

10001fc0 <CLK002_lFrequencyDownScaling>:
  * @note   -
  * @param  None
  * @retval None
  */
static void     CLK002_lFrequencyDownScaling()
{
10001fc0:	b580      	push	{r7, lr}
10001fc2:	b084      	sub	sp, #16
10001fc4:	af00      	add	r7, sp, #0
    uint32_t CurrIdiv;
    uint32_t TargetIdiv;
    uint32_t lCLKCR;
    CurrIdiv = (((SCU_CLK->CLKCR)&SCU_CLK_CLKCR_IDIV_Msk)>>SCU_CLK_CLKCR_IDIV_Pos);
10001fc6:	4b27      	ldr	r3, [pc, #156]	; (10002064 <CLK002_lFrequencyDownScaling+0xa4>)
10001fc8:	681a      	ldr	r2, [r3, #0]
10001fca:	23ff      	movs	r3, #255	; 0xff
10001fcc:	021b      	lsls	r3, r3, #8
10001fce:	4013      	ands	r3, r2
10001fd0:	0a1b      	lsrs	r3, r3, #8
10001fd2:	60fb      	str	r3, [r7, #12]
    TargetIdiv = CLK002_CLKCR_IDIV;
10001fd4:	2304      	movs	r3, #4
10001fd6:	60bb      	str	r3, [r7, #8]
    while(1)
    {
        if((CurrIdiv * 4UL) < TargetIdiv )
10001fd8:	68fb      	ldr	r3, [r7, #12]
10001fda:	009a      	lsls	r2, r3, #2
10001fdc:	68bb      	ldr	r3, [r7, #8]
10001fde:	429a      	cmp	r2, r3
10001fe0:	d21f      	bcs.n	10002022 <CLK002_lFrequencyDownScaling+0x62>
        {
            CurrIdiv  = CurrIdiv << 2;   /* Multiply by 4. */
10001fe2:	68fb      	ldr	r3, [r7, #12]
10001fe4:	009b      	lsls	r3, r3, #2
10001fe6:	60fb      	str	r3, [r7, #12]
            /* Program interim value of IDIV */
            lCLKCR = SCU_CLK->CLKCR;
10001fe8:	4b1e      	ldr	r3, [pc, #120]	; (10002064 <CLK002_lFrequencyDownScaling+0xa4>)
10001fea:	681b      	ldr	r3, [r3, #0]
10001fec:	607b      	str	r3, [r7, #4]
            WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,CurrIdiv);
10001fee:	68fb      	ldr	r3, [r7, #12]
10001ff0:	021b      	lsls	r3, r3, #8
10001ff2:	041b      	lsls	r3, r3, #16
10001ff4:	0c1a      	lsrs	r2, r3, #16
10001ff6:	6879      	ldr	r1, [r7, #4]
10001ff8:	4b1b      	ldr	r3, [pc, #108]	; (10002068 <CLK002_lFrequencyDownScaling+0xa8>)
10001ffa:	400b      	ands	r3, r1
10001ffc:	4313      	orrs	r3, r2
10001ffe:	607b      	str	r3, [r7, #4]
            SCU_CLK->CLKCR = lCLKCR;
10002000:	4b18      	ldr	r3, [pc, #96]	; (10002064 <CLK002_lFrequencyDownScaling+0xa4>)
10002002:	687a      	ldr	r2, [r7, #4]
10002004:	601a      	str	r2, [r3, #0]
            /* Wait till frequency stable. */
            WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10002006:	4b17      	ldr	r3, [pc, #92]	; (10002064 <CLK002_lFrequencyDownScaling+0xa4>)
10002008:	4a16      	ldr	r2, [pc, #88]	; (10002064 <CLK002_lFrequencyDownScaling+0xa4>)
1000200a:	6812      	ldr	r2, [r2, #0]
1000200c:	4917      	ldr	r1, [pc, #92]	; (1000206c <CLK002_lFrequencyDownScaling+0xac>)
1000200e:	430a      	orrs	r2, r1
10002010:	601a      	str	r2, [r3, #0]
            while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
10002012:	46c0      	nop			; (mov r8, r8)
10002014:	4b13      	ldr	r3, [pc, #76]	; (10002064 <CLK002_lFrequencyDownScaling+0xa4>)
10002016:	681a      	ldr	r2, [r3, #0]
10002018:	2380      	movs	r3, #128	; 0x80
1000201a:	05db      	lsls	r3, r3, #23
1000201c:	4013      	ands	r3, r2
1000201e:	d1f9      	bne.n	10002014 <CLK002_lFrequencyDownScaling+0x54>
10002020:	e01c      	b.n	1000205c <CLK002_lFrequencyDownScaling+0x9c>
            }
        }
        else
        {
            /* Program TargetIDiv into IDIV bitfield of CLKCR */
            lCLKCR = SCU_CLK->CLKCR;
10002022:	4b10      	ldr	r3, [pc, #64]	; (10002064 <CLK002_lFrequencyDownScaling+0xa4>)
10002024:	681b      	ldr	r3, [r3, #0]
10002026:	607b      	str	r3, [r7, #4]
            WR_REG(lCLKCR, SCU_CLK_CLKCR_IDIV_Msk, SCU_CLK_CLKCR_IDIV_Pos,TargetIdiv);
10002028:	68bb      	ldr	r3, [r7, #8]
1000202a:	021b      	lsls	r3, r3, #8
1000202c:	041b      	lsls	r3, r3, #16
1000202e:	0c1a      	lsrs	r2, r3, #16
10002030:	6879      	ldr	r1, [r7, #4]
10002032:	4b0d      	ldr	r3, [pc, #52]	; (10002068 <CLK002_lFrequencyDownScaling+0xa8>)
10002034:	400b      	ands	r3, r1
10002036:	4313      	orrs	r3, r2
10002038:	607b      	str	r3, [r7, #4]
            SCU_CLK->CLKCR = lCLKCR;
1000203a:	4b0a      	ldr	r3, [pc, #40]	; (10002064 <CLK002_lFrequencyDownScaling+0xa4>)
1000203c:	687a      	ldr	r2, [r7, #4]
1000203e:	601a      	str	r2, [r3, #0]
            /* Wait till frequency stable. */
           
            WR_REG(SCU_CLK->CLKCR, SCU_CLK_CLKCR_CNTADJ_Msk, SCU_CLK_CLKCR_CNTADJ_Pos,CLK002_DELAYCNT);
10002040:	4b08      	ldr	r3, [pc, #32]	; (10002064 <CLK002_lFrequencyDownScaling+0xa4>)
10002042:	4a08      	ldr	r2, [pc, #32]	; (10002064 <CLK002_lFrequencyDownScaling+0xa4>)
10002044:	6812      	ldr	r2, [r2, #0]
10002046:	4909      	ldr	r1, [pc, #36]	; (1000206c <CLK002_lFrequencyDownScaling+0xac>)
10002048:	430a      	orrs	r2, r1
1000204a:	601a      	str	r2, [r3, #0]
            while (SCU_CLK->CLKCR&(SCU_CLK_CLKCR_VDDC2LOW_Msk))
1000204c:	46c0      	nop			; (mov r8, r8)
1000204e:	4b05      	ldr	r3, [pc, #20]	; (10002064 <CLK002_lFrequencyDownScaling+0xa4>)
10002050:	681a      	ldr	r2, [r3, #0]
10002052:	2380      	movs	r3, #128	; 0x80
10002054:	05db      	lsls	r3, r3, #23
10002056:	4013      	ands	r3, r2
10002058:	d1f9      	bne.n	1000204e <CLK002_lFrequencyDownScaling+0x8e>
            {
                ;
            }
             break;
1000205a:	e000      	b.n	1000205e <CLK002_lFrequencyDownScaling+0x9e>
        }

	  }
1000205c:	e7bc      	b.n	10001fd8 <CLK002_lFrequencyDownScaling+0x18>
}
1000205e:	46bd      	mov	sp, r7
10002060:	b004      	add	sp, #16
10002062:	bd80      	pop	{r7, pc}
10002064:	40010300 	.word	0x40010300
10002068:	ffff00ff 	.word	0xffff00ff
1000206c:	3ff00000 	.word	0x3ff00000

10002070 <__aeabi_uidiv>:
10002070:	2900      	cmp	r1, #0
10002072:	d034      	beq.n	100020de <.udivsi3_skip_div0_test+0x6a>

10002074 <.udivsi3_skip_div0_test>:
10002074:	2301      	movs	r3, #1
10002076:	2200      	movs	r2, #0
10002078:	b410      	push	{r4}
1000207a:	4288      	cmp	r0, r1
1000207c:	d32c      	bcc.n	100020d8 <.udivsi3_skip_div0_test+0x64>
1000207e:	2401      	movs	r4, #1
10002080:	0724      	lsls	r4, r4, #28
10002082:	42a1      	cmp	r1, r4
10002084:	d204      	bcs.n	10002090 <.udivsi3_skip_div0_test+0x1c>
10002086:	4281      	cmp	r1, r0
10002088:	d202      	bcs.n	10002090 <.udivsi3_skip_div0_test+0x1c>
1000208a:	0109      	lsls	r1, r1, #4
1000208c:	011b      	lsls	r3, r3, #4
1000208e:	e7f8      	b.n	10002082 <.udivsi3_skip_div0_test+0xe>
10002090:	00e4      	lsls	r4, r4, #3
10002092:	42a1      	cmp	r1, r4
10002094:	d204      	bcs.n	100020a0 <.udivsi3_skip_div0_test+0x2c>
10002096:	4281      	cmp	r1, r0
10002098:	d202      	bcs.n	100020a0 <.udivsi3_skip_div0_test+0x2c>
1000209a:	0049      	lsls	r1, r1, #1
1000209c:	005b      	lsls	r3, r3, #1
1000209e:	e7f8      	b.n	10002092 <.udivsi3_skip_div0_test+0x1e>
100020a0:	4288      	cmp	r0, r1
100020a2:	d301      	bcc.n	100020a8 <.udivsi3_skip_div0_test+0x34>
100020a4:	1a40      	subs	r0, r0, r1
100020a6:	431a      	orrs	r2, r3
100020a8:	084c      	lsrs	r4, r1, #1
100020aa:	42a0      	cmp	r0, r4
100020ac:	d302      	bcc.n	100020b4 <.udivsi3_skip_div0_test+0x40>
100020ae:	1b00      	subs	r0, r0, r4
100020b0:	085c      	lsrs	r4, r3, #1
100020b2:	4322      	orrs	r2, r4
100020b4:	088c      	lsrs	r4, r1, #2
100020b6:	42a0      	cmp	r0, r4
100020b8:	d302      	bcc.n	100020c0 <.udivsi3_skip_div0_test+0x4c>
100020ba:	1b00      	subs	r0, r0, r4
100020bc:	089c      	lsrs	r4, r3, #2
100020be:	4322      	orrs	r2, r4
100020c0:	08cc      	lsrs	r4, r1, #3
100020c2:	42a0      	cmp	r0, r4
100020c4:	d302      	bcc.n	100020cc <.udivsi3_skip_div0_test+0x58>
100020c6:	1b00      	subs	r0, r0, r4
100020c8:	08dc      	lsrs	r4, r3, #3
100020ca:	4322      	orrs	r2, r4
100020cc:	2800      	cmp	r0, #0
100020ce:	d003      	beq.n	100020d8 <.udivsi3_skip_div0_test+0x64>
100020d0:	091b      	lsrs	r3, r3, #4
100020d2:	d001      	beq.n	100020d8 <.udivsi3_skip_div0_test+0x64>
100020d4:	0909      	lsrs	r1, r1, #4
100020d6:	e7e3      	b.n	100020a0 <.udivsi3_skip_div0_test+0x2c>
100020d8:	1c10      	adds	r0, r2, #0
100020da:	bc10      	pop	{r4}
100020dc:	4770      	bx	lr
100020de:	2800      	cmp	r0, #0
100020e0:	d001      	beq.n	100020e6 <.udivsi3_skip_div0_test+0x72>
100020e2:	2000      	movs	r0, #0
100020e4:	43c0      	mvns	r0, r0
100020e6:	b407      	push	{r0, r1, r2}
100020e8:	4802      	ldr	r0, [pc, #8]	; (100020f4 <.udivsi3_skip_div0_test+0x80>)
100020ea:	a102      	add	r1, pc, #8	; (adr r1, 100020f4 <.udivsi3_skip_div0_test+0x80>)
100020ec:	1840      	adds	r0, r0, r1
100020ee:	9002      	str	r0, [sp, #8]
100020f0:	bd03      	pop	{r0, r1, pc}
100020f2:	46c0      	nop			; (mov r8, r8)
100020f4:	00000019 	.word	0x00000019

100020f8 <__aeabi_uidivmod>:
100020f8:	2900      	cmp	r1, #0
100020fa:	d0f0      	beq.n	100020de <.udivsi3_skip_div0_test+0x6a>
100020fc:	b503      	push	{r0, r1, lr}
100020fe:	f7ff ffb9 	bl	10002074 <.udivsi3_skip_div0_test>
10002102:	bc0e      	pop	{r1, r2, r3}
10002104:	4342      	muls	r2, r0
10002106:	1a89      	subs	r1, r1, r2
10002108:	4718      	bx	r3
1000210a:	46c0      	nop			; (mov r8, r8)

1000210c <__aeabi_idiv0>:
1000210c:	4770      	bx	lr
1000210e:	46c0      	nop			; (mov r8, r8)

10002110 <__aeabi_d2uiz>:
10002110:	b538      	push	{r3, r4, r5, lr}
10002112:	4b0e      	ldr	r3, [pc, #56]	; (1000214c <__aeabi_d2uiz+0x3c>)
10002114:	4a0c      	ldr	r2, [pc, #48]	; (10002148 <__aeabi_d2uiz+0x38>)
10002116:	1c04      	adds	r4, r0, #0
10002118:	1c0d      	adds	r5, r1, #0
1000211a:	f000 fea7 	bl	10002e6c <__aeabi_dcmpge>
1000211e:	2800      	cmp	r0, #0
10002120:	d104      	bne.n	1000212c <__aeabi_d2uiz+0x1c>
10002122:	1c20      	adds	r0, r4, #0
10002124:	1c29      	adds	r1, r5, #0
10002126:	f000 fe07 	bl	10002d38 <__aeabi_d2iz>
1000212a:	bd38      	pop	{r3, r4, r5, pc}
1000212c:	4b07      	ldr	r3, [pc, #28]	; (1000214c <__aeabi_d2uiz+0x3c>)
1000212e:	4a06      	ldr	r2, [pc, #24]	; (10002148 <__aeabi_d2uiz+0x38>)
10002130:	1c20      	adds	r0, r4, #0
10002132:	1c29      	adds	r1, r5, #0
10002134:	f000 fa7e 	bl	10002634 <__aeabi_dsub>
10002138:	f000 fdfe 	bl	10002d38 <__aeabi_d2iz>
1000213c:	2380      	movs	r3, #128	; 0x80
1000213e:	0619      	lsls	r1, r3, #24
10002140:	1840      	adds	r0, r0, r1
10002142:	e7f2      	b.n	1000212a <__aeabi_d2uiz+0x1a>
10002144:	46c0      	nop			; (mov r8, r8)
10002146:	46c0      	nop			; (mov r8, r8)
10002148:	00000000 	.word	0x00000000
1000214c:	41e00000 	.word	0x41e00000

10002150 <__aeabi_dmul>:
10002150:	b5f0      	push	{r4, r5, r6, r7, lr}
10002152:	4656      	mov	r6, sl
10002154:	4644      	mov	r4, r8
10002156:	465f      	mov	r7, fp
10002158:	464d      	mov	r5, r9
1000215a:	b4f0      	push	{r4, r5, r6, r7}
1000215c:	004f      	lsls	r7, r1, #1
1000215e:	1c1d      	adds	r5, r3, #0
10002160:	030b      	lsls	r3, r1, #12
10002162:	1c14      	adds	r4, r2, #0
10002164:	0b1a      	lsrs	r2, r3, #12
10002166:	0d7b      	lsrs	r3, r7, #21
10002168:	b087      	sub	sp, #28
1000216a:	1c06      	adds	r6, r0, #0
1000216c:	4692      	mov	sl, r2
1000216e:	4698      	mov	r8, r3
10002170:	0fcf      	lsrs	r7, r1, #31
10002172:	2b00      	cmp	r3, #0
10002174:	d121      	bne.n	100021ba <__aeabi_dmul+0x6a>
10002176:	4302      	orrs	r2, r0
10002178:	d100      	bne.n	1000217c <__aeabi_dmul+0x2c>
1000217a:	e149      	b.n	10002410 <__aeabi_dmul+0x2c0>
1000217c:	4653      	mov	r3, sl
1000217e:	2b00      	cmp	r3, #0
10002180:	d100      	bne.n	10002184 <__aeabi_dmul+0x34>
10002182:	e1e4      	b.n	1000254e <__aeabi_dmul+0x3fe>
10002184:	4650      	mov	r0, sl
10002186:	f000 fe7b 	bl	10002e80 <__clzsi2>
1000218a:	1e03      	subs	r3, r0, #0
1000218c:	2b27      	cmp	r3, #39	; 0x27
1000218e:	dd00      	ble.n	10002192 <__aeabi_dmul+0x42>
10002190:	e1d8      	b.n	10002544 <__aeabi_dmul+0x3f4>
10002192:	3b08      	subs	r3, #8
10002194:	4651      	mov	r1, sl
10002196:	4099      	lsls	r1, r3
10002198:	2228      	movs	r2, #40	; 0x28
1000219a:	4688      	mov	r8, r1
1000219c:	1a11      	subs	r1, r2, r0
1000219e:	1c32      	adds	r2, r6, #0
100021a0:	40ca      	lsrs	r2, r1
100021a2:	4641      	mov	r1, r8
100021a4:	430a      	orrs	r2, r1
100021a6:	4692      	mov	sl, r2
100021a8:	409e      	lsls	r6, r3
100021aa:	4bd8      	ldr	r3, [pc, #864]	; (1000250c <__aeabi_dmul+0x3bc>)
100021ac:	2200      	movs	r2, #0
100021ae:	1a18      	subs	r0, r3, r0
100021b0:	2100      	movs	r1, #0
100021b2:	4680      	mov	r8, r0
100021b4:	4691      	mov	r9, r2
100021b6:	9103      	str	r1, [sp, #12]
100021b8:	e011      	b.n	100021de <__aeabi_dmul+0x8e>
100021ba:	48d5      	ldr	r0, [pc, #852]	; (10002510 <__aeabi_dmul+0x3c0>)
100021bc:	4283      	cmp	r3, r0
100021be:	d03e      	beq.n	1000223e <__aeabi_dmul+0xee>
100021c0:	2180      	movs	r1, #128	; 0x80
100021c2:	4653      	mov	r3, sl
100021c4:	034a      	lsls	r2, r1, #13
100021c6:	431a      	orrs	r2, r3
100021c8:	00d0      	lsls	r0, r2, #3
100021ca:	0f71      	lsrs	r1, r6, #29
100021cc:	4308      	orrs	r0, r1
100021ce:	4ad1      	ldr	r2, [pc, #836]	; (10002514 <__aeabi_dmul+0x3c4>)
100021d0:	4682      	mov	sl, r0
100021d2:	2300      	movs	r3, #0
100021d4:	2000      	movs	r0, #0
100021d6:	00f6      	lsls	r6, r6, #3
100021d8:	4490      	add	r8, r2
100021da:	4699      	mov	r9, r3
100021dc:	9003      	str	r0, [sp, #12]
100021de:	1c29      	adds	r1, r5, #0
100021e0:	1c20      	adds	r0, r4, #0
100021e2:	1c25      	adds	r5, r4, #0
100021e4:	004a      	lsls	r2, r1, #1
100021e6:	030c      	lsls	r4, r1, #12
100021e8:	0fcb      	lsrs	r3, r1, #31
100021ea:	0b24      	lsrs	r4, r4, #12
100021ec:	0d52      	lsrs	r2, r2, #21
100021ee:	469b      	mov	fp, r3
100021f0:	d131      	bne.n	10002256 <__aeabi_dmul+0x106>
100021f2:	1c21      	adds	r1, r4, #0
100021f4:	4301      	orrs	r1, r0
100021f6:	d100      	bne.n	100021fa <__aeabi_dmul+0xaa>
100021f8:	e112      	b.n	10002420 <__aeabi_dmul+0x2d0>
100021fa:	2c00      	cmp	r4, #0
100021fc:	d100      	bne.n	10002200 <__aeabi_dmul+0xb0>
100021fe:	e19d      	b.n	1000253c <__aeabi_dmul+0x3ec>
10002200:	1c20      	adds	r0, r4, #0
10002202:	f000 fe3d 	bl	10002e80 <__clzsi2>
10002206:	2827      	cmp	r0, #39	; 0x27
10002208:	dd00      	ble.n	1000220c <__aeabi_dmul+0xbc>
1000220a:	e191      	b.n	10002530 <__aeabi_dmul+0x3e0>
1000220c:	1c03      	adds	r3, r0, #0
1000220e:	2228      	movs	r2, #40	; 0x28
10002210:	3b08      	subs	r3, #8
10002212:	1c29      	adds	r1, r5, #0
10002214:	1a12      	subs	r2, r2, r0
10002216:	409c      	lsls	r4, r3
10002218:	40d1      	lsrs	r1, r2
1000221a:	430c      	orrs	r4, r1
1000221c:	409d      	lsls	r5, r3
1000221e:	4bbb      	ldr	r3, [pc, #748]	; (1000250c <__aeabi_dmul+0x3bc>)
10002220:	4659      	mov	r1, fp
10002222:	1a1a      	subs	r2, r3, r0
10002224:	4079      	eors	r1, r7
10002226:	2000      	movs	r0, #0
10002228:	464b      	mov	r3, r9
1000222a:	9101      	str	r1, [sp, #4]
1000222c:	4303      	orrs	r3, r0
1000222e:	2b0f      	cmp	r3, #15
10002230:	d826      	bhi.n	10002280 <__aeabi_dmul+0x130>
10002232:	0099      	lsls	r1, r3, #2
10002234:	4bb8      	ldr	r3, [pc, #736]	; (10002518 <__aeabi_dmul+0x3c8>)
10002236:	468c      	mov	ip, r1
10002238:	4463      	add	r3, ip
1000223a:	6819      	ldr	r1, [r3, #0]
1000223c:	468f      	mov	pc, r1
1000223e:	1c11      	adds	r1, r2, #0
10002240:	4331      	orrs	r1, r6
10002242:	d000      	beq.n	10002246 <__aeabi_dmul+0xf6>
10002244:	e0df      	b.n	10002406 <__aeabi_dmul+0x2b6>
10002246:	2608      	movs	r6, #8
10002248:	2000      	movs	r0, #0
1000224a:	2102      	movs	r1, #2
1000224c:	46b1      	mov	r9, r6
1000224e:	4682      	mov	sl, r0
10002250:	2600      	movs	r6, #0
10002252:	9103      	str	r1, [sp, #12]
10002254:	e7c3      	b.n	100021de <__aeabi_dmul+0x8e>
10002256:	48ae      	ldr	r0, [pc, #696]	; (10002510 <__aeabi_dmul+0x3c0>)
10002258:	4282      	cmp	r2, r0
1000225a:	d100      	bne.n	1000225e <__aeabi_dmul+0x10e>
1000225c:	e0c9      	b.n	100023f2 <__aeabi_dmul+0x2a2>
1000225e:	2180      	movs	r1, #128	; 0x80
10002260:	034b      	lsls	r3, r1, #13
10002262:	431c      	orrs	r4, r3
10002264:	49ab      	ldr	r1, [pc, #684]	; (10002514 <__aeabi_dmul+0x3c4>)
10002266:	0f68      	lsrs	r0, r5, #29
10002268:	00e4      	lsls	r4, r4, #3
1000226a:	4304      	orrs	r4, r0
1000226c:	00ed      	lsls	r5, r5, #3
1000226e:	1852      	adds	r2, r2, r1
10002270:	2000      	movs	r0, #0
10002272:	4659      	mov	r1, fp
10002274:	4079      	eors	r1, r7
10002276:	464b      	mov	r3, r9
10002278:	9101      	str	r1, [sp, #4]
1000227a:	4303      	orrs	r3, r0
1000227c:	2b0f      	cmp	r3, #15
1000227e:	d9d8      	bls.n	10002232 <__aeabi_dmul+0xe2>
10002280:	4442      	add	r2, r8
10002282:	0433      	lsls	r3, r6, #16
10002284:	0429      	lsls	r1, r5, #16
10002286:	9204      	str	r2, [sp, #16]
10002288:	0c1a      	lsrs	r2, r3, #16
1000228a:	0c0f      	lsrs	r7, r1, #16
1000228c:	1c10      	adds	r0, r2, #0
1000228e:	4378      	muls	r0, r7
10002290:	0c36      	lsrs	r6, r6, #16
10002292:	1c33      	adds	r3, r6, #0
10002294:	4680      	mov	r8, r0
10002296:	0c2d      	lsrs	r5, r5, #16
10002298:	437b      	muls	r3, r7
1000229a:	1c30      	adds	r0, r6, #0
1000229c:	4368      	muls	r0, r5
1000229e:	1c11      	adds	r1, r2, #0
100022a0:	4369      	muls	r1, r5
100022a2:	469c      	mov	ip, r3
100022a4:	4643      	mov	r3, r8
100022a6:	4683      	mov	fp, r0
100022a8:	0c18      	lsrs	r0, r3, #16
100022aa:	1808      	adds	r0, r1, r0
100022ac:	4460      	add	r0, ip
100022ae:	4584      	cmp	ip, r0
100022b0:	d900      	bls.n	100022b4 <__aeabi_dmul+0x164>
100022b2:	e11f      	b.n	100024f4 <__aeabi_dmul+0x3a4>
100022b4:	0c01      	lsrs	r1, r0, #16
100022b6:	4643      	mov	r3, r8
100022b8:	9103      	str	r1, [sp, #12]
100022ba:	0419      	lsls	r1, r3, #16
100022bc:	0c0b      	lsrs	r3, r1, #16
100022be:	0400      	lsls	r0, r0, #16
100022c0:	18c0      	adds	r0, r0, r3
100022c2:	0421      	lsls	r1, r4, #16
100022c4:	0c24      	lsrs	r4, r4, #16
100022c6:	9005      	str	r0, [sp, #20]
100022c8:	1c10      	adds	r0, r2, #0
100022ca:	4362      	muls	r2, r4
100022cc:	0c09      	lsrs	r1, r1, #16
100022ce:	9202      	str	r2, [sp, #8]
100022d0:	4348      	muls	r0, r1
100022d2:	1c32      	adds	r2, r6, #0
100022d4:	4366      	muls	r6, r4
100022d6:	434a      	muls	r2, r1
100022d8:	9b02      	ldr	r3, [sp, #8]
100022da:	46b1      	mov	r9, r6
100022dc:	0c06      	lsrs	r6, r0, #16
100022de:	4690      	mov	r8, r2
100022e0:	46b4      	mov	ip, r6
100022e2:	1c1a      	adds	r2, r3, #0
100022e4:	4462      	add	r2, ip
100022e6:	4442      	add	r2, r8
100022e8:	4590      	cmp	r8, r2
100022ea:	d902      	bls.n	100022f2 <__aeabi_dmul+0x1a2>
100022ec:	2680      	movs	r6, #128	; 0x80
100022ee:	0273      	lsls	r3, r6, #9
100022f0:	4499      	add	r9, r3
100022f2:	0c16      	lsrs	r6, r2, #16
100022f4:	46b0      	mov	r8, r6
100022f6:	44c1      	add	r9, r8
100022f8:	0400      	lsls	r0, r0, #16
100022fa:	464b      	mov	r3, r9
100022fc:	0c06      	lsrs	r6, r0, #16
100022fe:	0412      	lsls	r2, r2, #16
10002300:	9302      	str	r3, [sp, #8]
10002302:	1993      	adds	r3, r2, r6
10002304:	4656      	mov	r6, sl
10002306:	0432      	lsls	r2, r6, #16
10002308:	0c10      	lsrs	r0, r2, #16
1000230a:	1c02      	adds	r2, r0, #0
1000230c:	436a      	muls	r2, r5
1000230e:	469c      	mov	ip, r3
10002310:	1c03      	adds	r3, r0, #0
10002312:	437b      	muls	r3, r7
10002314:	4691      	mov	r9, r2
10002316:	0c32      	lsrs	r2, r6, #16
10002318:	4357      	muls	r7, r2
1000231a:	4698      	mov	r8, r3
1000231c:	0c1b      	lsrs	r3, r3, #16
1000231e:	469a      	mov	sl, r3
10002320:	44d1      	add	r9, sl
10002322:	44b9      	add	r9, r7
10002324:	4355      	muls	r5, r2
10002326:	454f      	cmp	r7, r9
10002328:	d902      	bls.n	10002330 <__aeabi_dmul+0x1e0>
1000232a:	2780      	movs	r7, #128	; 0x80
1000232c:	027e      	lsls	r6, r7, #9
1000232e:	19ad      	adds	r5, r5, r6
10002330:	464b      	mov	r3, r9
10002332:	0c1f      	lsrs	r7, r3, #16
10002334:	4646      	mov	r6, r8
10002336:	19ed      	adds	r5, r5, r7
10002338:	041f      	lsls	r7, r3, #16
1000233a:	0433      	lsls	r3, r6, #16
1000233c:	0c1e      	lsrs	r6, r3, #16
1000233e:	1c03      	adds	r3, r0, #0
10002340:	434b      	muls	r3, r1
10002342:	4360      	muls	r0, r4
10002344:	4351      	muls	r1, r2
10002346:	4354      	muls	r4, r2
10002348:	0c1a      	lsrs	r2, r3, #16
1000234a:	1880      	adds	r0, r0, r2
1000234c:	46b0      	mov	r8, r6
1000234e:	1840      	adds	r0, r0, r1
10002350:	4447      	add	r7, r8
10002352:	469a      	mov	sl, r3
10002354:	4281      	cmp	r1, r0
10002356:	d902      	bls.n	1000235e <__aeabi_dmul+0x20e>
10002358:	2180      	movs	r1, #128	; 0x80
1000235a:	024e      	lsls	r6, r1, #9
1000235c:	19a4      	adds	r4, r4, r6
1000235e:	9b03      	ldr	r3, [sp, #12]
10002360:	1c1a      	adds	r2, r3, #0
10002362:	4462      	add	r2, ip
10002364:	445a      	add	r2, fp
10002366:	4562      	cmp	r2, ip
10002368:	4189      	sbcs	r1, r1
1000236a:	424e      	negs	r6, r1
1000236c:	4651      	mov	r1, sl
1000236e:	46b3      	mov	fp, r6
10002370:	0403      	lsls	r3, r0, #16
10002372:	040e      	lsls	r6, r1, #16
10002374:	469c      	mov	ip, r3
10002376:	9902      	ldr	r1, [sp, #8]
10002378:	0c33      	lsrs	r3, r6, #16
1000237a:	4463      	add	r3, ip
1000237c:	18ce      	adds	r6, r1, r3
1000237e:	46b0      	mov	r8, r6
10002380:	46c2      	mov	sl, r8
10002382:	44da      	add	sl, fp
10002384:	19d2      	adds	r2, r2, r7
10002386:	42ba      	cmp	r2, r7
10002388:	41bf      	sbcs	r7, r7
1000238a:	4651      	mov	r1, sl
1000238c:	427b      	negs	r3, r7
1000238e:	186f      	adds	r7, r5, r1
10002390:	18f9      	adds	r1, r7, r3
10002392:	4699      	mov	r9, r3
10002394:	45da      	cmp	sl, fp
10002396:	419b      	sbcs	r3, r3
10002398:	425e      	negs	r6, r3
1000239a:	9b02      	ldr	r3, [sp, #8]
1000239c:	46b3      	mov	fp, r6
1000239e:	4598      	cmp	r8, r3
100023a0:	41b6      	sbcs	r6, r6
100023a2:	4276      	negs	r6, r6
100023a4:	465b      	mov	r3, fp
100023a6:	431e      	orrs	r6, r3
100023a8:	0c00      	lsrs	r0, r0, #16
100023aa:	4549      	cmp	r1, r9
100023ac:	419b      	sbcs	r3, r3
100023ae:	42af      	cmp	r7, r5
100023b0:	41ad      	sbcs	r5, r5
100023b2:	1836      	adds	r6, r6, r0
100023b4:	426f      	negs	r7, r5
100023b6:	4258      	negs	r0, r3
100023b8:	4338      	orrs	r0, r7
100023ba:	1836      	adds	r6, r6, r0
100023bc:	9805      	ldr	r0, [sp, #20]
100023be:	1934      	adds	r4, r6, r4
100023c0:	0256      	lsls	r6, r2, #9
100023c2:	4306      	orrs	r6, r0
100023c4:	0dcb      	lsrs	r3, r1, #23
100023c6:	0264      	lsls	r4, r4, #9
100023c8:	1e70      	subs	r0, r6, #1
100023ca:	4186      	sbcs	r6, r0
100023cc:	0dd2      	lsrs	r2, r2, #23
100023ce:	4316      	orrs	r6, r2
100023d0:	0249      	lsls	r1, r1, #9
100023d2:	431c      	orrs	r4, r3
100023d4:	430e      	orrs	r6, r1
100023d6:	01e0      	lsls	r0, r4, #7
100023d8:	d52f      	bpl.n	1000243a <__aeabi_dmul+0x2ea>
100023da:	2701      	movs	r7, #1
100023dc:	9d04      	ldr	r5, [sp, #16]
100023de:	4037      	ands	r7, r6
100023e0:	0873      	lsrs	r3, r6, #1
100023e2:	1c3e      	adds	r6, r7, #0
100023e4:	07e0      	lsls	r0, r4, #31
100023e6:	3501      	adds	r5, #1
100023e8:	431e      	orrs	r6, r3
100023ea:	9504      	str	r5, [sp, #16]
100023ec:	4306      	orrs	r6, r0
100023ee:	0864      	lsrs	r4, r4, #1
100023f0:	e023      	b.n	1000243a <__aeabi_dmul+0x2ea>
100023f2:	1c23      	adds	r3, r4, #0
100023f4:	432b      	orrs	r3, r5
100023f6:	2003      	movs	r0, #3
100023f8:	2b00      	cmp	r3, #0
100023fa:	d000      	beq.n	100023fe <__aeabi_dmul+0x2ae>
100023fc:	e739      	b.n	10002272 <__aeabi_dmul+0x122>
100023fe:	2400      	movs	r4, #0
10002400:	2500      	movs	r5, #0
10002402:	2002      	movs	r0, #2
10002404:	e735      	b.n	10002272 <__aeabi_dmul+0x122>
10002406:	220c      	movs	r2, #12
10002408:	2303      	movs	r3, #3
1000240a:	4691      	mov	r9, r2
1000240c:	9303      	str	r3, [sp, #12]
1000240e:	e6e6      	b.n	100021de <__aeabi_dmul+0x8e>
10002410:	2604      	movs	r6, #4
10002412:	2300      	movs	r3, #0
10002414:	2001      	movs	r0, #1
10002416:	46b1      	mov	r9, r6
10002418:	469a      	mov	sl, r3
1000241a:	2600      	movs	r6, #0
1000241c:	9003      	str	r0, [sp, #12]
1000241e:	e6de      	b.n	100021de <__aeabi_dmul+0x8e>
10002420:	2400      	movs	r4, #0
10002422:	2500      	movs	r5, #0
10002424:	2001      	movs	r0, #1
10002426:	e724      	b.n	10002272 <__aeabi_dmul+0x122>
10002428:	9803      	ldr	r0, [sp, #12]
1000242a:	4654      	mov	r4, sl
1000242c:	2802      	cmp	r0, #2
1000242e:	d044      	beq.n	100024ba <__aeabi_dmul+0x36a>
10002430:	2803      	cmp	r0, #3
10002432:	d100      	bne.n	10002436 <__aeabi_dmul+0x2e6>
10002434:	e0ea      	b.n	1000260c <__aeabi_dmul+0x4bc>
10002436:	2801      	cmp	r0, #1
10002438:	d060      	beq.n	100024fc <__aeabi_dmul+0x3ac>
1000243a:	9a04      	ldr	r2, [sp, #16]
1000243c:	4937      	ldr	r1, [pc, #220]	; (1000251c <__aeabi_dmul+0x3cc>)
1000243e:	1850      	adds	r0, r2, r1
10002440:	2800      	cmp	r0, #0
10002442:	dc00      	bgt.n	10002446 <__aeabi_dmul+0x2f6>
10002444:	e095      	b.n	10002572 <__aeabi_dmul+0x422>
10002446:	270f      	movs	r7, #15
10002448:	4037      	ands	r7, r6
1000244a:	2f04      	cmp	r7, #4
1000244c:	d005      	beq.n	1000245a <__aeabi_dmul+0x30a>
1000244e:	1d31      	adds	r1, r6, #4
10002450:	42b1      	cmp	r1, r6
10002452:	41b6      	sbcs	r6, r6
10002454:	4275      	negs	r5, r6
10002456:	1964      	adds	r4, r4, r5
10002458:	1c0e      	adds	r6, r1, #0
1000245a:	01e1      	lsls	r1, r4, #7
1000245c:	d505      	bpl.n	1000246a <__aeabi_dmul+0x31a>
1000245e:	4830      	ldr	r0, [pc, #192]	; (10002520 <__aeabi_dmul+0x3d0>)
10002460:	9a04      	ldr	r2, [sp, #16]
10002462:	2380      	movs	r3, #128	; 0x80
10002464:	00df      	lsls	r7, r3, #3
10002466:	4004      	ands	r4, r0
10002468:	19d0      	adds	r0, r2, r7
1000246a:	492e      	ldr	r1, [pc, #184]	; (10002524 <__aeabi_dmul+0x3d4>)
1000246c:	4288      	cmp	r0, r1
1000246e:	dc24      	bgt.n	100024ba <__aeabi_dmul+0x36a>
10002470:	9b01      	ldr	r3, [sp, #4]
10002472:	0765      	lsls	r5, r4, #29
10002474:	08f6      	lsrs	r6, r6, #3
10002476:	0264      	lsls	r4, r4, #9
10002478:	0542      	lsls	r2, r0, #21
1000247a:	2701      	movs	r7, #1
1000247c:	432e      	orrs	r6, r5
1000247e:	0b24      	lsrs	r4, r4, #12
10002480:	0d52      	lsrs	r2, r2, #21
10002482:	401f      	ands	r7, r3
10002484:	2000      	movs	r0, #0
10002486:	2100      	movs	r1, #0
10002488:	0d09      	lsrs	r1, r1, #20
1000248a:	050d      	lsls	r5, r1, #20
1000248c:	4325      	orrs	r5, r4
1000248e:	4c26      	ldr	r4, [pc, #152]	; (10002528 <__aeabi_dmul+0x3d8>)
10002490:	0512      	lsls	r2, r2, #20
10002492:	402c      	ands	r4, r5
10002494:	4314      	orrs	r4, r2
10002496:	0063      	lsls	r3, r4, #1
10002498:	1c30      	adds	r0, r6, #0
1000249a:	085e      	lsrs	r6, r3, #1
1000249c:	07ff      	lsls	r7, r7, #31
1000249e:	1c31      	adds	r1, r6, #0
100024a0:	4339      	orrs	r1, r7
100024a2:	b007      	add	sp, #28
100024a4:	bc3c      	pop	{r2, r3, r4, r5}
100024a6:	4690      	mov	r8, r2
100024a8:	4699      	mov	r9, r3
100024aa:	46a2      	mov	sl, r4
100024ac:	46ab      	mov	fp, r5
100024ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
100024b0:	465a      	mov	r2, fp
100024b2:	1c2e      	adds	r6, r5, #0
100024b4:	9201      	str	r2, [sp, #4]
100024b6:	2802      	cmp	r0, #2
100024b8:	d1ba      	bne.n	10002430 <__aeabi_dmul+0x2e0>
100024ba:	9e01      	ldr	r6, [sp, #4]
100024bc:	2701      	movs	r7, #1
100024be:	4037      	ands	r7, r6
100024c0:	4a13      	ldr	r2, [pc, #76]	; (10002510 <__aeabi_dmul+0x3c0>)
100024c2:	2400      	movs	r4, #0
100024c4:	2600      	movs	r6, #0
100024c6:	e7dd      	b.n	10002484 <__aeabi_dmul+0x334>
100024c8:	4654      	mov	r4, sl
100024ca:	9701      	str	r7, [sp, #4]
100024cc:	9803      	ldr	r0, [sp, #12]
100024ce:	e7ad      	b.n	1000242c <__aeabi_dmul+0x2dc>
100024d0:	2601      	movs	r6, #1
100024d2:	2700      	movs	r7, #0
100024d4:	4c15      	ldr	r4, [pc, #84]	; (1000252c <__aeabi_dmul+0x3dc>)
100024d6:	4276      	negs	r6, r6
100024d8:	4a0d      	ldr	r2, [pc, #52]	; (10002510 <__aeabi_dmul+0x3c0>)
100024da:	e7d3      	b.n	10002484 <__aeabi_dmul+0x334>
100024dc:	1c2e      	adds	r6, r5, #0
100024de:	e7a5      	b.n	1000242c <__aeabi_dmul+0x2dc>
100024e0:	2280      	movs	r2, #128	; 0x80
100024e2:	0313      	lsls	r3, r2, #12
100024e4:	4651      	mov	r1, sl
100024e6:	4219      	tst	r1, r3
100024e8:	d135      	bne.n	10002556 <__aeabi_dmul+0x406>
100024ea:	430b      	orrs	r3, r1
100024ec:	031d      	lsls	r5, r3, #12
100024ee:	0b2c      	lsrs	r4, r5, #12
100024f0:	4a07      	ldr	r2, [pc, #28]	; (10002510 <__aeabi_dmul+0x3c0>)
100024f2:	e7c7      	b.n	10002484 <__aeabi_dmul+0x334>
100024f4:	2180      	movs	r1, #128	; 0x80
100024f6:	024b      	lsls	r3, r1, #9
100024f8:	449b      	add	fp, r3
100024fa:	e6db      	b.n	100022b4 <__aeabi_dmul+0x164>
100024fc:	9b01      	ldr	r3, [sp, #4]
100024fe:	2200      	movs	r2, #0
10002500:	4018      	ands	r0, r3
10002502:	b2c7      	uxtb	r7, r0
10002504:	2400      	movs	r4, #0
10002506:	2600      	movs	r6, #0
10002508:	e7bc      	b.n	10002484 <__aeabi_dmul+0x334>
1000250a:	46c0      	nop			; (mov r8, r8)
1000250c:	fffffc0d 	.word	0xfffffc0d
10002510:	000007ff 	.word	0x000007ff
10002514:	fffffc01 	.word	0xfffffc01
10002518:	1000336c 	.word	0x1000336c
1000251c:	000003ff 	.word	0x000003ff
10002520:	feffffff 	.word	0xfeffffff
10002524:	000007fe 	.word	0x000007fe
10002528:	800fffff 	.word	0x800fffff
1000252c:	000fffff 	.word	0x000fffff
10002530:	1c04      	adds	r4, r0, #0
10002532:	3c28      	subs	r4, #40	; 0x28
10002534:	40a5      	lsls	r5, r4
10002536:	1c2c      	adds	r4, r5, #0
10002538:	2500      	movs	r5, #0
1000253a:	e670      	b.n	1000221e <__aeabi_dmul+0xce>
1000253c:	f000 fca0 	bl	10002e80 <__clzsi2>
10002540:	3020      	adds	r0, #32
10002542:	e660      	b.n	10002206 <__aeabi_dmul+0xb6>
10002544:	3b28      	subs	r3, #40	; 0x28
10002546:	409e      	lsls	r6, r3
10002548:	46b2      	mov	sl, r6
1000254a:	2600      	movs	r6, #0
1000254c:	e62d      	b.n	100021aa <__aeabi_dmul+0x5a>
1000254e:	f000 fc97 	bl	10002e80 <__clzsi2>
10002552:	3020      	adds	r0, #32
10002554:	e619      	b.n	1000218a <__aeabi_dmul+0x3a>
10002556:	421c      	tst	r4, r3
10002558:	d106      	bne.n	10002568 <__aeabi_dmul+0x418>
1000255a:	431c      	orrs	r4, r3
1000255c:	0326      	lsls	r6, r4, #12
1000255e:	0b34      	lsrs	r4, r6, #12
10002560:	465f      	mov	r7, fp
10002562:	1c2e      	adds	r6, r5, #0
10002564:	4a2e      	ldr	r2, [pc, #184]	; (10002620 <__aeabi_dmul+0x4d0>)
10002566:	e78d      	b.n	10002484 <__aeabi_dmul+0x334>
10002568:	430b      	orrs	r3, r1
1000256a:	0318      	lsls	r0, r3, #12
1000256c:	0b04      	lsrs	r4, r0, #12
1000256e:	4a2c      	ldr	r2, [pc, #176]	; (10002620 <__aeabi_dmul+0x4d0>)
10002570:	e788      	b.n	10002484 <__aeabi_dmul+0x334>
10002572:	4f2c      	ldr	r7, [pc, #176]	; (10002624 <__aeabi_dmul+0x4d4>)
10002574:	9d04      	ldr	r5, [sp, #16]
10002576:	1b7b      	subs	r3, r7, r5
10002578:	2b38      	cmp	r3, #56	; 0x38
1000257a:	dd06      	ble.n	1000258a <__aeabi_dmul+0x43a>
1000257c:	9e01      	ldr	r6, [sp, #4]
1000257e:	2701      	movs	r7, #1
10002580:	4037      	ands	r7, r6
10002582:	2200      	movs	r2, #0
10002584:	2400      	movs	r4, #0
10002586:	2600      	movs	r6, #0
10002588:	e77c      	b.n	10002484 <__aeabi_dmul+0x334>
1000258a:	2b1f      	cmp	r3, #31
1000258c:	dc21      	bgt.n	100025d2 <__aeabi_dmul+0x482>
1000258e:	9a04      	ldr	r2, [sp, #16]
10002590:	4f25      	ldr	r7, [pc, #148]	; (10002628 <__aeabi_dmul+0x4d8>)
10002592:	1c35      	adds	r5, r6, #0
10002594:	19d1      	adds	r1, r2, r7
10002596:	1c20      	adds	r0, r4, #0
10002598:	408e      	lsls	r6, r1
1000259a:	40dd      	lsrs	r5, r3
1000259c:	4088      	lsls	r0, r1
1000259e:	1c32      	adds	r2, r6, #0
100025a0:	4328      	orrs	r0, r5
100025a2:	1e56      	subs	r6, r2, #1
100025a4:	41b2      	sbcs	r2, r6
100025a6:	1c06      	adds	r6, r0, #0
100025a8:	4316      	orrs	r6, r2
100025aa:	40dc      	lsrs	r4, r3
100025ac:	230f      	movs	r3, #15
100025ae:	4033      	ands	r3, r6
100025b0:	2b04      	cmp	r3, #4
100025b2:	d005      	beq.n	100025c0 <__aeabi_dmul+0x470>
100025b4:	1d37      	adds	r7, r6, #4
100025b6:	42b7      	cmp	r7, r6
100025b8:	41b6      	sbcs	r6, r6
100025ba:	4271      	negs	r1, r6
100025bc:	1864      	adds	r4, r4, r1
100025be:	1c3e      	adds	r6, r7, #0
100025c0:	0225      	lsls	r5, r4, #8
100025c2:	d517      	bpl.n	100025f4 <__aeabi_dmul+0x4a4>
100025c4:	9b01      	ldr	r3, [sp, #4]
100025c6:	2701      	movs	r7, #1
100025c8:	401f      	ands	r7, r3
100025ca:	2201      	movs	r2, #1
100025cc:	2400      	movs	r4, #0
100025ce:	2600      	movs	r6, #0
100025d0:	e758      	b.n	10002484 <__aeabi_dmul+0x334>
100025d2:	4816      	ldr	r0, [pc, #88]	; (1000262c <__aeabi_dmul+0x4dc>)
100025d4:	9a04      	ldr	r2, [sp, #16]
100025d6:	1c21      	adds	r1, r4, #0
100025d8:	1a87      	subs	r7, r0, r2
100025da:	40f9      	lsrs	r1, r7
100025dc:	1c0d      	adds	r5, r1, #0
100025de:	2b20      	cmp	r3, #32
100025e0:	d012      	beq.n	10002608 <__aeabi_dmul+0x4b8>
100025e2:	4b13      	ldr	r3, [pc, #76]	; (10002630 <__aeabi_dmul+0x4e0>)
100025e4:	18d0      	adds	r0, r2, r3
100025e6:	4084      	lsls	r4, r0
100025e8:	4326      	orrs	r6, r4
100025ea:	1e72      	subs	r2, r6, #1
100025ec:	4196      	sbcs	r6, r2
100025ee:	432e      	orrs	r6, r5
100025f0:	2400      	movs	r4, #0
100025f2:	e7db      	b.n	100025ac <__aeabi_dmul+0x45c>
100025f4:	9a01      	ldr	r2, [sp, #4]
100025f6:	0765      	lsls	r5, r4, #29
100025f8:	08f6      	lsrs	r6, r6, #3
100025fa:	0260      	lsls	r0, r4, #9
100025fc:	2701      	movs	r7, #1
100025fe:	4017      	ands	r7, r2
10002600:	432e      	orrs	r6, r5
10002602:	0b04      	lsrs	r4, r0, #12
10002604:	2200      	movs	r2, #0
10002606:	e73d      	b.n	10002484 <__aeabi_dmul+0x334>
10002608:	2400      	movs	r4, #0
1000260a:	e7ed      	b.n	100025e8 <__aeabi_dmul+0x498>
1000260c:	2180      	movs	r1, #128	; 0x80
1000260e:	030f      	lsls	r7, r1, #12
10002610:	433c      	orrs	r4, r7
10002612:	9801      	ldr	r0, [sp, #4]
10002614:	0324      	lsls	r4, r4, #12
10002616:	2701      	movs	r7, #1
10002618:	0b24      	lsrs	r4, r4, #12
1000261a:	4007      	ands	r7, r0
1000261c:	4a00      	ldr	r2, [pc, #0]	; (10002620 <__aeabi_dmul+0x4d0>)
1000261e:	e731      	b.n	10002484 <__aeabi_dmul+0x334>
10002620:	000007ff 	.word	0x000007ff
10002624:	fffffc02 	.word	0xfffffc02
10002628:	0000041e 	.word	0x0000041e
1000262c:	fffffbe2 	.word	0xfffffbe2
10002630:	0000043e 	.word	0x0000043e

10002634 <__aeabi_dsub>:
10002634:	b5f0      	push	{r4, r5, r6, r7, lr}
10002636:	4657      	mov	r7, sl
10002638:	464e      	mov	r6, r9
1000263a:	4645      	mov	r5, r8
1000263c:	b4e0      	push	{r5, r6, r7}
1000263e:	1c07      	adds	r7, r0, #0
10002640:	030d      	lsls	r5, r1, #12
10002642:	004e      	lsls	r6, r1, #1
10002644:	0a68      	lsrs	r0, r5, #9
10002646:	0fcc      	lsrs	r4, r1, #31
10002648:	0f79      	lsrs	r1, r7, #29
1000264a:	4308      	orrs	r0, r1
1000264c:	4684      	mov	ip, r0
1000264e:	1c11      	adds	r1, r2, #0
10002650:	0318      	lsls	r0, r3, #12
10002652:	005a      	lsls	r2, r3, #1
10002654:	00fd      	lsls	r5, r7, #3
10002656:	0a40      	lsrs	r0, r0, #9
10002658:	0fdf      	lsrs	r7, r3, #31
1000265a:	0f4b      	lsrs	r3, r1, #29
1000265c:	4318      	orrs	r0, r3
1000265e:	4bca      	ldr	r3, [pc, #808]	; (10002988 <__aeabi_dsub+0x354>)
10002660:	00c9      	lsls	r1, r1, #3
10002662:	0d76      	lsrs	r6, r6, #21
10002664:	0d52      	lsrs	r2, r2, #21
10002666:	468a      	mov	sl, r1
10002668:	429a      	cmp	r2, r3
1000266a:	d100      	bne.n	1000266e <__aeabi_dsub+0x3a>
1000266c:	e0e0      	b.n	10002830 <__aeabi_dsub+0x1fc>
1000266e:	2301      	movs	r3, #1
10002670:	405f      	eors	r7, r3
10002672:	46b9      	mov	r9, r7
10002674:	42bc      	cmp	r4, r7
10002676:	d100      	bne.n	1000267a <__aeabi_dsub+0x46>
10002678:	e0a8      	b.n	100027cc <__aeabi_dsub+0x198>
1000267a:	1ab7      	subs	r7, r6, r2
1000267c:	2f00      	cmp	r7, #0
1000267e:	dc00      	bgt.n	10002682 <__aeabi_dsub+0x4e>
10002680:	e110      	b.n	100028a4 <__aeabi_dsub+0x270>
10002682:	2a00      	cmp	r2, #0
10002684:	d112      	bne.n	100026ac <__aeabi_dsub+0x78>
10002686:	4652      	mov	r2, sl
10002688:	4302      	orrs	r2, r0
1000268a:	d100      	bne.n	1000268e <__aeabi_dsub+0x5a>
1000268c:	e0d4      	b.n	10002838 <__aeabi_dsub+0x204>
1000268e:	3f01      	subs	r7, #1
10002690:	2f00      	cmp	r7, #0
10002692:	d000      	beq.n	10002696 <__aeabi_dsub+0x62>
10002694:	e160      	b.n	10002958 <__aeabi_dsub+0x324>
10002696:	4651      	mov	r1, sl
10002698:	1a6f      	subs	r7, r5, r1
1000269a:	42bd      	cmp	r5, r7
1000269c:	41ad      	sbcs	r5, r5
1000269e:	4662      	mov	r2, ip
100026a0:	426b      	negs	r3, r5
100026a2:	1a10      	subs	r0, r2, r0
100026a4:	1c3d      	adds	r5, r7, #0
100026a6:	1ac3      	subs	r3, r0, r3
100026a8:	1c37      	adds	r7, r6, #0
100026aa:	e024      	b.n	100026f6 <__aeabi_dsub+0xc2>
100026ac:	4ab6      	ldr	r2, [pc, #728]	; (10002988 <__aeabi_dsub+0x354>)
100026ae:	4296      	cmp	r6, r2
100026b0:	d100      	bne.n	100026b4 <__aeabi_dsub+0x80>
100026b2:	e0e3      	b.n	1000287c <__aeabi_dsub+0x248>
100026b4:	2180      	movs	r1, #128	; 0x80
100026b6:	040b      	lsls	r3, r1, #16
100026b8:	4318      	orrs	r0, r3
100026ba:	2f38      	cmp	r7, #56	; 0x38
100026bc:	dd00      	ble.n	100026c0 <__aeabi_dsub+0x8c>
100026be:	e123      	b.n	10002908 <__aeabi_dsub+0x2d4>
100026c0:	2f1f      	cmp	r7, #31
100026c2:	dd00      	ble.n	100026c6 <__aeabi_dsub+0x92>
100026c4:	e166      	b.n	10002994 <__aeabi_dsub+0x360>
100026c6:	2120      	movs	r1, #32
100026c8:	1bc9      	subs	r1, r1, r7
100026ca:	1c02      	adds	r2, r0, #0
100026cc:	4653      	mov	r3, sl
100026ce:	408a      	lsls	r2, r1
100026d0:	40fb      	lsrs	r3, r7
100026d2:	431a      	orrs	r2, r3
100026d4:	4653      	mov	r3, sl
100026d6:	408b      	lsls	r3, r1
100026d8:	1c19      	adds	r1, r3, #0
100026da:	1e4b      	subs	r3, r1, #1
100026dc:	4199      	sbcs	r1, r3
100026de:	1c03      	adds	r3, r0, #0
100026e0:	430a      	orrs	r2, r1
100026e2:	40fb      	lsrs	r3, r7
100026e4:	1aaa      	subs	r2, r5, r2
100026e6:	4667      	mov	r7, ip
100026e8:	4295      	cmp	r5, r2
100026ea:	41ad      	sbcs	r5, r5
100026ec:	1af8      	subs	r0, r7, r3
100026ee:	426b      	negs	r3, r5
100026f0:	1ac3      	subs	r3, r0, r3
100026f2:	1c15      	adds	r5, r2, #0
100026f4:	1c37      	adds	r7, r6, #0
100026f6:	021a      	lsls	r2, r3, #8
100026f8:	d400      	bmi.n	100026fc <__aeabi_dsub+0xc8>
100026fa:	e0c7      	b.n	1000288c <__aeabi_dsub+0x258>
100026fc:	025e      	lsls	r6, r3, #9
100026fe:	0a71      	lsrs	r1, r6, #9
10002700:	4688      	mov	r8, r1
10002702:	4642      	mov	r2, r8
10002704:	2a00      	cmp	r2, #0
10002706:	d100      	bne.n	1000270a <__aeabi_dsub+0xd6>
10002708:	e0f0      	b.n	100028ec <__aeabi_dsub+0x2b8>
1000270a:	4640      	mov	r0, r8
1000270c:	f000 fbb8 	bl	10002e80 <__clzsi2>
10002710:	1c02      	adds	r2, r0, #0
10002712:	3a08      	subs	r2, #8
10002714:	2a1f      	cmp	r2, #31
10002716:	dd00      	ble.n	1000271a <__aeabi_dsub+0xe6>
10002718:	e0f1      	b.n	100028fe <__aeabi_dsub+0x2ca>
1000271a:	2328      	movs	r3, #40	; 0x28
1000271c:	1a18      	subs	r0, r3, r0
1000271e:	1c2e      	adds	r6, r5, #0
10002720:	4641      	mov	r1, r8
10002722:	40c6      	lsrs	r6, r0
10002724:	4091      	lsls	r1, r2
10002726:	1c33      	adds	r3, r6, #0
10002728:	430b      	orrs	r3, r1
1000272a:	4095      	lsls	r5, r2
1000272c:	4297      	cmp	r7, r2
1000272e:	dd00      	ble.n	10002732 <__aeabi_dsub+0xfe>
10002730:	e0a9      	b.n	10002886 <__aeabi_dsub+0x252>
10002732:	1bd0      	subs	r0, r2, r7
10002734:	1c41      	adds	r1, r0, #1
10002736:	291f      	cmp	r1, #31
10002738:	dd00      	ble.n	1000273c <__aeabi_dsub+0x108>
1000273a:	e112      	b.n	10002962 <__aeabi_dsub+0x32e>
1000273c:	271f      	movs	r7, #31
1000273e:	1a3a      	subs	r2, r7, r0
10002740:	1c2e      	adds	r6, r5, #0
10002742:	1c18      	adds	r0, r3, #0
10002744:	40ce      	lsrs	r6, r1
10002746:	4090      	lsls	r0, r2
10002748:	4095      	lsls	r5, r2
1000274a:	4330      	orrs	r0, r6
1000274c:	1e6a      	subs	r2, r5, #1
1000274e:	4195      	sbcs	r5, r2
10002750:	40cb      	lsrs	r3, r1
10002752:	4305      	orrs	r5, r0
10002754:	2101      	movs	r1, #1
10002756:	2700      	movs	r7, #0
10002758:	260f      	movs	r6, #15
1000275a:	402e      	ands	r6, r5
1000275c:	2e04      	cmp	r6, #4
1000275e:	d100      	bne.n	10002762 <__aeabi_dsub+0x12e>
10002760:	e072      	b.n	10002848 <__aeabi_dsub+0x214>
10002762:	1d2e      	adds	r6, r5, #4
10002764:	42ae      	cmp	r6, r5
10002766:	41ad      	sbcs	r5, r5
10002768:	4268      	negs	r0, r5
1000276a:	2280      	movs	r2, #128	; 0x80
1000276c:	181b      	adds	r3, r3, r0
1000276e:	2501      	movs	r5, #1
10002770:	0410      	lsls	r0, r2, #16
10002772:	4018      	ands	r0, r3
10002774:	402c      	ands	r4, r5
10002776:	2800      	cmp	r0, #0
10002778:	d007      	beq.n	1000278a <__aeabi_dsub+0x156>
1000277a:	4f83      	ldr	r7, [pc, #524]	; (10002988 <__aeabi_dsub+0x354>)
1000277c:	42b9      	cmp	r1, r7
1000277e:	d100      	bne.n	10002782 <__aeabi_dsub+0x14e>
10002780:	e0b0      	b.n	100028e4 <__aeabi_dsub+0x2b0>
10002782:	4a82      	ldr	r2, [pc, #520]	; (1000298c <__aeabi_dsub+0x358>)
10002784:	1c0f      	adds	r7, r1, #0
10002786:	4013      	ands	r3, r2
10002788:	3101      	adds	r1, #1
1000278a:	08f2      	lsrs	r2, r6, #3
1000278c:	0549      	lsls	r1, r1, #21
1000278e:	075e      	lsls	r6, r3, #29
10002790:	4332      	orrs	r2, r6
10002792:	08db      	lsrs	r3, r3, #3
10002794:	0d48      	lsrs	r0, r1, #21
10002796:	2801      	cmp	r0, #1
10002798:	dc00      	bgt.n	1000279c <__aeabi_dsub+0x168>
1000279a:	e079      	b.n	10002890 <__aeabi_dsub+0x25c>
1000279c:	031b      	lsls	r3, r3, #12
1000279e:	0578      	lsls	r0, r7, #21
100027a0:	0b1e      	lsrs	r6, r3, #12
100027a2:	0d47      	lsrs	r7, r0, #21
100027a4:	2000      	movs	r0, #0
100027a6:	2100      	movs	r1, #0
100027a8:	0d09      	lsrs	r1, r1, #20
100027aa:	057d      	lsls	r5, r7, #21
100027ac:	050b      	lsls	r3, r1, #20
100027ae:	4f78      	ldr	r7, [pc, #480]	; (10002990 <__aeabi_dsub+0x35c>)
100027b0:	431e      	orrs	r6, r3
100027b2:	1c10      	adds	r0, r2, #0
100027b4:	4037      	ands	r7, r6
100027b6:	086a      	lsrs	r2, r5, #1
100027b8:	4317      	orrs	r7, r2
100027ba:	007e      	lsls	r6, r7, #1
100027bc:	0871      	lsrs	r1, r6, #1
100027be:	07e4      	lsls	r4, r4, #31
100027c0:	4321      	orrs	r1, r4
100027c2:	bc1c      	pop	{r2, r3, r4}
100027c4:	4690      	mov	r8, r2
100027c6:	4699      	mov	r9, r3
100027c8:	46a2      	mov	sl, r4
100027ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
100027cc:	1ab3      	subs	r3, r6, r2
100027ce:	2b00      	cmp	r3, #0
100027d0:	dc00      	bgt.n	100027d4 <__aeabi_dsub+0x1a0>
100027d2:	e0a6      	b.n	10002922 <__aeabi_dsub+0x2ee>
100027d4:	2a00      	cmp	r2, #0
100027d6:	d03e      	beq.n	10002856 <__aeabi_dsub+0x222>
100027d8:	4a6b      	ldr	r2, [pc, #428]	; (10002988 <__aeabi_dsub+0x354>)
100027da:	4296      	cmp	r6, r2
100027dc:	d04e      	beq.n	1000287c <__aeabi_dsub+0x248>
100027de:	2180      	movs	r1, #128	; 0x80
100027e0:	040f      	lsls	r7, r1, #16
100027e2:	4338      	orrs	r0, r7
100027e4:	2b38      	cmp	r3, #56	; 0x38
100027e6:	dc00      	bgt.n	100027ea <__aeabi_dsub+0x1b6>
100027e8:	e118      	b.n	10002a1c <__aeabi_dsub+0x3e8>
100027ea:	4653      	mov	r3, sl
100027ec:	4318      	orrs	r0, r3
100027ee:	2700      	movs	r7, #0
100027f0:	2200      	movs	r2, #0
100027f2:	2800      	cmp	r0, #0
100027f4:	d000      	beq.n	100027f8 <__aeabi_dsub+0x1c4>
100027f6:	2201      	movs	r2, #1
100027f8:	1952      	adds	r2, r2, r5
100027fa:	42aa      	cmp	r2, r5
100027fc:	41ad      	sbcs	r5, r5
100027fe:	4467      	add	r7, ip
10002800:	426b      	negs	r3, r5
10002802:	18fb      	adds	r3, r7, r3
10002804:	1c15      	adds	r5, r2, #0
10002806:	1c37      	adds	r7, r6, #0
10002808:	021e      	lsls	r6, r3, #8
1000280a:	d53f      	bpl.n	1000288c <__aeabi_dsub+0x258>
1000280c:	485e      	ldr	r0, [pc, #376]	; (10002988 <__aeabi_dsub+0x354>)
1000280e:	1c7e      	adds	r6, r7, #1
10002810:	4286      	cmp	r6, r0
10002812:	d100      	bne.n	10002816 <__aeabi_dsub+0x1e2>
10002814:	e17b      	b.n	10002b0e <__aeabi_dsub+0x4da>
10002816:	495d      	ldr	r1, [pc, #372]	; (1000298c <__aeabi_dsub+0x358>)
10002818:	2201      	movs	r2, #1
1000281a:	402a      	ands	r2, r5
1000281c:	400b      	ands	r3, r1
1000281e:	0868      	lsrs	r0, r5, #1
10002820:	1c15      	adds	r5, r2, #0
10002822:	07d9      	lsls	r1, r3, #31
10002824:	4305      	orrs	r5, r0
10002826:	430d      	orrs	r5, r1
10002828:	085b      	lsrs	r3, r3, #1
1000282a:	1cb9      	adds	r1, r7, #2
1000282c:	1c37      	adds	r7, r6, #0
1000282e:	e793      	b.n	10002758 <__aeabi_dsub+0x124>
10002830:	4301      	orrs	r1, r0
10002832:	d100      	bne.n	10002836 <__aeabi_dsub+0x202>
10002834:	e71b      	b.n	1000266e <__aeabi_dsub+0x3a>
10002836:	e71c      	b.n	10002672 <__aeabi_dsub+0x3e>
10002838:	1c71      	adds	r1, r6, #1
1000283a:	1c37      	adds	r7, r6, #0
1000283c:	260f      	movs	r6, #15
1000283e:	4663      	mov	r3, ip
10002840:	402e      	ands	r6, r5
10002842:	2e04      	cmp	r6, #4
10002844:	d000      	beq.n	10002848 <__aeabi_dsub+0x214>
10002846:	e78c      	b.n	10002762 <__aeabi_dsub+0x12e>
10002848:	2280      	movs	r2, #128	; 0x80
1000284a:	2601      	movs	r6, #1
1000284c:	0410      	lsls	r0, r2, #16
1000284e:	4034      	ands	r4, r6
10002850:	4018      	ands	r0, r3
10002852:	1c2e      	adds	r6, r5, #0
10002854:	e78f      	b.n	10002776 <__aeabi_dsub+0x142>
10002856:	4652      	mov	r2, sl
10002858:	4302      	orrs	r2, r0
1000285a:	d0ed      	beq.n	10002838 <__aeabi_dsub+0x204>
1000285c:	3b01      	subs	r3, #1
1000285e:	2b00      	cmp	r3, #0
10002860:	d109      	bne.n	10002876 <__aeabi_dsub+0x242>
10002862:	4657      	mov	r7, sl
10002864:	1979      	adds	r1, r7, r5
10002866:	42a9      	cmp	r1, r5
10002868:	4192      	sbcs	r2, r2
1000286a:	4255      	negs	r5, r2
1000286c:	4460      	add	r0, ip
1000286e:	1943      	adds	r3, r0, r5
10002870:	1c37      	adds	r7, r6, #0
10002872:	1c0d      	adds	r5, r1, #0
10002874:	e7c8      	b.n	10002808 <__aeabi_dsub+0x1d4>
10002876:	4944      	ldr	r1, [pc, #272]	; (10002988 <__aeabi_dsub+0x354>)
10002878:	428e      	cmp	r6, r1
1000287a:	d1b3      	bne.n	100027e4 <__aeabi_dsub+0x1b0>
1000287c:	2080      	movs	r0, #128	; 0x80
1000287e:	4663      	mov	r3, ip
10002880:	0101      	lsls	r1, r0, #4
10002882:	1c37      	adds	r7, r6, #0
10002884:	e768      	b.n	10002758 <__aeabi_dsub+0x124>
10002886:	1abf      	subs	r7, r7, r2
10002888:	4a40      	ldr	r2, [pc, #256]	; (1000298c <__aeabi_dsub+0x358>)
1000288a:	4013      	ands	r3, r2
1000288c:	1c79      	adds	r1, r7, #1
1000288e:	e763      	b.n	10002758 <__aeabi_dsub+0x124>
10002890:	1c15      	adds	r5, r2, #0
10002892:	431d      	orrs	r5, r3
10002894:	d100      	bne.n	10002898 <__aeabi_dsub+0x264>
10002896:	e221      	b.n	10002cdc <__aeabi_dsub+0x6a8>
10002898:	2f00      	cmp	r7, #0
1000289a:	d03e      	beq.n	1000291a <__aeabi_dsub+0x2e6>
1000289c:	2680      	movs	r6, #128	; 0x80
1000289e:	0331      	lsls	r1, r6, #12
100028a0:	430b      	orrs	r3, r1
100028a2:	e77b      	b.n	1000279c <__aeabi_dsub+0x168>
100028a4:	2f00      	cmp	r7, #0
100028a6:	d000      	beq.n	100028aa <__aeabi_dsub+0x276>
100028a8:	e086      	b.n	100029b8 <__aeabi_dsub+0x384>
100028aa:	1c72      	adds	r2, r6, #1
100028ac:	0551      	lsls	r1, r2, #21
100028ae:	0d4b      	lsrs	r3, r1, #21
100028b0:	2b01      	cmp	r3, #1
100028b2:	dc00      	bgt.n	100028b6 <__aeabi_dsub+0x282>
100028b4:	e0f0      	b.n	10002a98 <__aeabi_dsub+0x464>
100028b6:	4657      	mov	r7, sl
100028b8:	1bea      	subs	r2, r5, r7
100028ba:	4295      	cmp	r5, r2
100028bc:	419b      	sbcs	r3, r3
100028be:	4667      	mov	r7, ip
100028c0:	1a39      	subs	r1, r7, r0
100028c2:	425b      	negs	r3, r3
100028c4:	1ac9      	subs	r1, r1, r3
100028c6:	4688      	mov	r8, r1
100028c8:	020b      	lsls	r3, r1, #8
100028ca:	d400      	bmi.n	100028ce <__aeabi_dsub+0x29a>
100028cc:	e09d      	b.n	10002a0a <__aeabi_dsub+0x3d6>
100028ce:	4654      	mov	r4, sl
100028d0:	1b65      	subs	r5, r4, r5
100028d2:	45aa      	cmp	sl, r5
100028d4:	4192      	sbcs	r2, r2
100028d6:	1bc0      	subs	r0, r0, r7
100028d8:	4257      	negs	r7, r2
100028da:	1bc3      	subs	r3, r0, r7
100028dc:	4698      	mov	r8, r3
100028de:	1c37      	adds	r7, r6, #0
100028e0:	464c      	mov	r4, r9
100028e2:	e70e      	b.n	10002702 <__aeabi_dsub+0xce>
100028e4:	1c0f      	adds	r7, r1, #0
100028e6:	2600      	movs	r6, #0
100028e8:	2200      	movs	r2, #0
100028ea:	e75b      	b.n	100027a4 <__aeabi_dsub+0x170>
100028ec:	1c28      	adds	r0, r5, #0
100028ee:	f000 fac7 	bl	10002e80 <__clzsi2>
100028f2:	3020      	adds	r0, #32
100028f4:	1c02      	adds	r2, r0, #0
100028f6:	3a08      	subs	r2, #8
100028f8:	2a1f      	cmp	r2, #31
100028fa:	dc00      	bgt.n	100028fe <__aeabi_dsub+0x2ca>
100028fc:	e70d      	b.n	1000271a <__aeabi_dsub+0xe6>
100028fe:	3828      	subs	r0, #40	; 0x28
10002900:	4085      	lsls	r5, r0
10002902:	1c2b      	adds	r3, r5, #0
10002904:	2500      	movs	r5, #0
10002906:	e711      	b.n	1000272c <__aeabi_dsub+0xf8>
10002908:	4657      	mov	r7, sl
1000290a:	4338      	orrs	r0, r7
1000290c:	2300      	movs	r3, #0
1000290e:	2200      	movs	r2, #0
10002910:	2800      	cmp	r0, #0
10002912:	d100      	bne.n	10002916 <__aeabi_dsub+0x2e2>
10002914:	e6e6      	b.n	100026e4 <__aeabi_dsub+0xb0>
10002916:	2201      	movs	r2, #1
10002918:	e6e4      	b.n	100026e4 <__aeabi_dsub+0xb0>
1000291a:	031d      	lsls	r5, r3, #12
1000291c:	0b2e      	lsrs	r6, r5, #12
1000291e:	2700      	movs	r7, #0
10002920:	e740      	b.n	100027a4 <__aeabi_dsub+0x170>
10002922:	2b00      	cmp	r3, #0
10002924:	d000      	beq.n	10002928 <__aeabi_dsub+0x2f4>
10002926:	e0d9      	b.n	10002adc <__aeabi_dsub+0x4a8>
10002928:	1c77      	adds	r7, r6, #1
1000292a:	0579      	lsls	r1, r7, #21
1000292c:	0d4a      	lsrs	r2, r1, #21
1000292e:	2a01      	cmp	r2, #1
10002930:	dc00      	bgt.n	10002934 <__aeabi_dsub+0x300>
10002932:	e095      	b.n	10002a60 <__aeabi_dsub+0x42c>
10002934:	4b14      	ldr	r3, [pc, #80]	; (10002988 <__aeabi_dsub+0x354>)
10002936:	429f      	cmp	r7, r3
10002938:	d100      	bne.n	1000293c <__aeabi_dsub+0x308>
1000293a:	e0fe      	b.n	10002b3a <__aeabi_dsub+0x506>
1000293c:	4651      	mov	r1, sl
1000293e:	1949      	adds	r1, r1, r5
10002940:	42a9      	cmp	r1, r5
10002942:	41ad      	sbcs	r5, r5
10002944:	4662      	mov	r2, ip
10002946:	426b      	negs	r3, r5
10002948:	1880      	adds	r0, r0, r2
1000294a:	18c2      	adds	r2, r0, r3
1000294c:	0849      	lsrs	r1, r1, #1
1000294e:	07d5      	lsls	r5, r2, #31
10002950:	430d      	orrs	r5, r1
10002952:	0853      	lsrs	r3, r2, #1
10002954:	1cb1      	adds	r1, r6, #2
10002956:	e6ff      	b.n	10002758 <__aeabi_dsub+0x124>
10002958:	490b      	ldr	r1, [pc, #44]	; (10002988 <__aeabi_dsub+0x354>)
1000295a:	428e      	cmp	r6, r1
1000295c:	d000      	beq.n	10002960 <__aeabi_dsub+0x32c>
1000295e:	e6ac      	b.n	100026ba <__aeabi_dsub+0x86>
10002960:	e78c      	b.n	1000287c <__aeabi_dsub+0x248>
10002962:	1c06      	adds	r6, r0, #0
10002964:	3e1f      	subs	r6, #31
10002966:	1c1f      	adds	r7, r3, #0
10002968:	40f7      	lsrs	r7, r6
1000296a:	1c3e      	adds	r6, r7, #0
1000296c:	2920      	cmp	r1, #32
1000296e:	d073      	beq.n	10002a58 <__aeabi_dsub+0x424>
10002970:	223f      	movs	r2, #63	; 0x3f
10002972:	1a10      	subs	r0, r2, r0
10002974:	4083      	lsls	r3, r0
10002976:	431d      	orrs	r5, r3
10002978:	1e6b      	subs	r3, r5, #1
1000297a:	419d      	sbcs	r5, r3
1000297c:	4335      	orrs	r5, r6
1000297e:	2101      	movs	r1, #1
10002980:	2300      	movs	r3, #0
10002982:	2700      	movs	r7, #0
10002984:	e6e8      	b.n	10002758 <__aeabi_dsub+0x124>
10002986:	46c0      	nop			; (mov r8, r8)
10002988:	000007ff 	.word	0x000007ff
1000298c:	ff7fffff 	.word	0xff7fffff
10002990:	800fffff 	.word	0x800fffff
10002994:	1c3b      	adds	r3, r7, #0
10002996:	3b20      	subs	r3, #32
10002998:	1c01      	adds	r1, r0, #0
1000299a:	40d9      	lsrs	r1, r3
1000299c:	1c0b      	adds	r3, r1, #0
1000299e:	2f20      	cmp	r7, #32
100029a0:	d05c      	beq.n	10002a5c <__aeabi_dsub+0x428>
100029a2:	2240      	movs	r2, #64	; 0x40
100029a4:	1bd7      	subs	r7, r2, r7
100029a6:	40b8      	lsls	r0, r7
100029a8:	1c02      	adds	r2, r0, #0
100029aa:	4650      	mov	r0, sl
100029ac:	4302      	orrs	r2, r0
100029ae:	1e51      	subs	r1, r2, #1
100029b0:	418a      	sbcs	r2, r1
100029b2:	431a      	orrs	r2, r3
100029b4:	2300      	movs	r3, #0
100029b6:	e695      	b.n	100026e4 <__aeabi_dsub+0xb0>
100029b8:	427f      	negs	r7, r7
100029ba:	2e00      	cmp	r6, #0
100029bc:	d040      	beq.n	10002a40 <__aeabi_dsub+0x40c>
100029be:	4cca      	ldr	r4, [pc, #808]	; (10002ce8 <__aeabi_dsub+0x6b4>)
100029c0:	42a2      	cmp	r2, r4
100029c2:	d100      	bne.n	100029c6 <__aeabi_dsub+0x392>
100029c4:	e11f      	b.n	10002c06 <__aeabi_dsub+0x5d2>
100029c6:	2180      	movs	r1, #128	; 0x80
100029c8:	4666      	mov	r6, ip
100029ca:	040b      	lsls	r3, r1, #16
100029cc:	431e      	orrs	r6, r3
100029ce:	46b4      	mov	ip, r6
100029d0:	2f38      	cmp	r7, #56	; 0x38
100029d2:	dd00      	ble.n	100029d6 <__aeabi_dsub+0x3a2>
100029d4:	e0a9      	b.n	10002b2a <__aeabi_dsub+0x4f6>
100029d6:	2f1f      	cmp	r7, #31
100029d8:	dd00      	ble.n	100029dc <__aeabi_dsub+0x3a8>
100029da:	e13d      	b.n	10002c58 <__aeabi_dsub+0x624>
100029dc:	2320      	movs	r3, #32
100029de:	1bde      	subs	r6, r3, r7
100029e0:	1c29      	adds	r1, r5, #0
100029e2:	4664      	mov	r4, ip
100029e4:	40b4      	lsls	r4, r6
100029e6:	40f9      	lsrs	r1, r7
100029e8:	40b5      	lsls	r5, r6
100029ea:	1e6b      	subs	r3, r5, #1
100029ec:	419d      	sbcs	r5, r3
100029ee:	4321      	orrs	r1, r4
100029f0:	4663      	mov	r3, ip
100029f2:	430d      	orrs	r5, r1
100029f4:	40fb      	lsrs	r3, r7
100029f6:	4657      	mov	r7, sl
100029f8:	1b7d      	subs	r5, r7, r5
100029fa:	1ac0      	subs	r0, r0, r3
100029fc:	45aa      	cmp	sl, r5
100029fe:	419b      	sbcs	r3, r3
10002a00:	425f      	negs	r7, r3
10002a02:	1bc3      	subs	r3, r0, r7
10002a04:	464c      	mov	r4, r9
10002a06:	1c17      	adds	r7, r2, #0
10002a08:	e675      	b.n	100026f6 <__aeabi_dsub+0xc2>
10002a0a:	1c0d      	adds	r5, r1, #0
10002a0c:	4315      	orrs	r5, r2
10002a0e:	d120      	bne.n	10002a52 <__aeabi_dsub+0x41e>
10002a10:	2400      	movs	r4, #0
10002a12:	2101      	movs	r1, #1
10002a14:	2300      	movs	r3, #0
10002a16:	2604      	movs	r6, #4
10002a18:	2700      	movs	r7, #0
10002a1a:	e6b6      	b.n	1000278a <__aeabi_dsub+0x156>
10002a1c:	2b1f      	cmp	r3, #31
10002a1e:	dc4a      	bgt.n	10002ab6 <__aeabi_dsub+0x482>
10002a20:	2120      	movs	r1, #32
10002a22:	1ac9      	subs	r1, r1, r3
10002a24:	1c07      	adds	r7, r0, #0
10002a26:	4652      	mov	r2, sl
10002a28:	408f      	lsls	r7, r1
10002a2a:	40da      	lsrs	r2, r3
10002a2c:	433a      	orrs	r2, r7
10002a2e:	4657      	mov	r7, sl
10002a30:	408f      	lsls	r7, r1
10002a32:	1c39      	adds	r1, r7, #0
10002a34:	1e4f      	subs	r7, r1, #1
10002a36:	41b9      	sbcs	r1, r7
10002a38:	40d8      	lsrs	r0, r3
10002a3a:	430a      	orrs	r2, r1
10002a3c:	1c07      	adds	r7, r0, #0
10002a3e:	e6db      	b.n	100027f8 <__aeabi_dsub+0x1c4>
10002a40:	4664      	mov	r4, ip
10002a42:	432c      	orrs	r4, r5
10002a44:	d169      	bne.n	10002b1a <__aeabi_dsub+0x4e6>
10002a46:	1c51      	adds	r1, r2, #1
10002a48:	1c03      	adds	r3, r0, #0
10002a4a:	4655      	mov	r5, sl
10002a4c:	1c17      	adds	r7, r2, #0
10002a4e:	464c      	mov	r4, r9
10002a50:	e682      	b.n	10002758 <__aeabi_dsub+0x124>
10002a52:	1c15      	adds	r5, r2, #0
10002a54:	1c37      	adds	r7, r6, #0
10002a56:	e654      	b.n	10002702 <__aeabi_dsub+0xce>
10002a58:	2300      	movs	r3, #0
10002a5a:	e78c      	b.n	10002976 <__aeabi_dsub+0x342>
10002a5c:	2200      	movs	r2, #0
10002a5e:	e7a4      	b.n	100029aa <__aeabi_dsub+0x376>
10002a60:	4667      	mov	r7, ip
10002a62:	432f      	orrs	r7, r5
10002a64:	2e00      	cmp	r6, #0
10002a66:	d000      	beq.n	10002a6a <__aeabi_dsub+0x436>
10002a68:	e0d4      	b.n	10002c14 <__aeabi_dsub+0x5e0>
10002a6a:	2f00      	cmp	r7, #0
10002a6c:	d100      	bne.n	10002a70 <__aeabi_dsub+0x43c>
10002a6e:	e126      	b.n	10002cbe <__aeabi_dsub+0x68a>
10002a70:	4653      	mov	r3, sl
10002a72:	4303      	orrs	r3, r0
10002a74:	d100      	bne.n	10002a78 <__aeabi_dsub+0x444>
10002a76:	e0e4      	b.n	10002c42 <__aeabi_dsub+0x60e>
10002a78:	4651      	mov	r1, sl
10002a7a:	194f      	adds	r7, r1, r5
10002a7c:	42af      	cmp	r7, r5
10002a7e:	41ad      	sbcs	r5, r5
10002a80:	4460      	add	r0, ip
10002a82:	426e      	negs	r6, r5
10002a84:	1983      	adds	r3, r0, r6
10002a86:	021e      	lsls	r6, r3, #8
10002a88:	d400      	bmi.n	10002a8c <__aeabi_dsub+0x458>
10002a8a:	e14e      	b.n	10002d2a <__aeabi_dsub+0x6f6>
10002a8c:	4897      	ldr	r0, [pc, #604]	; (10002cec <__aeabi_dsub+0x6b8>)
10002a8e:	1c3d      	adds	r5, r7, #0
10002a90:	4003      	ands	r3, r0
10002a92:	2102      	movs	r1, #2
10002a94:	2701      	movs	r7, #1
10002a96:	e65f      	b.n	10002758 <__aeabi_dsub+0x124>
10002a98:	4661      	mov	r1, ip
10002a9a:	4329      	orrs	r1, r5
10002a9c:	2e00      	cmp	r6, #0
10002a9e:	d129      	bne.n	10002af4 <__aeabi_dsub+0x4c0>
10002aa0:	2900      	cmp	r1, #0
10002aa2:	d176      	bne.n	10002b92 <__aeabi_dsub+0x55e>
10002aa4:	4651      	mov	r1, sl
10002aa6:	4301      	orrs	r1, r0
10002aa8:	d0b2      	beq.n	10002a10 <__aeabi_dsub+0x3dc>
10002aaa:	1c03      	adds	r3, r0, #0
10002aac:	4655      	mov	r5, sl
10002aae:	464c      	mov	r4, r9
10002ab0:	2101      	movs	r1, #1
10002ab2:	2700      	movs	r7, #0
10002ab4:	e650      	b.n	10002758 <__aeabi_dsub+0x124>
10002ab6:	1c1f      	adds	r7, r3, #0
10002ab8:	3f20      	subs	r7, #32
10002aba:	1c01      	adds	r1, r0, #0
10002abc:	40f9      	lsrs	r1, r7
10002abe:	1c0f      	adds	r7, r1, #0
10002ac0:	2b20      	cmp	r3, #32
10002ac2:	d100      	bne.n	10002ac6 <__aeabi_dsub+0x492>
10002ac4:	e0c6      	b.n	10002c54 <__aeabi_dsub+0x620>
10002ac6:	2240      	movs	r2, #64	; 0x40
10002ac8:	1ad3      	subs	r3, r2, r3
10002aca:	4098      	lsls	r0, r3
10002acc:	1c02      	adds	r2, r0, #0
10002ace:	4650      	mov	r0, sl
10002ad0:	4302      	orrs	r2, r0
10002ad2:	1e53      	subs	r3, r2, #1
10002ad4:	419a      	sbcs	r2, r3
10002ad6:	433a      	orrs	r2, r7
10002ad8:	2700      	movs	r7, #0
10002ada:	e68d      	b.n	100027f8 <__aeabi_dsub+0x1c4>
10002adc:	425b      	negs	r3, r3
10002ade:	2e00      	cmp	r6, #0
10002ae0:	d130      	bne.n	10002b44 <__aeabi_dsub+0x510>
10002ae2:	4667      	mov	r7, ip
10002ae4:	432f      	orrs	r7, r5
10002ae6:	d000      	beq.n	10002aea <__aeabi_dsub+0x4b6>
10002ae8:	e0c8      	b.n	10002c7c <__aeabi_dsub+0x648>
10002aea:	1c51      	adds	r1, r2, #1
10002aec:	1c03      	adds	r3, r0, #0
10002aee:	4655      	mov	r5, sl
10002af0:	1c17      	adds	r7, r2, #0
10002af2:	e631      	b.n	10002758 <__aeabi_dsub+0x124>
10002af4:	2900      	cmp	r1, #0
10002af6:	d165      	bne.n	10002bc4 <__aeabi_dsub+0x590>
10002af8:	4657      	mov	r7, sl
10002afa:	4307      	orrs	r7, r0
10002afc:	d100      	bne.n	10002b00 <__aeabi_dsub+0x4cc>
10002afe:	e0c8      	b.n	10002c92 <__aeabi_dsub+0x65e>
10002b00:	1c03      	adds	r3, r0, #0
10002b02:	2080      	movs	r0, #128	; 0x80
10002b04:	4655      	mov	r5, sl
10002b06:	464c      	mov	r4, r9
10002b08:	0101      	lsls	r1, r0, #4
10002b0a:	4f77      	ldr	r7, [pc, #476]	; (10002ce8 <__aeabi_dsub+0x6b4>)
10002b0c:	e624      	b.n	10002758 <__aeabi_dsub+0x124>
10002b0e:	2380      	movs	r3, #128	; 0x80
10002b10:	1c37      	adds	r7, r6, #0
10002b12:	0119      	lsls	r1, r3, #4
10002b14:	2604      	movs	r6, #4
10002b16:	2300      	movs	r3, #0
10002b18:	e637      	b.n	1000278a <__aeabi_dsub+0x156>
10002b1a:	3f01      	subs	r7, #1
10002b1c:	2f00      	cmp	r7, #0
10002b1e:	d16e      	bne.n	10002bfe <__aeabi_dsub+0x5ca>
10002b20:	4654      	mov	r4, sl
10002b22:	4661      	mov	r1, ip
10002b24:	1b65      	subs	r5, r4, r5
10002b26:	1a40      	subs	r0, r0, r1
10002b28:	e768      	b.n	100029fc <__aeabi_dsub+0x3c8>
10002b2a:	4667      	mov	r7, ip
10002b2c:	433d      	orrs	r5, r7
10002b2e:	2300      	movs	r3, #0
10002b30:	2d00      	cmp	r5, #0
10002b32:	d100      	bne.n	10002b36 <__aeabi_dsub+0x502>
10002b34:	e75f      	b.n	100029f6 <__aeabi_dsub+0x3c2>
10002b36:	2501      	movs	r5, #1
10002b38:	e75d      	b.n	100029f6 <__aeabi_dsub+0x3c2>
10002b3a:	2680      	movs	r6, #128	; 0x80
10002b3c:	0131      	lsls	r1, r6, #4
10002b3e:	2300      	movs	r3, #0
10002b40:	2604      	movs	r6, #4
10002b42:	e622      	b.n	1000278a <__aeabi_dsub+0x156>
10002b44:	4968      	ldr	r1, [pc, #416]	; (10002ce8 <__aeabi_dsub+0x6b4>)
10002b46:	428a      	cmp	r2, r1
10002b48:	d100      	bne.n	10002b4c <__aeabi_dsub+0x518>
10002b4a:	e0c1      	b.n	10002cd0 <__aeabi_dsub+0x69c>
10002b4c:	2780      	movs	r7, #128	; 0x80
10002b4e:	4666      	mov	r6, ip
10002b50:	0439      	lsls	r1, r7, #16
10002b52:	430e      	orrs	r6, r1
10002b54:	46b4      	mov	ip, r6
10002b56:	2b38      	cmp	r3, #56	; 0x38
10002b58:	dd00      	ble.n	10002b5c <__aeabi_dsub+0x528>
10002b5a:	e0a2      	b.n	10002ca2 <__aeabi_dsub+0x66e>
10002b5c:	2b1f      	cmp	r3, #31
10002b5e:	dd00      	ble.n	10002b62 <__aeabi_dsub+0x52e>
10002b60:	e0d0      	b.n	10002d04 <__aeabi_dsub+0x6d0>
10002b62:	2120      	movs	r1, #32
10002b64:	1ac9      	subs	r1, r1, r3
10002b66:	1c2e      	adds	r6, r5, #0
10002b68:	4667      	mov	r7, ip
10002b6a:	408f      	lsls	r7, r1
10002b6c:	408d      	lsls	r5, r1
10002b6e:	40de      	lsrs	r6, r3
10002b70:	433e      	orrs	r6, r7
10002b72:	1c29      	adds	r1, r5, #0
10002b74:	4667      	mov	r7, ip
10002b76:	1e4d      	subs	r5, r1, #1
10002b78:	41a9      	sbcs	r1, r5
10002b7a:	40df      	lsrs	r7, r3
10002b7c:	1c35      	adds	r5, r6, #0
10002b7e:	430d      	orrs	r5, r1
10002b80:	1c3e      	adds	r6, r7, #0
10002b82:	4455      	add	r5, sl
10002b84:	4555      	cmp	r5, sl
10002b86:	419b      	sbcs	r3, r3
10002b88:	1830      	adds	r0, r6, r0
10002b8a:	425e      	negs	r6, r3
10002b8c:	1983      	adds	r3, r0, r6
10002b8e:	1c17      	adds	r7, r2, #0
10002b90:	e63a      	b.n	10002808 <__aeabi_dsub+0x1d4>
10002b92:	4656      	mov	r6, sl
10002b94:	4306      	orrs	r6, r0
10002b96:	d054      	beq.n	10002c42 <__aeabi_dsub+0x60e>
10002b98:	4657      	mov	r7, sl
10002b9a:	1bea      	subs	r2, r5, r7
10002b9c:	4663      	mov	r3, ip
10002b9e:	4295      	cmp	r5, r2
10002ba0:	41b6      	sbcs	r6, r6
10002ba2:	1a19      	subs	r1, r3, r0
10002ba4:	4273      	negs	r3, r6
10002ba6:	1acb      	subs	r3, r1, r3
10002ba8:	021e      	lsls	r6, r3, #8
10002baa:	d400      	bmi.n	10002bae <__aeabi_dsub+0x57a>
10002bac:	e0a2      	b.n	10002cf4 <__aeabi_dsub+0x6c0>
10002bae:	1b7d      	subs	r5, r7, r5
10002bb0:	4664      	mov	r4, ip
10002bb2:	45aa      	cmp	sl, r5
10002bb4:	41bf      	sbcs	r7, r7
10002bb6:	1b00      	subs	r0, r0, r4
10002bb8:	427a      	negs	r2, r7
10002bba:	1a83      	subs	r3, r0, r2
10002bbc:	464c      	mov	r4, r9
10002bbe:	2101      	movs	r1, #1
10002bc0:	2700      	movs	r7, #0
10002bc2:	e5c9      	b.n	10002758 <__aeabi_dsub+0x124>
10002bc4:	4656      	mov	r6, sl
10002bc6:	4306      	orrs	r6, r0
10002bc8:	d03f      	beq.n	10002c4a <__aeabi_dsub+0x616>
10002bca:	4662      	mov	r2, ip
10002bcc:	2180      	movs	r1, #128	; 0x80
10002bce:	0757      	lsls	r7, r2, #29
10002bd0:	08ed      	lsrs	r5, r5, #3
10002bd2:	08d3      	lsrs	r3, r2, #3
10002bd4:	030a      	lsls	r2, r1, #12
10002bd6:	433d      	orrs	r5, r7
10002bd8:	4213      	tst	r3, r2
10002bda:	d008      	beq.n	10002bee <__aeabi_dsub+0x5ba>
10002bdc:	08c6      	lsrs	r6, r0, #3
10002bde:	4216      	tst	r6, r2
10002be0:	d105      	bne.n	10002bee <__aeabi_dsub+0x5ba>
10002be2:	4655      	mov	r5, sl
10002be4:	08ec      	lsrs	r4, r5, #3
10002be6:	0745      	lsls	r5, r0, #29
10002be8:	4325      	orrs	r5, r4
10002bea:	1c33      	adds	r3, r6, #0
10002bec:	464c      	mov	r4, r9
10002bee:	0f68      	lsrs	r0, r5, #29
10002bf0:	00db      	lsls	r3, r3, #3
10002bf2:	2680      	movs	r6, #128	; 0x80
10002bf4:	4303      	orrs	r3, r0
10002bf6:	00ed      	lsls	r5, r5, #3
10002bf8:	0131      	lsls	r1, r6, #4
10002bfa:	4f3b      	ldr	r7, [pc, #236]	; (10002ce8 <__aeabi_dsub+0x6b4>)
10002bfc:	e5ac      	b.n	10002758 <__aeabi_dsub+0x124>
10002bfe:	493a      	ldr	r1, [pc, #232]	; (10002ce8 <__aeabi_dsub+0x6b4>)
10002c00:	428a      	cmp	r2, r1
10002c02:	d000      	beq.n	10002c06 <__aeabi_dsub+0x5d2>
10002c04:	e6e4      	b.n	100029d0 <__aeabi_dsub+0x39c>
10002c06:	2680      	movs	r6, #128	; 0x80
10002c08:	1c03      	adds	r3, r0, #0
10002c0a:	4655      	mov	r5, sl
10002c0c:	464c      	mov	r4, r9
10002c0e:	0131      	lsls	r1, r6, #4
10002c10:	1c17      	adds	r7, r2, #0
10002c12:	e5a1      	b.n	10002758 <__aeabi_dsub+0x124>
10002c14:	2f00      	cmp	r7, #0
10002c16:	d04c      	beq.n	10002cb2 <__aeabi_dsub+0x67e>
10002c18:	4653      	mov	r3, sl
10002c1a:	4303      	orrs	r3, r0
10002c1c:	d015      	beq.n	10002c4a <__aeabi_dsub+0x616>
10002c1e:	4662      	mov	r2, ip
10002c20:	2680      	movs	r6, #128	; 0x80
10002c22:	08ed      	lsrs	r5, r5, #3
10002c24:	0751      	lsls	r1, r2, #29
10002c26:	08d3      	lsrs	r3, r2, #3
10002c28:	0337      	lsls	r7, r6, #12
10002c2a:	430d      	orrs	r5, r1
10002c2c:	423b      	tst	r3, r7
10002c2e:	d0de      	beq.n	10002bee <__aeabi_dsub+0x5ba>
10002c30:	08c2      	lsrs	r2, r0, #3
10002c32:	423a      	tst	r2, r7
10002c34:	d1db      	bne.n	10002bee <__aeabi_dsub+0x5ba>
10002c36:	4655      	mov	r5, sl
10002c38:	08e9      	lsrs	r1, r5, #3
10002c3a:	0745      	lsls	r5, r0, #29
10002c3c:	1c13      	adds	r3, r2, #0
10002c3e:	430d      	orrs	r5, r1
10002c40:	e7d5      	b.n	10002bee <__aeabi_dsub+0x5ba>
10002c42:	4663      	mov	r3, ip
10002c44:	2101      	movs	r1, #1
10002c46:	2700      	movs	r7, #0
10002c48:	e586      	b.n	10002758 <__aeabi_dsub+0x124>
10002c4a:	2780      	movs	r7, #128	; 0x80
10002c4c:	0139      	lsls	r1, r7, #4
10002c4e:	4663      	mov	r3, ip
10002c50:	4f25      	ldr	r7, [pc, #148]	; (10002ce8 <__aeabi_dsub+0x6b4>)
10002c52:	e581      	b.n	10002758 <__aeabi_dsub+0x124>
10002c54:	2200      	movs	r2, #0
10002c56:	e73a      	b.n	10002ace <__aeabi_dsub+0x49a>
10002c58:	1c3c      	adds	r4, r7, #0
10002c5a:	3c20      	subs	r4, #32
10002c5c:	4666      	mov	r6, ip
10002c5e:	40e6      	lsrs	r6, r4
10002c60:	1c33      	adds	r3, r6, #0
10002c62:	2f20      	cmp	r7, #32
10002c64:	d05f      	beq.n	10002d26 <__aeabi_dsub+0x6f2>
10002c66:	2440      	movs	r4, #64	; 0x40
10002c68:	1be7      	subs	r7, r4, r7
10002c6a:	4666      	mov	r6, ip
10002c6c:	40be      	lsls	r6, r7
10002c6e:	1c31      	adds	r1, r6, #0
10002c70:	430d      	orrs	r5, r1
10002c72:	1e69      	subs	r1, r5, #1
10002c74:	418d      	sbcs	r5, r1
10002c76:	431d      	orrs	r5, r3
10002c78:	2300      	movs	r3, #0
10002c7a:	e6bc      	b.n	100029f6 <__aeabi_dsub+0x3c2>
10002c7c:	3b01      	subs	r3, #1
10002c7e:	2b00      	cmp	r3, #0
10002c80:	d122      	bne.n	10002cc8 <__aeabi_dsub+0x694>
10002c82:	4455      	add	r5, sl
10002c84:	4555      	cmp	r5, sl
10002c86:	41bf      	sbcs	r7, r7
10002c88:	427b      	negs	r3, r7
10002c8a:	4460      	add	r0, ip
10002c8c:	18c3      	adds	r3, r0, r3
10002c8e:	1c17      	adds	r7, r2, #0
10002c90:	e5ba      	b.n	10002808 <__aeabi_dsub+0x1d4>
10002c92:	2180      	movs	r1, #128	; 0x80
10002c94:	2204      	movs	r2, #4
10002c96:	2400      	movs	r4, #0
10002c98:	0109      	lsls	r1, r1, #4
10002c9a:	4b15      	ldr	r3, [pc, #84]	; (10002cf0 <__aeabi_dsub+0x6bc>)
10002c9c:	4256      	negs	r6, r2
10002c9e:	4f12      	ldr	r7, [pc, #72]	; (10002ce8 <__aeabi_dsub+0x6b4>)
10002ca0:	e573      	b.n	1000278a <__aeabi_dsub+0x156>
10002ca2:	4663      	mov	r3, ip
10002ca4:	431d      	orrs	r5, r3
10002ca6:	2600      	movs	r6, #0
10002ca8:	2d00      	cmp	r5, #0
10002caa:	d100      	bne.n	10002cae <__aeabi_dsub+0x67a>
10002cac:	e769      	b.n	10002b82 <__aeabi_dsub+0x54e>
10002cae:	2501      	movs	r5, #1
10002cb0:	e767      	b.n	10002b82 <__aeabi_dsub+0x54e>
10002cb2:	2280      	movs	r2, #128	; 0x80
10002cb4:	1c03      	adds	r3, r0, #0
10002cb6:	4655      	mov	r5, sl
10002cb8:	0111      	lsls	r1, r2, #4
10002cba:	4f0b      	ldr	r7, [pc, #44]	; (10002ce8 <__aeabi_dsub+0x6b4>)
10002cbc:	e54c      	b.n	10002758 <__aeabi_dsub+0x124>
10002cbe:	1c03      	adds	r3, r0, #0
10002cc0:	4655      	mov	r5, sl
10002cc2:	2101      	movs	r1, #1
10002cc4:	2700      	movs	r7, #0
10002cc6:	e547      	b.n	10002758 <__aeabi_dsub+0x124>
10002cc8:	4907      	ldr	r1, [pc, #28]	; (10002ce8 <__aeabi_dsub+0x6b4>)
10002cca:	428a      	cmp	r2, r1
10002ccc:	d000      	beq.n	10002cd0 <__aeabi_dsub+0x69c>
10002cce:	e742      	b.n	10002b56 <__aeabi_dsub+0x522>
10002cd0:	2180      	movs	r1, #128	; 0x80
10002cd2:	1c03      	adds	r3, r0, #0
10002cd4:	4655      	mov	r5, sl
10002cd6:	0109      	lsls	r1, r1, #4
10002cd8:	1c17      	adds	r7, r2, #0
10002cda:	e53d      	b.n	10002758 <__aeabi_dsub+0x124>
10002cdc:	057f      	lsls	r7, r7, #21
10002cde:	0d7f      	lsrs	r7, r7, #21
10002ce0:	2600      	movs	r6, #0
10002ce2:	2200      	movs	r2, #0
10002ce4:	e55e      	b.n	100027a4 <__aeabi_dsub+0x170>
10002ce6:	46c0      	nop			; (mov r8, r8)
10002ce8:	000007ff 	.word	0x000007ff
10002cec:	ff7fffff 	.word	0xff7fffff
10002cf0:	007fffff 	.word	0x007fffff
10002cf4:	1c1d      	adds	r5, r3, #0
10002cf6:	4315      	orrs	r5, r2
10002cf8:	d100      	bne.n	10002cfc <__aeabi_dsub+0x6c8>
10002cfa:	e689      	b.n	10002a10 <__aeabi_dsub+0x3dc>
10002cfc:	1c15      	adds	r5, r2, #0
10002cfe:	2101      	movs	r1, #1
10002d00:	2700      	movs	r7, #0
10002d02:	e529      	b.n	10002758 <__aeabi_dsub+0x124>
10002d04:	1c1f      	adds	r7, r3, #0
10002d06:	3f20      	subs	r7, #32
10002d08:	4661      	mov	r1, ip
10002d0a:	40f9      	lsrs	r1, r7
10002d0c:	2b20      	cmp	r3, #32
10002d0e:	d010      	beq.n	10002d32 <__aeabi_dsub+0x6fe>
10002d10:	2640      	movs	r6, #64	; 0x40
10002d12:	1af3      	subs	r3, r6, r3
10002d14:	4667      	mov	r7, ip
10002d16:	409f      	lsls	r7, r3
10002d18:	1c3b      	adds	r3, r7, #0
10002d1a:	431d      	orrs	r5, r3
10002d1c:	1e6b      	subs	r3, r5, #1
10002d1e:	419d      	sbcs	r5, r3
10002d20:	430d      	orrs	r5, r1
10002d22:	2600      	movs	r6, #0
10002d24:	e72d      	b.n	10002b82 <__aeabi_dsub+0x54e>
10002d26:	2100      	movs	r1, #0
10002d28:	e7a2      	b.n	10002c70 <__aeabi_dsub+0x63c>
10002d2a:	1c3d      	adds	r5, r7, #0
10002d2c:	2101      	movs	r1, #1
10002d2e:	2700      	movs	r7, #0
10002d30:	e512      	b.n	10002758 <__aeabi_dsub+0x124>
10002d32:	2300      	movs	r3, #0
10002d34:	e7f1      	b.n	10002d1a <__aeabi_dsub+0x6e6>
10002d36:	46c0      	nop			; (mov r8, r8)

10002d38 <__aeabi_d2iz>:
10002d38:	4a13      	ldr	r2, [pc, #76]	; (10002d88 <__aeabi_d2iz+0x50>)
10002d3a:	030b      	lsls	r3, r1, #12
10002d3c:	b530      	push	{r4, r5, lr}
10002d3e:	1c05      	adds	r5, r0, #0
10002d40:	0048      	lsls	r0, r1, #1
10002d42:	0b1c      	lsrs	r4, r3, #12
10002d44:	0fc9      	lsrs	r1, r1, #31
10002d46:	0d43      	lsrs	r3, r0, #21
10002d48:	2000      	movs	r0, #0
10002d4a:	4293      	cmp	r3, r2
10002d4c:	dd11      	ble.n	10002d72 <__aeabi_d2iz+0x3a>
10002d4e:	480f      	ldr	r0, [pc, #60]	; (10002d8c <__aeabi_d2iz+0x54>)
10002d50:	4283      	cmp	r3, r0
10002d52:	dc0f      	bgt.n	10002d74 <__aeabi_d2iz+0x3c>
10002d54:	2280      	movs	r2, #128	; 0x80
10002d56:	0350      	lsls	r0, r2, #13
10002d58:	4a0d      	ldr	r2, [pc, #52]	; (10002d90 <__aeabi_d2iz+0x58>)
10002d5a:	4304      	orrs	r4, r0
10002d5c:	1ad0      	subs	r0, r2, r3
10002d5e:	281f      	cmp	r0, #31
10002d60:	dd0b      	ble.n	10002d7a <__aeabi_d2iz+0x42>
10002d62:	4d0c      	ldr	r5, [pc, #48]	; (10002d94 <__aeabi_d2iz+0x5c>)
10002d64:	1aeb      	subs	r3, r5, r3
10002d66:	40dc      	lsrs	r4, r3
10002d68:	1c22      	adds	r2, r4, #0
10002d6a:	4250      	negs	r0, r2
10002d6c:	2900      	cmp	r1, #0
10002d6e:	d100      	bne.n	10002d72 <__aeabi_d2iz+0x3a>
10002d70:	1c10      	adds	r0, r2, #0
10002d72:	bd30      	pop	{r4, r5, pc}
10002d74:	4c08      	ldr	r4, [pc, #32]	; (10002d98 <__aeabi_d2iz+0x60>)
10002d76:	1908      	adds	r0, r1, r4
10002d78:	e7fb      	b.n	10002d72 <__aeabi_d2iz+0x3a>
10002d7a:	40c5      	lsrs	r5, r0
10002d7c:	4807      	ldr	r0, [pc, #28]	; (10002d9c <__aeabi_d2iz+0x64>)
10002d7e:	1c2a      	adds	r2, r5, #0
10002d80:	181d      	adds	r5, r3, r0
10002d82:	40ac      	lsls	r4, r5
10002d84:	4322      	orrs	r2, r4
10002d86:	e7f0      	b.n	10002d6a <__aeabi_d2iz+0x32>
10002d88:	000003fe 	.word	0x000003fe
10002d8c:	0000041d 	.word	0x0000041d
10002d90:	00000433 	.word	0x00000433
10002d94:	00000413 	.word	0x00000413
10002d98:	7fffffff 	.word	0x7fffffff
10002d9c:	fffffbed 	.word	0xfffffbed

10002da0 <__aeabi_ui2d>:
10002da0:	b570      	push	{r4, r5, r6, lr}
10002da2:	1e04      	subs	r4, r0, #0
10002da4:	d026      	beq.n	10002df4 <__aeabi_ui2d+0x54>
10002da6:	f000 f86b 	bl	10002e80 <__clzsi2>
10002daa:	4914      	ldr	r1, [pc, #80]	; (10002dfc <__aeabi_ui2d+0x5c>)
10002dac:	1a0a      	subs	r2, r1, r0
10002dae:	280a      	cmp	r0, #10
10002db0:	dd13      	ble.n	10002dda <__aeabi_ui2d+0x3a>
10002db2:	380b      	subs	r0, #11
10002db4:	4084      	lsls	r4, r0
10002db6:	0556      	lsls	r6, r2, #21
10002db8:	0324      	lsls	r4, r4, #12
10002dba:	0d72      	lsrs	r2, r6, #21
10002dbc:	0b25      	lsrs	r5, r4, #12
10002dbe:	2600      	movs	r6, #0
10002dc0:	2000      	movs	r0, #0
10002dc2:	2100      	movs	r1, #0
10002dc4:	1c30      	adds	r0, r6, #0
10002dc6:	0d0e      	lsrs	r6, r1, #20
10002dc8:	0533      	lsls	r3, r6, #20
10002dca:	4c0d      	ldr	r4, [pc, #52]	; (10002e00 <__aeabi_ui2d+0x60>)
10002dcc:	432b      	orrs	r3, r5
10002dce:	0511      	lsls	r1, r2, #20
10002dd0:	401c      	ands	r4, r3
10002dd2:	430c      	orrs	r4, r1
10002dd4:	0065      	lsls	r5, r4, #1
10002dd6:	0869      	lsrs	r1, r5, #1
10002dd8:	bd70      	pop	{r4, r5, r6, pc}
10002dda:	230b      	movs	r3, #11
10002ddc:	1c05      	adds	r5, r0, #0
10002dde:	1a18      	subs	r0, r3, r0
10002de0:	3515      	adds	r5, #21
10002de2:	1c21      	adds	r1, r4, #0
10002de4:	40c4      	lsrs	r4, r0
10002de6:	40a9      	lsls	r1, r5
10002de8:	0552      	lsls	r2, r2, #21
10002dea:	0325      	lsls	r5, r4, #12
10002dec:	1c0e      	adds	r6, r1, #0
10002dee:	0b2d      	lsrs	r5, r5, #12
10002df0:	0d52      	lsrs	r2, r2, #21
10002df2:	e7e5      	b.n	10002dc0 <__aeabi_ui2d+0x20>
10002df4:	2200      	movs	r2, #0
10002df6:	2500      	movs	r5, #0
10002df8:	2600      	movs	r6, #0
10002dfa:	e7e1      	b.n	10002dc0 <__aeabi_ui2d+0x20>
10002dfc:	0000041e 	.word	0x0000041e
10002e00:	800fffff 	.word	0x800fffff

10002e04 <__aeabi_cdrcmple>:
10002e04:	4684      	mov	ip, r0
10002e06:	1c10      	adds	r0, r2, #0
10002e08:	4662      	mov	r2, ip
10002e0a:	468c      	mov	ip, r1
10002e0c:	1c19      	adds	r1, r3, #0
10002e0e:	4663      	mov	r3, ip
10002e10:	e000      	b.n	10002e14 <__aeabi_cdcmpeq>
10002e12:	46c0      	nop			; (mov r8, r8)

10002e14 <__aeabi_cdcmpeq>:
10002e14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10002e16:	f000 f903 	bl	10003020 <__ledf2>
10002e1a:	2800      	cmp	r0, #0
10002e1c:	d401      	bmi.n	10002e22 <__aeabi_cdcmpeq+0xe>
10002e1e:	2100      	movs	r1, #0
10002e20:	42c8      	cmn	r0, r1
10002e22:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10002e24 <__aeabi_dcmpeq>:
10002e24:	b510      	push	{r4, lr}
10002e26:	f000 f849 	bl	10002ebc <__eqdf2>
10002e2a:	4240      	negs	r0, r0
10002e2c:	3001      	adds	r0, #1
10002e2e:	bd10      	pop	{r4, pc}

10002e30 <__aeabi_dcmplt>:
10002e30:	b510      	push	{r4, lr}
10002e32:	f000 f8f5 	bl	10003020 <__ledf2>
10002e36:	2800      	cmp	r0, #0
10002e38:	db01      	blt.n	10002e3e <__aeabi_dcmplt+0xe>
10002e3a:	2000      	movs	r0, #0
10002e3c:	bd10      	pop	{r4, pc}
10002e3e:	2001      	movs	r0, #1
10002e40:	bd10      	pop	{r4, pc}
10002e42:	46c0      	nop			; (mov r8, r8)

10002e44 <__aeabi_dcmple>:
10002e44:	b510      	push	{r4, lr}
10002e46:	f000 f8eb 	bl	10003020 <__ledf2>
10002e4a:	2800      	cmp	r0, #0
10002e4c:	dd01      	ble.n	10002e52 <__aeabi_dcmple+0xe>
10002e4e:	2000      	movs	r0, #0
10002e50:	bd10      	pop	{r4, pc}
10002e52:	2001      	movs	r0, #1
10002e54:	bd10      	pop	{r4, pc}
10002e56:	46c0      	nop			; (mov r8, r8)

10002e58 <__aeabi_dcmpgt>:
10002e58:	b510      	push	{r4, lr}
10002e5a:	f000 f86d 	bl	10002f38 <__gedf2>
10002e5e:	2800      	cmp	r0, #0
10002e60:	dc01      	bgt.n	10002e66 <__aeabi_dcmpgt+0xe>
10002e62:	2000      	movs	r0, #0
10002e64:	bd10      	pop	{r4, pc}
10002e66:	2001      	movs	r0, #1
10002e68:	bd10      	pop	{r4, pc}
10002e6a:	46c0      	nop			; (mov r8, r8)

10002e6c <__aeabi_dcmpge>:
10002e6c:	b510      	push	{r4, lr}
10002e6e:	f000 f863 	bl	10002f38 <__gedf2>
10002e72:	2800      	cmp	r0, #0
10002e74:	da01      	bge.n	10002e7a <__aeabi_dcmpge+0xe>
10002e76:	2000      	movs	r0, #0
10002e78:	bd10      	pop	{r4, pc}
10002e7a:	2001      	movs	r0, #1
10002e7c:	bd10      	pop	{r4, pc}
10002e7e:	46c0      	nop			; (mov r8, r8)

10002e80 <__clzsi2>:
10002e80:	211c      	movs	r1, #28
10002e82:	2301      	movs	r3, #1
10002e84:	041b      	lsls	r3, r3, #16
10002e86:	4298      	cmp	r0, r3
10002e88:	d301      	bcc.n	10002e8e <__clzsi2+0xe>
10002e8a:	0c00      	lsrs	r0, r0, #16
10002e8c:	3910      	subs	r1, #16
10002e8e:	0a1b      	lsrs	r3, r3, #8
10002e90:	4298      	cmp	r0, r3
10002e92:	d301      	bcc.n	10002e98 <__clzsi2+0x18>
10002e94:	0a00      	lsrs	r0, r0, #8
10002e96:	3908      	subs	r1, #8
10002e98:	091b      	lsrs	r3, r3, #4
10002e9a:	4298      	cmp	r0, r3
10002e9c:	d301      	bcc.n	10002ea2 <__clzsi2+0x22>
10002e9e:	0900      	lsrs	r0, r0, #4
10002ea0:	3904      	subs	r1, #4
10002ea2:	a202      	add	r2, pc, #8	; (adr r2, 10002eac <__clzsi2+0x2c>)
10002ea4:	5c10      	ldrb	r0, [r2, r0]
10002ea6:	1840      	adds	r0, r0, r1
10002ea8:	4770      	bx	lr
10002eaa:	46c0      	nop			; (mov r8, r8)
10002eac:	02020304 	.word	0x02020304
10002eb0:	01010101 	.word	0x01010101
	...

10002ebc <__eqdf2>:
10002ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
10002ebe:	4694      	mov	ip, r2
10002ec0:	4647      	mov	r7, r8
10002ec2:	031a      	lsls	r2, r3, #12
10002ec4:	1c06      	adds	r6, r0, #0
10002ec6:	0058      	lsls	r0, r3, #1
10002ec8:	b480      	push	{r7}
10002eca:	0b17      	lsrs	r7, r2, #12
10002ecc:	0d42      	lsrs	r2, r0, #21
10002ece:	4819      	ldr	r0, [pc, #100]	; (10002f34 <__eqdf2+0x78>)
10002ed0:	030d      	lsls	r5, r1, #12
10002ed2:	004c      	lsls	r4, r1, #1
10002ed4:	0fdb      	lsrs	r3, r3, #31
10002ed6:	0b2d      	lsrs	r5, r5, #12
10002ed8:	0d64      	lsrs	r4, r4, #21
10002eda:	0fc9      	lsrs	r1, r1, #31
10002edc:	4698      	mov	r8, r3
10002ede:	4284      	cmp	r4, r0
10002ee0:	d008      	beq.n	10002ef4 <__eqdf2+0x38>
10002ee2:	4814      	ldr	r0, [pc, #80]	; (10002f34 <__eqdf2+0x78>)
10002ee4:	4282      	cmp	r2, r0
10002ee6:	d00d      	beq.n	10002f04 <__eqdf2+0x48>
10002ee8:	2001      	movs	r0, #1
10002eea:	4294      	cmp	r4, r2
10002eec:	d012      	beq.n	10002f14 <__eqdf2+0x58>
10002eee:	bc04      	pop	{r2}
10002ef0:	4690      	mov	r8, r2
10002ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002ef4:	1c2b      	adds	r3, r5, #0
10002ef6:	4333      	orrs	r3, r6
10002ef8:	2001      	movs	r0, #1
10002efa:	2b00      	cmp	r3, #0
10002efc:	d1f7      	bne.n	10002eee <__eqdf2+0x32>
10002efe:	480d      	ldr	r0, [pc, #52]	; (10002f34 <__eqdf2+0x78>)
10002f00:	4282      	cmp	r2, r0
10002f02:	d1f1      	bne.n	10002ee8 <__eqdf2+0x2c>
10002f04:	4663      	mov	r3, ip
10002f06:	433b      	orrs	r3, r7
10002f08:	2001      	movs	r0, #1
10002f0a:	2b00      	cmp	r3, #0
10002f0c:	d1ef      	bne.n	10002eee <__eqdf2+0x32>
10002f0e:	2001      	movs	r0, #1
10002f10:	4294      	cmp	r4, r2
10002f12:	d1ec      	bne.n	10002eee <__eqdf2+0x32>
10002f14:	42bd      	cmp	r5, r7
10002f16:	d1ea      	bne.n	10002eee <__eqdf2+0x32>
10002f18:	4566      	cmp	r6, ip
10002f1a:	d1e8      	bne.n	10002eee <__eqdf2+0x32>
10002f1c:	4541      	cmp	r1, r8
10002f1e:	d006      	beq.n	10002f2e <__eqdf2+0x72>
10002f20:	2c00      	cmp	r4, #0
10002f22:	d1e4      	bne.n	10002eee <__eqdf2+0x32>
10002f24:	1c28      	adds	r0, r5, #0
10002f26:	4330      	orrs	r0, r6
10002f28:	1e45      	subs	r5, r0, #1
10002f2a:	41a8      	sbcs	r0, r5
10002f2c:	e7df      	b.n	10002eee <__eqdf2+0x32>
10002f2e:	2000      	movs	r0, #0
10002f30:	e7dd      	b.n	10002eee <__eqdf2+0x32>
10002f32:	46c0      	nop			; (mov r8, r8)
10002f34:	000007ff 	.word	0x000007ff

10002f38 <__gedf2>:
10002f38:	b5f0      	push	{r4, r5, r6, r7, lr}
10002f3a:	4657      	mov	r7, sl
10002f3c:	464e      	mov	r6, r9
10002f3e:	4645      	mov	r5, r8
10002f40:	b4e0      	push	{r5, r6, r7}
10002f42:	1c04      	adds	r4, r0, #0
10002f44:	004e      	lsls	r6, r1, #1
10002f46:	0308      	lsls	r0, r1, #12
10002f48:	0fc9      	lsrs	r1, r1, #31
10002f4a:	468a      	mov	sl, r1
10002f4c:	1c17      	adds	r7, r2, #0
10002f4e:	0059      	lsls	r1, r3, #1
10002f50:	031a      	lsls	r2, r3, #12
10002f52:	0b05      	lsrs	r5, r0, #12
10002f54:	0d70      	lsrs	r0, r6, #21
10002f56:	0b16      	lsrs	r6, r2, #12
10002f58:	0d4a      	lsrs	r2, r1, #21
10002f5a:	4930      	ldr	r1, [pc, #192]	; (1000301c <__gedf2+0xe4>)
10002f5c:	0fdb      	lsrs	r3, r3, #31
10002f5e:	469c      	mov	ip, r3
10002f60:	4288      	cmp	r0, r1
10002f62:	d032      	beq.n	10002fca <__gedf2+0x92>
10002f64:	492d      	ldr	r1, [pc, #180]	; (1000301c <__gedf2+0xe4>)
10002f66:	428a      	cmp	r2, r1
10002f68:	d035      	beq.n	10002fd6 <__gedf2+0x9e>
10002f6a:	2800      	cmp	r0, #0
10002f6c:	d10f      	bne.n	10002f8e <__gedf2+0x56>
10002f6e:	1c29      	adds	r1, r5, #0
10002f70:	4321      	orrs	r1, r4
10002f72:	424b      	negs	r3, r1
10002f74:	414b      	adcs	r3, r1
10002f76:	4698      	mov	r8, r3
10002f78:	2a00      	cmp	r2, #0
10002f7a:	d00b      	beq.n	10002f94 <__gedf2+0x5c>
10002f7c:	2b00      	cmp	r3, #0
10002f7e:	d11a      	bne.n	10002fb6 <__gedf2+0x7e>
10002f80:	45e2      	cmp	sl, ip
10002f82:	d02c      	beq.n	10002fde <__gedf2+0xa6>
10002f84:	4655      	mov	r5, sl
10002f86:	2d00      	cmp	r5, #0
10002f88:	d118      	bne.n	10002fbc <__gedf2+0x84>
10002f8a:	2001      	movs	r0, #1
10002f8c:	e018      	b.n	10002fc0 <__gedf2+0x88>
10002f8e:	2a00      	cmp	r2, #0
10002f90:	d1f6      	bne.n	10002f80 <__gedf2+0x48>
10002f92:	4690      	mov	r8, r2
10002f94:	1c31      	adds	r1, r6, #0
10002f96:	4339      	orrs	r1, r7
10002f98:	424b      	negs	r3, r1
10002f9a:	414b      	adcs	r3, r1
10002f9c:	4641      	mov	r1, r8
10002f9e:	2900      	cmp	r1, #0
10002fa0:	d106      	bne.n	10002fb0 <__gedf2+0x78>
10002fa2:	2b00      	cmp	r3, #0
10002fa4:	d0ec      	beq.n	10002f80 <__gedf2+0x48>
10002fa6:	4656      	mov	r6, sl
10002fa8:	2001      	movs	r0, #1
10002faa:	2e00      	cmp	r6, #0
10002fac:	d008      	beq.n	10002fc0 <__gedf2+0x88>
10002fae:	e005      	b.n	10002fbc <__gedf2+0x84>
10002fb0:	2000      	movs	r0, #0
10002fb2:	2b00      	cmp	r3, #0
10002fb4:	d104      	bne.n	10002fc0 <__gedf2+0x88>
10002fb6:	4667      	mov	r7, ip
10002fb8:	2f00      	cmp	r7, #0
10002fba:	d1e6      	bne.n	10002f8a <__gedf2+0x52>
10002fbc:	2301      	movs	r3, #1
10002fbe:	4258      	negs	r0, r3
10002fc0:	bc1c      	pop	{r2, r3, r4}
10002fc2:	4690      	mov	r8, r2
10002fc4:	4699      	mov	r9, r3
10002fc6:	46a2      	mov	sl, r4
10002fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002fca:	1c2b      	adds	r3, r5, #0
10002fcc:	4323      	orrs	r3, r4
10002fce:	d0c9      	beq.n	10002f64 <__gedf2+0x2c>
10002fd0:	2102      	movs	r1, #2
10002fd2:	4248      	negs	r0, r1
10002fd4:	e7f4      	b.n	10002fc0 <__gedf2+0x88>
10002fd6:	1c33      	adds	r3, r6, #0
10002fd8:	433b      	orrs	r3, r7
10002fda:	d0c6      	beq.n	10002f6a <__gedf2+0x32>
10002fdc:	e7f8      	b.n	10002fd0 <__gedf2+0x98>
10002fde:	4290      	cmp	r0, r2
10002fe0:	dc05      	bgt.n	10002fee <__gedf2+0xb6>
10002fe2:	da09      	bge.n	10002ff8 <__gedf2+0xc0>
10002fe4:	4652      	mov	r2, sl
10002fe6:	2a00      	cmp	r2, #0
10002fe8:	d0e8      	beq.n	10002fbc <__gedf2+0x84>
10002fea:	2001      	movs	r0, #1
10002fec:	e7e8      	b.n	10002fc0 <__gedf2+0x88>
10002fee:	4654      	mov	r4, sl
10002ff0:	2c00      	cmp	r4, #0
10002ff2:	d1e3      	bne.n	10002fbc <__gedf2+0x84>
10002ff4:	2001      	movs	r0, #1
10002ff6:	e7e3      	b.n	10002fc0 <__gedf2+0x88>
10002ff8:	42b5      	cmp	r5, r6
10002ffa:	d8c3      	bhi.n	10002f84 <__gedf2+0x4c>
10002ffc:	d007      	beq.n	1000300e <__gedf2+0xd6>
10002ffe:	2000      	movs	r0, #0
10003000:	42b5      	cmp	r5, r6
10003002:	d2dd      	bcs.n	10002fc0 <__gedf2+0x88>
10003004:	4650      	mov	r0, sl
10003006:	2800      	cmp	r0, #0
10003008:	d0d8      	beq.n	10002fbc <__gedf2+0x84>
1000300a:	2001      	movs	r0, #1
1000300c:	e7d8      	b.n	10002fc0 <__gedf2+0x88>
1000300e:	42bc      	cmp	r4, r7
10003010:	d8b8      	bhi.n	10002f84 <__gedf2+0x4c>
10003012:	2000      	movs	r0, #0
10003014:	42bc      	cmp	r4, r7
10003016:	d3f5      	bcc.n	10003004 <__gedf2+0xcc>
10003018:	e7d2      	b.n	10002fc0 <__gedf2+0x88>
1000301a:	46c0      	nop			; (mov r8, r8)
1000301c:	000007ff 	.word	0x000007ff

10003020 <__ledf2>:
10003020:	b5f0      	push	{r4, r5, r6, r7, lr}
10003022:	4644      	mov	r4, r8
10003024:	465f      	mov	r7, fp
10003026:	4656      	mov	r6, sl
10003028:	464d      	mov	r5, r9
1000302a:	b4f0      	push	{r4, r5, r6, r7}
1000302c:	4694      	mov	ip, r2
1000302e:	1c06      	adds	r6, r0, #0
10003030:	031a      	lsls	r2, r3, #12
10003032:	0058      	lsls	r0, r3, #1
10003034:	0b17      	lsrs	r7, r2, #12
10003036:	0d42      	lsrs	r2, r0, #21
10003038:	482e      	ldr	r0, [pc, #184]	; (100030f4 <__ledf2+0xd4>)
1000303a:	030d      	lsls	r5, r1, #12
1000303c:	004c      	lsls	r4, r1, #1
1000303e:	0fdb      	lsrs	r3, r3, #31
10003040:	0b2d      	lsrs	r5, r5, #12
10003042:	0d64      	lsrs	r4, r4, #21
10003044:	0fc9      	lsrs	r1, r1, #31
10003046:	4698      	mov	r8, r3
10003048:	4284      	cmp	r4, r0
1000304a:	d033      	beq.n	100030b4 <__ledf2+0x94>
1000304c:	4829      	ldr	r0, [pc, #164]	; (100030f4 <__ledf2+0xd4>)
1000304e:	4282      	cmp	r2, r0
10003050:	d036      	beq.n	100030c0 <__ledf2+0xa0>
10003052:	2c00      	cmp	r4, #0
10003054:	d019      	beq.n	1000308a <__ledf2+0x6a>
10003056:	2a00      	cmp	r2, #0
10003058:	d120      	bne.n	1000309c <__ledf2+0x7c>
1000305a:	4693      	mov	fp, r2
1000305c:	4663      	mov	r3, ip
1000305e:	433b      	orrs	r3, r7
10003060:	4258      	negs	r0, r3
10003062:	4158      	adcs	r0, r3
10003064:	465b      	mov	r3, fp
10003066:	4682      	mov	sl, r0
10003068:	2b00      	cmp	r3, #0
1000306a:	d01d      	beq.n	100030a8 <__ledf2+0x88>
1000306c:	4651      	mov	r1, sl
1000306e:	2000      	movs	r0, #0
10003070:	2900      	cmp	r1, #0
10003072:	d104      	bne.n	1000307e <__ledf2+0x5e>
10003074:	4642      	mov	r2, r8
10003076:	2a00      	cmp	r2, #0
10003078:	d114      	bne.n	100030a4 <__ledf2+0x84>
1000307a:	2401      	movs	r4, #1
1000307c:	4260      	negs	r0, r4
1000307e:	bc3c      	pop	{r2, r3, r4, r5}
10003080:	4690      	mov	r8, r2
10003082:	4699      	mov	r9, r3
10003084:	46a2      	mov	sl, r4
10003086:	46ab      	mov	fp, r5
10003088:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000308a:	1c2b      	adds	r3, r5, #0
1000308c:	4333      	orrs	r3, r6
1000308e:	4258      	negs	r0, r3
10003090:	4143      	adcs	r3, r0
10003092:	469b      	mov	fp, r3
10003094:	2a00      	cmp	r2, #0
10003096:	d0e1      	beq.n	1000305c <__ledf2+0x3c>
10003098:	2b00      	cmp	r3, #0
1000309a:	d1eb      	bne.n	10003074 <__ledf2+0x54>
1000309c:	4541      	cmp	r1, r8
1000309e:	d015      	beq.n	100030cc <__ledf2+0xac>
100030a0:	2900      	cmp	r1, #0
100030a2:	d1ea      	bne.n	1000307a <__ledf2+0x5a>
100030a4:	2001      	movs	r0, #1
100030a6:	e7ea      	b.n	1000307e <__ledf2+0x5e>
100030a8:	2800      	cmp	r0, #0
100030aa:	d0f7      	beq.n	1000309c <__ledf2+0x7c>
100030ac:	2001      	movs	r0, #1
100030ae:	2900      	cmp	r1, #0
100030b0:	d0e5      	beq.n	1000307e <__ledf2+0x5e>
100030b2:	e7e2      	b.n	1000307a <__ledf2+0x5a>
100030b4:	1c2b      	adds	r3, r5, #0
100030b6:	4333      	orrs	r3, r6
100030b8:	2002      	movs	r0, #2
100030ba:	2b00      	cmp	r3, #0
100030bc:	d1df      	bne.n	1000307e <__ledf2+0x5e>
100030be:	e7c5      	b.n	1000304c <__ledf2+0x2c>
100030c0:	4663      	mov	r3, ip
100030c2:	433b      	orrs	r3, r7
100030c4:	2002      	movs	r0, #2
100030c6:	2b00      	cmp	r3, #0
100030c8:	d1d9      	bne.n	1000307e <__ledf2+0x5e>
100030ca:	e7c2      	b.n	10003052 <__ledf2+0x32>
100030cc:	4294      	cmp	r4, r2
100030ce:	dce7      	bgt.n	100030a0 <__ledf2+0x80>
100030d0:	db05      	blt.n	100030de <__ledf2+0xbe>
100030d2:	42bd      	cmp	r5, r7
100030d4:	d8e4      	bhi.n	100030a0 <__ledf2+0x80>
100030d6:	d006      	beq.n	100030e6 <__ledf2+0xc6>
100030d8:	2000      	movs	r0, #0
100030da:	42bd      	cmp	r5, r7
100030dc:	d2cf      	bcs.n	1000307e <__ledf2+0x5e>
100030de:	2900      	cmp	r1, #0
100030e0:	d0cb      	beq.n	1000307a <__ledf2+0x5a>
100030e2:	2001      	movs	r0, #1
100030e4:	e7cb      	b.n	1000307e <__ledf2+0x5e>
100030e6:	4566      	cmp	r6, ip
100030e8:	d8da      	bhi.n	100030a0 <__ledf2+0x80>
100030ea:	2000      	movs	r0, #0
100030ec:	4566      	cmp	r6, ip
100030ee:	d3f6      	bcc.n	100030de <__ledf2+0xbe>
100030f0:	e7c5      	b.n	1000307e <__ledf2+0x5e>
100030f2:	46c0      	nop			; (mov r8, r8)
100030f4:	000007ff 	.word	0x000007ff

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <CCU40_3_Veneer+0x20>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <CCU40_3_Veneer+0x24>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <CCU40_3_Veneer+0x28>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <CCU40_3_Veneer+0x2c>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <CCU40_3_Veneer+0x30>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <CCU40_3_Veneer+0x34>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <CCU40_3_Veneer+0x38>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <CCU40_3_Veneer+0x3c>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <CCU40_3_Veneer+0x40>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <CCU40_3_Veneer+0x44>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <CCU40_3_Veneer+0x48>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0
	...

20000064 <USIC0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4821      	ldr	r0, [pc, #132]	; (200000ec <CCU40_3_Veneer+0x4c>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4821      	ldr	r0, [pc, #132]	; (200000f0 <CCU40_3_Veneer+0x50>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4821      	ldr	r0, [pc, #132]	; (200000f4 <CCU40_3_Veneer+0x54>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4821      	ldr	r0, [pc, #132]	; (200000f8 <CCU40_3_Veneer+0x58>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4821      	ldr	r0, [pc, #132]	; (200000fc <CCU40_3_Veneer+0x5c>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4821      	ldr	r0, [pc, #132]	; (20000100 <CCU40_3_Veneer+0x60>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4821      	ldr	r0, [pc, #132]	; (20000104 <CCU40_3_Veneer+0x64>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4821      	ldr	r0, [pc, #132]	; (20000108 <CCU40_3_Veneer+0x68>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0
	...

20000094 <CCU40_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	481d      	ldr	r0, [pc, #116]	; (2000010c <CCU40_3_Veneer+0x6c>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	481d      	ldr	r0, [pc, #116]	; (20000110 <CCU40_3_Veneer+0x70>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	481d      	ldr	r0, [pc, #116]	; (20000114 <CCU40_3_Veneer+0x74>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	481d      	ldr	r0, [pc, #116]	; (20000118 <CCU40_3_Veneer+0x78>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0
	...

/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
.globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	10001497 	.word	0x10001497
    .long 0
    
/* ======================================================================== */
.globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	10001499 	.word	0x10001499
    .long 0
    .long 0
/* ======================================================================== */
.globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	1000149b 	.word	0x1000149b
    MOV PC,R0
/* ======================================================================== */
.globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	10001aa5 	.word	0x10001aa5
    MOV PC,R0
/* ======================================================================== */
.globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	1000149f 	.word	0x1000149f
    MOV PC,R0
/* ======================================================================== */
.globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	100014a1 	.word	0x100014a1
    MOV PC,R0
/* ======================================================================== */
.globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	100014a3 	.word	0x100014a3
    MOV PC,R0
/* ======================================================================== */
.globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	100014a5 	.word	0x100014a5
    MOV PC,R0
/* ======================================================================== */
.globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	100014a7 	.word	0x100014a7
    MOV PC,R0
/* ======================================================================== */
.globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	100014a9 	.word	0x100014a9
    MOV PC,R0
/* ======================================================================== */
.globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	100014ab 	.word	0x100014ab
    .long 0
    .long 0
/* ======================================================================== */
.globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000ec:	100014b9 	.word	0x100014b9
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f0:	100014bb 	.word	0x100014bb
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f4:	100014bd 	.word	0x100014bd
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000f8:	100014bf 	.word	0x100014bf
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
200000fc:	100014c1 	.word	0x100014c1
    MOV PC,R0
/* ======================================================================== */
.globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000100:	100014c3 	.word	0x100014c3
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000104:	100014ad 	.word	0x100014ad
    MOV PC,R0
/* ======================================================================== */
.globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000108:	100014af 	.word	0x100014af
    .long 0
    .long 0
/* ======================================================================== */
.globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
2000010c:	100014b1 	.word	0x100014b1
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000110:	100014b3 	.word	0x100014b3
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000114:	100014b5 	.word	0x100014b5
    MOV PC,R0
/* ======================================================================== */
.globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
20000118:	100014b7 	.word	0x100014b7
